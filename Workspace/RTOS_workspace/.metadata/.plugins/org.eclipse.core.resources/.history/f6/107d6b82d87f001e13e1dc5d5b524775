/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

//#define DWT_CTRL    (*(volatile uint32_t*)0xE0001000)


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */


//function prototypes
static void prvSetupHardware(void);
void printmsg(char *msg);
static void prvSetupUart(void);
void prvSetupGpio(void);

// Task Creation
TaskHandle_t xTaskHandleM=NULL;
TaskHandle_t xTaskHandleE=NULL;
void vManagerTask(void* pvParameters);
void vEmployeeTask(void* pvParameters);

// Binary Semaphore used to Synchronization of Manager and Employee
xSemaphoreHandle xWork;

// Queue for the Manager to put the work ticket id
xQueueHandle xWorkQueue;

char* usr_msg[250] = {0};


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */


  // Segger event time stamp
  DWT->CTRL |= (1 << 0);

  // Reset the RCC clock configuration to default reset state
  RCC_DeInit();

  // Update the SystemCoreClock variable
  SystemCoreClockUpdate();

  prvSetupHardware();

  // Start Recording
  SEGGER_SYSVIEW_Conf();
  SEGGER_SYSVIEW_Start();

  sprintf(usr_msg, "Demo of Binary Semaphore usage between 2 Tasks \r\n");
  printmsg(usr_msg);

  // Explicitly Created Semaphore
  vSemaphoreCreateBinary(xWork);

  // Queue is created to hold a maximum of 1 Element
  xWorkQueue = xQueueCreate( 1, sizeof(unsigned int));

  // Check the Semaphore and Queue was created successfully
  if( (xWork != NULL) && (xWorkQueue != NULL)){

	  // Create the Manager Task
	  xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL);

	  // Create a Employee Task
	  xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL);

	  // Start the Scheduler
	  vTaskStartScheduler();
  }

  sprintf(usr_msg, "Queue/Sema create failed.. \r\n");
  printmsg(usr_msg);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void vManagerTask( void* pvParameters){

	unsigned int xWorkTicketId;
	portBASE_TYPE xStatus;

	// Semaphore is created as empty state so it needs to be "given" first
	xSemaphoreGive(xWork);

	while(1){

		// get a work ticket id
		xWorkTicketId = ( rand() & 0x1FF );

		// Send work ticket id to the work queue
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId, portMAX_DELAY);

		if( xStatus != pdPASS){
			sprintf(usr_msg, "Could not send to the queue.\r\n");
			printmsg(usr_msg);
		}else{
			// Manager Notifying the Employee by "Giving Semaphore
			xSemaphoreGive(xWork);
			// After assigning the work yeild the processor
			taskYIELD();
		}
	}
}


void EmployeeDoWork(unsigned char TicketId){

	// Implement the work according to the TicketId
	sprintf(usr_msg, "Employee Task: Working on Ticket Id: %d\r\n", TicketId);
	print(usr_msg);
	vTaskDelay(TicketId);
}


void vEmployeeTask(void* pvParameters){

	unsigned char xWorkTicketId;
	portBASE_TYPE xStatus;

	while(1){

		// Employee Tries to take the Semaphore if available
		xSemaphoreTake(xWork, 0);

		// Try to get the TicketId from the Work Queue
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0);

		if( xStatus == pdPASS){
			EmployeeDoWork(xWorkTicketId);
		}else{
			// Didn't receive anything from the queue
			sprintf(usr_msg, "Employee Task: Queue is empty, nothing to do.\r\n");
			printmsg(usr_msg);
		}

	}
}


static void prvSetupHardware(void)
{
	//Setup Button and LED
	prvSetupGpio();

	//setup UART2
	prvSetupUart();
}

void printmsg(char *msg)
{
	for(uint32_t i=0; i < strlen(msg); i++)
	{
		while ( USART_GetFlagStatus(USART2,USART_FLAG_TXE) != SET);
		USART_SendData(USART2,msg[i]);
	}

	while ( USART_GetFlagStatus(USART2,USART_FLAG_TC) != SET);

}

//
//static void prvSetupUart(void)
//{
//	GPIO_InitTypeDef gpio_uart_pins;
//	USART_InitTypeDef uart2_init;
//
//	//1. Enable the UART2  and GPIOA Peripheral clock
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
//
//	//PA2 is UART2_TX, PA3 is UART2_RX
//
//	//2. Alternate function configuration of MCU pins to behave as UART2 TX and RX
//
//	//zeroing each and every member element of the structure
//	memset(&gpio_uart_pins,0,sizeof(gpio_uart_pins));
//
//	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
//	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
//	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
//	gpio_uart_pins.GPIO_OType= GPIO_OType_PP;
//	gpio_uart_pins.GPIO_Speed = GPIO_High_Speed;
//	GPIO_Init(GPIOA, &gpio_uart_pins);
//
//
//	//3. AF mode settings for the pins
//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); //PA2
//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); //PA3
//
//	//4. UART parameter initializations
//	//zeroing each and every member element of the structure
//	memset(&uart2_init,0,sizeof(uart2_init));
//
//	uart2_init.USART_BaudRate = 115200;
//	uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
//	uart2_init.USART_Mode =  USART_Mode_Tx | USART_Mode_Rx;
//	uart2_init.USART_Parity = USART_Parity_No;
//	uart2_init.USART_StopBits = USART_StopBits_1;
//	uart2_init.USART_WordLength = USART_WordLength_8b;
//	USART_Init(USART2,&uart2_init);
//
//
//	//5. Enable the UART2 peripheral
//	USART_Cmd(USART2,ENABLE);
//
//}


//void prvSetupGpio(void)
//{
//	// this function is board specific
//
//	//Peripheral clock enable for GPIOA and GPIOC
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
//
//	GPIO_InitTypeDef led_init, button_init;
//	led_init.GPIO_Mode = GPIO_Mode_OUT;
//	led_init.GPIO_OType = GPIO_OType_PP;
//	led_init.GPIO_Pin = GPIO_Pin_5;
//	led_init.GPIO_Speed = GPIO_Low_Speed;
//	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
//	GPIO_Init(GPIOA,&led_init);
//
//	button_init.GPIO_Mode = GPIO_Mode_IN;
//	button_init.GPIO_OType = GPIO_OType_PP;
//	button_init.GPIO_Pin = GPIO_Pin_13;
//	button_init.GPIO_Speed = GPIO_Low_Speed;
//	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
//	GPIO_Init(GPIOC,&button_init);
//
//}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM5 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
