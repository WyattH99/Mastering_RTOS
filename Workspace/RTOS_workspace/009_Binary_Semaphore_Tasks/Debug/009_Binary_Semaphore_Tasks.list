
009_Binary_Semaphore_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002360  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002548  08002548  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002548  08002548  00012548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002550  08002550  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002564  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002564  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c88e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002102  00000000  00000000  0002c90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d9  00000000  00000000  0002f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002160b  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e508  00000000  00000000  000516b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ac2  00000000  00000000  0005fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003494  00000000  00000000  00137680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0013ab14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002518 	.word	0x08002518

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002518 	.word	0x08002518

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa08 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f804 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f86e 	bl	80005f8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x10>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 ffc6 	bl	80024c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <SystemClock_Config+0xd0>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd4>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fff5 	bl	8001598 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b4:	f000 f8b0 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2105      	movs	r1, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fc76 	bl	8000ec8 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e2:	f000 f899 	bl	8000718 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2d      	ldr	r2, [pc, #180]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_GPIO_Init+0xf0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_GPIO_Init+0xf0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <MX_GPIO_Init+0xf0>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_GPIO_Init+0xf0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <MX_GPIO_Init+0xf4>)
 8000684:	f000 fc06 	bl	8000e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_GPIO_Init+0xf8>)
 80006a0:	f000 fa64 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006a4:	230c      	movs	r3, #12
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006b4:	2307      	movs	r3, #7
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_GPIO_Init+0xf4>)
 80006c0:	f000 fa54 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c4:	2320      	movs	r3, #32
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0xf4>)
 80006dc:	f000 fa46 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020800 	.word	0x40020800

080006f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d101      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000706:	f000 f92f 	bl	8000968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40000c00 	.word	0x40000c00

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <HAL_MspInit+0x4c>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000738:	6453      	str	r3, [r2, #68]	; 0x44
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_MspInit+0x4c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <HAL_InitTick+0xe4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a32      	ldr	r2, [pc, #200]	; (8000858 <HAL_InitTick+0xe4>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <HAL_InitTick+0xe4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a0:	f107 0210 	add.w	r2, r7, #16
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fc92 	bl	80010d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d103      	bne.n	80007c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ba:	f000 fc77 	bl	80010ac <HAL_RCC_GetPCLK1Freq>
 80007be:	6378      	str	r0, [r7, #52]	; 0x34
 80007c0:	e004      	b.n	80007cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007c2:	f000 fc73 	bl	80010ac <HAL_RCC_GetPCLK1Freq>
 80007c6:	4603      	mov	r3, r0
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <HAL_InitTick+0xe8>)
 80007d0:	fba2 2303 	umull	r2, r3, r2, r3
 80007d4:	0c9b      	lsrs	r3, r3, #18
 80007d6:	3b01      	subs	r3, #1
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <HAL_InitTick+0xec>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <HAL_InitTick+0xf0>)
 80007de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <HAL_InitTick+0xec>)
 80007e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <HAL_InitTick+0xec>)
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <HAL_InitTick+0xec>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_InitTick+0xec>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_InitTick+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000800:	4817      	ldr	r0, [pc, #92]	; (8000860 <HAL_InitTick+0xec>)
 8000802:	f001 f967 	bl	8001ad4 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800080c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000810:	2b00      	cmp	r3, #0
 8000812:	d11b      	bne.n	800084c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <HAL_InitTick+0xec>)
 8000816:	f001 f9b7 	bl	8001b88 <HAL_TIM_Base_Start_IT>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000820:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000824:	2b00      	cmp	r3, #0
 8000826:	d111      	bne.n	800084c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000828:	2032      	movs	r0, #50	; 0x32
 800082a:	f000 f991 	bl	8000b50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d808      	bhi.n	8000846 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f000 f96d 	bl	8000b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_InitTick+0xf4>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	e002      	b.n	800084c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800084c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000850:	4618      	mov	r0, r3
 8000852:	3738      	adds	r7, #56	; 0x38
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	431bde83 	.word	0x431bde83
 8000860:	20000028 	.word	0x20000028
 8000864:	40000c00 	.word	0x40000c00
 8000868:	20000004 	.word	0x20000004

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <TIM5_IRQHandler+0x10>)
 800089e:	f001 f9e3 	bl	8001c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f001 fde7 	bl	80024d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe03 	bl	800050c <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000914:	08002558 	.word	0x08002558
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800091c:	20000108 	.word	0x20000108

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f8d8 	bl	8000b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ff0e 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fee4 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20000070 	.word	0x20000070

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000070 	.word	0x20000070

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff4c 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2a:	f7ff ff61 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	6978      	ldr	r0, [r7, #20]
 8000b36:	f7ff ffb1 	bl	8000a9c <NVIC_EncodePriority>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff80 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff54 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	e165      	b.n	8000e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 8154 	bne.w	8000e4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d005      	beq.n	8000bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d130      	bne.n	8000c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	f003 0201 	and.w	r2, r3, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d017      	beq.n	8000c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d123      	bne.n	8000cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	69b9      	ldr	r1, [r7, #24]
 8000cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0203 	and.w	r2, r3, #3
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80ae 	beq.w	8000e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b5d      	ldr	r3, [pc, #372]	; (8000e6c <HAL_GPIO_Init+0x300>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a5c      	ldr	r2, [pc, #368]	; (8000e6c <HAL_GPIO_Init+0x300>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <HAL_GPIO_Init+0x300>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0e:	4a58      	ldr	r2, [pc, #352]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	220f      	movs	r2, #15
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <HAL_GPIO_Init+0x308>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d025      	beq.n	8000d86 <HAL_GPIO_Init+0x21a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_GPIO_Init+0x30c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d01f      	beq.n	8000d82 <HAL_GPIO_Init+0x216>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4d      	ldr	r2, [pc, #308]	; (8000e7c <HAL_GPIO_Init+0x310>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d019      	beq.n	8000d7e <HAL_GPIO_Init+0x212>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <HAL_GPIO_Init+0x314>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0x20e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_GPIO_Init+0x318>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00d      	beq.n	8000d76 <HAL_GPIO_Init+0x20a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x31c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x206>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a49      	ldr	r2, [pc, #292]	; (8000e8c <HAL_GPIO_Init+0x320>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_GPIO_Init+0x202>
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	e00c      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d6e:	2307      	movs	r3, #7
 8000d70:	e00a      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d72:	2305      	movs	r3, #5
 8000d74:	e008      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e004      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x21c>
 8000d86:	2300      	movs	r3, #0
 8000d88:	69fa      	ldr	r2, [r7, #28]
 8000d8a:	f002 0203 	and.w	r2, r2, #3
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	4093      	lsls	r3, r2
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d98:	4935      	ldr	r1, [pc, #212]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da6:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	f67f ae96 	bls.w	8000b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40021400 	.word	0x40021400
 8000e8c:	40021800 	.word	0x40021800
 8000e90:	40013c00 	.word	0x40013c00

08000e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea4:	787b      	ldrb	r3, [r7, #1]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eb0:	e003      	b.n	8000eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	041a      	lsls	r2, r3, #16
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	619a      	str	r2, [r3, #24]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0cc      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000edc:	4b68      	ldr	r3, [pc, #416]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 030f 	and.w	r3, r3, #15
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d90c      	bls.n	8000f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eea:	4b65      	ldr	r3, [pc, #404]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0b8      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d020      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f1c:	4b59      	ldr	r3, [pc, #356]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a58      	ldr	r2, [pc, #352]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	494d      	ldr	r1, [pc, #308]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d044      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d107      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d119      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e07f      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d003      	beq.n	8000f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d107      	bne.n	8000f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e06f      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e067      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f023 0203 	bic.w	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4934      	ldr	r1, [pc, #208]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fb8:	f7ff fcea 	bl	8000990 <HAL_GetTick>
 8000fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fbe:	e00a      	b.n	8000fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc0:	f7ff fce6 	bl	8000990 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e04f      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 020c 	and.w	r2, r3, #12
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d1eb      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d20c      	bcs.n	8001010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d001      	beq.n	8001010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e032      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4916      	ldr	r1, [pc, #88]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	4313      	orrs	r3, r2
 800102c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	4313      	orrs	r3, r2
 800104c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104e:	f000 f873 	bl	8001138 <HAL_RCC_GetSysClockFreq>
 8001052:	4602      	mov	r2, r0
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	5ccb      	ldrb	r3, [r1, r3]
 8001062:	fa22 f303 	lsr.w	r3, r2, r3
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_RCC_ClockConfig+0x1c8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fb80 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00
 8001084:	40023800 	.word	0x40023800
 8001088:	08002530 	.word	0x08002530
 800108c:	20000000 	.word	0x20000000
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000000 	.word	0x20000000

080010ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010b0:	f7ff fff0 	bl	8001094 <HAL_RCC_GetHCLKFreq>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	0a9b      	lsrs	r3, r3, #10
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	4903      	ldr	r1, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010c2:	5ccb      	ldrb	r3, [r1, r3]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	08002540 	.word	0x08002540

080010d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	220f      	movs	r2, #15
 80010e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_RCC_GetClockConfig+0x5c>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_RCC_GetClockConfig+0x5c>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_RCC_GetClockConfig+0x5c>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_RCC_GetClockConfig+0x5c>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_RCC_GetClockConfig+0x60>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 020f 	and.w	r2, r3, #15
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800113c:	b0ae      	sub	sp, #184	; 0xb8
 800113e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800115e:	4bcb      	ldr	r3, [pc, #812]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b0c      	cmp	r3, #12
 8001168:	f200 8206 	bhi.w	8001578 <HAL_RCC_GetSysClockFreq+0x440>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <HAL_RCC_GetSysClockFreq+0x3c>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	080011a9 	.word	0x080011a9
 8001178:	08001579 	.word	0x08001579
 800117c:	08001579 	.word	0x08001579
 8001180:	08001579 	.word	0x08001579
 8001184:	080011b1 	.word	0x080011b1
 8001188:	08001579 	.word	0x08001579
 800118c:	08001579 	.word	0x08001579
 8001190:	08001579 	.word	0x08001579
 8001194:	080011b9 	.word	0x080011b9
 8001198:	08001579 	.word	0x08001579
 800119c:	08001579 	.word	0x08001579
 80011a0:	08001579 	.word	0x08001579
 80011a4:	080013a9 	.word	0x080013a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011a8:	4bb9      	ldr	r3, [pc, #740]	; (8001490 <HAL_RCC_GetSysClockFreq+0x358>)
 80011aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80011ae:	e1e7      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011b0:	4bb8      	ldr	r3, [pc, #736]	; (8001494 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011b6:	e1e3      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011b8:	4bb4      	ldr	r3, [pc, #720]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c4:	4bb1      	ldr	r3, [pc, #708]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d071      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d0:	4bae      	ldr	r3, [pc, #696]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	2200      	movs	r2, #0
 80011d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80011e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011f6:	4622      	mov	r2, r4
 80011f8:	462b      	mov	r3, r5
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	f04f 0100 	mov.w	r1, #0
 8001202:	0159      	lsls	r1, r3, #5
 8001204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001208:	0150      	lsls	r0, r2, #5
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4621      	mov	r1, r4
 8001210:	1a51      	subs	r1, r2, r1
 8001212:	6439      	str	r1, [r7, #64]	; 0x40
 8001214:	4629      	mov	r1, r5
 8001216:	eb63 0301 	sbc.w	r3, r3, r1
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001228:	4649      	mov	r1, r9
 800122a:	018b      	lsls	r3, r1, #6
 800122c:	4641      	mov	r1, r8
 800122e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001232:	4641      	mov	r1, r8
 8001234:	018a      	lsls	r2, r1, #6
 8001236:	4641      	mov	r1, r8
 8001238:	1a51      	subs	r1, r2, r1
 800123a:	63b9      	str	r1, [r7, #56]	; 0x38
 800123c:	4649      	mov	r1, r9
 800123e:	eb63 0301 	sbc.w	r3, r3, r1
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001250:	4649      	mov	r1, r9
 8001252:	00cb      	lsls	r3, r1, #3
 8001254:	4641      	mov	r1, r8
 8001256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800125a:	4641      	mov	r1, r8
 800125c:	00ca      	lsls	r2, r1, #3
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	4603      	mov	r3, r0
 8001264:	4622      	mov	r2, r4
 8001266:	189b      	adds	r3, r3, r2
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
 800126a:	462b      	mov	r3, r5
 800126c:	460a      	mov	r2, r1
 800126e:	eb42 0303 	adc.w	r3, r2, r3
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001280:	4629      	mov	r1, r5
 8001282:	024b      	lsls	r3, r1, #9
 8001284:	4621      	mov	r1, r4
 8001286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800128a:	4621      	mov	r1, r4
 800128c:	024a      	lsls	r2, r1, #9
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001296:	2200      	movs	r2, #0
 8001298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800129c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80012a4:	f7fe ffb4 	bl	8000210 <__aeabi_uldivmod>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4613      	mov	r3, r2
 80012ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012b2:	e067      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	099b      	lsrs	r3, r3, #6
 80012ba:	2200      	movs	r2, #0
 80012bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80012c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80012ce:	2300      	movs	r3, #0
 80012d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80012d6:	4622      	mov	r2, r4
 80012d8:	462b      	mov	r3, r5
 80012da:	f04f 0000 	mov.w	r0, #0
 80012de:	f04f 0100 	mov.w	r1, #0
 80012e2:	0159      	lsls	r1, r3, #5
 80012e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012e8:	0150      	lsls	r0, r2, #5
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4621      	mov	r1, r4
 80012f0:	1a51      	subs	r1, r2, r1
 80012f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80012f4:	4629      	mov	r1, r5
 80012f6:	eb63 0301 	sbc.w	r3, r3, r1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001308:	4649      	mov	r1, r9
 800130a:	018b      	lsls	r3, r1, #6
 800130c:	4641      	mov	r1, r8
 800130e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001312:	4641      	mov	r1, r8
 8001314:	018a      	lsls	r2, r1, #6
 8001316:	4641      	mov	r1, r8
 8001318:	ebb2 0a01 	subs.w	sl, r2, r1
 800131c:	4649      	mov	r1, r9
 800131e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800132e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001336:	4692      	mov	sl, r2
 8001338:	469b      	mov	fp, r3
 800133a:	4623      	mov	r3, r4
 800133c:	eb1a 0303 	adds.w	r3, sl, r3
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	462b      	mov	r3, r5
 8001344:	eb4b 0303 	adc.w	r3, fp, r3
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001356:	4629      	mov	r1, r5
 8001358:	028b      	lsls	r3, r1, #10
 800135a:	4621      	mov	r1, r4
 800135c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001360:	4621      	mov	r1, r4
 8001362:	028a      	lsls	r2, r1, #10
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800136c:	2200      	movs	r2, #0
 800136e:	673b      	str	r3, [r7, #112]	; 0x70
 8001370:	677a      	str	r2, [r7, #116]	; 0x74
 8001372:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001376:	f7fe ff4b 	bl	8000210 <__aeabi_uldivmod>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4613      	mov	r3, r2
 8001380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001384:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	3301      	adds	r3, #1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800139a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013a6:	e0eb      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d06b      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_RCC_GetSysClockFreq+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	2200      	movs	r2, #0
 80013c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80013ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80013cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
 80013d4:	2300      	movs	r3, #0
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
 80013d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013dc:	4622      	mov	r2, r4
 80013de:	462b      	mov	r3, r5
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	0159      	lsls	r1, r3, #5
 80013ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ee:	0150      	lsls	r0, r2, #5
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4621      	mov	r1, r4
 80013f6:	1a51      	subs	r1, r2, r1
 80013f8:	61b9      	str	r1, [r7, #24]
 80013fa:	4629      	mov	r1, r5
 80013fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800140e:	4659      	mov	r1, fp
 8001410:	018b      	lsls	r3, r1, #6
 8001412:	4651      	mov	r1, sl
 8001414:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001418:	4651      	mov	r1, sl
 800141a:	018a      	lsls	r2, r1, #6
 800141c:	4651      	mov	r1, sl
 800141e:	ebb2 0801 	subs.w	r8, r2, r1
 8001422:	4659      	mov	r1, fp
 8001424:	eb63 0901 	sbc.w	r9, r3, r1
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001438:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800143c:	4690      	mov	r8, r2
 800143e:	4699      	mov	r9, r3
 8001440:	4623      	mov	r3, r4
 8001442:	eb18 0303 	adds.w	r3, r8, r3
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	462b      	mov	r3, r5
 800144a:	eb49 0303 	adc.w	r3, r9, r3
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800145c:	4629      	mov	r1, r5
 800145e:	024b      	lsls	r3, r1, #9
 8001460:	4621      	mov	r1, r4
 8001462:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001466:	4621      	mov	r1, r4
 8001468:	024a      	lsls	r2, r1, #9
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001472:	2200      	movs	r2, #0
 8001474:	65bb      	str	r3, [r7, #88]	; 0x58
 8001476:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001478:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800147c:	f7fe fec8 	bl	8000210 <__aeabi_uldivmod>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4613      	mov	r3, r2
 8001486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800148a:	e065      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x420>
 800148c:	40023800 	.word	0x40023800
 8001490:	00f42400 	.word	0x00f42400
 8001494:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_GetSysClockFreq+0x458>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	2200      	movs	r2, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	4611      	mov	r1, r2
 80014a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014a8:	653b      	str	r3, [r7, #80]	; 0x50
 80014aa:	2300      	movs	r3, #0
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
 80014ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80014b2:	4642      	mov	r2, r8
 80014b4:	464b      	mov	r3, r9
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0159      	lsls	r1, r3, #5
 80014c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c4:	0150      	lsls	r0, r2, #5
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4641      	mov	r1, r8
 80014cc:	1a51      	subs	r1, r2, r1
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	4649      	mov	r1, r9
 80014d2:	eb63 0301 	sbc.w	r3, r3, r1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014e4:	4659      	mov	r1, fp
 80014e6:	018b      	lsls	r3, r1, #6
 80014e8:	4651      	mov	r1, sl
 80014ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ee:	4651      	mov	r1, sl
 80014f0:	018a      	lsls	r2, r1, #6
 80014f2:	4651      	mov	r1, sl
 80014f4:	1a54      	subs	r4, r2, r1
 80014f6:	4659      	mov	r1, fp
 80014f8:	eb63 0501 	sbc.w	r5, r3, r1
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	00eb      	lsls	r3, r5, #3
 8001506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150a:	00e2      	lsls	r2, r4, #3
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	18e3      	adds	r3, r4, r3
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	464b      	mov	r3, r9
 8001518:	eb45 0303 	adc.w	r3, r5, r3
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800152a:	4629      	mov	r1, r5
 800152c:	028b      	lsls	r3, r1, #10
 800152e:	4621      	mov	r1, r4
 8001530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001534:	4621      	mov	r1, r4
 8001536:	028a      	lsls	r2, r1, #10
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001540:	2200      	movs	r2, #0
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
 8001544:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001546:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800154a:	f7fe fe61 	bl	8000210 <__aeabi_uldivmod>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4613      	mov	r3, r2
 8001554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_GetSysClockFreq+0x458>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	0f1b      	lsrs	r3, r3, #28
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800156a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001576:	e003      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_GetSysClockFreq+0x45c>)
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800157e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001584:	4618      	mov	r0, r3
 8001586:	37b8      	adds	r7, #184	; 0xb8
 8001588:	46bd      	mov	sp, r7
 800158a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	00f42400 	.word	0x00f42400

08001598 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e28d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8083 	beq.w	80016be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d019      	beq.n	80015f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015c4:	4b91      	ldr	r3, [pc, #580]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d0:	4b8e      	ldr	r3, [pc, #568]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015dc:	d00c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05b      	beq.n	80016bc <HAL_RCC_OscConfig+0x124>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d157      	bne.n	80016bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e25a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x90>
 800161a:	4b7c      	ldr	r3, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7b      	ldr	r2, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xcc>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0xb4>
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a72      	ldr	r2, [pc, #456]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xcc>
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6e      	ldr	r2, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6b      	ldr	r2, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff f990 	bl	8000990 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff f98c 	bl	8000990 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e21f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xdc>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff f97c 	bl	8000990 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f978 	bl	8000990 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e20b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x104>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06f      	beq.n	80017aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d017      	beq.n	8001706 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x186>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1d3      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4937      	ldr	r1, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f925 	bl	8000990 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff f921 	bl	8000990 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1b4      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x274>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x274>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f904 	bl	8000990 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff f900 	bl	8000990 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e193      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f8e4 	bl	8000990 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff f8e0 	bl	8000990 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e173      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x234>
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff f8cd 	bl	8000990 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e00e      	b.n	8001818 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff f8c9 	bl	8000990 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d907      	bls.n	8001818 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e15c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000
 8001814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ea      	bne.n	80017fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8097 	beq.w	8001960 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b83      	ldr	r3, [pc, #524]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a7e      	ldr	r2, [pc, #504]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a75      	ldr	r2, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff f889 	bl	8000990 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff f885 	bl	8000990 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e118      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_RCC_OscConfig+0x4b0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x31e>
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a65      	ldr	r2, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x358>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x340>
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a60      	ldr	r2, [pc, #384]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x358>
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a59      	ldr	r2, [pc, #356]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f84a 	bl	8000990 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff f846 	bl	8000990 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0d7      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0ee      	beq.n	8001900 <HAL_RCC_OscConfig+0x368>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff f834 	bl	8000990 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff f830 	bl	8000990 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0c1      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ee      	bne.n	800192c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80ad 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d060      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d145      	bne.n	8001a0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_RCC_OscConfig+0x4b4>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f804 	bl	8000990 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f800 	bl	8000990 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e093      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	071b      	lsls	r3, r3, #28
 80019d6:	491b      	ldr	r1, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x4b4>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7fe ffd5 	bl	8000990 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7fe ffd1 	bl	8000990 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e064      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x452>
 8001a08:	e05c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x4b4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7fe ffbe 	bl	8000990 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe ffba 	bl	8000990 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x480>
 8001a36:	e045      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e040      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_RCC_OscConfig+0x538>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d030      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d129      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d122      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d119      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e041      	b.n	8001b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f839 	bl	8001b72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 f9d8 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d001      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e04e      	b.n	8001c3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d01d      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d111      	bne.n	8001c2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d010      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2a:	e007      	b.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40000800 	.word	0x40000800
 8001c58:	40000c00 	.word	0x40000c00
 8001c5c:	40010400 	.word	0x40010400
 8001c60:	40014000 	.word	0x40014000
 8001c64:	40001800 	.word	0x40001800

08001c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0202 	mvn.w	r2, #2
 8001c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8ee 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8e0 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f1 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0204 	mvn.w	r2, #4
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8c4 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8b6 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8c7 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0208 	mvn.w	r2, #8
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f89a 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f88c 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f89d 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0210 	mvn.w	r2, #16
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2208      	movs	r2, #8
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f870 	bl	8001e8c <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f862 	bl	8001e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f873 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0201 	mvn.w	r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fc84 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b80      	cmp	r3, #128	; 0x80
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b80      	cmp	r3, #128	; 0x80
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f902 	bl	800201c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	2b40      	cmp	r3, #64	; 0x40
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f838 	bl	8001eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0220 	mvn.w	r2, #32
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8cc 	bl	8002008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d00f      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <TIM_Base_SetConfig+0x118>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <TIM_Base_SetConfig+0x11c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <TIM_Base_SetConfig+0x120>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d108      	bne.n	8001f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d027      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <TIM_Base_SetConfig+0x118>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d023      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <TIM_Base_SetConfig+0x11c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <TIM_Base_SetConfig+0x120>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d017      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <TIM_Base_SetConfig+0x128>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <TIM_Base_SetConfig+0x12c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <TIM_Base_SetConfig+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <TIM_Base_SetConfig+0x134>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <TIM_Base_SetConfig+0x138>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <TIM_Base_SetConfig+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <TIM_Base_SetConfig+0x114>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_Base_SetConfig+0xf8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <TIM_Base_SetConfig+0x124>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800
 8001ffc:	40001800 	.word	0x40001800
 8002000:	40001c00 	.word	0x40001c00
 8002004:	40002000 	.word	0x40002000

08002008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800203a:	4b7d      	ldr	r3, [pc, #500]	; (8002230 <xTaskIncrementTick+0x200>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 80ec 	bne.w	800221c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <xTaskIncrementTick+0x204>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800204c:	4a79      	ldr	r2, [pc, #484]	; (8002234 <xTaskIncrementTick+0x204>)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d120      	bne.n	800209a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002058:	4b77      	ldr	r3, [pc, #476]	; (8002238 <xTaskIncrementTick+0x208>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002074:	bf00      	nop
 8002076:	e7fe      	b.n	8002076 <xTaskIncrementTick+0x46>
 8002078:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <xTaskIncrementTick+0x208>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <xTaskIncrementTick+0x20c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <xTaskIncrementTick+0x208>)
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4a6d      	ldr	r2, [pc, #436]	; (800223c <xTaskIncrementTick+0x20c>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <xTaskIncrementTick+0x210>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	4a6b      	ldr	r2, [pc, #428]	; (8002240 <xTaskIncrementTick+0x210>)
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	f000 f93d 	bl	8002314 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800209a:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <xTaskIncrementTick+0x214>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a3a      	ldr	r2, [r7, #32]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f0c0 80a6 	bcc.w	80021f2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020a6:	4b64      	ldr	r3, [pc, #400]	; (8002238 <xTaskIncrementTick+0x208>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020b0:	4b64      	ldr	r3, [pc, #400]	; (8002244 <xTaskIncrementTick+0x214>)
 80020b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b6:	601a      	str	r2, [r3, #0]
                    break;
 80020b8:	e09b      	b.n	80021f2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <xTaskIncrementTick+0x208>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80020ca:	6a3a      	ldr	r2, [r7, #32]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d203      	bcs.n	80020da <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020d2:	4a5c      	ldr	r2, [pc, #368]	; (8002244 <xTaskIncrementTick+0x214>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80020d8:	e08b      	b.n	80021f2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	68d2      	ldr	r2, [r2, #12]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	3304      	adds	r3, #4
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d103      	bne.n	8002108 <xTaskIncrementTick+0xd8>
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1e5a      	subs	r2, r3, #1
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01e      	beq.n	800215e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	6a12      	ldr	r2, [r2, #32]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	69d2      	ldr	r2, [r2, #28]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	3318      	adds	r3, #24
 8002142:	429a      	cmp	r2, r3
 8002144:	d103      	bne.n	800214e <xTaskIncrementTick+0x11e>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1e5a      	subs	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	2201      	movs	r2, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <xTaskIncrementTick+0x218>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	4a36      	ldr	r2, [pc, #216]	; (8002248 <xTaskIncrementTick+0x218>)
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	4935      	ldr	r1, [pc, #212]	; (800224c <xTaskIncrementTick+0x21c>)
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	3204      	adds	r2, #4
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1d1a      	adds	r2, r3, #4
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <xTaskIncrementTick+0x21c>)
 80021b4:	441a      	add	r2, r3
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021be:	4923      	ldr	r1, [pc, #140]	; (800224c <xTaskIncrementTick+0x21c>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1c59      	adds	r1, r3, #1
 80021ce:	481f      	ldr	r0, [pc, #124]	; (800224c <xTaskIncrementTick+0x21c>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4403      	add	r3, r0
 80021da:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <xTaskIncrementTick+0x220>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	429a      	cmp	r2, r3
 80021e8:	f67f af5d 	bls.w	80020a6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f0:	e759      	b.n	80020a6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <xTaskIncrementTick+0x220>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	4914      	ldr	r1, [pc, #80]	; (800224c <xTaskIncrementTick+0x21c>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d901      	bls.n	800220e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <xTaskIncrementTick+0x224>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002216:	2301      	movs	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e004      	b.n	8002226 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <xTaskIncrementTick+0x228>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <xTaskIncrementTick+0x228>)
 8002224:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002228:	4618      	mov	r0, r3
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200000fc 	.word	0x200000fc
 8002234:	200000e4 	.word	0x200000e4
 8002238:	200000dc 	.word	0x200000dc
 800223c:	200000e0 	.word	0x200000e0
 8002240:	200000f4 	.word	0x200000f4
 8002244:	200000f8 	.word	0x200000f8
 8002248:	200000e8 	.word	0x200000e8
 800224c:	20000078 	.word	0x20000078
 8002250:	20000074 	.word	0x20000074
 8002254:	200000f0 	.word	0x200000f0
 8002258:	200000ec 	.word	0x200000ec

0800225c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <vTaskSwitchContext+0xa4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <vTaskSwitchContext+0xa8>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002270:	e03f      	b.n	80022f2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <vTaskSwitchContext+0xa8>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <vTaskSwitchContext+0xac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	f1c3 031f 	rsb	r3, r3, #31
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	491f      	ldr	r1, [pc, #124]	; (800230c <vTaskSwitchContext+0xb0>)
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80022a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	f3bf 8f6f 	isb	sy
 80022ae:	f3bf 8f4f 	dsb	sy
 80022b2:	607b      	str	r3, [r7, #4]
    }
 80022b4:	bf00      	nop
 80022b6:	e7fe      	b.n	80022b6 <vTaskSwitchContext+0x5a>
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <vTaskSwitchContext+0xb0>)
 80022c4:	4413      	add	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3308      	adds	r3, #8
 80022da:	429a      	cmp	r2, r3
 80022dc:	d104      	bne.n	80022e8 <vTaskSwitchContext+0x8c>
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <vTaskSwitchContext+0xb4>)
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200000fc 	.word	0x200000fc
 8002304:	200000f0 	.word	0x200000f0
 8002308:	200000e8 	.word	0x200000e8
 800230c:	20000078 	.word	0x20000078
 8002310:	20000074 	.word	0x20000074

08002314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <prvResetNextTaskUnblockTime+0x30>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <prvResetNextTaskUnblockTime+0x34>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002328:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800232a:	e005      	b.n	8002338 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <prvResetNextTaskUnblockTime+0x30>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <prvResetNextTaskUnblockTime+0x34>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200000dc 	.word	0x200000dc
 8002348:	200000f8 	.word	0x200000f8
 800234c:	00000000 	.word	0x00000000

08002350 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <pxCurrentTCBConst2>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	6808      	ldr	r0, [r1, #0]
 8002356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235a:	f380 8809 	msr	PSP, r0
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f380 8811 	msr	BASEPRI, r0
 800236a:	4770      	bx	lr
 800236c:	f3af 8000 	nop.w

08002370 <pxCurrentTCBConst2>:
 8002370:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
	...

08002380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002380:	f3ef 8009 	mrs	r0, PSP
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <pxCurrentTCBConst>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f01e 0f10 	tst.w	lr, #16
 8002390:	bf08      	it	eq
 8002392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239a:	6010      	str	r0, [r2, #0]
 800239c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80023a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80023a4:	f380 8811 	msr	BASEPRI, r0
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f7ff ff54 	bl	800225c <vTaskSwitchContext>
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	f380 8811 	msr	BASEPRI, r0
 80023bc:	bc09      	pop	{r0, r3}
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	6808      	ldr	r0, [r1, #0]
 80023c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c6:	f01e 0f10 	tst.w	lr, #16
 80023ca:	bf08      	it	eq
 80023cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023d0:	f380 8809 	msr	PSP, r0
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w

080023e0 <pxCurrentTCBConst>:
 80023e0:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop

080023e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	607b      	str	r3, [r7, #4]
    }
 8002400:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002402:	f7ff fe15 	bl	8002030 <xTaskIncrementTick>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SysTick_Handler+0x40>)
 800240e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800241e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	e000ed04 	.word	0xe000ed04

0800242c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <USART2_IRQHandler+0x80>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <USART2_IRQHandler+0x84>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 030b 	and.w	r3, r3, #11
 8002450:	2b00      	cmp	r3, #0
 8002452:	d108      	bne.n	8002466 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <USART2_IRQHandler+0x88>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <USART2_IRQHandler+0x88>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	4610      	mov	r0, r2
 8002464:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01a      	beq.n	80024a6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <USART2_IRQHandler+0x8c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d015      	beq.n	80024a4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <USART2_IRQHandler+0x8c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1dfa      	adds	r2, r7, #7
 800247e:	4610      	mov	r0, r2
 8002480:	4798      	blx	r3
 8002482:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <USART2_IRQHandler+0x90>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <USART2_IRQHandler+0x90>)
 8002490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e006      	b.n	80024a6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <USART2_IRQHandler+0x80>)
 800249a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800249c:	79fa      	ldrb	r2, [r7, #7]
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <USART2_IRQHandler+0x84>)
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e000      	b.n	80024a6 <USART2_IRQHandler+0x7a>
      return;
 80024a4:	bf00      	nop
    }
  }
}
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40004400 	.word	0x40004400
 80024b0:	40004404 	.word	0x40004404
 80024b4:	20000100 	.word	0x20000100
 80024b8:	20000104 	.word	0x20000104
 80024bc:	4000440c 	.word	0x4000440c

080024c0 <memset>:
 80024c0:	4402      	add	r2, r0
 80024c2:	4603      	mov	r3, r0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d100      	bne.n	80024ca <memset+0xa>
 80024c8:	4770      	bx	lr
 80024ca:	f803 1b01 	strb.w	r1, [r3], #1
 80024ce:	e7f9      	b.n	80024c4 <memset+0x4>

080024d0 <__libc_init_array>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4d0d      	ldr	r5, [pc, #52]	; (8002508 <__libc_init_array+0x38>)
 80024d4:	4c0d      	ldr	r4, [pc, #52]	; (800250c <__libc_init_array+0x3c>)
 80024d6:	1b64      	subs	r4, r4, r5
 80024d8:	10a4      	asrs	r4, r4, #2
 80024da:	2600      	movs	r6, #0
 80024dc:	42a6      	cmp	r6, r4
 80024de:	d109      	bne.n	80024f4 <__libc_init_array+0x24>
 80024e0:	4d0b      	ldr	r5, [pc, #44]	; (8002510 <__libc_init_array+0x40>)
 80024e2:	4c0c      	ldr	r4, [pc, #48]	; (8002514 <__libc_init_array+0x44>)
 80024e4:	f000 f818 	bl	8002518 <_init>
 80024e8:	1b64      	subs	r4, r4, r5
 80024ea:	10a4      	asrs	r4, r4, #2
 80024ec:	2600      	movs	r6, #0
 80024ee:	42a6      	cmp	r6, r4
 80024f0:	d105      	bne.n	80024fe <__libc_init_array+0x2e>
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f8:	4798      	blx	r3
 80024fa:	3601      	adds	r6, #1
 80024fc:	e7ee      	b.n	80024dc <__libc_init_array+0xc>
 80024fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002502:	4798      	blx	r3
 8002504:	3601      	adds	r6, #1
 8002506:	e7f2      	b.n	80024ee <__libc_init_array+0x1e>
 8002508:	08002550 	.word	0x08002550
 800250c:	08002550 	.word	0x08002550
 8002510:	08002550 	.word	0x08002550
 8002514:	08002554 	.word	0x08002554

08002518 <_init>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr

08002524 <_fini>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr
