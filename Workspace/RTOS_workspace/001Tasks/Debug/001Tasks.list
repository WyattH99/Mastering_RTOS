
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000709c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007414  08007414  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007414  08007414  00017414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800741c  0800741c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d0  20000064  08007488  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014634  08007488  00024634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148ea  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003099  00000000  00000000  000349c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00037a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f38  00000000  00000000  00038e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244cf  00000000  00000000  00039d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164c8  00000000  00000000  0005e22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd4a2  00000000  00000000  000746f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057fc  00000000  00000000  00151b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  00157398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007254 	.word	0x08007254

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007254 	.word	0x08007254

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f14 	.word	0x20012f14
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fa93 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f851 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f8bd 	bl	80007d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT cycle counter.
  DWT_CTRL |= (1 << 0);
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0x94>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <main+0x94>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800066a:	f004 f861 	bl	8004730 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800066e:	f005 fb97 	bl	8005da0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2302      	movs	r3, #2
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <main+0x98>)
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	4919      	ldr	r1, [pc, #100]	; (80006e8 <main+0x9c>)
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <main+0xa0>)
 8000684:	f002 f9a8 	bl	80029d8 <xTaskCreate>
 8000688:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00a      	beq.n	80006a6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000694:	f383 8811 	msr	BASEPRI, r3
 8000698:	f3bf 8f6f 	isb	sy
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006a2:	bf00      	nop
 80006a4:	e7fe      	b.n	80006a4 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <main+0xa4>)
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	4910      	ldr	r1, [pc, #64]	; (80006f4 <main+0xa8>)
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <main+0xac>)
 80006b6:	f002 f98f 	bl	80029d8 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00a      	beq.n	80006d8 <main+0x8c>
        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60fb      	str	r3, [r7, #12]
    }
 80006d4:	bf00      	nop
 80006d6:	e7fe      	b.n	80006d6 <main+0x8a>

  // Start the freeRTOS Scheduler
  vTaskStartScheduler();
 80006d8:	f002 faf8 	bl	8002ccc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x90>
 80006de:	bf00      	nop
 80006e0:	e0001000 	.word	0xe0001000
 80006e4:	0800726c 	.word	0x0800726c
 80006e8:	08007284 	.word	0x08007284
 80006ec:	080008d5 	.word	0x080008d5
 80006f0:	0800728c 	.word	0x0800728c
 80006f4:	080072a4 	.word	0x080072a4
 80006f8:	08000911 	.word	0x08000911

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 f916 	bl	800693c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <SystemClock_Config+0xd4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SystemClock_Config+0xd8>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000778:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f830 	bl	80017f0 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000796:	f000 f8eb 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fcb2 	bl	8001120 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c2:	f000 f8d5 	bl	8000970 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_GPIO_Init+0xf0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a34      	ldr	r2, [pc, #208]	; (80008c8 <MX_GPIO_Init+0xf0>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2d      	ldr	r2, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_GPIO_Init+0xf0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xf0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0xf0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_GPIO_Init+0xf4>)
 8000864:	f000 fc42 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_GPIO_Init+0xf8>)
 8000880:	f000 faa0 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000884:	230c      	movs	r3, #12
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0xf4>)
 80008a0:	f000 fa90 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xf4>)
 80008bc:	f000 fa82 	bl	8000dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800

080008d4 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09c      	sub	sp, #112	; 0x70
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80008dc:	f107 000c 	add.w	r0, r7, #12
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a09      	ldr	r2, [pc, #36]	; (8000908 <task1_handler+0x34>)
 80008e4:	2164      	movs	r1, #100	; 0x64
 80008e6:	f005 ffe5 	bl	80068b4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 ff70 	bl	80067d4 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <task1_handler+0x38>)
 80008f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000904:	e7ea      	b.n	80008dc <task1_handler+0x8>
 8000906:	bf00      	nop
 8000908:	080072ac 	.word	0x080072ac
 800090c:	e000ed04 	.word	0xe000ed04

08000910 <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	; 0x70
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000918:	f107 000c 	add.w	r0, r7, #12
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <task2_handler+0x34>)
 8000920:	2164      	movs	r1, #100	; 0x64
 8000922:	f005 ffc7 	bl	80068b4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4618      	mov	r0, r3
 800092c:	f005 ff52 	bl	80067d4 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <task2_handler+0x38>)
 8000932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000940:	e7ea      	b.n	8000918 <task2_handler+0x8>
 8000942:	bf00      	nop
 8000944:	080072ac 	.word	0x080072ac
 8000948:	e000ed04 	.word	0xe000ed04

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 f92f 	bl	8000bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40001000 	.word	0x40001000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80009ba:	f003 fb35 	bl	8004028 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <HAL_InitTick+0xe4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <HAL_InitTick+0xe4>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_InitTick+0xe4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fc92 	bl	800132c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a12:	f000 fc77 	bl	8001304 <HAL_RCC_GetPCLK1Freq>
 8000a16:	6378      	str	r0, [r7, #52]	; 0x34
 8000a18:	e004      	b.n	8000a24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a1a:	f000 fc73 	bl	8001304 <HAL_RCC_GetPCLK1Freq>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	0c9b      	lsrs	r3, r3, #18
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <HAL_InitTick+0xf0>)
 8000a36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a58:	4817      	ldr	r0, [pc, #92]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a5a:	f001 f967 	bl	8001d2c <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d11b      	bne.n	8000aa4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a6c:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a6e:	f001 f9b7 	bl	8001de0 <HAL_TIM_Base_Start_IT>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d111      	bne.n	8000aa4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a80:	2036      	movs	r0, #54	; 0x36
 8000a82:	f000 f991 	bl	8000da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d808      	bhi.n	8000a9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2036      	movs	r0, #54	; 0x36
 8000a92:	f000 f96d 	bl	8000d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0xf4>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	e002      	b.n	8000aa4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3738      	adds	r7, #56	; 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	20000080 	.word	0x20000080
 8000abc:	40001000 	.word	0x40001000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM6_DAC_IRQHandler+0x10>)
 8000af6:	f001 f9e3 	bl	8001ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000080 	.word	0x20000080

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b44:	4c0b      	ldr	r4, [pc, #44]	; (8000b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd7 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f005 fef9 	bl	800694c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd77 	bl	800064c <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b6c:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 8000b70:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b74:	20014634 	.word	0x20014634

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f8d8 	bl	8000d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff ff0e 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fee4 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	200000c8 	.word	0x200000c8

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200000c8 	.word	0x200000c8

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff4c 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d82:	f7ff ff61 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	6978      	ldr	r0, [r7, #20]
 8000d8e:	f7ff ffb1 	bl	8000cf4 <NVIC_EncodePriority>
 8000d92:	4602      	mov	r2, r0
 8000d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff80 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff54 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e165      	b.n	80010ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8154 	bne.w	80010a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80ae 	beq.w	80010a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a5c      	ldr	r2, [pc, #368]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_GPIO_Init+0x30c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x310>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <HAL_GPIO_Init+0x314>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_GPIO_Init+0x318>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x20a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x206>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x202>
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001022:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x324>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800104c:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_GPIO_Init+0x324>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_GPIO_Init+0x324>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_GPIO_Init+0x324>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f ae96 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40013c00 	.word	0x40013c00

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0cc      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d90c      	bls.n	800115c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0b8      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800117e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	494d      	ldr	r1, [pc, #308]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d044      	beq.n	8001240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d119      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d003      	beq.n	80011de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e067      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f023 0203 	bic.w	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	4313      	orrs	r3, r2
 800120e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001210:	f7ff fcea 	bl	8000be8 <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	e00a      	b.n	800122e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f7ff fce6 	bl	8000be8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e04f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 020c 	and.w	r2, r3, #12
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	429a      	cmp	r2, r3
 800123e:	d1eb      	bne.n	8001218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d20c      	bcs.n	8001268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e032      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a6:	f000 f873 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb80 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08007390 	.word	0x08007390
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_RCC_GetHCLKFreq+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001308:	f7ff fff0 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0a9b      	lsrs	r3, r3, #10
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	080073a0 	.word	0x080073a0

0800132c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	220f      	movs	r2, #15
 800133a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_RCC_GetClockConfig+0x60>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 020f 	and.w	r2, r3, #15
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001394:	b0ae      	sub	sp, #184	; 0xb8
 8001396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b6:	4bcb      	ldr	r3, [pc, #812]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	f200 8206 	bhi.w	80017d0 <HAL_RCC_GetSysClockFreq+0x440>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	08001401 	.word	0x08001401
 80013d0:	080017d1 	.word	0x080017d1
 80013d4:	080017d1 	.word	0x080017d1
 80013d8:	080017d1 	.word	0x080017d1
 80013dc:	08001409 	.word	0x08001409
 80013e0:	080017d1 	.word	0x080017d1
 80013e4:	080017d1 	.word	0x080017d1
 80013e8:	080017d1 	.word	0x080017d1
 80013ec:	08001411 	.word	0x08001411
 80013f0:	080017d1 	.word	0x080017d1
 80013f4:	080017d1 	.word	0x080017d1
 80013f8:	080017d1 	.word	0x080017d1
 80013fc:	08001601 	.word	0x08001601
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001400:	4bb9      	ldr	r3, [pc, #740]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001406:	e1e7      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001408:	4bb8      	ldr	r3, [pc, #736]	; (80016ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800140e:	e1e3      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001410:	4bb4      	ldr	r3, [pc, #720]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800141c:	4bb1      	ldr	r3, [pc, #708]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d071      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	4bae      	ldr	r3, [pc, #696]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	2200      	movs	r2, #0
 8001430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001434:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800143c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800144a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800144e:	4622      	mov	r2, r4
 8001450:	462b      	mov	r3, r5
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	0159      	lsls	r1, r3, #5
 800145c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001460:	0150      	lsls	r0, r2, #5
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4621      	mov	r1, r4
 8001468:	1a51      	subs	r1, r2, r1
 800146a:	6439      	str	r1, [r7, #64]	; 0x40
 800146c:	4629      	mov	r1, r5
 800146e:	eb63 0301 	sbc.w	r3, r3, r1
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001480:	4649      	mov	r1, r9
 8001482:	018b      	lsls	r3, r1, #6
 8001484:	4641      	mov	r1, r8
 8001486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800148a:	4641      	mov	r1, r8
 800148c:	018a      	lsls	r2, r1, #6
 800148e:	4641      	mov	r1, r8
 8001490:	1a51      	subs	r1, r2, r1
 8001492:	63b9      	str	r1, [r7, #56]	; 0x38
 8001494:	4649      	mov	r1, r9
 8001496:	eb63 0301 	sbc.w	r3, r3, r1
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014a8:	4649      	mov	r1, r9
 80014aa:	00cb      	lsls	r3, r1, #3
 80014ac:	4641      	mov	r1, r8
 80014ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014b2:	4641      	mov	r1, r8
 80014b4:	00ca      	lsls	r2, r1, #3
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	4622      	mov	r2, r4
 80014be:	189b      	adds	r3, r3, r2
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
 80014c2:	462b      	mov	r3, r5
 80014c4:	460a      	mov	r2, r1
 80014c6:	eb42 0303 	adc.w	r3, r2, r3
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014d8:	4629      	mov	r1, r5
 80014da:	024b      	lsls	r3, r1, #9
 80014dc:	4621      	mov	r1, r4
 80014de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014e2:	4621      	mov	r1, r4
 80014e4:	024a      	lsls	r2, r1, #9
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ee:	2200      	movs	r2, #0
 80014f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014fc:	f7fe ff28 	bl	8000350 <__aeabi_uldivmod>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4613      	mov	r3, r2
 8001506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800150a:	e067      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150c:	4b75      	ldr	r3, [pc, #468]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	2200      	movs	r2, #0
 8001514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001518:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800151c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
 8001526:	2300      	movs	r3, #0
 8001528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800152a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800152e:	4622      	mov	r2, r4
 8001530:	462b      	mov	r3, r5
 8001532:	f04f 0000 	mov.w	r0, #0
 8001536:	f04f 0100 	mov.w	r1, #0
 800153a:	0159      	lsls	r1, r3, #5
 800153c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001540:	0150      	lsls	r0, r2, #5
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4621      	mov	r1, r4
 8001548:	1a51      	subs	r1, r2, r1
 800154a:	62b9      	str	r1, [r7, #40]	; 0x28
 800154c:	4629      	mov	r1, r5
 800154e:	eb63 0301 	sbc.w	r3, r3, r1
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001560:	4649      	mov	r1, r9
 8001562:	018b      	lsls	r3, r1, #6
 8001564:	4641      	mov	r1, r8
 8001566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800156a:	4641      	mov	r1, r8
 800156c:	018a      	lsls	r2, r1, #6
 800156e:	4641      	mov	r1, r8
 8001570:	ebb2 0a01 	subs.w	sl, r2, r1
 8001574:	4649      	mov	r1, r9
 8001576:	eb63 0b01 	sbc.w	fp, r3, r1
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001586:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800158a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800158e:	4692      	mov	sl, r2
 8001590:	469b      	mov	fp, r3
 8001592:	4623      	mov	r3, r4
 8001594:	eb1a 0303 	adds.w	r3, sl, r3
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	462b      	mov	r3, r5
 800159c:	eb4b 0303 	adc.w	r3, fp, r3
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ae:	4629      	mov	r1, r5
 80015b0:	028b      	lsls	r3, r1, #10
 80015b2:	4621      	mov	r1, r4
 80015b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015b8:	4621      	mov	r1, r4
 80015ba:	028a      	lsls	r2, r1, #10
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c4:	2200      	movs	r2, #0
 80015c6:	673b      	str	r3, [r7, #112]	; 0x70
 80015c8:	677a      	str	r2, [r7, #116]	; 0x74
 80015ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015ce:	f7fe febf 	bl	8000350 <__aeabi_uldivmod>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4613      	mov	r3, r2
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015dc:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	3301      	adds	r3, #1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015fe:	e0eb      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d06b      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001618:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	2200      	movs	r2, #0
 8001620:	66bb      	str	r3, [r7, #104]	; 0x68
 8001622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162a:	663b      	str	r3, [r7, #96]	; 0x60
 800162c:	2300      	movs	r3, #0
 800162e:	667b      	str	r3, [r7, #100]	; 0x64
 8001630:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001634:	4622      	mov	r2, r4
 8001636:	462b      	mov	r3, r5
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	0159      	lsls	r1, r3, #5
 8001642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001646:	0150      	lsls	r0, r2, #5
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4621      	mov	r1, r4
 800164e:	1a51      	subs	r1, r2, r1
 8001650:	61b9      	str	r1, [r7, #24]
 8001652:	4629      	mov	r1, r5
 8001654:	eb63 0301 	sbc.w	r3, r3, r1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001666:	4659      	mov	r1, fp
 8001668:	018b      	lsls	r3, r1, #6
 800166a:	4651      	mov	r1, sl
 800166c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001670:	4651      	mov	r1, sl
 8001672:	018a      	lsls	r2, r1, #6
 8001674:	4651      	mov	r1, sl
 8001676:	ebb2 0801 	subs.w	r8, r2, r1
 800167a:	4659      	mov	r1, fp
 800167c:	eb63 0901 	sbc.w	r9, r3, r1
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800168c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001690:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001694:	4690      	mov	r8, r2
 8001696:	4699      	mov	r9, r3
 8001698:	4623      	mov	r3, r4
 800169a:	eb18 0303 	adds.w	r3, r8, r3
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	462b      	mov	r3, r5
 80016a2:	eb49 0303 	adc.w	r3, r9, r3
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016b4:	4629      	mov	r1, r5
 80016b6:	024b      	lsls	r3, r1, #9
 80016b8:	4621      	mov	r1, r4
 80016ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016be:	4621      	mov	r1, r4
 80016c0:	024a      	lsls	r2, r1, #9
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ca:	2200      	movs	r2, #0
 80016cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80016ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016d4:	f7fe fe3c 	bl	8000350 <__aeabi_uldivmod>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4613      	mov	r3, r2
 80016de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016e2:	e065      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x420>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	00f42400 	.word	0x00f42400
 80016ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	4611      	mov	r1, r2
 80016fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001700:	653b      	str	r3, [r7, #80]	; 0x50
 8001702:	2300      	movs	r3, #0
 8001704:	657b      	str	r3, [r7, #84]	; 0x54
 8001706:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800170a:	4642      	mov	r2, r8
 800170c:	464b      	mov	r3, r9
 800170e:	f04f 0000 	mov.w	r0, #0
 8001712:	f04f 0100 	mov.w	r1, #0
 8001716:	0159      	lsls	r1, r3, #5
 8001718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800171c:	0150      	lsls	r0, r2, #5
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4641      	mov	r1, r8
 8001724:	1a51      	subs	r1, r2, r1
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	4649      	mov	r1, r9
 800172a:	eb63 0301 	sbc.w	r3, r3, r1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800173c:	4659      	mov	r1, fp
 800173e:	018b      	lsls	r3, r1, #6
 8001740:	4651      	mov	r1, sl
 8001742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001746:	4651      	mov	r1, sl
 8001748:	018a      	lsls	r2, r1, #6
 800174a:	4651      	mov	r1, sl
 800174c:	1a54      	subs	r4, r2, r1
 800174e:	4659      	mov	r1, fp
 8001750:	eb63 0501 	sbc.w	r5, r3, r1
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	00eb      	lsls	r3, r5, #3
 800175e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001762:	00e2      	lsls	r2, r4, #3
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	4643      	mov	r3, r8
 800176a:	18e3      	adds	r3, r4, r3
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	464b      	mov	r3, r9
 8001770:	eb45 0303 	adc.w	r3, r5, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001782:	4629      	mov	r1, r5
 8001784:	028b      	lsls	r3, r1, #10
 8001786:	4621      	mov	r1, r4
 8001788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800178c:	4621      	mov	r1, r4
 800178e:	028a      	lsls	r2, r1, #10
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001798:	2200      	movs	r2, #0
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
 800179c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800179e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017a2:	f7fe fdd5 	bl	8000350 <__aeabi_uldivmod>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4613      	mov	r3, r2
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	0f1b      	lsrs	r3, r3, #28
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ce:	e003      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	37b8      	adds	r7, #184	; 0xb8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	00f42400 	.word	0x00f42400

080017f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e28d      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8083 	beq.w	8001916 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001810:	4b94      	ldr	r3, [pc, #592]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d019      	beq.n	8001850 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800181c:	4b91      	ldr	r3, [pc, #580]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001824:	2b08      	cmp	r3, #8
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001828:	4b8e      	ldr	r3, [pc, #568]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001834:	d00c      	beq.n	8001850 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d112      	bne.n	8001868 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d05b      	beq.n	8001914 <HAL_RCC_OscConfig+0x124>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d157      	bne.n	8001914 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e25a      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x90>
 8001872:	4b7c      	ldr	r3, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7b      	ldr	r2, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0xcc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0xb4>
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a75      	ldr	r2, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b73      	ldr	r3, [pc, #460]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a72      	ldr	r2, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0xcc>
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6b      	ldr	r2, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f990 	bl	8000be8 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f98c 	bl	8000be8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e21f      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b61      	ldr	r3, [pc, #388]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0xdc>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f97c 	bl	8000be8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f978 	bl	8000be8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e20b      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x104>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06f      	beq.n	8001a02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001922:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d017      	beq.n	800195e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192e:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001936:	2b08      	cmp	r3, #8
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x186>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1d3      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e03a      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_RCC_OscConfig+0x278>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff f925 	bl	8000be8 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f921 	bl	8000be8 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1b4      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4925      	ldr	r1, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x278>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f904 	bl	8000be8 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff f900 	bl	8000be8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e193      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d036      	beq.n	8001a7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d016      	beq.n	8001a44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_RCC_OscConfig+0x27c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f8e4 	bl	8000be8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f8e0 	bl	8000be8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e173      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x234>
 8001a42:	e01b      	b.n	8001a7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_OscConfig+0x27c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f8cd 	bl	8000be8 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	e00e      	b.n	8001a70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff f8c9 	bl	8000be8 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d907      	bls.n	8001a70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e15c      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	42470000 	.word	0x42470000
 8001a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b8a      	ldr	r3, [pc, #552]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ea      	bne.n	8001a52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8097 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b83      	ldr	r3, [pc, #524]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b79      	ldr	r3, [pc, #484]	; (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a75      	ldr	r2, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f889 	bl	8000be8 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff f885 	bl	8000be8 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e118      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x31e>
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0c:	e01c      	b.n	8001b48 <HAL_RCC_OscConfig+0x358>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x340>
 8001b16:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a60      	ldr	r2, [pc, #384]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0x358>
 8001b30:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	4a59      	ldr	r2, [pc, #356]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	f023 0304 	bic.w	r3, r3, #4
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d015      	beq.n	8001b7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f84a 	bl	8000be8 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff f846 	bl	8000be8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0d7      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0ee      	beq.n	8001b58 <HAL_RCC_OscConfig+0x368>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f834 	bl	8000be8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff f830 	bl	8000be8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0c1      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9a:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ee      	bne.n	8001b84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80ad 	beq.w	8001d1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d060      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d145      	bne.n	8001c62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_RCC_OscConfig+0x4b4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f804 	bl	8000be8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f800 	bl	8000be8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e093      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	019b      	lsls	r3, r3, #6
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	071b      	lsls	r3, r3, #28
 8001c2e:	491b      	ldr	r1, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x4b4>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7fe ffd5 	bl	8000be8 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7fe ffd1 	bl	8000be8 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e064      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x452>
 8001c60:	e05c      	b.n	8001d1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_RCC_OscConfig+0x4b4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe ffbe 	bl	8000be8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe ffba 	bl	8000be8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04d      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x480>
 8001c8e:	e045      	b.n	8001d1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e040      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x538>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d030      	beq.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d129      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d122      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d119      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e041      	b.n	8001dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f839 	bl	8001dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 f9d8 	bl	8002120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e04e      	b.n	8001e96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d01d      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_TIM_Base_Start_IT+0xcc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d010      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40001800 	.word	0x40001800

08001ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d122      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d11b      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0202 	mvn.w	r2, #2
 8001eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8ee 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8e0 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8f1 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0204 	mvn.w	r2, #4
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8c4 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8b6 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8c7 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0208 	mvn.w	r2, #8
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f89a 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f88c 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f89d 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2208      	movs	r2, #8
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f870 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f862 	bl	80020d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f873 	bl	80020f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0201 	mvn.w	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fc84 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f902 	bl	8002274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f838 	bl	800210c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0220 	mvn.w	r2, #32
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8cc 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <TIM_Base_SetConfig+0x114>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213e:	d00f      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <TIM_Base_SetConfig+0x118>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00b      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <TIM_Base_SetConfig+0x11c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d007      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <TIM_Base_SetConfig+0x120>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <TIM_Base_SetConfig+0x124>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <TIM_Base_SetConfig+0x114>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d027      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2c      	ldr	r2, [pc, #176]	; (8002238 <TIM_Base_SetConfig+0x118>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d023      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2b      	ldr	r2, [pc, #172]	; (800223c <TIM_Base_SetConfig+0x11c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <TIM_Base_SetConfig+0x120>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a29      	ldr	r2, [pc, #164]	; (8002244 <TIM_Base_SetConfig+0x124>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d017      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <TIM_Base_SetConfig+0x128>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <TIM_Base_SetConfig+0x12c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <TIM_Base_SetConfig+0x130>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <TIM_Base_SetConfig+0x134>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <TIM_Base_SetConfig+0x138>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a23      	ldr	r2, [pc, #140]	; (800225c <TIM_Base_SetConfig+0x13c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <TIM_Base_SetConfig+0x114>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_Base_SetConfig+0xf8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <TIM_Base_SetConfig+0x124>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010000 	.word	0x40010000
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	40010400 	.word	0x40010400
 8002248:	40014000 	.word	0x40014000
 800224c:	40014400 	.word	0x40014400
 8002250:	40014800 	.word	0x40014800
 8002254:	40001800 	.word	0x40001800
 8002258:	40001c00 	.word	0x40001c00
 800225c:	40002000 	.word	0x40002000

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 0208 	add.w	r2, r3, #8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0208 	add.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f8:	d103      	bne.n	8002302 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e00c      	b.n	800231c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3308      	adds	r3, #8
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e002      	b.n	8002310 <vListInsert+0x2e>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	d2f6      	bcs.n	800230a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6892      	ldr	r2, [r2, #8]
 800236a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6852      	ldr	r2, [r2, #4]
 8002374:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d103      	bne.n	8002388 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023b2:	2301      	movs	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <xQueueGenericReset+0x2e>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	60fb      	str	r3, [r7, #12]
    }
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d052      	beq.n	8002482 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d04e      	beq.n	8002482 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	2100      	movs	r1, #0
 80023ee:	fba3 2302 	umull	r2, r3, r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d000      	beq.n	80023f8 <xQueueGenericReset+0x50>
 80023f6:	2101      	movs	r1, #1
 80023f8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d141      	bne.n	8002482 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80023fe:	f001 fe91 	bl	8004124 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	441a      	add	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2200      	movs	r2, #0
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	3b01      	subs	r3, #1
 8002430:	6939      	ldr	r1, [r7, #16]
 8002432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	441a      	add	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	22ff      	movs	r2, #255	; 0xff
 8002442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00f      	beq.n	800247c <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3310      	adds	r3, #16
 8002460:	4618      	mov	r0, r3
 8002462:	f000 ff85 	bl	8003370 <xTaskRemoveFromEventList>
 8002466:	e009      	b.n	800247c <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3310      	adds	r3, #16
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff0b 	bl	8002288 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	3324      	adds	r3, #36	; 0x24
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff06 	bl	8002288 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800247c:	f001 fe82 	bl	8004184 <vPortExitCritical>
 8002480:	e001      	b.n	8002486 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xQueueGenericReset+0xfa>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	60bb      	str	r3, [r7, #8]
    }
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024a2:	697b      	ldr	r3, [r7, #20]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02e      	beq.n	8002522 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024c4:	2100      	movs	r1, #0
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	fba3 2302 	umull	r2, r3, r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d000      	beq.n	80024d4 <xQueueGenericCreate+0x28>
 80024d2:	2101      	movs	r1, #1
 80024d4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d123      	bne.n	8002522 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024e2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024e6:	d81c      	bhi.n	8002522 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	3350      	adds	r3, #80	; 0x50
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 ff40 	bl	800437c <pvPortMalloc>
 80024fc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01c      	beq.n	800253e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3350      	adds	r3, #80	; 0x50
 800250c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f814 	bl	8002548 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002520:	e00d      	b.n	800253e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueGenericCreate+0x92>
        __asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	613b      	str	r3, [r7, #16]
    }
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800253e:	69fb      	ldr	r3, [r7, #28]
    }
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e002      	b.n	800256a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002576:	2101      	movs	r1, #1
 8002578:	69b8      	ldr	r0, [r7, #24]
 800257a:	f7ff ff15 	bl	80023a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	2073      	movs	r0, #115	; 0x73
 800258e:	f003 faff 	bl	8005b90 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b08f      	sub	sp, #60	; 0x3c
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <xQueueReceive+0x30>
        __asm volatile
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	623b      	str	r3, [r7, #32]
    }
 80025c8:	bf00      	nop
 80025ca:	e7fe      	b.n	80025ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <xQueueReceive+0x3e>
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <xQueueReceive+0x42>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <xQueueReceive+0x44>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueReceive+0x5e>
        __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	61fb      	str	r3, [r7, #28]
    }
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025fa:	f001 f8c5 	bl	8003788 <xTaskGetSchedulerState>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <xQueueReceive+0x6e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <xQueueReceive+0x72>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueReceive+0x74>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <xQueueReceive+0x8e>
        __asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	61bb      	str	r3, [r7, #24]
    }
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800262a:	f001 fd7b 	bl	8004124 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d024      	beq.n	8002684 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263e:	f000 f8b3 	bl	80027a8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	4618      	mov	r0, r3
 8002646:	f003 ffcf 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 800264a:	4604      	mov	r4, r0
 800264c:	2000      	movs	r0, #0
 800264e:	f003 ffcb 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2101      	movs	r1, #1
 8002658:	9100      	str	r1, [sp, #0]
 800265a:	4621      	mov	r1, r4
 800265c:	205c      	movs	r0, #92	; 0x5c
 800265e:	f003 fb0d 	bl	8005c7c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	3310      	adds	r3, #16
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fe7a 	bl	8003370 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800267c:	f001 fd82 	bl	8004184 <vPortExitCritical>
                return pdPASS;
 8002680:	2301      	movs	r3, #1
 8002682:	e08a      	b.n	800279a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d113      	bne.n	80026b2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800268a:	f001 fd7b 	bl	8004184 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	4618      	mov	r0, r3
 8002692:	f003 ffa9 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 8002696:	4604      	mov	r4, r0
 8002698:	2000      	movs	r0, #0
 800269a:	f003 ffa5 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2101      	movs	r1, #1
 80026a4:	9100      	str	r1, [sp, #0]
 80026a6:	4621      	mov	r1, r4
 80026a8:	205c      	movs	r0, #92	; 0x5c
 80026aa:	f003 fae7 	bl	8005c7c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e073      	b.n	800279a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 ff2f 	bl	8003520 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026c6:	f001 fd5d 	bl	8004184 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026ca:	f000 fb61 	bl	8002d90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026ce:	f001 fd29 	bl	8004124 <vPortEnterCritical>
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026de:	d103      	bne.n	80026e8 <xQueueReceive+0x14c>
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f4:	d103      	bne.n	80026fe <xQueueReceive+0x162>
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026fe:	f001 fd41 	bl	8004184 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002702:	1d3a      	adds	r2, r7, #4
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f000 ff1e 	bl	800354c <xTaskCheckForTimeOut>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d124      	bne.n	8002760 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002718:	f000 f8be 	bl	8002898 <prvIsQueueEmpty>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d018      	beq.n	8002754 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	3324      	adds	r3, #36	; 0x24
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fdb4 	bl	8003298 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002732:	f000 f85f 	bl	80027f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002736:	f000 fb39 	bl	8002dac <xTaskResumeAll>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	f47f af74 	bne.w	800262a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <xQueueReceive+0x208>)
 8002744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	e76a      	b.n	800262a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002756:	f000 f84d 	bl	80027f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800275a:	f000 fb27 	bl	8002dac <xTaskResumeAll>
 800275e:	e764      	b.n	800262a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002762:	f000 f847 	bl	80027f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002766:	f000 fb21 	bl	8002dac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800276a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276c:	f000 f894 	bl	8002898 <prvIsQueueEmpty>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f43f af59 	beq.w	800262a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	4618      	mov	r0, r3
 800277c:	f003 ff34 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 8002780:	4604      	mov	r4, r0
 8002782:	2000      	movs	r0, #0
 8002784:	f003 ff30 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 8002788:	4602      	mov	r2, r0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2101      	movs	r1, #1
 800278e:	9100      	str	r1, [sp, #0]
 8002790:	4621      	mov	r1, r4
 8002792:	205c      	movs	r0, #92	; 0x5c
 8002794:	f003 fa72 	bl	8005c7c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002798:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800279a:	4618      	mov	r0, r3
 800279c:	3734      	adds	r7, #52	; 0x34
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000ed04 	.word	0xe000ed04

080027a8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d018      	beq.n	80027ec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	441a      	add	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d303      	bcc.n	80027dc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68d9      	ldr	r1, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	461a      	mov	r2, r3
 80027e6:	6838      	ldr	r0, [r7, #0]
 80027e8:	f004 f8d6 	bl	8006998 <memcpy>
    }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027fc:	f001 fc92 	bl	8004124 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002806:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002808:	e011      	b.n	800282e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fdaa 	bl	8003370 <xTaskRemoveFromEventList>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002822:	f000 fef9 	bl	8003618 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3b01      	subs	r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	dce9      	bgt.n	800280a <prvUnlockQueue+0x16>
 8002836:	e000      	b.n	800283a <prvUnlockQueue+0x46>
                    break;
 8002838:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002842:	f001 fc9f 	bl	8004184 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002846:	f001 fc6d 	bl	8004124 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002850:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002852:	e011      	b.n	8002878 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3310      	adds	r3, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fd85 	bl	8003370 <xTaskRemoveFromEventList>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800286c:	f000 fed4 	bl	8003618 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	3b01      	subs	r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800287c:	2b00      	cmp	r3, #0
 800287e:	dce9      	bgt.n	8002854 <prvUnlockQueue+0x60>
 8002880:	e000      	b.n	8002884 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002882:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	22ff      	movs	r2, #255	; 0xff
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800288c:	f001 fc7a 	bl	8004184 <vPortExitCritical>
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028a0:	f001 fc40 	bl	8004124 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e001      	b.n	80028b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028b6:	f001 fc65 	bl	8004184 <vPortExitCritical>

    return xReturn;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <vQueueAddToRegistry+0x2a>
        __asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	60fb      	str	r3, [r7, #12]
    }
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d024      	beq.n	800293e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e01e      	b.n	8002938 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028fa:	4a1c      	ldr	r2, [pc, #112]	; (800296c <vQueueAddToRegistry+0xa8>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d105      	bne.n	8002916 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <vQueueAddToRegistry+0xa8>)
 8002910:	4413      	add	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
                    break;
 8002914:	e013      	b.n	800293e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <vQueueAddToRegistry+0x6e>
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <vQueueAddToRegistry+0xa8>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4a0f      	ldr	r2, [pc, #60]	; (800296c <vQueueAddToRegistry+0xa8>)
 800292e:	4413      	add	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b07      	cmp	r3, #7
 800293c:	d9dd      	bls.n	80028fa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00f      	beq.n	8002964 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	f003 fe48 	bl	80065e8 <SEGGER_SYSVIEW_ShrinkId>
 8002958:	4601      	mov	r1, r0
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	2071      	movs	r0, #113	; 0x71
 8002960:	f003 f8bc 	bl	8005adc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200000cc 	.word	0x200000cc

08002970 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002980:	f001 fbd0 	bl	8004124 <vPortEnterCritical>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800298a:	b25b      	sxtb	r3, r3
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002990:	d103      	bne.n	800299a <vQueueWaitForMessageRestricted+0x2a>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a6:	d103      	bne.n	80029b0 <vQueueWaitForMessageRestricted+0x40>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029b0:	f001 fbe8 	bl	8004184 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3324      	adds	r3, #36	; 0x24
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fc8b 	bl	80032e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff12 	bl	80027f4 <prvUnlockQueue>
    }
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af04      	add	r7, sp, #16
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 fcc5 	bl	800437c <pvPortMalloc>
 80029f2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d013      	beq.n	8002a22 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029fa:	2058      	movs	r0, #88	; 0x58
 80029fc:	f001 fcbe 	bl	800437c <pvPortMalloc>
 8002a00:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a08:	2258      	movs	r2, #88	; 0x58
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	69f8      	ldr	r0, [r7, #28]
 8002a0e:	f003 ff95 	bl	800693c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
 8002a18:	e005      	b.n	8002a26 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f001 fd68 	bl	80044f0 <vPortFree>
 8002a20:	e001      	b.n	8002a26 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a2c:	88fa      	ldrh	r2, [r7, #6]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9303      	str	r3, [sp, #12]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	9302      	str	r3, [sp, #8]
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f80e 	bl	8002a64 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a48:	69f8      	ldr	r0, [r7, #28]
 8002a4a:	f000 f899 	bl	8002b80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	e002      	b.n	8002a5a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a58:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
    }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	21a5      	movs	r1, #165	; 0xa5
 8002a7e:	f003 ff5d 	bl	800693c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f023 0307 	bic.w	r3, r3, #7
 8002a9a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <prvInitialiseNewTask+0x58>
        __asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	617b      	str	r3, [r7, #20]
    }
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01e      	beq.n	8002b00 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e012      	b.n	8002aee <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	7819      	ldrb	r1, [r3, #0]
 8002ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3334      	adds	r3, #52	; 0x34
 8002ad8:	460a      	mov	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	d9e9      	bls.n	8002ac8 <prvInitialiseNewTask+0x64>
 8002af4:	e000      	b.n	8002af8 <prvInitialiseNewTask+0x94>
            {
                break;
 8002af6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d90a      	bls.n	8002b1c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	613b      	str	r3, [r7, #16]
    }
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d901      	bls.n	8002b26 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b22:	2304      	movs	r3, #4
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b30:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	3304      	adds	r3, #4
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fbc6 	bl	80022c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	3318      	adds	r3, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fbc1 	bl	80022c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	f1c3 0205 	rsb	r2, r3, #5
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	69b8      	ldr	r0, [r7, #24]
 8002b62:	f001 f933 	bl	8003dcc <pxPortInitialiseStack>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b78:	bf00      	nop
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b80:	b5b0      	push	{r4, r5, r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b88:	f001 facc 	bl	8004124 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <prvAddNewTaskToReadyList+0x134>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	4a48      	ldr	r2, [pc, #288]	; (8002cb4 <prvAddNewTaskToReadyList+0x134>)
 8002b94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <prvAddNewTaskToReadyList+0x138>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b9e:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <prvAddNewTaskToReadyList+0x138>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <prvAddNewTaskToReadyList+0x134>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d110      	bne.n	8002bce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002bac:	f000 fd52 	bl	8003654 <prvInitialiseTaskLists>
 8002bb0:	e00d      	b.n	8002bce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bb2:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <prvAddNewTaskToReadyList+0x13c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <prvAddNewTaskToReadyList+0x138>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d802      	bhi.n	8002bce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <prvAddNewTaskToReadyList+0x138>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bce:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <prvAddNewTaskToReadyList+0x140>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <prvAddNewTaskToReadyList+0x140>)
 8002bd6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bd8:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <prvAddNewTaskToReadyList+0x140>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <prvAddNewTaskToReadyList+0x94>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fc37 	bl	800645c <SEGGER_SYSVIEW_OnTaskCreate>
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	461d      	mov	r5, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461c      	mov	r4, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	1ae3      	subs	r3, r4, r3
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	462b      	mov	r3, r5
 8002c10:	f001 fe30 	bl	8004874 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fca4 	bl	8006564 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2201      	movs	r2, #1
 8002c22:	409a      	lsls	r2, r3
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <prvAddNewTaskToReadyList+0x144>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <prvAddNewTaskToReadyList+0x144>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	4925      	ldr	r1, [pc, #148]	; (8002cc8 <prvAddNewTaskToReadyList+0x148>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3304      	adds	r3, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	3204      	adds	r2, #4
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <prvAddNewTaskToReadyList+0x148>)
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	615a      	str	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	4912      	ldr	r1, [pc, #72]	; (8002cc8 <prvAddNewTaskToReadyList+0x148>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c59      	adds	r1, r3, #1
 8002c8c:	480e      	ldr	r0, [pc, #56]	; (8002cc8 <prvAddNewTaskToReadyList+0x148>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4403      	add	r3, r0
 8002c98:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c9a:	f001 fa73 	bl	8004184 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <prvAddNewTaskToReadyList+0x13c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <prvAddNewTaskToReadyList+0x138>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200001e4 	.word	0x200001e4
 8002cb8:	2000010c 	.word	0x2000010c
 8002cbc:	200001f0 	.word	0x200001f0
 8002cc0:	20000200 	.word	0x20000200
 8002cc4:	200001ec 	.word	0x200001ec
 8002cc8:	20000110 	.word	0x20000110

08002ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <vTaskStartScheduler+0xa4>)
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2282      	movs	r2, #130	; 0x82
 8002cde:	4925      	ldr	r1, [pc, #148]	; (8002d74 <vTaskStartScheduler+0xa8>)
 8002ce0:	4825      	ldr	r0, [pc, #148]	; (8002d78 <vTaskStartScheduler+0xac>)
 8002ce2:	f7ff fe79 	bl	80029d8 <xTaskCreate>
 8002ce6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002cee:	f000 fde9 	bl	80038c4 <xTimerCreateTimerTask>
 8002cf2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d124      	bne.n	8002d44 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	60bb      	str	r3, [r7, #8]
    }
 8002d0c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <vTaskStartScheduler+0xb0>)
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <vTaskStartScheduler+0xb4>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <vTaskStartScheduler+0xb8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <vTaskStartScheduler+0xbc>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <vTaskStartScheduler+0xa4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d102      	bne.n	8002d34 <vTaskStartScheduler+0x68>
 8002d2e:	f003 fb79 	bl	8006424 <SEGGER_SYSVIEW_OnIdle>
 8002d32:	e004      	b.n	8002d3e <vTaskStartScheduler+0x72>
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <vTaskStartScheduler+0xbc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fbd1 	bl	80064e0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d3e:	f001 f8d1 	bl	8003ee4 <xPortStartScheduler>
 8002d42:	e00e      	b.n	8002d62 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d10a      	bne.n	8002d62 <vTaskStartScheduler+0x96>
        __asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	607b      	str	r3, [r7, #4]
    }
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <vTaskStartScheduler+0xc0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000208 	.word	0x20000208
 8002d74:	080072b0 	.word	0x080072b0
 8002d78:	08003631 	.word	0x08003631
 8002d7c:	20000204 	.word	0x20000204
 8002d80:	200001f0 	.word	0x200001f0
 8002d84:	200001e8 	.word	0x200001e8
 8002d88:	2000010c 	.word	0x2000010c
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <vTaskSuspendAll+0x18>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <vTaskSuspendAll+0x18>)
 8002d9c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	2000020c 	.word	0x2000020c

08002dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <xTaskResumeAll+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	607b      	str	r3, [r7, #4]
    }
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002dd8:	f001 f9a4 	bl	8004124 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ddc:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <xTaskResumeAll+0x1c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	4a63      	ldr	r2, [pc, #396]	; (8002f70 <xTaskResumeAll+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de6:	4b62      	ldr	r3, [pc, #392]	; (8002f70 <xTaskResumeAll+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 80b8 	bne.w	8002f60 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002df0:	4b60      	ldr	r3, [pc, #384]	; (8002f74 <xTaskResumeAll+0x1c8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80b3 	beq.w	8002f60 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dfa:	e08e      	b.n	8002f1a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <xTaskResumeAll+0x1cc>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	6a12      	ldr	r2, [r2, #32]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	69d2      	ldr	r2, [r2, #28]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3318      	adds	r3, #24
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d103      	bne.n	8002e32 <xTaskResumeAll+0x86>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	68d2      	ldr	r2, [r2, #12]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3304      	adds	r3, #4
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d103      	bne.n	8002e70 <xTaskResumeAll+0xc4>
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 fb6e 	bl	8006564 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <xTaskResumeAll+0x1d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	4a39      	ldr	r2, [pc, #228]	; (8002f7c <xTaskResumeAll+0x1d0>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	4938      	ldr	r1, [pc, #224]	; (8002f80 <xTaskResumeAll+0x1d4>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3304      	adds	r3, #4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	3204      	adds	r2, #4
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <xTaskResumeAll+0x1d4>)
 8002ede:	441a      	add	r2, r3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	4925      	ldr	r1, [pc, #148]	; (8002f80 <xTaskResumeAll+0x1d4>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	4821      	ldr	r0, [pc, #132]	; (8002f80 <xTaskResumeAll+0x1d4>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4403      	add	r3, r0
 8002f04:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <xTaskResumeAll+0x1d8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <xTaskResumeAll+0x1dc>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <xTaskResumeAll+0x1cc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f47f af6c 	bne.w	8002dfc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f2a:	f000 fc11 	bl	8003750 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f2e:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <xTaskResumeAll+0x1e0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f3a:	f000 f84b 	bl	8002fd4 <xTaskIncrementTick>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <xTaskResumeAll+0x1dc>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f1      	bne.n	8002f3a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <xTaskResumeAll+0x1e0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <xTaskResumeAll+0x1dc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f60:	f001 f910 	bl	8004184 <vPortExitCritical>

    return xAlreadyYielded;
 8002f64:	697b      	ldr	r3, [r7, #20]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	2000020c 	.word	0x2000020c
 8002f74:	200001e4 	.word	0x200001e4
 8002f78:	200001a4 	.word	0x200001a4
 8002f7c:	200001ec 	.word	0x200001ec
 8002f80:	20000110 	.word	0x20000110
 8002f84:	2000010c 	.word	0x2000010c
 8002f88:	200001f8 	.word	0x200001f8
 8002f8c:	200001f4 	.word	0x200001f4

08002f90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <xTaskGetTickCount+0x1c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f9c:	687b      	ldr	r3, [r7, #4]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200001e8 	.word	0x200001e8

08002fb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fb6:	f001 f9a1 	bl	80042fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <xTaskGetTickCountFromISR+0x20>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fc4:	683b      	ldr	r3, [r7, #0]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200001e8 	.word	0x200001e8

08002fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fde:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <xTaskIncrementTick+0x1cc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 80d1 	bne.w	800318a <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fe8:	4b6e      	ldr	r3, [pc, #440]	; (80031a4 <xTaskIncrementTick+0x1d0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ff0:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <xTaskIncrementTick+0x1d0>)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d120      	bne.n	800303e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	; (80031a8 <xTaskIncrementTick+0x1d4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <xTaskIncrementTick+0x48>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	607b      	str	r3, [r7, #4]
    }
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <xTaskIncrementTick+0x46>
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <xTaskIncrementTick+0x1d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	4b62      	ldr	r3, [pc, #392]	; (80031ac <xTaskIncrementTick+0x1d8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a60      	ldr	r2, [pc, #384]	; (80031a8 <xTaskIncrementTick+0x1d4>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4a60      	ldr	r2, [pc, #384]	; (80031ac <xTaskIncrementTick+0x1d8>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <xTaskIncrementTick+0x1dc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <xTaskIncrementTick+0x1dc>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	f000 fb89 	bl	8003750 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800303e:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <xTaskIncrementTick+0x1e0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	429a      	cmp	r2, r3
 8003046:	f0c0 80a5 	bcc.w	8003194 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800304a:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <xTaskIncrementTick+0x1d4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003054:	4b57      	ldr	r3, [pc, #348]	; (80031b4 <xTaskIncrementTick+0x1e0>)
 8003056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800305a:	601a      	str	r2, [r3, #0]
                    break;
 800305c:	e09a      	b.n	8003194 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800305e:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <xTaskIncrementTick+0x1d4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	429a      	cmp	r2, r3
 8003074:	d203      	bcs.n	800307e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003076:	4a4f      	ldr	r2, [pc, #316]	; (80031b4 <xTaskIncrementTick+0x1e0>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800307c:	e08a      	b.n	8003194 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	68d2      	ldr	r2, [r2, #12]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	3304      	adds	r3, #4
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d103      	bne.n	80030ac <xTaskIncrementTick+0xd8>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1e5a      	subs	r2, r3, #1
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01e      	beq.n	8003102 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	6a12      	ldr	r2, [r2, #32]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	69d2      	ldr	r2, [r2, #28]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	3318      	adds	r3, #24
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d103      	bne.n	80030f2 <xTaskIncrementTick+0x11e>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4618      	mov	r0, r3
 8003106:	f003 fa2d 	bl	8006564 <SEGGER_SYSVIEW_OnTaskStartReady>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <xTaskIncrementTick+0x1e4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <xTaskIncrementTick+0x1e4>)
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4926      	ldr	r1, [pc, #152]	; (80031bc <xTaskIncrementTick+0x1e8>)
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3304      	adds	r3, #4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	3204      	adds	r2, #4
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1d1a      	adds	r2, r3, #4
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <xTaskIncrementTick+0x1e8>)
 8003160:	441a      	add	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	615a      	str	r2, [r3, #20]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	4914      	ldr	r1, [pc, #80]	; (80031bc <xTaskIncrementTick+0x1e8>)
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1c59      	adds	r1, r3, #1
 800317a:	4810      	ldr	r0, [pc, #64]	; (80031bc <xTaskIncrementTick+0x1e8>)
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4403      	add	r3, r0
 8003186:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003188:	e75f      	b.n	800304a <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <xTaskIncrementTick+0x1ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <xTaskIncrementTick+0x1ec>)
 8003192:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003196:	4618      	mov	r0, r3
 8003198:	3728      	adds	r7, #40	; 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000020c 	.word	0x2000020c
 80031a4:	200001e8 	.word	0x200001e8
 80031a8:	2000019c 	.word	0x2000019c
 80031ac:	200001a0 	.word	0x200001a0
 80031b0:	200001fc 	.word	0x200001fc
 80031b4:	20000204 	.word	0x20000204
 80031b8:	200001ec 	.word	0x200001ec
 80031bc:	20000110 	.word	0x20000110
 80031c0:	200001f4 	.word	0x200001f4

080031c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <vTaskSwitchContext+0xbc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <vTaskSwitchContext+0xc0>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80031d8:	e04d      	b.n	8003276 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <vTaskSwitchContext+0xc0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <vTaskSwitchContext+0xc4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f1c3 031f 	rsb	r3, r3, #31
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	4925      	ldr	r1, [pc, #148]	; (800328c <vTaskSwitchContext+0xc8>)
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <vTaskSwitchContext+0x5c>
        __asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	607b      	str	r3, [r7, #4]
    }
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <vTaskSwitchContext+0x5a>
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <vTaskSwitchContext+0xc8>)
 800322c:	4413      	add	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3308      	adds	r3, #8
 8003242:	429a      	cmp	r2, r3
 8003244:	d104      	bne.n	8003250 <vTaskSwitchContext+0x8c>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <vTaskSwitchContext+0xcc>)
 8003258:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <vTaskSwitchContext+0xcc>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <vTaskSwitchContext+0xd0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d102      	bne.n	800326c <vTaskSwitchContext+0xa8>
 8003266:	f003 f8dd 	bl	8006424 <SEGGER_SYSVIEW_OnIdle>
}
 800326a:	e004      	b.n	8003276 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <vTaskSwitchContext+0xcc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 f935 	bl	80064e0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000020c 	.word	0x2000020c
 8003284:	200001f8 	.word	0x200001f8
 8003288:	200001ec 	.word	0x200001ec
 800328c:	20000110 	.word	0x20000110
 8003290:	2000010c 	.word	0x2000010c
 8003294:	20000208 	.word	0x20000208

08003298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	60fb      	str	r3, [r7, #12]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <vTaskPlaceOnEventList+0x44>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3318      	adds	r3, #24
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff f80b 	bl	80022e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032cc:	2101      	movs	r1, #1
 80032ce:	6838      	ldr	r0, [r7, #0]
 80032d0:	f000 fa78 	bl	80037c4 <prvAddCurrentTaskToDelayedList>
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	2000010c 	.word	0x2000010c

080032e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	613b      	str	r3, [r7, #16]
    }
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	61da      	str	r2, [r3, #28]
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6892      	ldr	r2, [r2, #8]
 800331e:	621a      	str	r2, [r3, #32]
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	3218      	adds	r2, #24
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <vTaskPlaceOnEventListRestricted+0x8c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f103 0218 	add.w	r2, r3, #24
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <vTaskPlaceOnEventListRestricted+0x8c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003354:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003356:	2024      	movs	r0, #36	; 0x24
 8003358:	f002 fb66 	bl	8005a28 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68b8      	ldr	r0, [r7, #8]
 8003360:	f000 fa30 	bl	80037c4 <prvAddCurrentTaskToDelayedList>
    }
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	2000010c 	.word	0x2000010c

08003370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60fb      	str	r3, [r7, #12]
    }
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	6a12      	ldr	r2, [r2, #32]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	69d2      	ldr	r2, [r2, #28]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	3318      	adds	r3, #24
 80033be:	429a      	cmp	r2, r3
 80033c0:	d103      	bne.n	80033ca <xTaskRemoveFromEventList+0x5a>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033da:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <xTaskRemoveFromEventList+0x198>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d162      	bne.n	80034a8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	68d2      	ldr	r2, [r2, #12]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	6a3a      	ldr	r2, [r7, #32]
 80033f8:	6892      	ldr	r2, [r2, #8]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	3304      	adds	r3, #4
 8003404:	429a      	cmp	r2, r3
 8003406:	d103      	bne.n	8003410 <xTaskRemoveFromEventList+0xa0>
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1e5a      	subs	r2, r3, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	4618      	mov	r0, r3
 8003424:	f003 f89e 	bl	8006564 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2201      	movs	r2, #1
 800342e:	409a      	lsls	r2, r3
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <xTaskRemoveFromEventList+0x19c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	4a35      	ldr	r2, [pc, #212]	; (800350c <xTaskRemoveFromEventList+0x19c>)
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4934      	ldr	r1, [pc, #208]	; (8003510 <xTaskRemoveFromEventList+0x1a0>)
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3304      	adds	r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	3204      	adds	r2, #4
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	1d1a      	adds	r2, r3, #4
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4a24      	ldr	r2, [pc, #144]	; (8003510 <xTaskRemoveFromEventList+0x1a0>)
 800347e:	441a      	add	r2, r3
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	615a      	str	r2, [r3, #20]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4921      	ldr	r1, [pc, #132]	; (8003510 <xTaskRemoveFromEventList+0x1a0>)
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1c59      	adds	r1, r3, #1
 8003498:	481d      	ldr	r0, [pc, #116]	; (8003510 <xTaskRemoveFromEventList+0x1a0>)
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	6019      	str	r1, [r3, #0]
 80034a6:	e01b      	b.n	80034e0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <xTaskRemoveFromEventList+0x1a4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	61da      	str	r2, [r3, #28]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	621a      	str	r2, [r3, #32]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	3218      	adds	r2, #24
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f103 0218 	add.w	r2, r3, #24
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	4a10      	ldr	r2, [pc, #64]	; (8003514 <xTaskRemoveFromEventList+0x1a4>)
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <xTaskRemoveFromEventList+0x1a4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <xTaskRemoveFromEventList+0x1a4>)
 80034de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <xTaskRemoveFromEventList+0x1a8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d905      	bls.n	80034fa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <xTaskRemoveFromEventList+0x1ac>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e001      	b.n	80034fe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	2000020c 	.word	0x2000020c
 800350c:	200001ec 	.word	0x200001ec
 8003510:	20000110 	.word	0x20000110
 8003514:	200001a4 	.word	0x200001a4
 8003518:	2000010c 	.word	0x2000010c
 800351c:	200001f8 	.word	0x200001f8

08003520 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <vTaskInternalSetTimeOutState+0x24>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <vTaskInternalSetTimeOutState+0x28>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	200001fc 	.word	0x200001fc
 8003548:	200001e8 	.word	0x200001e8

0800354c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	613b      	str	r3, [r7, #16]
    }
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	60fb      	str	r3, [r7, #12]
    }
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800358e:	f000 fdc9 	bl	8004124 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003592:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <xTaskCheckForTimeOut+0xc4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035aa:	d102      	bne.n	80035b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e026      	b.n	8003600 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <xTaskCheckForTimeOut+0xc8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d00a      	beq.n	80035d4 <xTaskCheckForTimeOut+0x88>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d305      	bcc.n	80035d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e015      	b.n	8003600 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d20b      	bcs.n	80035f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1ad2      	subs	r2, r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff98 	bl	8003520 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e004      	b.n	8003600 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003600:	f000 fdc0 	bl	8004184 <vPortExitCritical>

    return xReturn;
 8003604:	69fb      	ldr	r3, [r7, #28]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200001e8 	.word	0x200001e8
 8003614:	200001fc 	.word	0x200001fc

08003618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <vTaskMissedYield+0x14>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	200001f8 	.word	0x200001f8

08003630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003638:	f000 f84c 	bl	80036d4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <prvIdleTask+0x20>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800364c:	e7f4      	b.n	8003638 <prvIdleTask+0x8>
 800364e:	bf00      	nop
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e00c      	b.n	800367a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <prvInitialiseTaskLists+0x60>)
 800366c:	4413      	add	r3, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fe0a 	bl	8002288 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3301      	adds	r3, #1
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d9ef      	bls.n	8003660 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <prvInitialiseTaskLists+0x64>)
 8003682:	f7fe fe01 	bl	8002288 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <prvInitialiseTaskLists+0x68>)
 8003688:	f7fe fdfe 	bl	8002288 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800368c:	480c      	ldr	r0, [pc, #48]	; (80036c0 <prvInitialiseTaskLists+0x6c>)
 800368e:	f7fe fdfb 	bl	8002288 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003692:	480c      	ldr	r0, [pc, #48]	; (80036c4 <prvInitialiseTaskLists+0x70>)
 8003694:	f7fe fdf8 	bl	8002288 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <prvInitialiseTaskLists+0x74>)
 800369a:	f7fe fdf5 	bl	8002288 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <prvInitialiseTaskLists+0x78>)
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <prvInitialiseTaskLists+0x64>)
 80036a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <prvInitialiseTaskLists+0x7c>)
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <prvInitialiseTaskLists+0x68>)
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000110 	.word	0x20000110
 80036b8:	20000174 	.word	0x20000174
 80036bc:	20000188 	.word	0x20000188
 80036c0:	200001a4 	.word	0x200001a4
 80036c4:	200001b8 	.word	0x200001b8
 80036c8:	200001d0 	.word	0x200001d0
 80036cc:	2000019c 	.word	0x2000019c
 80036d0:	200001a0 	.word	0x200001a0

080036d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036da:	e019      	b.n	8003710 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80036dc:	f000 fd22 	bl	8004124 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <prvCheckTasksWaitingTermination+0x50>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fe31 	bl	8002354 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 80036fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <prvCheckTasksWaitingTermination+0x58>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <prvCheckTasksWaitingTermination+0x58>)
 8003704:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003706:	f000 fd3d 	bl	8004184 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f810 	bl	8003730 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <prvCheckTasksWaitingTermination+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e1      	bne.n	80036dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200001b8 	.word	0x200001b8
 8003728:	200001e4 	.word	0x200001e4
 800372c:	200001cc 	.word	0x200001cc

08003730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fed7 	bl	80044f0 <vPortFree>
            vPortFree( pxTCB );
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fed4 	bl	80044f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <prvResetNextTaskUnblockTime+0x30>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <prvResetNextTaskUnblockTime+0x34>)
 8003760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003764:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003766:	e005      	b.n	8003774 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <prvResetNextTaskUnblockTime+0x30>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <prvResetNextTaskUnblockTime+0x34>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000019c 	.word	0x2000019c
 8003784:	20000204 	.word	0x20000204

08003788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <xTaskGetSchedulerState+0x34>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003796:	2301      	movs	r3, #1
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	e008      	b.n	80037ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <xTaskGetSchedulerState+0x38>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037a4:	2302      	movs	r3, #2
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e001      	b.n	80037ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037ae:	687b      	ldr	r3, [r7, #4]
    }
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	200001f0 	.word	0x200001f0
 80037c0:	2000020c 	.word	0x2000020c

080037c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fdba 	bl	8002354 <uxListRemove>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037e6:	4b31      	ldr	r3, [pc, #196]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4013      	ands	r3, r2
 80037fa:	4a2d      	ldr	r2, [pc, #180]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80037fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003804:	d124      	bne.n	8003850 <prvAddCurrentTaskToDelayedList+0x8c>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	4b21      	ldr	r3, [pc, #132]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	3204      	adds	r2, #4
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	1d1a      	adds	r2, r3, #4
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003840:	615a      	str	r2, [r3, #20]
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800384e:	e026      	b.n	800389e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d209      	bcs.n	800387c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe fd34 	bl	80022e2 <vListInsert>
}
 800387a:	e010      	b.n	800389e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <prvAddCurrentTaskToDelayedList+0xf8>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe fd2a 	bl	80022e2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d202      	bcs.n	800389e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003898:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6013      	str	r3, [r2, #0]
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200001e8 	.word	0x200001e8
 80038ac:	2000010c 	.word	0x2000010c
 80038b0:	200001ec 	.word	0x200001ec
 80038b4:	200001d0 	.word	0x200001d0
 80038b8:	200001a0 	.word	0x200001a0
 80038bc:	2000019c 	.word	0x2000019c
 80038c0:	20000204 	.word	0x20000204

080038c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80038ce:	f000 fa47 	bl	8003d60 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <xTimerCreateTimerTask+0x54>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <xTimerCreateTimerTask+0x58>)
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2302      	movs	r3, #2
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038e8:	490d      	ldr	r1, [pc, #52]	; (8003920 <xTimerCreateTimerTask+0x5c>)
 80038ea:	480e      	ldr	r0, [pc, #56]	; (8003924 <xTimerCreateTimerTask+0x60>)
 80038ec:	f7ff f874 	bl	80029d8 <xTaskCreate>
 80038f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	603b      	str	r3, [r7, #0]
    }
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800390e:	687b      	ldr	r3, [r7, #4]
    }
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000240 	.word	0x20000240
 800391c:	20000244 	.word	0x20000244
 8003920:	080072b8 	.word	0x080072b8
 8003924:	080039cd 	.word	0x080039cd

08003928 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003934:	e008      	b.n	8003948 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4413      	add	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	18d1      	adds	r1, r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f8dd 	bl	8003b14 <prvInsertTimerInActiveList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ea      	bne.n	8003936 <prvReloadTimer+0xe>
        }
    }
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <prvProcessExpiredTimer+0x5c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3304      	adds	r3, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fce5 	bl	8002354 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ffc3 	bl	8003928 <prvReloadTimer>
 80039a2:	e008      	b.n	80039b6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	4798      	blx	r3
    }
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000238 	.word	0x20000238

080039cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039d4:	f107 0308 	add.w	r3, r7, #8
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f857 	bl	8003a8c <prvGetNextExpireTime>
 80039de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4619      	mov	r1, r3
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f803 	bl	80039f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039ea:	f000 f8d5 	bl	8003b98 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ee:	e7f1      	b.n	80039d4 <prvTimerTask+0x8>

080039f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039fa:	f7ff f9c9 	bl	8002d90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f866 	bl	8003ad4 <prvSampleTimeNow>
 8003a08:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d130      	bne.n	8003a72 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <prvProcessTimerOrBlockTask+0x3c>
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d806      	bhi.n	8003a2c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a1e:	f7ff f9c5 	bl	8002dac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ffa1 	bl	800396c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a2a:	e024      	b.n	8003a76 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <prvProcessTimerOrBlockTask+0x90>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <prvProcessTimerOrBlockTask+0x50>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <prvProcessTimerOrBlockTask+0x52>
 8003a40:	2300      	movs	r3, #0
 8003a42:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <prvProcessTimerOrBlockTask+0x94>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f7fe ff8d 	bl	8002970 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a56:	f7ff f9a9 	bl	8002dac <xTaskResumeAll>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <prvProcessTimerOrBlockTask+0x98>)
 8003a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	f3bf 8f6f 	isb	sy
    }
 8003a70:	e001      	b.n	8003a76 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a72:	f7ff f99b 	bl	8002dac <xTaskResumeAll>
    }
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000023c 	.word	0x2000023c
 8003a84:	20000240 	.word	0x20000240
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <prvGetNextExpireTime+0x44>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <prvGetNextExpireTime+0x16>
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	e000      	b.n	8003aa4 <prvGetNextExpireTime+0x18>
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <prvGetNextExpireTime+0x44>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e001      	b.n	8003ac0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000238 	.word	0x20000238

08003ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003adc:	f7ff fa58 	bl	8002f90 <xTaskGetTickCount>
 8003ae0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <prvSampleTimeNow+0x3c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d205      	bcs.n	8003af8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003aec:	f000 f912 	bl	8003d14 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e002      	b.n	8003afe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <prvSampleTimeNow+0x3c>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b04:	68fb      	ldr	r3, [r7, #12]
    }
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000248 	.word	0x20000248

08003b14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d812      	bhi.n	8003b60 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d302      	bcc.n	8003b4e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e01b      	b.n	8003b86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <prvInsertTimerInActiveList+0x7c>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7fe fbc2 	bl	80022e2 <vListInsert>
 8003b5e:	e012      	b.n	8003b86 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d206      	bcs.n	8003b76 <prvInsertTimerInActiveList+0x62>
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e007      	b.n	8003b86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <prvInsertTimerInActiveList+0x80>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f7fe fbae 	bl	80022e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b86:	697b      	ldr	r3, [r7, #20]
    }
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	2000023c 	.word	0x2000023c
 8003b94:	20000238 	.word	0x20000238

08003b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b9e:	e0a6      	b.n	8003cee <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f2c0 80a3 	blt.w	8003cee <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe fbcb 	bl	8002354 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff87 	bl	8003ad4 <prvSampleTimeNow>
 8003bc6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 808d 	bhi.w	8003cec <prvProcessReceivedCommands+0x154>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <prvProcessReceivedCommands+0x40>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003bfd 	.word	0x08003bfd
 8003be0:	08003c65 	.word	0x08003c65
 8003be4:	08003c79 	.word	0x08003c79
 8003be8:	08003cc3 	.word	0x08003cc3
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003bfd 	.word	0x08003bfd
 8003bf4:	08003c65 	.word	0x08003c65
 8003bf8:	08003c79 	.word	0x08003c79
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	18d1      	adds	r1, r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	69f8      	ldr	r0, [r7, #28]
 8003c1c:	f7ff ff7a 	bl	8003b14 <prvInsertTimerInActiveList>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	69f8      	ldr	r0, [r7, #28]
 8003c42:	f7ff fe71 	bl	8003928 <prvReloadTimer>
 8003c46:	e008      	b.n	8003c5a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	69f8      	ldr	r0, [r7, #28]
 8003c60:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c62:	e044      	b.n	8003cee <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c76:	e03a      	b.n	8003cee <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	617b      	str	r3, [r7, #20]
    }
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	18d1      	adds	r1, r2, r3
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	69f8      	ldr	r0, [r7, #28]
 8003cbc:	f7ff ff2a 	bl	8003b14 <prvInsertTimerInActiveList>
                        break;
 8003cc0:	e015      	b.n	8003cee <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003cd0:	69f8      	ldr	r0, [r7, #28]
 8003cd2:	f000 fc0d 	bl	80044f0 <vPortFree>
 8003cd6:	e00a      	b.n	8003cee <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cea:	e000      	b.n	8003cee <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003cec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <prvProcessReceivedCommands+0x178>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f107 0108 	add.w	r1, r7, #8
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fc4f 	bl	800259c <xQueueReceive>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f af4d 	bne.w	8003ba0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000240 	.word	0x20000240

08003d14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d1a:	e009      	b.n	8003d30 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <prvSwitchTimerLists+0x44>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d2a:	6838      	ldr	r0, [r7, #0]
 8003d2c:	f7ff fe1e 	bl	800396c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <prvSwitchTimerLists+0x44>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <prvSwitchTimerLists+0x44>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <prvSwitchTimerLists+0x48>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <prvSwitchTimerLists+0x44>)
 8003d46:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <prvSwitchTimerLists+0x48>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6013      	str	r3, [r2, #0]
    }
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000238 	.word	0x20000238
 8003d5c:	2000023c 	.word	0x2000023c

08003d60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d64:	f000 f9de 	bl	8004124 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <prvCheckForValidListAndQueue+0x54>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11d      	bne.n	8003dac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d70:	4811      	ldr	r0, [pc, #68]	; (8003db8 <prvCheckForValidListAndQueue+0x58>)
 8003d72:	f7fe fa89 	bl	8002288 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d76:	4811      	ldr	r0, [pc, #68]	; (8003dbc <prvCheckForValidListAndQueue+0x5c>)
 8003d78:	f7fe fa86 	bl	8002288 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <prvCheckForValidListAndQueue+0x60>)
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <prvCheckForValidListAndQueue+0x58>)
 8003d80:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <prvCheckForValidListAndQueue+0x64>)
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <prvCheckForValidListAndQueue+0x5c>)
 8003d86:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d88:	2200      	movs	r2, #0
 8003d8a:	210c      	movs	r1, #12
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	f7fe fb8d 	bl	80024ac <xQueueGenericCreate>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <prvCheckForValidListAndQueue+0x54>)
 8003d96:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <prvCheckForValidListAndQueue+0x54>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <prvCheckForValidListAndQueue+0x54>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <prvCheckForValidListAndQueue+0x68>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fd8c 	bl	80028c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003dac:	f000 f9ea 	bl	8004184 <vPortExitCritical>
    }
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000240 	.word	0x20000240
 8003db8:	20000210 	.word	0x20000210
 8003dbc:	20000224 	.word	0x20000224
 8003dc0:	20000238 	.word	0x20000238
 8003dc4:	2000023c 	.word	0x2000023c
 8003dc8:	080072c0 	.word	0x080072c0

08003dcc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b04      	subs	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003de4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b04      	subs	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0201 	bic.w	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b04      	subs	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	; (8003e30 <pxPortInitialiseStack+0x64>)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b14      	subs	r3, #20
 8003e06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b04      	subs	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f06f 0202 	mvn.w	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b20      	subs	r3, #32
 8003e20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	08003e35 	.word	0x08003e35

08003e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <prvTaskExitError+0x54>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e46:	d00a      	beq.n	8003e5e <prvTaskExitError+0x2a>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
    }
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <prvTaskExitError+0x28>
        __asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	60bb      	str	r3, [r7, #8]
    }
 8003e70:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e72:	bf00      	nop
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0fc      	beq.n	8003e74 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e7a:	bf00      	nop
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000010 	.word	0x20000010
 8003e8c:	00000000 	.word	0x00000000

08003e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <pxCurrentTCBConst2>)
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	6808      	ldr	r0, [r1, #0]
 8003e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9a:	f380 8809 	msr	PSP, r0
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f380 8811 	msr	BASEPRI, r0
 8003eaa:	4770      	bx	lr
 8003eac:	f3af 8000 	nop.w

08003eb0 <pxCurrentTCBConst2>:
 8003eb0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop

08003eb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003eb8:	4808      	ldr	r0, [pc, #32]	; (8003edc <prvPortStartFirstTask+0x24>)
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	6800      	ldr	r0, [r0, #0]
 8003ebe:	f380 8808 	msr	MSP, r0
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f380 8814 	msr	CONTROL, r0
 8003eca:	b662      	cpsie	i
 8003ecc:	b661      	cpsie	f
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	df00      	svc	0
 8003ed8:	bf00      	nop
 8003eda:	0000      	.short	0x0000
 8003edc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop

08003ee4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eea:	4b46      	ldr	r3, [pc, #280]	; (8004004 <xPortStartScheduler+0x120>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a46      	ldr	r2, [pc, #280]	; (8004008 <xPortStartScheduler+0x124>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10a      	bne.n	8003f0a <xPortStartScheduler+0x26>
        __asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	613b      	str	r3, [r7, #16]
    }
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <xPortStartScheduler+0x120>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <xPortStartScheduler+0x128>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10a      	bne.n	8003f2a <xPortStartScheduler+0x46>
        __asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	60fb      	str	r3, [r7, #12]
    }
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f2a:	4b39      	ldr	r3, [pc, #228]	; (8004010 <xPortStartScheduler+0x12c>)
 8003f2c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <xPortStartScheduler+0x130>)
 8003f50:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <xPortStartScheduler+0x134>)
 8003f54:	2207      	movs	r2, #7
 8003f56:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f58:	e009      	b.n	8003f6e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <xPortStartScheduler+0x134>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	4a2d      	ldr	r2, [pc, #180]	; (8004018 <xPortStartScheduler+0x134>)
 8003f62:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d0ef      	beq.n	8003f5a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f7a:	4b27      	ldr	r3, [pc, #156]	; (8004018 <xPortStartScheduler+0x134>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d00a      	beq.n	8003f9c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
    }
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <xPortStartScheduler+0x134>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <xPortStartScheduler+0x134>)
 8003fa4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <xPortStartScheduler+0x134>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <xPortStartScheduler+0x134>)
 8003fb0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <xPortStartScheduler+0x138>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <xPortStartScheduler+0x138>)
 8003fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <xPortStartScheduler+0x138>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <xPortStartScheduler+0x138>)
 8003fcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003fd2:	f000 f963 	bl	800429c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <xPortStartScheduler+0x13c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003fdc:	f000 f982 	bl	80042e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <xPortStartScheduler+0x140>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <xPortStartScheduler+0x140>)
 8003fe6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003fec:	f7ff ff64 	bl	8003eb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ff0:	f7ff f8e8 	bl	80031c4 <vTaskSwitchContext>
    prvTaskExitError();
 8003ff4:	f7ff ff1e 	bl	8003e34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00
 8004008:	410fc271 	.word	0x410fc271
 800400c:	410fc270 	.word	0x410fc270
 8004010:	e000e400 	.word	0xe000e400
 8004014:	2000024c 	.word	0x2000024c
 8004018:	20000250 	.word	0x20000250
 800401c:	e000ed20 	.word	0xe000ed20
 8004020:	20000010 	.word	0x20000010
 8004024:	e000ef34 	.word	0xe000ef34

08004028 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <vInitPrioGroupValue+0xe4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a37      	ldr	r2, [pc, #220]	; (8004110 <vInitPrioGroupValue+0xe8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10a      	bne.n	800404e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	613b      	str	r3, [r7, #16]
    }
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800404e:	4b2f      	ldr	r3, [pc, #188]	; (800410c <vInitPrioGroupValue+0xe4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a30      	ldr	r2, [pc, #192]	; (8004114 <vInitPrioGroupValue+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10a      	bne.n	800406e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
    }
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <vInitPrioGroupValue+0xf0>)
 8004070:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	22ff      	movs	r2, #255	; 0xff
 800407e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <vInitPrioGroupValue+0xf4>)
 8004094:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <vInitPrioGroupValue+0xf8>)
 8004098:	2207      	movs	r2, #7
 800409a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800409c:	e009      	b.n	80040b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d0ef      	beq.n	800409e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d00a      	beq.n	80040e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	60bb      	str	r3, [r7, #8]
    }
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040f2:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <vInitPrioGroupValue+0xf8>)
 80040f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000ed00 	.word	0xe000ed00
 8004110:	410fc271 	.word	0x410fc271
 8004114:	410fc270 	.word	0x410fc270
 8004118:	e000e400 	.word	0xe000e400
 800411c:	2000024c 	.word	0x2000024c
 8004120:	20000250 	.word	0x20000250

08004124 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
        __asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	607b      	str	r3, [r7, #4]
    }
 800413c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <vPortEnterCritical+0x58>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	4a0d      	ldr	r2, [pc, #52]	; (800417c <vPortEnterCritical+0x58>)
 8004146:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <vPortEnterCritical+0x58>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d10f      	bne.n	8004170 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <vPortEnterCritical+0x5c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <vPortEnterCritical+0x4c>
        __asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	603b      	str	r3, [r7, #0]
    }
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <vPortEnterCritical+0x4a>
    }
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	20000010 	.word	0x20000010
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <vPortExitCritical+0x50>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <vPortExitCritical+0x24>
        __asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	607b      	str	r3, [r7, #4]
    }
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <vPortExitCritical+0x50>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <vPortExitCritical+0x50>)
 80041b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <vPortExitCritical+0x50>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <vPortExitCritical+0x42>
 80041ba:	2300      	movs	r3, #0
 80041bc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000010 	.word	0x20000010
	...

080041e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041e0:	f3ef 8009 	mrs	r0, PSP
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <pxCurrentTCBConst>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	f01e 0f10 	tst.w	lr, #16
 80041f0:	bf08      	it	eq
 80041f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	6010      	str	r0, [r2, #0]
 80041fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004204:	f380 8811 	msr	BASEPRI, r0
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f7fe ffd8 	bl	80031c4 <vTaskSwitchContext>
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f380 8811 	msr	BASEPRI, r0
 800421c:	bc09      	pop	{r0, r3}
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004226:	f01e 0f10 	tst.w	lr, #16
 800422a:	bf08      	it	eq
 800422c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004230:	f380 8809 	msr	PSP, r0
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst>:
 8004240:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
        __asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	607b      	str	r3, [r7, #4]
    }
 8004260:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004262:	f002 f865 	bl	8006330 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004266:	f7fe feb5 	bl	8002fd4 <xTaskIncrementTick>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004270:	f002 f8bc 	bl	80063ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <SysTick_Handler+0x50>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e001      	b.n	8004282 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800427e:	f002 f899 	bl	80063b4 <SEGGER_SYSVIEW_RecordExitISR>
 8004282:	2300      	movs	r3, #0
 8004284:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f383 8811 	msr	BASEPRI, r3
    }
 800428c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <vPortSetupTimerInterrupt+0x38>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <vPortSetupTimerInterrupt+0x3c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <vPortSetupTimerInterrupt+0x40>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <vPortSetupTimerInterrupt+0x44>)
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e010 	.word	0xe000e010
 80042d4:	e000e018 	.word	0xe000e018
 80042d8:	20000000 	.word	0x20000000
 80042dc:	10624dd3 	.word	0x10624dd3
 80042e0:	e000e014 	.word	0xe000e014

080042e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80042e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042f4 <vPortEnableVFP+0x10>
 80042e8:	6801      	ldr	r1, [r0, #0]
 80042ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042ee:	6001      	str	r1, [r0, #0]
 80042f0:	4770      	bx	lr
 80042f2:	0000      	.short	0x0000
 80042f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop

080042fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004302:	f3ef 8305 	mrs	r3, IPSR
 8004306:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b0f      	cmp	r3, #15
 800430c:	d914      	bls.n	8004338 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <vPortValidateInterruptPriority+0x70>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <vPortValidateInterruptPriority+0x74>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	7afa      	ldrb	r2, [r7, #11]
 800431e:	429a      	cmp	r2, r3
 8004320:	d20a      	bcs.n	8004338 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
    }
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <vPortValidateInterruptPriority+0x78>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <vPortValidateInterruptPriority+0x7c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d90a      	bls.n	800435e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	603b      	str	r3, [r7, #0]
    }
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <vPortValidateInterruptPriority+0x60>
    }
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e3f0 	.word	0xe000e3f0
 8004370:	2000024c 	.word	0x2000024c
 8004374:	e000ed0c 	.word	0xe000ed0c
 8004378:	20000250 	.word	0x20000250

0800437c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004388:	f7fe fd02 	bl	8002d90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <pvPortMalloc+0x160>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004394:	f000 f908 	bl	80045a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800439e:	2208      	movs	r2, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	3308      	adds	r3, #8
 80043aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d804      	bhi.n	80043c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	e001      	b.n	80043c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	db70      	blt.n	80044ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d06d      	beq.n	80044ac <pvPortMalloc+0x130>
 80043d0:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <pvPortMalloc+0x164>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d868      	bhi.n	80044ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043da:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <pvPortMalloc+0x168>)
 80043dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043de:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <pvPortMalloc+0x168>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043e4:	e004      	b.n	80043f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d903      	bls.n	8004402 <pvPortMalloc+0x86>
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f1      	bne.n	80043e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <pvPortMalloc+0x160>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	429a      	cmp	r2, r3
 800440a:	d04f      	beq.n	80044ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	4413      	add	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	2308      	movs	r3, #8
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	429a      	cmp	r2, r3
 800442c:	d91f      	bls.n	800446e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <pvPortMalloc+0xda>
        __asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
    }
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1ad2      	subs	r2, r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f000 f8f9 	bl	8004660 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800446e:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <pvPortMalloc+0x164>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <pvPortMalloc+0x164>)
 800447a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <pvPortMalloc+0x164>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <pvPortMalloc+0x16c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d203      	bcs.n	8004490 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <pvPortMalloc+0x164>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <pvPortMalloc+0x16c>)
 800448e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <pvPortMalloc+0x170>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a10      	ldr	r2, [pc, #64]	; (80044ec <pvPortMalloc+0x170>)
 80044aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044ac:	f7fe fc7e 	bl	8002dac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <pvPortMalloc+0x154>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60fb      	str	r3, [r7, #12]
    }
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <pvPortMalloc+0x152>
    return pvReturn;
 80044d0:	69fb      	ldr	r3, [r7, #28]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20012e5c 	.word	0x20012e5c
 80044e0:	20012e60 	.word	0x20012e60
 80044e4:	20012e54 	.word	0x20012e54
 80044e8:	20012e64 	.word	0x20012e64
 80044ec:	20012e68 	.word	0x20012e68

080044f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d049      	beq.n	8004596 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004502:	2308      	movs	r3, #8
 8004504:	425b      	negs	r3, r3
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4413      	add	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db0a      	blt.n	800452e <vPortFree+0x3e>
        __asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
    }
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <vPortFree+0x5c>
        __asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60bb      	str	r3, [r7, #8]
    }
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	0fdb      	lsrs	r3, r3, #31
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d118      	bne.n	8004596 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004570:	f7fe fc0e 	bl	8002d90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <vPortFree+0xb0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4413      	add	r3, r2
 800457e:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <vPortFree+0xb0>)
 8004580:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004582:	6938      	ldr	r0, [r7, #16]
 8004584:	f000 f86c 	bl	8004660 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <vPortFree+0xb4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <vPortFree+0xb4>)
 8004590:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004592:	f7fe fc0b 	bl	8002dac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20012e60 	.word	0x20012e60
 80045a4:	20012e6c 	.word	0x20012e6c

080045a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045ae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80045b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <prvHeapInit+0xa4>)
 80045b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3307      	adds	r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	4a1d      	ldr	r2, [pc, #116]	; (800464c <prvHeapInit+0xa4>)
 80045d8:	4413      	add	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <prvHeapInit+0xa8>)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <prvHeapInit+0xa8>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	4413      	add	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045f4:	2208      	movs	r2, #8
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <prvHeapInit+0xac>)
 8004608:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <prvHeapInit+0xac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <prvHeapInit+0xac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <prvHeapInit+0xac>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a08      	ldr	r2, [pc, #32]	; (8004658 <prvHeapInit+0xb0>)
 8004636:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a07      	ldr	r2, [pc, #28]	; (800465c <prvHeapInit+0xb4>)
 800463e:	6013      	str	r3, [r2, #0]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000254 	.word	0x20000254
 8004650:	20012e54 	.word	0x20012e54
 8004654:	20012e5c 	.word	0x20012e5c
 8004658:	20012e64 	.word	0x20012e64
 800465c:	20012e60 	.word	0x20012e60

08004660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004668:	4b28      	ldr	r3, [pc, #160]	; (800470c <prvInsertBlockIntoFreeList+0xac>)
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e002      	b.n	8004674 <prvInsertBlockIntoFreeList+0x14>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d8f7      	bhi.n	800466e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4413      	add	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d108      	bne.n	80046a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	441a      	add	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d118      	bne.n	80046e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <prvInsertBlockIntoFreeList+0xb0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d00d      	beq.n	80046de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e008      	b.n	80046f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <prvInsertBlockIntoFreeList+0xb0>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e003      	b.n	80046f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d002      	beq.n	80046fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20012e54 	.word	0x20012e54
 8004710:	20012e5c 	.word	0x20012e5c

08004714 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004718:	4803      	ldr	r0, [pc, #12]	; (8004728 <_cbSendSystemDesc+0x14>)
 800471a:	f001 fdb3 	bl	8006284 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800471e:	4803      	ldr	r0, [pc, #12]	; (800472c <_cbSendSystemDesc+0x18>)
 8004720:	f001 fdb0 	bl	8006284 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004724:	bf00      	nop
 8004726:	bd80      	pop	{r7, pc}
 8004728:	080072c8 	.word	0x080072c8
 800472c:	0800730c 	.word	0x0800730c

08004730 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <SEGGER_SYSVIEW_Conf+0x20>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <SEGGER_SYSVIEW_Conf+0x20>)
 800473a:	6819      	ldr	r1, [r3, #0]
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <SEGGER_SYSVIEW_Conf+0x24>)
 800473e:	4a06      	ldr	r2, [pc, #24]	; (8004758 <SEGGER_SYSVIEW_Conf+0x28>)
 8004740:	f001 f91e 	bl	8005980 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004744:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004748:	f001 f95e 	bl	8005a08 <SEGGER_SYSVIEW_SetRAMBase>
}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000000 	.word	0x20000000
 8004754:	08004715 	.word	0x08004715
 8004758:	080073a8 	.word	0x080073a8

0800475c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	b085      	sub	sp, #20
 8004760:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	e033      	b.n	80047d0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004768:	491e      	ldr	r1, [pc, #120]	; (80047e4 <_cbSendTaskList+0x88>)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	491a      	ldr	r1, [pc, #104]	; (80047e4 <_cbSendTaskList+0x88>)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3304      	adds	r3, #4
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	4c16      	ldr	r4, [pc, #88]	; (80047e4 <_cbSendTaskList+0x88>)
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4423      	add	r3, r4
 8004798:	3308      	adds	r3, #8
 800479a:	681c      	ldr	r4, [r3, #0]
 800479c:	4d11      	ldr	r5, [pc, #68]	; (80047e4 <_cbSendTaskList+0x88>)
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	442b      	add	r3, r5
 80047aa:	330c      	adds	r3, #12
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	4e0d      	ldr	r6, [pc, #52]	; (80047e4 <_cbSendTaskList+0x88>)
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4433      	add	r3, r6
 80047bc:	3310      	adds	r3, #16
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	462b      	mov	r3, r5
 80047c4:	4622      	mov	r2, r4
 80047c6:	f000 f8bd 	bl	8004944 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3301      	adds	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <_cbSendTaskList+0x8c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3c6      	bcc.n	8004768 <_cbSendTaskList+0xc>
  }
}
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e4:	20012e70 	.word	0x20012e70
 80047e8:	20012f10 	.word	0x20012f10

080047ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80047f4:	f7fe fbdc 	bl	8002fb0 <xTaskGetTickCountFromISR>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2200      	movs	r2, #0
 80047fc:	469a      	mov	sl, r3
 80047fe:	4693      	mov	fp, r2
 8004800:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	f04f 0a00 	mov.w	sl, #0
 8004810:	f04f 0b00 	mov.w	fp, #0
 8004814:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004818:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800481c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004820:	4652      	mov	r2, sl
 8004822:	465b      	mov	r3, fp
 8004824:	1a14      	subs	r4, r2, r0
 8004826:	eb63 0501 	sbc.w	r5, r3, r1
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	00ab      	lsls	r3, r5, #2
 8004834:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004838:	00a2      	lsls	r2, r4, #2
 800483a:	4614      	mov	r4, r2
 800483c:	461d      	mov	r5, r3
 800483e:	eb14 0800 	adds.w	r8, r4, r0
 8004842:	eb45 0901 	adc.w	r9, r5, r1
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485a:	4690      	mov	r8, r2
 800485c:	4699      	mov	r9, r3
 800485e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004862:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004874 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004882:	2205      	movs	r2, #5
 8004884:	492b      	ldr	r1, [pc, #172]	; (8004934 <SYSVIEW_AddTask+0xc0>)
 8004886:	68b8      	ldr	r0, [r7, #8]
 8004888:	f002 f848 	bl	800691c <memcmp>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04b      	beq.n	800492a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b07      	cmp	r3, #7
 8004898:	d903      	bls.n	80048a2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800489a:	4828      	ldr	r0, [pc, #160]	; (800493c <SYSVIEW_AddTask+0xc8>)
 800489c:	f001 ffae 	bl	80067fc <SEGGER_SYSVIEW_Warn>
    return;
 80048a0:	e044      	b.n	800492c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80048a2:	4b25      	ldr	r3, [pc, #148]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4926      	ldr	r1, [pc, #152]	; (8004940 <SYSVIEW_AddTask+0xcc>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4921      	ldr	r1, [pc, #132]	; (8004940 <SYSVIEW_AddTask+0xcc>)
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	3304      	adds	r3, #4
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80048cc:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	491b      	ldr	r1, [pc, #108]	; (8004940 <SYSVIEW_AddTask+0xcc>)
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3308      	adds	r3, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4916      	ldr	r1, [pc, #88]	; (8004940 <SYSVIEW_AddTask+0xcc>)
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	330c      	adds	r3, #12
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4910      	ldr	r1, [pc, #64]	; (8004940 <SYSVIEW_AddTask+0xcc>)
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3310      	adds	r3, #16
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <SYSVIEW_AddTask+0xc4>)
 8004916:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f80e 	bl	8004944 <SYSVIEW_SendTaskInfo>
 8004928:	e000      	b.n	800492c <SYSVIEW_AddTask+0xb8>
    return;
 800492a:	bf00      	nop

}
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	0800731c 	.word	0x0800731c
 8004938:	20012f10 	.word	0x20012f10
 800493c:	08007324 	.word	0x08007324
 8004940:	20012e70 	.word	0x20012e70

08004944 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	2214      	movs	r2, #20
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f001 ffee 	bl	800693c <memset>
  TaskInfo.TaskID     = TaskID;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	4618      	mov	r0, r3
 800497a:	f001 fb8b 	bl	8006094 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800497e:	bf00      	nop
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800498e:	4b26      	ldr	r3, [pc, #152]	; (8004a28 <_DoInit+0xa0>)
 8004990:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004992:	22a8      	movs	r2, #168	; 0xa8
 8004994:	2100      	movs	r1, #0
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f001 ffd0 	bl	800693c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2203      	movs	r2, #3
 80049a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2203      	movs	r2, #3
 80049a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <_DoInit+0xa4>)
 80049ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <_DoInit+0xa8>)
 80049b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <_DoInit+0xa4>)
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <_DoInit+0xac>)
 80049d8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2210      	movs	r2, #16
 80049de:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2200      	movs	r2, #0
 80049ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80049f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	e00c      	b.n	8004a16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1c3 030f 	rsb	r3, r3, #15
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <_DoInit+0xb0>)
 8004a04:	5cd1      	ldrb	r1, [r2, r3]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3301      	adds	r3, #1
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b0f      	cmp	r3, #15
 8004a1a:	d9ef      	bls.n	80049fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004a1c:	f3bf 8f5f 	dmb	sy
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20012f14 	.word	0x20012f14
 8004a2c:	08007374 	.word	0x08007374
 8004a30:	20012fbc 	.word	0x20012fbc
 8004a34:	200133bc 	.word	0x200133bc
 8004a38:	080073b0 	.word	0x080073b0

08004a3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	; 0x30
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004a48:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b53      	cmp	r3, #83	; 0x53
 8004a54:	d001      	beq.n	8004a5a <SEGGER_RTT_ReadNoLock+0x1e>
 8004a56:	f7ff ff97 	bl	8004988 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	3360      	adds	r3, #96	; 0x60
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a68:	4413      	add	r3, r2
 8004a6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d92b      	bls.n	8004ae0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bf28      	it	cs
 8004a9a:	4613      	movcs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	4413      	add	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	6939      	ldr	r1, [r7, #16]
 8004aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aae:	f001 ff73 	bl	8006998 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	4413      	add	r3, r2
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	4413      	add	r3, r2
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d101      	bne.n	8004ae0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004adc:	2300      	movs	r3, #0
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	bf28      	it	cs
 8004af0:	4613      	movcs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d019      	beq.n	8004b2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	4413      	add	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b0a:	f001 ff45 	bl	8006998 <memcpy>
    NumBytesRead += NumBytesRem;
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	4413      	add	r3, r2
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3730      	adds	r7, #48	; 0x30
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20012f14 	.word	0x20012f14

08004b48 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004b56:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b53      	cmp	r3, #83	; 0x53
 8004b62:	d001      	beq.n	8004b68 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004b64:	f7ff ff10 	bl	8004988 <_DoInit>
  SEGGER_RTT_LOCK();
 8004b68:	f3ef 8311 	mrs	r3, BASEPRI
 8004b6c:	f04f 0120 	mov.w	r1, #32
 8004b70:	f381 8811 	msr	BASEPRI, r1
 8004b74:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b76:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004b78:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004b7e:	6939      	ldr	r1, [r7, #16]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3304      	adds	r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	dbeb      	blt.n	8004b7e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ba6:	e000      	b.n	8004baa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004ba8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	da3f      	bge.n	8004c34 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004bb4:	6939      	ldr	r1, [r7, #16]
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	4613      	mov	r3, r2
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004bc8:	6939      	ldr	r1, [r7, #16]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3304      	adds	r3, #4
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004bde:	6939      	ldr	r1, [r7, #16]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	4613      	mov	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	440b      	add	r3, r1
 8004bec:	3320      	adds	r3, #32
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004bf2:	6939      	ldr	r1, [r7, #16]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	440b      	add	r3, r1
 8004c00:	3328      	adds	r3, #40	; 0x28
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004c06:	6939      	ldr	r1, [r7, #16]
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	440b      	add	r3, r1
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	440b      	add	r3, r1
 8004c28:	332c      	adds	r3, #44	; 0x2c
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c2e:	f3bf 8f5f 	dmb	sy
 8004c32:	e002      	b.n	8004c3a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c38:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004c40:	69fb      	ldr	r3, [r7, #28]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20012f14 	.word	0x20012f14

08004c50 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b53      	cmp	r3, #83	; 0x53
 8004c6a:	d001      	beq.n	8004c70 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004c6c:	f7ff fe8c 	bl	8004988 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c70:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004c72:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d82c      	bhi.n	8004cd4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c7e:	f04f 0120 	mov.w	r1, #32
 8004c82:	f381 8811 	msr	BASEPRI, r1
 8004c86:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	3360      	adds	r3, #96	; 0x60
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cc4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	e002      	b.n	8004cda <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3728      	adds	r7, #40	; 0x28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20012f14 	.word	0x20012f14

08004ce8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	60fa      	str	r2, [r7, #12]
 8004cfe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d90a      	bls.n	8004d1c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004d0a:	e007      	b.n	8004d1c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	1c53      	adds	r3, r2, #1
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	60f9      	str	r1, [r7, #12]
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <_EncodeStr+0x46>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ee      	bne.n	8004d0c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3307      	adds	r3, #7
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d66:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <_HandleIncomingPacket+0xd8>)
 8004d68:	7e1b      	ldrb	r3, [r3, #24]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	1cfb      	adds	r3, r7, #3
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7ff fe63 	bl	8004a3c <SEGGER_RTT_ReadNoLock>
 8004d76:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d057      	beq.n	8004e2e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d031      	beq.n	8004de8 <_HandleIncomingPacket+0x88>
 8004d84:	2b80      	cmp	r3, #128	; 0x80
 8004d86:	dc40      	bgt.n	8004e0a <_HandleIncomingPacket+0xaa>
 8004d88:	2b07      	cmp	r3, #7
 8004d8a:	dc15      	bgt.n	8004db8 <_HandleIncomingPacket+0x58>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dd3c      	ble.n	8004e0a <_HandleIncomingPacket+0xaa>
 8004d90:	3b01      	subs	r3, #1
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d839      	bhi.n	8004e0a <_HandleIncomingPacket+0xaa>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <_HandleIncomingPacket+0x3c>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dbf 	.word	0x08004dbf
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dcb 	.word	0x08004dcb
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	08004de3 	.word	0x08004de3
 8004db8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dba:	d033      	beq.n	8004e24 <_HandleIncomingPacket+0xc4>
 8004dbc:	e025      	b.n	8004e0a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004dbe:	f000 ffef 	bl	8005da0 <SEGGER_SYSVIEW_Start>
      break;
 8004dc2:	e034      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004dc4:	f001 f8a6 	bl	8005f14 <SEGGER_SYSVIEW_Stop>
      break;
 8004dc8:	e031      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004dca:	f001 fa7f 	bl	80062cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004dce:	e02e      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004dd0:	f001 fa44 	bl	800625c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004dd4:	e02b      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004dd6:	f001 f8c3 	bl	8005f60 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004dda:	e028      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004ddc:	f001 fcbc 	bl	8006758 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004de0:	e025      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004de2:	f001 fc9b 	bl	800671c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004de6:	e022      	b.n	8004e2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <_HandleIncomingPacket+0xd8>)
 8004dea:	7e1b      	ldrb	r3, [r3, #24]
 8004dec:	4618      	mov	r0, r3
 8004dee:	1cfb      	adds	r3, r7, #3
 8004df0:	2201      	movs	r2, #1
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7ff fe22 	bl	8004a3c <SEGGER_RTT_ReadNoLock>
 8004df8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fc00 	bl	8006608 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004e08:	e00e      	b.n	8004e28 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da0c      	bge.n	8004e2c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <_HandleIncomingPacket+0xd8>)
 8004e14:	7e1b      	ldrb	r3, [r3, #24]
 8004e16:	4618      	mov	r0, r3
 8004e18:	1cfb      	adds	r3, r7, #3
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f7ff fe0d 	bl	8004a3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004e22:	e003      	b.n	8004e2c <_HandleIncomingPacket+0xcc>
      break;
 8004e24:	bf00      	nop
 8004e26:	e002      	b.n	8004e2e <_HandleIncomingPacket+0xce>
      break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <_HandleIncomingPacket+0xce>
      break;
 8004e2c:	bf00      	nop
    }
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200143d4 	.word	0x200143d4

08004e3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004e42:	2301      	movs	r3, #1
 8004e44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004e46:	1d3b      	adds	r3, r7, #4
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e50:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e56:	e00b      	b.n	8004e70 <_TrySendOverflowPacket+0x34>
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	09db      	lsrs	r3, r3, #7
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	2b7f      	cmp	r3, #127	; 0x7f
 8004e74:	d8f0      	bhi.n	8004e58 <_TrySendOverflowPacket+0x1c>
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <_TrySendOverflowPacket+0xe0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e8c:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	e00b      	b.n	8004eb8 <_TrySendOverflowPacket+0x7c>
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	1c59      	adds	r1, r3, #1
 8004ea8:	6279      	str	r1, [r7, #36]	; 0x24
 8004eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	09db      	lsrs	r3, r3, #7
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebc:	d8f0      	bhi.n	8004ea0 <_TrySendOverflowPacket+0x64>
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f7fb f996 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e004      	b.n	8004f0c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	3301      	adds	r3, #1
 8004f08:	4a03      	ldr	r2, [pc, #12]	; (8004f18 <_TrySendOverflowPacket+0xdc>)
 8004f0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004f0c:	693b      	ldr	r3, [r7, #16]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3730      	adds	r7, #48	; 0x30
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200143d4 	.word	0x200143d4
 8004f1c:	e0001004 	.word	0xe0001004

08004f20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004f2c:	4b98      	ldr	r3, [pc, #608]	; (8005190 <_SendPacket+0x270>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d010      	beq.n	8004f56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004f34:	4b96      	ldr	r3, [pc, #600]	; (8005190 <_SendPacket+0x270>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 812d 	beq.w	8005198 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004f3e:	4b94      	ldr	r3, [pc, #592]	; (8005190 <_SendPacket+0x270>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d109      	bne.n	8004f5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004f46:	f7ff ff79 	bl	8004e3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004f4a:	4b91      	ldr	r3, [pc, #580]	; (8005190 <_SendPacket+0x270>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	f040 8124 	bne.w	800519c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004f54:	e001      	b.n	8004f5a <_SendPacket+0x3a>
    goto Send;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <_SendPacket+0x3c>
Send:
 8004f5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b1f      	cmp	r3, #31
 8004f60:	d809      	bhi.n	8004f76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004f62:	4b8b      	ldr	r3, [pc, #556]	; (8005190 <_SendPacket+0x270>)
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 8115 	bne.w	80051a0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b17      	cmp	r3, #23
 8004f7a:	d807      	bhi.n	8004f8c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e0c4      	b.n	8005116 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b7f      	cmp	r3, #127	; 0x7f
 8004f98:	d912      	bls.n	8004fc0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	09da      	lsrs	r2, r3, #7
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	60fa      	str	r2, [r7, #12]
 8004fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e006      	b.n	8004fce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b7e      	cmp	r3, #126	; 0x7e
 8004fd2:	d807      	bhi.n	8004fe4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e098      	b.n	8005116 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fea:	d212      	bcs.n	8005012 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	09da      	lsrs	r2, r3, #7
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	3a01      	subs	r2, #1
 8005004:	60fa      	str	r2, [r7, #12]
 8005006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e081      	b.n	8005116 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005018:	d21d      	bcs.n	8005056 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0b9a      	lsrs	r2, r3, #14
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3b01      	subs	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	09db      	lsrs	r3, r3, #7
 800502e:	b2db      	uxtb	r3, r3
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	3a01      	subs	r2, #1
 8005034:	60fa      	str	r2, [r7, #12]
 8005036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	3a01      	subs	r2, #1
 8005048:	60fa      	str	r2, [r7, #12]
 800504a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e05f      	b.n	8005116 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505c:	d228      	bcs.n	80050b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0d5a      	lsrs	r2, r3, #21
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b01      	subs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0b9b      	lsrs	r3, r3, #14
 8005072:	b2db      	uxtb	r3, r3
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	3a01      	subs	r2, #1
 8005078:	60fa      	str	r2, [r7, #12]
 800507a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	b2db      	uxtb	r3, r3
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	3a01      	subs	r2, #1
 800508e:	60fa      	str	r2, [r7, #12]
 8005090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005094:	b2da      	uxtb	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	3a01      	subs	r2, #1
 80050a2:	60fa      	str	r2, [r7, #12]
 80050a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e032      	b.n	8005116 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0f1a      	lsrs	r2, r3, #28
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	0d5b      	lsrs	r3, r3, #21
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	3a01      	subs	r2, #1
 80050ca:	60fa      	str	r2, [r7, #12]
 80050cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0b9b      	lsrs	r3, r3, #14
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	3a01      	subs	r2, #1
 80050e0:	60fa      	str	r2, [r7, #12]
 80050e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	3a01      	subs	r2, #1
 80050f6:	60fa      	str	r2, [r7, #12]
 80050f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	3a01      	subs	r2, #1
 800510a:	60fa      	str	r2, [r7, #12]
 800510c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005110:	b2da      	uxtb	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <_SendPacket+0x274>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <_SendPacket+0x270>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	e00b      	b.n	8005148 <_SendPacket+0x228>
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	6279      	str	r1, [r7, #36]	; 0x24
 800513a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b7f      	cmp	r3, #127	; 0x7f
 800514c:	d8f0      	bhi.n	8005130 <_SendPacket+0x210>
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	627a      	str	r2, [r7, #36]	; 0x24
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800515e:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <_SendPacket+0x270>)
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	4618      	mov	r0, r3
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	461a      	mov	r2, r3
 800516c:	68f9      	ldr	r1, [r7, #12]
 800516e:	f7fb f84f 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005172:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800517a:	4a05      	ldr	r2, [pc, #20]	; (8005190 <_SendPacket+0x270>)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	60d3      	str	r3, [r2, #12]
 8005180:	e00f      	b.n	80051a2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005182:	4b03      	ldr	r3, [pc, #12]	; (8005190 <_SendPacket+0x270>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b01      	ldr	r3, [pc, #4]	; (8005190 <_SendPacket+0x270>)
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e008      	b.n	80051a2 <_SendPacket+0x282>
 8005190:	200143d4 	.word	0x200143d4
 8005194:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005198:	bf00      	nop
 800519a:	e002      	b.n	80051a2 <_SendPacket+0x282>
      goto SendDone;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <_SendPacket+0x282>
      goto SendDone;
 80051a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <_SendPacket+0x2d4>)
 80051a4:	7e1b      	ldrb	r3, [r3, #24]
 80051a6:	4619      	mov	r1, r3
 80051a8:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <_SendPacket+0x2d8>)
 80051aa:	460b      	mov	r3, r1
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	440b      	add	r3, r1
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	336c      	adds	r3, #108	; 0x6c
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <_SendPacket+0x2d4>)
 80051ba:	7e1b      	ldrb	r3, [r3, #24]
 80051bc:	4618      	mov	r0, r3
 80051be:	490e      	ldr	r1, [pc, #56]	; (80051f8 <_SendPacket+0x2d8>)
 80051c0:	4603      	mov	r3, r0
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4403      	add	r3, r0
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	3370      	adds	r3, #112	; 0x70
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d00b      	beq.n	80051ea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <_SendPacket+0x2d4>)
 80051d4:	789b      	ldrb	r3, [r3, #2]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d107      	bne.n	80051ea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <_SendPacket+0x2d4>)
 80051dc:	2201      	movs	r2, #1
 80051de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80051e0:	f7ff fdbe 	bl	8004d60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <_SendPacket+0x2d4>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200143d4 	.word	0x200143d4
 80051f8:	20012f14 	.word	0x20012f14

080051fc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	d80a      	bhi.n	800522c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6051      	str	r1, [r2, #4]
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d15a      	bne.n	80052ea <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	e00b      	b.n	800526e <_StoreChar+0x72>
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	1c59      	adds	r1, r3, #1
 800525e:	6279      	str	r1, [r7, #36]	; 0x24
 8005260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	09db      	lsrs	r3, r3, #7
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b7f      	cmp	r3, #127	; 0x7f
 8005272:	d8f0      	bhi.n	8005256 <_StoreChar+0x5a>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	627a      	str	r2, [r7, #36]	; 0x24
 800527a:	6a3a      	ldr	r2, [r7, #32]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e00b      	b.n	80052a6 <_StoreChar+0xaa>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	1c59      	adds	r1, r3, #1
 8005296:	61f9      	str	r1, [r7, #28]
 8005298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	09db      	lsrs	r3, r3, #7
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b7f      	cmp	r3, #127	; 0x7f
 80052aa:	d8f0      	bhi.n	800528e <_StoreChar+0x92>
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	221a      	movs	r2, #26
 80052c2:	6939      	ldr	r1, [r7, #16]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fe2b 	bl	8004f20 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fd3a 	bl	8004d48 <_PreparePacket>
 80052d4:	4602      	mov	r2, r0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]
  }
}
 80052ea:	bf00      	nop
 80052ec:	3728      	adds	r7, #40	; 0x28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005306:	2301      	movs	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800530a:	2301      	movs	r3, #1
 800530c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800530e:	e007      	b.n	8005320 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	623b      	str	r3, [r7, #32]
    Width++;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d2f3      	bcs.n	8005310 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	429a      	cmp	r2, r3
 800532e:	d901      	bls.n	8005334 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11f      	bne.n	800537e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01c      	beq.n	800537e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <_PrintUnsigned+0x66>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <_PrintUnsigned+0x66>
        c = '0';
 8005354:	2330      	movs	r3, #48	; 0x30
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	e001      	b.n	800535e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800535a:	2320      	movs	r3, #32
 800535c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800535e:	e007      	b.n	8005370 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	3b01      	subs	r3, #1
 8005364:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005366:	7efb      	ldrb	r3, [r7, #27]
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff ff46 	bl	80051fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <_PrintUnsigned+0x8a>
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	429a      	cmp	r2, r3
 800537c:	d3f0      	bcc.n	8005360 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d903      	bls.n	800538c <_PrintUnsigned+0x98>
      NumDigits--;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	3b01      	subs	r3, #1
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	e009      	b.n	80053a0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d200      	bcs.n	80053a0 <_PrintUnsigned+0xac>
        break;
 800539e:	e005      	b.n	80053ac <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80053aa:	e7e8      	b.n	800537e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	fb02 f303 	mul.w	r3, r2, r3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80053c4:	4a15      	ldr	r2, [pc, #84]	; (800541c <_PrintUnsigned+0x128>)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4413      	add	r3, r2
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	4619      	mov	r1, r3
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ff14 	bl	80051fc <_StoreChar>
    Digit /= Base;
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e3      	bne.n	80053ac <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d011      	beq.n	8005412 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053f4:	e006      	b.n	8005404 <_PrintUnsigned+0x110>
        FieldWidth--;
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	3b01      	subs	r3, #1
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80053fc:	2120      	movs	r1, #32
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fefc 	bl	80051fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <_PrintUnsigned+0x11e>
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	429a      	cmp	r2, r3
 8005410:	d3f1      	bcc.n	80053f6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005412:	bf00      	nop
 8005414:	3728      	adds	r7, #40	; 0x28
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	080073d0 	.word	0x080073d0

08005420 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	bfb8      	it	lt
 8005434:	425b      	neglt	r3, r3
 8005436:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800543c:	e007      	b.n	800544e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	fb92 f3f3 	sdiv	r3, r2, r3
 8005446:	613b      	str	r3, [r7, #16]
    Width++;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	3301      	adds	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	daf3      	bge.n	800543e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	429a      	cmp	r2, r3
 800545c:	d901      	bls.n	8005462 <_PrintInt+0x42>
    Width = NumDigits;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <_PrintInt+0x5e>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	db04      	blt.n	8005478 <_PrintInt+0x58>
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <_PrintInt+0x5e>
    FieldWidth--;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	3b01      	subs	r3, #1
 800547c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <_PrintInt+0x6e>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <_PrintInt+0x9c>
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d111      	bne.n	80054bc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800549e:	e006      	b.n	80054ae <_PrintInt+0x8e>
        FieldWidth--;
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80054a6:	2120      	movs	r1, #32
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fea7 	bl	80051fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <_PrintInt+0x9c>
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3f1      	bcc.n	80054a0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da07      	bge.n	80054d2 <_PrintInt+0xb2>
    v = -v;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	425b      	negs	r3, r3
 80054c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80054c8:	212d      	movs	r1, #45	; 0x2d
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff fe96 	bl	80051fc <_StoreChar>
 80054d0:	e008      	b.n	80054e4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80054dc:	212b      	movs	r1, #43	; 0x2b
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fe8c 	bl	80051fc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d019      	beq.n	8005522 <_PrintInt+0x102>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d114      	bne.n	8005522 <_PrintInt+0x102>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d111      	bne.n	8005522 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005504:	e006      	b.n	8005514 <_PrintInt+0xf4>
        FieldWidth--;
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	3b01      	subs	r3, #1
 800550a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800550c:	2130      	movs	r1, #48	; 0x30
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff fe74 	bl	80051fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <_PrintInt+0x102>
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3f1      	bcc.n	8005506 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff fedf 	bl	80052f4 <_PrintUnsigned>
}
 8005536:	bf00      	nop
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b098      	sub	sp, #96	; 0x60
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800554c:	f3ef 8311 	mrs	r3, BASEPRI
 8005550:	f04f 0120 	mov.w	r1, #32
 8005554:	f381 8811 	msr	BASEPRI, r1
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	48b7      	ldr	r0, [pc, #732]	; (8005838 <_VPrintTarget+0x2f8>)
 800555c:	f7ff fbf4 	bl	8004d48 <_PreparePacket>
 8005560:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005562:	4bb5      	ldr	r3, [pc, #724]	; (8005838 <_VPrintTarget+0x2f8>)
 8005564:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005566:	2300      	movs	r3, #0
 8005568:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	3301      	adds	r3, #1
 8005572:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 81a8 	beq.w	80058e0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005594:	2b25      	cmp	r3, #37	; 0x25
 8005596:	f040 8195 	bne.w	80058c4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800559a:	2300      	movs	r3, #0
 800559c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800559e:	2301      	movs	r3, #1
 80055a0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80055aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ae:	3b23      	subs	r3, #35	; 0x23
 80055b0:	2b0d      	cmp	r3, #13
 80055b2:	d83f      	bhi.n	8005634 <_VPrintTarget+0xf4>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <_VPrintTarget+0x7c>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	08005625 	.word	0x08005625
 80055c0:	08005635 	.word	0x08005635
 80055c4:	08005635 	.word	0x08005635
 80055c8:	08005635 	.word	0x08005635
 80055cc:	08005635 	.word	0x08005635
 80055d0:	08005635 	.word	0x08005635
 80055d4:	08005635 	.word	0x08005635
 80055d8:	08005635 	.word	0x08005635
 80055dc:	08005615 	.word	0x08005615
 80055e0:	08005635 	.word	0x08005635
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005635 	.word	0x08005635
 80055ec:	08005635 	.word	0x08005635
 80055f0:	08005605 	.word	0x08005605
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80055f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e01a      	b.n	800563a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005606:	f043 0302 	orr.w	r3, r3, #2
 800560a:	64bb      	str	r3, [r7, #72]	; 0x48
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3301      	adds	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e012      	b.n	800563a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	64bb      	str	r3, [r7, #72]	; 0x48
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e00a      	b.n	800563a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005626:	f043 0308 	orr.w	r3, r3, #8
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e002      	b.n	800563a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005634:	2300      	movs	r3, #0
 8005636:	653b      	str	r3, [r7, #80]	; 0x50
 8005638:	bf00      	nop
        }
      } while (v);
 800563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1b0      	bne.n	80055a2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005640:	2300      	movs	r3, #0
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800564c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005650:	2b2f      	cmp	r3, #47	; 0x2f
 8005652:	d912      	bls.n	800567a <_VPrintTarget+0x13a>
 8005654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005658:	2b39      	cmp	r3, #57	; 0x39
 800565a:	d80e      	bhi.n	800567a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	461a      	mov	r2, r3
 800566e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005672:	4413      	add	r3, r2
 8005674:	3b30      	subs	r3, #48	; 0x30
 8005676:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005678:	e7e4      	b.n	8005644 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800567a:	2300      	movs	r3, #0
 800567c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800568a:	2b2e      	cmp	r3, #46	; 0x2e
 800568c:	d11d      	bne.n	80056ca <_VPrintTarget+0x18a>
        sFormat++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800569c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056a0:	2b2f      	cmp	r3, #47	; 0x2f
 80056a2:	d912      	bls.n	80056ca <_VPrintTarget+0x18a>
 80056a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056a8:	2b39      	cmp	r3, #57	; 0x39
 80056aa:	d80e      	bhi.n	80056ca <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80056b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	461a      	mov	r2, r3
 80056be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056c2:	4413      	add	r3, r2
 80056c4:	3b30      	subs	r3, #48	; 0x30
 80056c6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80056c8:	e7e4      	b.n	8005694 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80056d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056d6:	2b6c      	cmp	r3, #108	; 0x6c
 80056d8:	d003      	beq.n	80056e2 <_VPrintTarget+0x1a2>
 80056da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056de:	2b68      	cmp	r3, #104	; 0x68
 80056e0:	d107      	bne.n	80056f2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80056f0:	e7ef      	b.n	80056d2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80056f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056f6:	2b25      	cmp	r3, #37	; 0x25
 80056f8:	f000 80d8 	beq.w	80058ac <_VPrintTarget+0x36c>
 80056fc:	2b25      	cmp	r3, #37	; 0x25
 80056fe:	f2c0 80dc 	blt.w	80058ba <_VPrintTarget+0x37a>
 8005702:	2b78      	cmp	r3, #120	; 0x78
 8005704:	f300 80d9 	bgt.w	80058ba <_VPrintTarget+0x37a>
 8005708:	2b58      	cmp	r3, #88	; 0x58
 800570a:	f2c0 80d6 	blt.w	80058ba <_VPrintTarget+0x37a>
 800570e:	3b58      	subs	r3, #88	; 0x58
 8005710:	2b20      	cmp	r3, #32
 8005712:	f200 80d2 	bhi.w	80058ba <_VPrintTarget+0x37a>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <_VPrintTarget+0x1dc>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	08005813 	.word	0x08005813
 8005720:	080058bb 	.word	0x080058bb
 8005724:	080058bb 	.word	0x080058bb
 8005728:	080058bb 	.word	0x080058bb
 800572c:	080058bb 	.word	0x080058bb
 8005730:	080058bb 	.word	0x080058bb
 8005734:	080058bb 	.word	0x080058bb
 8005738:	080058bb 	.word	0x080058bb
 800573c:	080058bb 	.word	0x080058bb
 8005740:	080058bb 	.word	0x080058bb
 8005744:	080058bb 	.word	0x080058bb
 8005748:	080057a1 	.word	0x080057a1
 800574c:	080057c7 	.word	0x080057c7
 8005750:	080058bb 	.word	0x080058bb
 8005754:	080058bb 	.word	0x080058bb
 8005758:	080058bb 	.word	0x080058bb
 800575c:	080058bb 	.word	0x080058bb
 8005760:	080058bb 	.word	0x080058bb
 8005764:	080058bb 	.word	0x080058bb
 8005768:	080058bb 	.word	0x080058bb
 800576c:	080058bb 	.word	0x080058bb
 8005770:	080058bb 	.word	0x080058bb
 8005774:	080058bb 	.word	0x080058bb
 8005778:	080058bb 	.word	0x080058bb
 800577c:	08005887 	.word	0x08005887
 8005780:	080058bb 	.word	0x080058bb
 8005784:	080058bb 	.word	0x080058bb
 8005788:	0800583d 	.word	0x0800583d
 800578c:	080058bb 	.word	0x080058bb
 8005790:	080057ed 	.word	0x080057ed
 8005794:	080058bb 	.word	0x080058bb
 8005798:	080058bb 	.word	0x080058bb
 800579c:	08005813 	.word	0x08005813
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	1d19      	adds	r1, r3, #4
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80057ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80057b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80057b8:	f107 0310 	add.w	r3, r7, #16
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fd1c 	bl	80051fc <_StoreChar>
        break;
 80057c4:	e07a      	b.n	80058bc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1d19      	adds	r1, r3, #4
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6011      	str	r1, [r2, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80057d4:	f107 0010 	add.w	r0, r7, #16
 80057d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e2:	220a      	movs	r2, #10
 80057e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057e6:	f7ff fe1b 	bl	8005420 <_PrintInt>
        break;
 80057ea:	e067      	b.n	80058bc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	1d19      	adds	r1, r3, #4
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6011      	str	r1, [r2, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80057fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057fc:	f107 0010 	add.w	r0, r7, #16
 8005800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580a:	220a      	movs	r2, #10
 800580c:	f7ff fd72 	bl	80052f4 <_PrintUnsigned>
        break;
 8005810:	e054      	b.n	80058bc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1d19      	adds	r1, r3, #4
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6011      	str	r1, [r2, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005820:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005822:	f107 0010 	add.w	r0, r7, #16
 8005826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	2210      	movs	r2, #16
 8005832:	f7ff fd5f 	bl	80052f4 <_PrintUnsigned>
        break;
 8005836:	e041      	b.n	80058bc <_VPrintTarget+0x37c>
 8005838:	20014404 	.word	0x20014404
      case 's':
        s = va_arg(*pParamList, const char*);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	1d19      	adds	r1, r3, #4
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800584a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <_VPrintTarget+0x314>
          s = "(null)";
 8005850:	4b4a      	ldr	r3, [pc, #296]	; (800597c <_VPrintTarget+0x43c>)
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	3301      	adds	r3, #1
 8005860:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800586a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fcc1 	bl	80051fc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b7f      	cmp	r3, #127	; 0x7f
 800587e:	d9e9      	bls.n	8005854 <_VPrintTarget+0x314>
        break;
 8005880:	e01c      	b.n	80058bc <_VPrintTarget+0x37c>
            break;
 8005882:	bf00      	nop
        break;
 8005884:	e01a      	b.n	80058bc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	1d19      	adds	r1, r3, #4
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6011      	str	r1, [r2, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005894:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005896:	f107 0010 	add.w	r0, r7, #16
 800589a:	2300      	movs	r3, #0
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	2308      	movs	r3, #8
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	2308      	movs	r3, #8
 80058a4:	2210      	movs	r2, #16
 80058a6:	f7ff fd25 	bl	80052f4 <_PrintUnsigned>
        break;
 80058aa:	e007      	b.n	80058bc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80058ac:	f107 0310 	add.w	r3, r7, #16
 80058b0:	2125      	movs	r1, #37	; 0x25
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fca2 	bl	80051fc <_StoreChar>
        break;
 80058b8:	e000      	b.n	80058bc <_VPrintTarget+0x37c>
      default:
        break;
 80058ba:	bf00      	nop
      }
      sFormat++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e007      	b.n	80058d4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80058c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80058c8:	f107 0310 	add.w	r3, r7, #16
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fc94 	bl	80051fc <_StoreChar>
    }
  } while (*sFormat);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f ae4d 	bne.w	8005578 <_VPrintTarget+0x38>
 80058de:	e000      	b.n	80058e2 <_VPrintTarget+0x3a2>
      break;
 80058e0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d041      	beq.n	800596c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f8:	e00b      	b.n	8005912 <_VPrintTarget+0x3d2>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005900:	1c59      	adds	r1, r3, #1
 8005902:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	09db      	lsrs	r3, r3, #7
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	2b7f      	cmp	r3, #127	; 0x7f
 8005916:	d8f0      	bhi.n	80058fa <_VPrintTarget+0x3ba>
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800591e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	2300      	movs	r3, #0
 800592e:	633b      	str	r3, [r7, #48]	; 0x30
 8005930:	e00b      	b.n	800594a <_VPrintTarget+0x40a>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	b2da      	uxtb	r2, r3
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	1c59      	adds	r1, r3, #1
 800593a:	6379      	str	r1, [r7, #52]	; 0x34
 800593c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	09db      	lsrs	r3, r3, #7
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2b7f      	cmp	r3, #127	; 0x7f
 800594e:	d8f0      	bhi.n	8005932 <_VPrintTarget+0x3f2>
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	637a      	str	r2, [r7, #52]	; 0x34
 8005956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	221a      	movs	r2, #26
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fada 	bl	8004f20 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005972:	bf00      	nop
 8005974:	3758      	adds	r7, #88	; 0x58
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	08007380 	.word	0x08007380

08005980 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800598e:	2300      	movs	r3, #0
 8005990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005994:	4917      	ldr	r1, [pc, #92]	; (80059f4 <SEGGER_SYSVIEW_Init+0x74>)
 8005996:	4818      	ldr	r0, [pc, #96]	; (80059f8 <SEGGER_SYSVIEW_Init+0x78>)
 8005998:	f7ff f8d6 	bl	8004b48 <SEGGER_RTT_AllocUpBuffer>
 800599c:	4603      	mov	r3, r0
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	4b16      	ldr	r3, [pc, #88]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80059a4:	4b15      	ldr	r3, [pc, #84]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059a6:	785a      	ldrb	r2, [r3, #1]
 80059a8:	4b14      	ldr	r3, [pc, #80]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80059ac:	4b13      	ldr	r3, [pc, #76]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059ae:	7e1b      	ldrb	r3, [r3, #24]
 80059b0:	4618      	mov	r0, r3
 80059b2:	2300      	movs	r3, #0
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2308      	movs	r3, #8
 80059b8:	4a11      	ldr	r2, [pc, #68]	; (8005a00 <SEGGER_SYSVIEW_Init+0x80>)
 80059ba:	490f      	ldr	r1, [pc, #60]	; (80059f8 <SEGGER_SYSVIEW_Init+0x78>)
 80059bc:	f7ff f948 	bl	8004c50 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <SEGGER_SYSVIEW_Init+0x84>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80059ce:	4a0b      	ldr	r2, [pc, #44]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80059e0:	4a06      	ldr	r2, [pc, #24]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <SEGGER_SYSVIEW_Init+0x7c>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	200133cc 	.word	0x200133cc
 80059f8:	08007388 	.word	0x08007388
 80059fc:	200143d4 	.word	0x200143d4
 8005a00:	200143cc 	.word	0x200143cc
 8005a04:	e0001004 	.word	0xe0001004

08005a08 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005a10:	4a04      	ldr	r2, [pc, #16]	; (8005a24 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6113      	str	r3, [r2, #16]
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	200143d4 	.word	0x200143d4

08005a28 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a30:	f3ef 8311 	mrs	r3, BASEPRI
 8005a34:	f04f 0120 	mov.w	r1, #32
 8005a38:	f381 8811 	msr	BASEPRI, r1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	4808      	ldr	r0, [pc, #32]	; (8005a60 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005a40:	f7ff f982 	bl	8004d48 <_PreparePacket>
 8005a44:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68b8      	ldr	r0, [r7, #8]
 8005a4c:	f7ff fa68 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f383 8811 	msr	BASEPRI, r3
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20014404 	.word	0x20014404

08005a64 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a72:	f04f 0120 	mov.w	r1, #32
 8005a76:	f381 8811 	msr	BASEPRI, r1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	4816      	ldr	r0, [pc, #88]	; (8005ad8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005a7e:	f7ff f963 	bl	8004d48 <_PreparePacket>
 8005a82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e00b      	b.n	8005aaa <SEGGER_SYSVIEW_RecordU32+0x46>
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	1c59      	adds	r1, r3, #1
 8005a9a:	61f9      	str	r1, [r7, #28]
 8005a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b7f      	cmp	r3, #127	; 0x7f
 8005aae:	d8f0      	bhi.n	8005a92 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	6938      	ldr	r0, [r7, #16]
 8005ac6:	f7ff fa2b 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f383 8811 	msr	BASEPRI, r3
}
 8005ad0:	bf00      	nop
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20014404 	.word	0x20014404

08005adc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	; 0x30
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aec:	f04f 0120 	mov.w	r1, #32
 8005af0:	f381 8811 	msr	BASEPRI, r1
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	4825      	ldr	r0, [pc, #148]	; (8005b8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005af8:	f7ff f926 	bl	8004d48 <_PreparePacket>
 8005afc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0a:	e00b      	b.n	8005b24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b7f      	cmp	r3, #127	; 0x7f
 8005b28:	d8f0      	bhi.n	8005b0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	e00b      	b.n	8005b5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	09db      	lsrs	r3, r3, #7
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b60:	d8f0      	bhi.n	8005b44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	627a      	str	r2, [r7, #36]	; 0x24
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	6979      	ldr	r1, [r7, #20]
 8005b76:	69b8      	ldr	r0, [r7, #24]
 8005b78:	f7ff f9d2 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f383 8811 	msr	BASEPRI, r3
}
 8005b82:	bf00      	nop
 8005b84:	3730      	adds	r7, #48	; 0x30
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20014404 	.word	0x20014404

08005b90 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba2:	f04f 0120 	mov.w	r1, #32
 8005ba6:	f381 8811 	msr	BASEPRI, r1
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	4832      	ldr	r0, [pc, #200]	; (8005c78 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005bae:	f7ff f8cb 	bl	8004d48 <_PreparePacket>
 8005bb2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc0:	e00b      	b.n	8005bda <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	6379      	str	r1, [r7, #52]	; 0x34
 8005bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	09db      	lsrs	r3, r3, #7
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bde:	d8f0      	bhi.n	8005bc2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	637a      	str	r2, [r7, #52]	; 0x34
 8005be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf8:	e00b      	b.n	8005c12 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	2b7f      	cmp	r3, #127	; 0x7f
 8005c16:	d8f0      	bhi.n	8005bfa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	e00b      	b.n	8005c4a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	6279      	str	r1, [r7, #36]	; 0x24
 8005c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	09db      	lsrs	r3, r3, #7
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4e:	d8f0      	bhi.n	8005c32 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	627a      	str	r2, [r7, #36]	; 0x24
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	6979      	ldr	r1, [r7, #20]
 8005c64:	69b8      	ldr	r0, [r7, #24]
 8005c66:	f7ff f95b 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f383 8811 	msr	BASEPRI, r3
}
 8005c70:	bf00      	nop
 8005c72:	3738      	adds	r7, #56	; 0x38
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20014404 	.word	0x20014404

08005c7c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b090      	sub	sp, #64	; 0x40
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8e:	f04f 0120 	mov.w	r1, #32
 8005c92:	f381 8811 	msr	BASEPRI, r1
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	4840      	ldr	r0, [pc, #256]	; (8005d9c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005c9a:	f7ff f855 	bl	8004d48 <_PreparePacket>
 8005c9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cac:	e00b      	b.n	8005cc6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	09db      	lsrs	r3, r3, #7
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cca:	d8f0      	bhi.n	8005cae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce4:	e00b      	b.n	8005cfe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	6379      	str	r1, [r7, #52]	; 0x34
 8005cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2b7f      	cmp	r3, #127	; 0x7f
 8005d02:	d8f0      	bhi.n	8005ce6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	637a      	str	r2, [r7, #52]	; 0x34
 8005d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1c:	e00b      	b.n	8005d36 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	09db      	lsrs	r3, r3, #7
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3a:	d8f0      	bhi.n	8005d1e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	e00b      	b.n	8005d6e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1c59      	adds	r1, r3, #1
 8005d5e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	09db      	lsrs	r3, r3, #7
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	2b7f      	cmp	r3, #127	; 0x7f
 8005d72:	d8f0      	bhi.n	8005d56 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	627a      	str	r2, [r7, #36]	; 0x24
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	69b8      	ldr	r0, [r7, #24]
 8005d8a:	f7ff f8c9 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f383 8811 	msr	BASEPRI, r3
}
 8005d94:	bf00      	nop
 8005d96:	3740      	adds	r7, #64	; 0x40
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20014404 	.word	0x20014404

08005da0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08c      	sub	sp, #48	; 0x30
 8005da4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005da6:	4b58      	ldr	r3, [pc, #352]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005dac:	f3ef 8311 	mrs	r3, BASEPRI
 8005db0:	f04f 0120 	mov.w	r1, #32
 8005db4:	f381 8811 	msr	BASEPRI, r1
 8005db8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005dba:	4b53      	ldr	r3, [pc, #332]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	4952      	ldr	r1, [pc, #328]	; (8005f0c <SEGGER_SYSVIEW_Start+0x16c>)
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fa24 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005dce:	200a      	movs	r0, #10
 8005dd0:	f7ff fe2a 	bl	8005a28 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd8:	f04f 0120 	mov.w	r1, #32
 8005ddc:	f381 8811 	msr	BASEPRI, r1
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	484b      	ldr	r0, [pc, #300]	; (8005f10 <SEGGER_SYSVIEW_Start+0x170>)
 8005de4:	f7fe ffb0 	bl	8004d48 <_PreparePacket>
 8005de8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df2:	4b45      	ldr	r3, [pc, #276]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df8:	e00b      	b.n	8005e12 <SEGGER_SYSVIEW_Start+0x72>
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	09db      	lsrs	r3, r3, #7
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	2b7f      	cmp	r3, #127	; 0x7f
 8005e16:	d8f0      	bhi.n	8005dfa <SEGGER_SYSVIEW_Start+0x5a>
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2c:	4b36      	ldr	r3, [pc, #216]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	e00b      	b.n	8005e4c <SEGGER_SYSVIEW_Start+0xac>
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	1c59      	adds	r1, r3, #1
 8005e3c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	09db      	lsrs	r3, r3, #7
 8005e4a:	623b      	str	r3, [r7, #32]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e50:	d8f0      	bhi.n	8005e34 <SEGGER_SYSVIEW_Start+0x94>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	627a      	str	r2, [r7, #36]	; 0x24
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	e00b      	b.n	8005e86 <SEGGER_SYSVIEW_Start+0xe6>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	61f9      	str	r1, [r7, #28]
 8005e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	09db      	lsrs	r3, r3, #7
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8a:	d8f0      	bhi.n	8005e6e <SEGGER_SYSVIEW_Start+0xce>
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	61fa      	str	r2, [r7, #28]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e00b      	b.n	8005ebe <SEGGER_SYSVIEW_Start+0x11e>
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	6179      	str	r1, [r7, #20]
 8005eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	09db      	lsrs	r3, r3, #7
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec2:	d8f0      	bhi.n	8005ea6 <SEGGER_SYSVIEW_Start+0x106>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	617a      	str	r2, [r7, #20]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ed4:	2218      	movs	r2, #24
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff f821 	bl	8004f20 <_SendPacket>
      RECORD_END();
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <SEGGER_SYSVIEW_Start+0x168>)
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005ef2:	f000 f9eb 	bl	80062cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005ef6:	f000 f9b1 	bl	800625c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005efa:	f000 fc2d 	bl	8006758 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005efe:	bf00      	nop
 8005f00:	3730      	adds	r7, #48	; 0x30
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200143d4 	.word	0x200143d4
 8005f0c:	080073c4 	.word	0x080073c4
 8005f10:	20014404 	.word	0x20014404

08005f14 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f1e:	f04f 0120 	mov.w	r1, #32
 8005f22:	f381 8811 	msr	BASEPRI, r1
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	480b      	ldr	r0, [pc, #44]	; (8005f58 <SEGGER_SYSVIEW_Stop+0x44>)
 8005f2a:	f7fe ff0d 	bl	8004d48 <_PreparePacket>
 8005f2e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <SEGGER_SYSVIEW_Stop+0x48>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005f38:	220b      	movs	r2, #11
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6838      	ldr	r0, [r7, #0]
 8005f3e:	f7fe ffef 	bl	8004f20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <SEGGER_SYSVIEW_Stop+0x48>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20014404 	.word	0x20014404
 8005f5c:	200143d4 	.word	0x200143d4

08005f60 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f66:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6a:	f04f 0120 	mov.w	r1, #32
 8005f6e:	f381 8811 	msr	BASEPRI, r1
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	4845      	ldr	r0, [pc, #276]	; (800608c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005f76:	f7fe fee7 	bl	8004d48 <_PreparePacket>
 8005f7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f84:	4b42      	ldr	r3, [pc, #264]	; (8006090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8a:	e00b      	b.n	8005fa4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	09db      	lsrs	r3, r3, #7
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa8:	d8f0      	bhi.n	8005f8c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbe:	4b34      	ldr	r3, [pc, #208]	; (8006090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	e00b      	b.n	8005fde <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	1c59      	adds	r1, r3, #1
 8005fce:	6279      	str	r1, [r7, #36]	; 0x24
 8005fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	09db      	lsrs	r3, r3, #7
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe2:	d8f0      	bhi.n	8005fc6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	627a      	str	r2, [r7, #36]	; 0x24
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e00b      	b.n	8006018 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	b2da      	uxtb	r2, r3
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	1c59      	adds	r1, r3, #1
 8006008:	61f9      	str	r1, [r7, #28]
 800600a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	09db      	lsrs	r3, r3, #7
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b7f      	cmp	r3, #127	; 0x7f
 800601c:	d8f0      	bhi.n	8006000 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	61fa      	str	r2, [r7, #28]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	e00b      	b.n	8006050 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	6179      	str	r1, [r7, #20]
 8006042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	09db      	lsrs	r3, r3, #7
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b7f      	cmp	r3, #127	; 0x7f
 8006054:	d8f0      	bhi.n	8006038 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	617a      	str	r2, [r7, #20]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006066:	2218      	movs	r2, #24
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7fe ff58 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	4798      	blx	r3
  }
}
 8006084:	bf00      	nop
 8006086:	3730      	adds	r7, #48	; 0x30
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20014404 	.word	0x20014404
 8006090:	200143d4 	.word	0x200143d4

08006094 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b092      	sub	sp, #72	; 0x48
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800609c:	f3ef 8311 	mrs	r3, BASEPRI
 80060a0:	f04f 0120 	mov.w	r1, #32
 80060a4:	f381 8811 	msr	BASEPRI, r1
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	486a      	ldr	r0, [pc, #424]	; (8006254 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80060ac:	f7fe fe4c 	bl	8004d48 <_PreparePacket>
 80060b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b66      	ldr	r3, [pc, #408]	; (8006258 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	643b      	str	r3, [r7, #64]	; 0x40
 80060c6:	e00b      	b.n	80060e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80060c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	6479      	str	r1, [r7, #68]	; 0x44
 80060d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	643b      	str	r3, [r7, #64]	; 0x40
 80060e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e2:	2b7f      	cmp	r3, #127	; 0x7f
 80060e4:	d8f0      	bhi.n	80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80060e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	647a      	str	r2, [r7, #68]	; 0x44
 80060ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006100:	e00b      	b.n	800611a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	b2da      	uxtb	r2, r3
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800610c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	09db      	lsrs	r3, r3, #7
 8006118:	63bb      	str	r3, [r7, #56]	; 0x38
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	2b7f      	cmp	r3, #127	; 0x7f
 800611e:	d8f0      	bhi.n	8006102 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	4619      	mov	r1, r3
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7fe fdd5 	bl	8004ce8 <_EncodeStr>
 800613e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006140:	2209      	movs	r2, #9
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	6938      	ldr	r0, [r7, #16]
 8006146:	f7fe feeb 	bl	8004f20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b40      	ldr	r3, [pc, #256]	; (8006258 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	633b      	str	r3, [r7, #48]	; 0x30
 800615e:	e00b      	b.n	8006178 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	6379      	str	r1, [r7, #52]	; 0x34
 800616a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	09db      	lsrs	r3, r3, #7
 8006176:	633b      	str	r3, [r7, #48]	; 0x30
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d8f0      	bhi.n	8006160 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	637a      	str	r2, [r7, #52]	; 0x34
 8006184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	b2da      	uxtb	r2, r3
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	e00b      	b.n	80061ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	6279      	str	r1, [r7, #36]	; 0x24
 80061de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	09db      	lsrs	r3, r3, #7
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b7f      	cmp	r3, #127	; 0x7f
 80061f0:	d8f0      	bhi.n	80061d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	627a      	str	r2, [r7, #36]	; 0x24
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	61fb      	str	r3, [r7, #28]
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e00b      	b.n	8006224 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	1c59      	adds	r1, r3, #1
 8006214:	61f9      	str	r1, [r7, #28]
 8006216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	09db      	lsrs	r3, r3, #7
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b7f      	cmp	r3, #127	; 0x7f
 8006228:	d8f0      	bhi.n	800620c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	61fa      	str	r2, [r7, #28]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800623a:	2215      	movs	r2, #21
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f7fe fe6e 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f383 8811 	msr	BASEPRI, r3
}
 800624a:	bf00      	nop
 800624c:	3748      	adds	r7, #72	; 0x48
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20014404 	.word	0x20014404
 8006258:	200143d4 	.word	0x200143d4

0800625c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4798      	blx	r3
  }
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200143d4 	.word	0x200143d4

08006284 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	f04f 0120 	mov.w	r1, #32
 8006294:	f381 8811 	msr	BASEPRI, r1
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	480b      	ldr	r0, [pc, #44]	; (80062c8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800629c:	f7fe fd54 	bl	8004d48 <_PreparePacket>
 80062a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062a2:	2280      	movs	r2, #128	; 0x80
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	6938      	ldr	r0, [r7, #16]
 80062a8:	f7fe fd1e 	bl	8004ce8 <_EncodeStr>
 80062ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80062ae:	220e      	movs	r2, #14
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	6938      	ldr	r0, [r7, #16]
 80062b4:	f7fe fe34 	bl	8004f20 <_SendPacket>
  RECORD_END();
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f383 8811 	msr	BASEPRI, r3
}
 80062be:	bf00      	nop
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20014404 	.word	0x20014404

080062cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80062d2:	4b15      	ldr	r3, [pc, #84]	; (8006328 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01a      	beq.n	8006310 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d015      	beq.n	8006310 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80062e4:	4b10      	ldr	r3, [pc, #64]	; (8006328 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4798      	blx	r3
 80062ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80062f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	000a      	movs	r2, r1
 8006300:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006302:	4613      	mov	r3, r2
 8006304:	461a      	mov	r2, r3
 8006306:	4621      	mov	r1, r4
 8006308:	200d      	movs	r0, #13
 800630a:	f7ff fbe7 	bl	8005adc <SEGGER_SYSVIEW_RecordU32x2>
 800630e:	e006      	b.n	800631e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	200c      	movs	r0, #12
 8006318:	f7ff fba4 	bl	8005a64 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bd90      	pop	{r4, r7, pc}
 8006326:	bf00      	nop
 8006328:	200143d4 	.word	0x200143d4
 800632c:	e0001004 	.word	0xe0001004

08006330 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006336:	f3ef 8311 	mrs	r3, BASEPRI
 800633a:	f04f 0120 	mov.w	r1, #32
 800633e:	f381 8811 	msr	BASEPRI, r1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	4819      	ldr	r0, [pc, #100]	; (80063ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006346:	f7fe fcff 	bl	8004d48 <_PreparePacket>
 800634a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006350:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006358:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	e00b      	b.n	800637c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	6179      	str	r1, [r7, #20]
 800636e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	09db      	lsrs	r3, r3, #7
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b7f      	cmp	r3, #127	; 0x7f
 8006380:	d8f0      	bhi.n	8006364 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	617a      	str	r2, [r7, #20]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006392:	2202      	movs	r2, #2
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	68b8      	ldr	r0, [r7, #8]
 8006398:	f7fe fdc2 	bl	8004f20 <_SendPacket>
  RECORD_END();
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f383 8811 	msr	BASEPRI, r3
}
 80063a2:	bf00      	nop
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20014404 	.word	0x20014404
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063ba:	f3ef 8311 	mrs	r3, BASEPRI
 80063be:	f04f 0120 	mov.w	r1, #32
 80063c2:	f381 8811 	msr	BASEPRI, r1
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	4807      	ldr	r0, [pc, #28]	; (80063e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80063ca:	f7fe fcbd 	bl	8004d48 <_PreparePacket>
 80063ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80063d0:	2203      	movs	r2, #3
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6838      	ldr	r0, [r7, #0]
 80063d6:	f7fe fda3 	bl	8004f20 <_SendPacket>
  RECORD_END();
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f383 8811 	msr	BASEPRI, r3
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20014404 	.word	0x20014404

080063ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063f2:	f3ef 8311 	mrs	r3, BASEPRI
 80063f6:	f04f 0120 	mov.w	r1, #32
 80063fa:	f381 8811 	msr	BASEPRI, r1
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	4807      	ldr	r0, [pc, #28]	; (8006420 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006402:	f7fe fca1 	bl	8004d48 <_PreparePacket>
 8006406:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006408:	2212      	movs	r2, #18
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6838      	ldr	r0, [r7, #0]
 800640e:	f7fe fd87 	bl	8004f20 <_SendPacket>
  RECORD_END();
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f383 8811 	msr	BASEPRI, r3
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20014404 	.word	0x20014404

08006424 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800642a:	f3ef 8311 	mrs	r3, BASEPRI
 800642e:	f04f 0120 	mov.w	r1, #32
 8006432:	f381 8811 	msr	BASEPRI, r1
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	4807      	ldr	r0, [pc, #28]	; (8006458 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800643a:	f7fe fc85 	bl	8004d48 <_PreparePacket>
 800643e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006440:	2211      	movs	r2, #17
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6838      	ldr	r0, [r7, #0]
 8006446:	f7fe fd6b 	bl	8004f20 <_SendPacket>
  RECORD_END();
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f383 8811 	msr	BASEPRI, r3
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20014404 	.word	0x20014404

0800645c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006464:	f3ef 8311 	mrs	r3, BASEPRI
 8006468:	f04f 0120 	mov.w	r1, #32
 800646c:	f381 8811 	msr	BASEPRI, r1
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	4819      	ldr	r0, [pc, #100]	; (80064d8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006474:	f7fe fc68 	bl	8004d48 <_PreparePacket>
 8006478:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e00b      	b.n	80064aa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	61f9      	str	r1, [r7, #28]
 800649c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b7f      	cmp	r3, #127	; 0x7f
 80064ae:	d8f0      	bhi.n	8006492 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	61fa      	str	r2, [r7, #28]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80064c0:	2208      	movs	r2, #8
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	6938      	ldr	r0, [r7, #16]
 80064c6:	f7fe fd2b 	bl	8004f20 <_SendPacket>
  RECORD_END();
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f383 8811 	msr	BASEPRI, r3
}
 80064d0:	bf00      	nop
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20014404 	.word	0x20014404
 80064dc:	200143d4 	.word	0x200143d4

080064e0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064e8:	f3ef 8311 	mrs	r3, BASEPRI
 80064ec:	f04f 0120 	mov.w	r1, #32
 80064f0:	f381 8811 	msr	BASEPRI, r1
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	4819      	ldr	r0, [pc, #100]	; (800655c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80064f8:	f7fe fc26 	bl	8004d48 <_PreparePacket>
 80064fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006502:	4b17      	ldr	r3, [pc, #92]	; (8006560 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e00b      	b.n	800652e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	1c59      	adds	r1, r3, #1
 800651e:	61f9      	str	r1, [r7, #28]
 8006520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	09db      	lsrs	r3, r3, #7
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b7f      	cmp	r3, #127	; 0x7f
 8006532:	d8f0      	bhi.n	8006516 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	61fa      	str	r2, [r7, #28]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006544:	2204      	movs	r2, #4
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	6938      	ldr	r0, [r7, #16]
 800654a:	f7fe fce9 	bl	8004f20 <_SendPacket>
  RECORD_END();
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f383 8811 	msr	BASEPRI, r3
}
 8006554:	bf00      	nop
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20014404 	.word	0x20014404
 8006560:	200143d4 	.word	0x200143d4

08006564 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800656c:	f3ef 8311 	mrs	r3, BASEPRI
 8006570:	f04f 0120 	mov.w	r1, #32
 8006574:	f381 8811 	msr	BASEPRI, r1
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	4819      	ldr	r0, [pc, #100]	; (80065e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800657c:	f7fe fbe4 	bl	8004d48 <_PreparePacket>
 8006580:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	e00b      	b.n	80065b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	1c59      	adds	r1, r3, #1
 80065a2:	61f9      	str	r1, [r7, #28]
 80065a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	09db      	lsrs	r3, r3, #7
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b7f      	cmp	r3, #127	; 0x7f
 80065b6:	d8f0      	bhi.n	800659a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	61fa      	str	r2, [r7, #28]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80065c8:	2206      	movs	r2, #6
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	6938      	ldr	r0, [r7, #16]
 80065ce:	f7fe fca7 	bl	8004f20 <_SendPacket>
  RECORD_END();
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f383 8811 	msr	BASEPRI, r3
}
 80065d8:	bf00      	nop
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20014404 	.word	0x20014404
 80065e4:	200143d4 	.word	0x200143d4

080065e8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	1ad3      	subs	r3, r2, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	200143d4 	.word	0x200143d4

08006608 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b08c      	sub	sp, #48	; 0x30
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006612:	4b40      	ldr	r3, [pc, #256]	; (8006714 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d077      	beq.n	800670a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800661a:	4b3e      	ldr	r3, [pc, #248]	; (8006714 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006620:	2300      	movs	r3, #0
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
 8006624:	e008      	b.n	8006638 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	3301      	adds	r3, #1
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663c:	429a      	cmp	r2, r3
 800663e:	d3f2      	bcc.n	8006626 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006640:	e000      	b.n	8006644 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006642:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d055      	beq.n	80066f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800664a:	f3ef 8311 	mrs	r3, BASEPRI
 800664e:	f04f 0120 	mov.w	r1, #32
 8006652:	f381 8811 	msr	BASEPRI, r1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	482f      	ldr	r0, [pc, #188]	; (8006718 <SEGGER_SYSVIEW_SendModule+0x110>)
 800665a:	f7fe fb75 	bl	8004d48 <_PreparePacket>
 800665e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	e00b      	b.n	8006686 <SEGGER_SYSVIEW_SendModule+0x7e>
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	6279      	str	r1, [r7, #36]	; 0x24
 8006678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	2b7f      	cmp	r3, #127	; 0x7f
 800668a:	d8f0      	bhi.n	800666e <SEGGER_SYSVIEW_SendModule+0x66>
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	627a      	str	r2, [r7, #36]	; 0x24
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	61fb      	str	r3, [r7, #28]
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	e00b      	b.n	80066c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	61f9      	str	r1, [r7, #28]
 80066b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	09db      	lsrs	r3, r3, #7
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b7f      	cmp	r3, #127	; 0x7f
 80066c4:	d8f0      	bhi.n	80066a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	61fa      	str	r2, [r7, #28]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2280      	movs	r2, #128	; 0x80
 80066dc:	4619      	mov	r1, r3
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7fe fb02 	bl	8004ce8 <_EncodeStr>
 80066e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80066e6:	2216      	movs	r2, #22
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f7fe fc18 	bl	8004f20 <_SendPacket>
      RECORD_END();
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <SEGGER_SYSVIEW_SendModule+0x102>
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4798      	blx	r3
    }
  }
}
 800670a:	bf00      	nop
 800670c:	3730      	adds	r7, #48	; 0x30
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200143fc 	.word	0x200143fc
 8006718:	20014404 	.word	0x20014404

0800671c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00f      	beq.n	800674a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f2      	bne.n	8006730 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200143fc 	.word	0x200143fc

08006758 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800675e:	f3ef 8311 	mrs	r3, BASEPRI
 8006762:	f04f 0120 	mov.w	r1, #32
 8006766:	f381 8811 	msr	BASEPRI, r1
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	4817      	ldr	r0, [pc, #92]	; (80067cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800676e:	f7fe faeb 	bl	8004d48 <_PreparePacket>
 8006772:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	e00b      	b.n	800679c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	1c59      	adds	r1, r3, #1
 800678c:	6179      	str	r1, [r7, #20]
 800678e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	09db      	lsrs	r3, r3, #7
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b7f      	cmp	r3, #127	; 0x7f
 80067a0:	d8f0      	bhi.n	8006784 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	617a      	str	r2, [r7, #20]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80067b2:	221b      	movs	r2, #27
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	68b8      	ldr	r0, [r7, #8]
 80067b8:	f7fe fbb2 	bl	8004f20 <_SendPacket>
  RECORD_END();
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f383 8811 	msr	BASEPRI, r3
}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20014404 	.word	0x20014404
 80067d0:	20014400 	.word	0x20014400

080067d4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80067d4:	b40f      	push	{r0, r1, r2, r3}
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80067e2:	1d3b      	adds	r3, r7, #4
 80067e4:	461a      	mov	r2, r3
 80067e6:	2100      	movs	r1, #0
 80067e8:	6938      	ldr	r0, [r7, #16]
 80067ea:	f7fe fea9 	bl	8005540 <_VPrintTarget>
  va_end(ParamList);
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f8:	b004      	add	sp, #16
 80067fa:	4770      	bx	lr

080067fc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006804:	f3ef 8311 	mrs	r3, BASEPRI
 8006808:	f04f 0120 	mov.w	r1, #32
 800680c:	f381 8811 	msr	BASEPRI, r1
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	4827      	ldr	r0, [pc, #156]	; (80068b0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006814:	f7fe fa98 	bl	8004d48 <_PreparePacket>
 8006818:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800681a:	2280      	movs	r2, #128	; 0x80
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	6938      	ldr	r0, [r7, #16]
 8006820:	f7fe fa62 	bl	8004ce8 <_EncodeStr>
 8006824:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
 800682a:	2301      	movs	r3, #1
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	e00b      	b.n	8006848 <SEGGER_SYSVIEW_Warn+0x4c>
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	6279      	str	r1, [r7, #36]	; 0x24
 800683a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	09db      	lsrs	r3, r3, #7
 8006846:	623b      	str	r3, [r7, #32]
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2b7f      	cmp	r3, #127	; 0x7f
 800684c:	d8f0      	bhi.n	8006830 <SEGGER_SYSVIEW_Warn+0x34>
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	627a      	str	r2, [r7, #36]	; 0x24
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e00b      	b.n	8006880 <SEGGER_SYSVIEW_Warn+0x84>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1c59      	adds	r1, r3, #1
 8006870:	61f9      	str	r1, [r7, #28]
 8006872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b7f      	cmp	r3, #127	; 0x7f
 8006884:	d8f0      	bhi.n	8006868 <SEGGER_SYSVIEW_Warn+0x6c>
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	61fa      	str	r2, [r7, #28]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006896:	221a      	movs	r2, #26
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f7fe fb40 	bl	8004f20 <_SendPacket>
  RECORD_END();
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f383 8811 	msr	BASEPRI, r3
}
 80068a6:	bf00      	nop
 80068a8:	3728      	adds	r7, #40	; 0x28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20014404 	.word	0x20014404

080068b4 <sniprintf>:
 80068b4:	b40c      	push	{r2, r3}
 80068b6:	b530      	push	{r4, r5, lr}
 80068b8:	4b17      	ldr	r3, [pc, #92]	; (8006918 <sniprintf+0x64>)
 80068ba:	1e0c      	subs	r4, r1, #0
 80068bc:	681d      	ldr	r5, [r3, #0]
 80068be:	b09d      	sub	sp, #116	; 0x74
 80068c0:	da08      	bge.n	80068d4 <sniprintf+0x20>
 80068c2:	238b      	movs	r3, #139	; 0x8b
 80068c4:	602b      	str	r3, [r5, #0]
 80068c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ca:	b01d      	add	sp, #116	; 0x74
 80068cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d0:	b002      	add	sp, #8
 80068d2:	4770      	bx	lr
 80068d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80068d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068dc:	bf14      	ite	ne
 80068de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80068e2:	4623      	moveq	r3, r4
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068ec:	9002      	str	r0, [sp, #8]
 80068ee:	9006      	str	r0, [sp, #24]
 80068f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068f6:	ab21      	add	r3, sp, #132	; 0x84
 80068f8:	a902      	add	r1, sp, #8
 80068fa:	4628      	mov	r0, r5
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	f000 f9ab 	bl	8006c58 <_svfiprintf_r>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	bfbc      	itt	lt
 8006906:	238b      	movlt	r3, #139	; 0x8b
 8006908:	602b      	strlt	r3, [r5, #0]
 800690a:	2c00      	cmp	r4, #0
 800690c:	d0dd      	beq.n	80068ca <sniprintf+0x16>
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e7d9      	b.n	80068ca <sniprintf+0x16>
 8006916:	bf00      	nop
 8006918:	20000060 	.word	0x20000060

0800691c <memcmp>:
 800691c:	b510      	push	{r4, lr}
 800691e:	3901      	subs	r1, #1
 8006920:	4402      	add	r2, r0
 8006922:	4290      	cmp	r0, r2
 8006924:	d101      	bne.n	800692a <memcmp+0xe>
 8006926:	2000      	movs	r0, #0
 8006928:	e005      	b.n	8006936 <memcmp+0x1a>
 800692a:	7803      	ldrb	r3, [r0, #0]
 800692c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006930:	42a3      	cmp	r3, r4
 8006932:	d001      	beq.n	8006938 <memcmp+0x1c>
 8006934:	1b18      	subs	r0, r3, r4
 8006936:	bd10      	pop	{r4, pc}
 8006938:	3001      	adds	r0, #1
 800693a:	e7f2      	b.n	8006922 <memcmp+0x6>

0800693c <memset>:
 800693c:	4402      	add	r2, r0
 800693e:	4603      	mov	r3, r0
 8006940:	4293      	cmp	r3, r2
 8006942:	d100      	bne.n	8006946 <memset+0xa>
 8006944:	4770      	bx	lr
 8006946:	f803 1b01 	strb.w	r1, [r3], #1
 800694a:	e7f9      	b.n	8006940 <memset+0x4>

0800694c <__libc_init_array>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4d0d      	ldr	r5, [pc, #52]	; (8006984 <__libc_init_array+0x38>)
 8006950:	4c0d      	ldr	r4, [pc, #52]	; (8006988 <__libc_init_array+0x3c>)
 8006952:	1b64      	subs	r4, r4, r5
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	2600      	movs	r6, #0
 8006958:	42a6      	cmp	r6, r4
 800695a:	d109      	bne.n	8006970 <__libc_init_array+0x24>
 800695c:	4d0b      	ldr	r5, [pc, #44]	; (800698c <__libc_init_array+0x40>)
 800695e:	4c0c      	ldr	r4, [pc, #48]	; (8006990 <__libc_init_array+0x44>)
 8006960:	f000 fc78 	bl	8007254 <_init>
 8006964:	1b64      	subs	r4, r4, r5
 8006966:	10a4      	asrs	r4, r4, #2
 8006968:	2600      	movs	r6, #0
 800696a:	42a6      	cmp	r6, r4
 800696c:	d105      	bne.n	800697a <__libc_init_array+0x2e>
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	f855 3b04 	ldr.w	r3, [r5], #4
 8006974:	4798      	blx	r3
 8006976:	3601      	adds	r6, #1
 8006978:	e7ee      	b.n	8006958 <__libc_init_array+0xc>
 800697a:	f855 3b04 	ldr.w	r3, [r5], #4
 800697e:	4798      	blx	r3
 8006980:	3601      	adds	r6, #1
 8006982:	e7f2      	b.n	800696a <__libc_init_array+0x1e>
 8006984:	0800741c 	.word	0x0800741c
 8006988:	0800741c 	.word	0x0800741c
 800698c:	0800741c 	.word	0x0800741c
 8006990:	08007420 	.word	0x08007420

08006994 <__retarget_lock_acquire_recursive>:
 8006994:	4770      	bx	lr

08006996 <__retarget_lock_release_recursive>:
 8006996:	4770      	bx	lr

08006998 <memcpy>:
 8006998:	440a      	add	r2, r1
 800699a:	4291      	cmp	r1, r2
 800699c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80069a0:	d100      	bne.n	80069a4 <memcpy+0xc>
 80069a2:	4770      	bx	lr
 80069a4:	b510      	push	{r4, lr}
 80069a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ae:	4291      	cmp	r1, r2
 80069b0:	d1f9      	bne.n	80069a6 <memcpy+0xe>
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <_free_r>:
 80069b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069b6:	2900      	cmp	r1, #0
 80069b8:	d044      	beq.n	8006a44 <_free_r+0x90>
 80069ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069be:	9001      	str	r0, [sp, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f1a1 0404 	sub.w	r4, r1, #4
 80069c6:	bfb8      	it	lt
 80069c8:	18e4      	addlt	r4, r4, r3
 80069ca:	f000 f8df 	bl	8006b8c <__malloc_lock>
 80069ce:	4a1e      	ldr	r2, [pc, #120]	; (8006a48 <_free_r+0x94>)
 80069d0:	9801      	ldr	r0, [sp, #4]
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	b933      	cbnz	r3, 80069e4 <_free_r+0x30>
 80069d6:	6063      	str	r3, [r4, #4]
 80069d8:	6014      	str	r4, [r2, #0]
 80069da:	b003      	add	sp, #12
 80069dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069e0:	f000 b8da 	b.w	8006b98 <__malloc_unlock>
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d908      	bls.n	80069fa <_free_r+0x46>
 80069e8:	6825      	ldr	r5, [r4, #0]
 80069ea:	1961      	adds	r1, r4, r5
 80069ec:	428b      	cmp	r3, r1
 80069ee:	bf01      	itttt	eq
 80069f0:	6819      	ldreq	r1, [r3, #0]
 80069f2:	685b      	ldreq	r3, [r3, #4]
 80069f4:	1949      	addeq	r1, r1, r5
 80069f6:	6021      	streq	r1, [r4, #0]
 80069f8:	e7ed      	b.n	80069d6 <_free_r+0x22>
 80069fa:	461a      	mov	r2, r3
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	b10b      	cbz	r3, 8006a04 <_free_r+0x50>
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	d9fa      	bls.n	80069fa <_free_r+0x46>
 8006a04:	6811      	ldr	r1, [r2, #0]
 8006a06:	1855      	adds	r5, r2, r1
 8006a08:	42a5      	cmp	r5, r4
 8006a0a:	d10b      	bne.n	8006a24 <_free_r+0x70>
 8006a0c:	6824      	ldr	r4, [r4, #0]
 8006a0e:	4421      	add	r1, r4
 8006a10:	1854      	adds	r4, r2, r1
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	6011      	str	r1, [r2, #0]
 8006a16:	d1e0      	bne.n	80069da <_free_r+0x26>
 8006a18:	681c      	ldr	r4, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	6053      	str	r3, [r2, #4]
 8006a1e:	440c      	add	r4, r1
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	e7da      	b.n	80069da <_free_r+0x26>
 8006a24:	d902      	bls.n	8006a2c <_free_r+0x78>
 8006a26:	230c      	movs	r3, #12
 8006a28:	6003      	str	r3, [r0, #0]
 8006a2a:	e7d6      	b.n	80069da <_free_r+0x26>
 8006a2c:	6825      	ldr	r5, [r4, #0]
 8006a2e:	1961      	adds	r1, r4, r5
 8006a30:	428b      	cmp	r3, r1
 8006a32:	bf04      	itt	eq
 8006a34:	6819      	ldreq	r1, [r3, #0]
 8006a36:	685b      	ldreq	r3, [r3, #4]
 8006a38:	6063      	str	r3, [r4, #4]
 8006a3a:	bf04      	itt	eq
 8006a3c:	1949      	addeq	r1, r1, r5
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	6054      	str	r4, [r2, #4]
 8006a42:	e7ca      	b.n	80069da <_free_r+0x26>
 8006a44:	b003      	add	sp, #12
 8006a46:	bd30      	pop	{r4, r5, pc}
 8006a48:	20014628 	.word	0x20014628

08006a4c <sbrk_aligned>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4e0e      	ldr	r6, [pc, #56]	; (8006a88 <sbrk_aligned+0x3c>)
 8006a50:	460c      	mov	r4, r1
 8006a52:	6831      	ldr	r1, [r6, #0]
 8006a54:	4605      	mov	r5, r0
 8006a56:	b911      	cbnz	r1, 8006a5e <sbrk_aligned+0x12>
 8006a58:	f000 fba6 	bl	80071a8 <_sbrk_r>
 8006a5c:	6030      	str	r0, [r6, #0]
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 fba1 	bl	80071a8 <_sbrk_r>
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d00a      	beq.n	8006a80 <sbrk_aligned+0x34>
 8006a6a:	1cc4      	adds	r4, r0, #3
 8006a6c:	f024 0403 	bic.w	r4, r4, #3
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d007      	beq.n	8006a84 <sbrk_aligned+0x38>
 8006a74:	1a21      	subs	r1, r4, r0
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fb96 	bl	80071a8 <_sbrk_r>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d101      	bne.n	8006a84 <sbrk_aligned+0x38>
 8006a80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a84:	4620      	mov	r0, r4
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	2001462c 	.word	0x2001462c

08006a8c <_malloc_r>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	1ccd      	adds	r5, r1, #3
 8006a92:	f025 0503 	bic.w	r5, r5, #3
 8006a96:	3508      	adds	r5, #8
 8006a98:	2d0c      	cmp	r5, #12
 8006a9a:	bf38      	it	cc
 8006a9c:	250c      	movcc	r5, #12
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	db01      	blt.n	8006aa8 <_malloc_r+0x1c>
 8006aa4:	42a9      	cmp	r1, r5
 8006aa6:	d905      	bls.n	8006ab4 <_malloc_r+0x28>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	2600      	movs	r6, #0
 8006aae:	4630      	mov	r0, r6
 8006ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b88 <_malloc_r+0xfc>
 8006ab8:	f000 f868 	bl	8006b8c <__malloc_lock>
 8006abc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac0:	461c      	mov	r4, r3
 8006ac2:	bb5c      	cbnz	r4, 8006b1c <_malloc_r+0x90>
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f7ff ffc0 	bl	8006a4c <sbrk_aligned>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	4604      	mov	r4, r0
 8006ad0:	d155      	bne.n	8006b7e <_malloc_r+0xf2>
 8006ad2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad6:	4626      	mov	r6, r4
 8006ad8:	2e00      	cmp	r6, #0
 8006ada:	d145      	bne.n	8006b68 <_malloc_r+0xdc>
 8006adc:	2c00      	cmp	r4, #0
 8006ade:	d048      	beq.n	8006b72 <_malloc_r+0xe6>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	eb04 0903 	add.w	r9, r4, r3
 8006aea:	f000 fb5d 	bl	80071a8 <_sbrk_r>
 8006aee:	4581      	cmp	r9, r0
 8006af0:	d13f      	bne.n	8006b72 <_malloc_r+0xe6>
 8006af2:	6821      	ldr	r1, [r4, #0]
 8006af4:	1a6d      	subs	r5, r5, r1
 8006af6:	4629      	mov	r1, r5
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7ff ffa7 	bl	8006a4c <sbrk_aligned>
 8006afe:	3001      	adds	r0, #1
 8006b00:	d037      	beq.n	8006b72 <_malloc_r+0xe6>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	442b      	add	r3, r5
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d038      	beq.n	8006b82 <_malloc_r+0xf6>
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	42a2      	cmp	r2, r4
 8006b14:	d12b      	bne.n	8006b6e <_malloc_r+0xe2>
 8006b16:	2200      	movs	r2, #0
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	e00f      	b.n	8006b3c <_malloc_r+0xb0>
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	1b52      	subs	r2, r2, r5
 8006b20:	d41f      	bmi.n	8006b62 <_malloc_r+0xd6>
 8006b22:	2a0b      	cmp	r2, #11
 8006b24:	d917      	bls.n	8006b56 <_malloc_r+0xca>
 8006b26:	1961      	adds	r1, r4, r5
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	6025      	str	r5, [r4, #0]
 8006b2c:	bf18      	it	ne
 8006b2e:	6059      	strne	r1, [r3, #4]
 8006b30:	6863      	ldr	r3, [r4, #4]
 8006b32:	bf08      	it	eq
 8006b34:	f8c8 1000 	streq.w	r1, [r8]
 8006b38:	5162      	str	r2, [r4, r5]
 8006b3a:	604b      	str	r3, [r1, #4]
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f104 060b 	add.w	r6, r4, #11
 8006b42:	f000 f829 	bl	8006b98 <__malloc_unlock>
 8006b46:	f026 0607 	bic.w	r6, r6, #7
 8006b4a:	1d23      	adds	r3, r4, #4
 8006b4c:	1af2      	subs	r2, r6, r3
 8006b4e:	d0ae      	beq.n	8006aae <_malloc_r+0x22>
 8006b50:	1b9b      	subs	r3, r3, r6
 8006b52:	50a3      	str	r3, [r4, r2]
 8006b54:	e7ab      	b.n	8006aae <_malloc_r+0x22>
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	6862      	ldr	r2, [r4, #4]
 8006b5a:	d1dd      	bne.n	8006b18 <_malloc_r+0x8c>
 8006b5c:	f8c8 2000 	str.w	r2, [r8]
 8006b60:	e7ec      	b.n	8006b3c <_malloc_r+0xb0>
 8006b62:	4623      	mov	r3, r4
 8006b64:	6864      	ldr	r4, [r4, #4]
 8006b66:	e7ac      	b.n	8006ac2 <_malloc_r+0x36>
 8006b68:	4634      	mov	r4, r6
 8006b6a:	6876      	ldr	r6, [r6, #4]
 8006b6c:	e7b4      	b.n	8006ad8 <_malloc_r+0x4c>
 8006b6e:	4613      	mov	r3, r2
 8006b70:	e7cc      	b.n	8006b0c <_malloc_r+0x80>
 8006b72:	230c      	movs	r3, #12
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	4638      	mov	r0, r7
 8006b78:	f000 f80e 	bl	8006b98 <__malloc_unlock>
 8006b7c:	e797      	b.n	8006aae <_malloc_r+0x22>
 8006b7e:	6025      	str	r5, [r4, #0]
 8006b80:	e7dc      	b.n	8006b3c <_malloc_r+0xb0>
 8006b82:	605b      	str	r3, [r3, #4]
 8006b84:	deff      	udf	#255	; 0xff
 8006b86:	bf00      	nop
 8006b88:	20014628 	.word	0x20014628

08006b8c <__malloc_lock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__malloc_lock+0x8>)
 8006b8e:	f7ff bf01 	b.w	8006994 <__retarget_lock_acquire_recursive>
 8006b92:	bf00      	nop
 8006b94:	20014624 	.word	0x20014624

08006b98 <__malloc_unlock>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__malloc_unlock+0x8>)
 8006b9a:	f7ff befc 	b.w	8006996 <__retarget_lock_release_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	20014624 	.word	0x20014624

08006ba4 <__ssputs_r>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	688e      	ldr	r6, [r1, #8]
 8006baa:	461f      	mov	r7, r3
 8006bac:	42be      	cmp	r6, r7
 8006bae:	680b      	ldr	r3, [r1, #0]
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	d82c      	bhi.n	8006c12 <__ssputs_r+0x6e>
 8006bb8:	898a      	ldrh	r2, [r1, #12]
 8006bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bbe:	d026      	beq.n	8006c0e <__ssputs_r+0x6a>
 8006bc0:	6965      	ldr	r5, [r4, #20]
 8006bc2:	6909      	ldr	r1, [r1, #16]
 8006bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bc8:	eba3 0901 	sub.w	r9, r3, r1
 8006bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd0:	1c7b      	adds	r3, r7, #1
 8006bd2:	444b      	add	r3, r9
 8006bd4:	106d      	asrs	r5, r5, #1
 8006bd6:	429d      	cmp	r5, r3
 8006bd8:	bf38      	it	cc
 8006bda:	461d      	movcc	r5, r3
 8006bdc:	0553      	lsls	r3, r2, #21
 8006bde:	d527      	bpl.n	8006c30 <__ssputs_r+0x8c>
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7ff ff53 	bl	8006a8c <_malloc_r>
 8006be6:	4606      	mov	r6, r0
 8006be8:	b360      	cbz	r0, 8006c44 <__ssputs_r+0xa0>
 8006bea:	6921      	ldr	r1, [r4, #16]
 8006bec:	464a      	mov	r2, r9
 8006bee:	f7ff fed3 	bl	8006998 <memcpy>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	6126      	str	r6, [r4, #16]
 8006c00:	6165      	str	r5, [r4, #20]
 8006c02:	444e      	add	r6, r9
 8006c04:	eba5 0509 	sub.w	r5, r5, r9
 8006c08:	6026      	str	r6, [r4, #0]
 8006c0a:	60a5      	str	r5, [r4, #8]
 8006c0c:	463e      	mov	r6, r7
 8006c0e:	42be      	cmp	r6, r7
 8006c10:	d900      	bls.n	8006c14 <__ssputs_r+0x70>
 8006c12:	463e      	mov	r6, r7
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	4632      	mov	r2, r6
 8006c18:	4641      	mov	r1, r8
 8006c1a:	f000 faab 	bl	8007174 <memmove>
 8006c1e:	68a3      	ldr	r3, [r4, #8]
 8006c20:	1b9b      	subs	r3, r3, r6
 8006c22:	60a3      	str	r3, [r4, #8]
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	4433      	add	r3, r6
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c30:	462a      	mov	r2, r5
 8006c32:	f000 fac9 	bl	80071c8 <_realloc_r>
 8006c36:	4606      	mov	r6, r0
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1e0      	bne.n	8006bfe <__ssputs_r+0x5a>
 8006c3c:	6921      	ldr	r1, [r4, #16]
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f7ff feb8 	bl	80069b4 <_free_r>
 8006c44:	230c      	movs	r3, #12
 8006c46:	f8ca 3000 	str.w	r3, [sl]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c56:	e7e9      	b.n	8006c2c <__ssputs_r+0x88>

08006c58 <_svfiprintf_r>:
 8006c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	4698      	mov	r8, r3
 8006c5e:	898b      	ldrh	r3, [r1, #12]
 8006c60:	061b      	lsls	r3, r3, #24
 8006c62:	b09d      	sub	sp, #116	; 0x74
 8006c64:	4607      	mov	r7, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	4614      	mov	r4, r2
 8006c6a:	d50e      	bpl.n	8006c8a <_svfiprintf_r+0x32>
 8006c6c:	690b      	ldr	r3, [r1, #16]
 8006c6e:	b963      	cbnz	r3, 8006c8a <_svfiprintf_r+0x32>
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	f7ff ff0b 	bl	8006a8c <_malloc_r>
 8006c76:	6028      	str	r0, [r5, #0]
 8006c78:	6128      	str	r0, [r5, #16]
 8006c7a:	b920      	cbnz	r0, 8006c86 <_svfiprintf_r+0x2e>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c84:	e0d0      	b.n	8006e28 <_svfiprintf_r+0x1d0>
 8006c86:	2340      	movs	r3, #64	; 0x40
 8006c88:	616b      	str	r3, [r5, #20]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8e:	2320      	movs	r3, #32
 8006c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c98:	2330      	movs	r3, #48	; 0x30
 8006c9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e40 <_svfiprintf_r+0x1e8>
 8006c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca2:	f04f 0901 	mov.w	r9, #1
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	469a      	mov	sl, r3
 8006caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cae:	b10a      	cbz	r2, 8006cb4 <_svfiprintf_r+0x5c>
 8006cb0:	2a25      	cmp	r2, #37	; 0x25
 8006cb2:	d1f9      	bne.n	8006ca8 <_svfiprintf_r+0x50>
 8006cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb8:	d00b      	beq.n	8006cd2 <_svfiprintf_r+0x7a>
 8006cba:	465b      	mov	r3, fp
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7ff ff6f 	bl	8006ba4 <__ssputs_r>
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f000 80a9 	beq.w	8006e1e <_svfiprintf_r+0x1c6>
 8006ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cce:	445a      	add	r2, fp
 8006cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80a1 	beq.w	8006e1e <_svfiprintf_r+0x1c6>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce6:	f10a 0a01 	add.w	sl, sl, #1
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	9307      	str	r3, [sp, #28]
 8006cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf4:	4654      	mov	r4, sl
 8006cf6:	2205      	movs	r2, #5
 8006cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfc:	4850      	ldr	r0, [pc, #320]	; (8006e40 <_svfiprintf_r+0x1e8>)
 8006cfe:	f7f9 fad7 	bl	80002b0 <memchr>
 8006d02:	9a04      	ldr	r2, [sp, #16]
 8006d04:	b9d8      	cbnz	r0, 8006d3e <_svfiprintf_r+0xe6>
 8006d06:	06d0      	lsls	r0, r2, #27
 8006d08:	bf44      	itt	mi
 8006d0a:	2320      	movmi	r3, #32
 8006d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d10:	0711      	lsls	r1, r2, #28
 8006d12:	bf44      	itt	mi
 8006d14:	232b      	movmi	r3, #43	; 0x2b
 8006d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d20:	d015      	beq.n	8006d4e <_svfiprintf_r+0xf6>
 8006d22:	9a07      	ldr	r2, [sp, #28]
 8006d24:	4654      	mov	r4, sl
 8006d26:	2000      	movs	r0, #0
 8006d28:	f04f 0c0a 	mov.w	ip, #10
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d32:	3b30      	subs	r3, #48	; 0x30
 8006d34:	2b09      	cmp	r3, #9
 8006d36:	d94d      	bls.n	8006dd4 <_svfiprintf_r+0x17c>
 8006d38:	b1b0      	cbz	r0, 8006d68 <_svfiprintf_r+0x110>
 8006d3a:	9207      	str	r2, [sp, #28]
 8006d3c:	e014      	b.n	8006d68 <_svfiprintf_r+0x110>
 8006d3e:	eba0 0308 	sub.w	r3, r0, r8
 8006d42:	fa09 f303 	lsl.w	r3, r9, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	46a2      	mov	sl, r4
 8006d4c:	e7d2      	b.n	8006cf4 <_svfiprintf_r+0x9c>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	1d19      	adds	r1, r3, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	9103      	str	r1, [sp, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfbb      	ittet	lt
 8006d5a:	425b      	neglt	r3, r3
 8006d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d60:	9307      	strge	r3, [sp, #28]
 8006d62:	9307      	strlt	r3, [sp, #28]
 8006d64:	bfb8      	it	lt
 8006d66:	9204      	strlt	r2, [sp, #16]
 8006d68:	7823      	ldrb	r3, [r4, #0]
 8006d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6c:	d10c      	bne.n	8006d88 <_svfiprintf_r+0x130>
 8006d6e:	7863      	ldrb	r3, [r4, #1]
 8006d70:	2b2a      	cmp	r3, #42	; 0x2a
 8006d72:	d134      	bne.n	8006dde <_svfiprintf_r+0x186>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	1d1a      	adds	r2, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	9203      	str	r2, [sp, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bfb8      	it	lt
 8006d80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d84:	3402      	adds	r4, #2
 8006d86:	9305      	str	r3, [sp, #20]
 8006d88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e50 <_svfiprintf_r+0x1f8>
 8006d8c:	7821      	ldrb	r1, [r4, #0]
 8006d8e:	2203      	movs	r2, #3
 8006d90:	4650      	mov	r0, sl
 8006d92:	f7f9 fa8d 	bl	80002b0 <memchr>
 8006d96:	b138      	cbz	r0, 8006da8 <_svfiprintf_r+0x150>
 8006d98:	9b04      	ldr	r3, [sp, #16]
 8006d9a:	eba0 000a 	sub.w	r0, r0, sl
 8006d9e:	2240      	movs	r2, #64	; 0x40
 8006da0:	4082      	lsls	r2, r0
 8006da2:	4313      	orrs	r3, r2
 8006da4:	3401      	adds	r4, #1
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dac:	4825      	ldr	r0, [pc, #148]	; (8006e44 <_svfiprintf_r+0x1ec>)
 8006dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db2:	2206      	movs	r2, #6
 8006db4:	f7f9 fa7c 	bl	80002b0 <memchr>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d038      	beq.n	8006e2e <_svfiprintf_r+0x1d6>
 8006dbc:	4b22      	ldr	r3, [pc, #136]	; (8006e48 <_svfiprintf_r+0x1f0>)
 8006dbe:	bb1b      	cbnz	r3, 8006e08 <_svfiprintf_r+0x1b0>
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	3307      	adds	r3, #7
 8006dc4:	f023 0307 	bic.w	r3, r3, #7
 8006dc8:	3308      	adds	r3, #8
 8006dca:	9303      	str	r3, [sp, #12]
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	4433      	add	r3, r6
 8006dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd2:	e768      	b.n	8006ca6 <_svfiprintf_r+0x4e>
 8006dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd8:	460c      	mov	r4, r1
 8006dda:	2001      	movs	r0, #1
 8006ddc:	e7a6      	b.n	8006d2c <_svfiprintf_r+0xd4>
 8006dde:	2300      	movs	r3, #0
 8006de0:	3401      	adds	r4, #1
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	4619      	mov	r1, r3
 8006de6:	f04f 0c0a 	mov.w	ip, #10
 8006dea:	4620      	mov	r0, r4
 8006dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df0:	3a30      	subs	r2, #48	; 0x30
 8006df2:	2a09      	cmp	r2, #9
 8006df4:	d903      	bls.n	8006dfe <_svfiprintf_r+0x1a6>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0c6      	beq.n	8006d88 <_svfiprintf_r+0x130>
 8006dfa:	9105      	str	r1, [sp, #20]
 8006dfc:	e7c4      	b.n	8006d88 <_svfiprintf_r+0x130>
 8006dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e02:	4604      	mov	r4, r0
 8006e04:	2301      	movs	r3, #1
 8006e06:	e7f0      	b.n	8006dea <_svfiprintf_r+0x192>
 8006e08:	ab03      	add	r3, sp, #12
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <_svfiprintf_r+0x1f4>)
 8006e10:	a904      	add	r1, sp, #16
 8006e12:	4638      	mov	r0, r7
 8006e14:	f3af 8000 	nop.w
 8006e18:	1c42      	adds	r2, r0, #1
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	d1d6      	bne.n	8006dcc <_svfiprintf_r+0x174>
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	065b      	lsls	r3, r3, #25
 8006e22:	f53f af2d 	bmi.w	8006c80 <_svfiprintf_r+0x28>
 8006e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e28:	b01d      	add	sp, #116	; 0x74
 8006e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <_svfiprintf_r+0x1f4>)
 8006e36:	a904      	add	r1, sp, #16
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f000 f879 	bl	8006f30 <_printf_i>
 8006e3e:	e7eb      	b.n	8006e18 <_svfiprintf_r+0x1c0>
 8006e40:	080073e0 	.word	0x080073e0
 8006e44:	080073ea 	.word	0x080073ea
 8006e48:	00000000 	.word	0x00000000
 8006e4c:	08006ba5 	.word	0x08006ba5
 8006e50:	080073e6 	.word	0x080073e6

08006e54 <_printf_common>:
 8006e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	4616      	mov	r6, r2
 8006e5a:	4699      	mov	r9, r3
 8006e5c:	688a      	ldr	r2, [r1, #8]
 8006e5e:	690b      	ldr	r3, [r1, #16]
 8006e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	bfb8      	it	lt
 8006e68:	4613      	movlt	r3, r2
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e70:	4607      	mov	r7, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b10a      	cbz	r2, 8006e7a <_printf_common+0x26>
 8006e76:	3301      	adds	r3, #1
 8006e78:	6033      	str	r3, [r6, #0]
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	0699      	lsls	r1, r3, #26
 8006e7e:	bf42      	ittt	mi
 8006e80:	6833      	ldrmi	r3, [r6, #0]
 8006e82:	3302      	addmi	r3, #2
 8006e84:	6033      	strmi	r3, [r6, #0]
 8006e86:	6825      	ldr	r5, [r4, #0]
 8006e88:	f015 0506 	ands.w	r5, r5, #6
 8006e8c:	d106      	bne.n	8006e9c <_printf_common+0x48>
 8006e8e:	f104 0a19 	add.w	sl, r4, #25
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	6832      	ldr	r2, [r6, #0]
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	dc26      	bgt.n	8006eea <_printf_common+0x96>
 8006e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ea0:	1e13      	subs	r3, r2, #0
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	bf18      	it	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	0692      	lsls	r2, r2, #26
 8006eaa:	d42b      	bmi.n	8006f04 <_printf_common+0xb0>
 8006eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	47c0      	blx	r8
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d01e      	beq.n	8006ef8 <_printf_common+0xa4>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	f003 0306 	and.w	r3, r3, #6
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	bf02      	ittt	eq
 8006ec6:	68e5      	ldreq	r5, [r4, #12]
 8006ec8:	6833      	ldreq	r3, [r6, #0]
 8006eca:	1aed      	subeq	r5, r5, r3
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	bf0c      	ite	eq
 8006ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed4:	2500      	movne	r5, #0
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bfc4      	itt	gt
 8006eda:	1a9b      	subgt	r3, r3, r2
 8006edc:	18ed      	addgt	r5, r5, r3
 8006ede:	2600      	movs	r6, #0
 8006ee0:	341a      	adds	r4, #26
 8006ee2:	42b5      	cmp	r5, r6
 8006ee4:	d11a      	bne.n	8006f1c <_printf_common+0xc8>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e008      	b.n	8006efc <_printf_common+0xa8>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4652      	mov	r2, sl
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	47c0      	blx	r8
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d103      	bne.n	8006f00 <_printf_common+0xac>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7c6      	b.n	8006e92 <_printf_common+0x3e>
 8006f04:	18e1      	adds	r1, r4, r3
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	2030      	movs	r0, #48	; 0x30
 8006f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f0e:	4422      	add	r2, r4
 8006f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f18:	3302      	adds	r3, #2
 8006f1a:	e7c7      	b.n	8006eac <_printf_common+0x58>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4649      	mov	r1, r9
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c0      	blx	r8
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0e6      	beq.n	8006ef8 <_printf_common+0xa4>
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7d9      	b.n	8006ee2 <_printf_common+0x8e>
	...

08006f30 <_printf_i>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	7e0f      	ldrb	r7, [r1, #24]
 8006f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f38:	2f78      	cmp	r7, #120	; 0x78
 8006f3a:	4691      	mov	r9, r2
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	469a      	mov	sl, r3
 8006f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f46:	d807      	bhi.n	8006f58 <_printf_i+0x28>
 8006f48:	2f62      	cmp	r7, #98	; 0x62
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x32>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	f000 80d4 	beq.w	80070fa <_printf_i+0x1ca>
 8006f52:	2f58      	cmp	r7, #88	; 0x58
 8006f54:	f000 80c0 	beq.w	80070d8 <_printf_i+0x1a8>
 8006f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f60:	e03a      	b.n	8006fd8 <_printf_i+0xa8>
 8006f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f66:	2b15      	cmp	r3, #21
 8006f68:	d8f6      	bhi.n	8006f58 <_printf_i+0x28>
 8006f6a:	a101      	add	r1, pc, #4	; (adr r1, 8006f70 <_printf_i+0x40>)
 8006f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006f59 	.word	0x08006f59
 8006f7c:	08006f59 	.word	0x08006f59
 8006f80:	08006f59 	.word	0x08006f59
 8006f84:	08006f59 	.word	0x08006f59
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f59 	.word	0x08006f59
 8006f90:	08006f59 	.word	0x08006f59
 8006f94:	08006f59 	.word	0x08006f59
 8006f98:	08006f59 	.word	0x08006f59
 8006f9c:	080070e1 	.word	0x080070e1
 8006fa0:	08007009 	.word	0x08007009
 8006fa4:	0800709b 	.word	0x0800709b
 8006fa8:	08006f59 	.word	0x08006f59
 8006fac:	08006f59 	.word	0x08006f59
 8006fb0:	08007103 	.word	0x08007103
 8006fb4:	08006f59 	.word	0x08006f59
 8006fb8:	08007009 	.word	0x08007009
 8006fbc:	08006f59 	.word	0x08006f59
 8006fc0:	08006f59 	.word	0x08006f59
 8006fc4:	080070a3 	.word	0x080070a3
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	602a      	str	r2, [r5, #0]
 8006fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e09f      	b.n	800711c <_printf_i+0x1ec>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	0607      	lsls	r7, r0, #24
 8006fe2:	f103 0104 	add.w	r1, r3, #4
 8006fe6:	6029      	str	r1, [r5, #0]
 8006fe8:	d501      	bpl.n	8006fee <_printf_i+0xbe>
 8006fea:	681e      	ldr	r6, [r3, #0]
 8006fec:	e003      	b.n	8006ff6 <_printf_i+0xc6>
 8006fee:	0646      	lsls	r6, r0, #25
 8006ff0:	d5fb      	bpl.n	8006fea <_printf_i+0xba>
 8006ff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ff6:	2e00      	cmp	r6, #0
 8006ff8:	da03      	bge.n	8007002 <_printf_i+0xd2>
 8006ffa:	232d      	movs	r3, #45	; 0x2d
 8006ffc:	4276      	negs	r6, r6
 8006ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007002:	485a      	ldr	r0, [pc, #360]	; (800716c <_printf_i+0x23c>)
 8007004:	230a      	movs	r3, #10
 8007006:	e012      	b.n	800702e <_printf_i+0xfe>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	1d19      	adds	r1, r3, #4
 800700e:	6029      	str	r1, [r5, #0]
 8007010:	0605      	lsls	r5, r0, #24
 8007012:	d501      	bpl.n	8007018 <_printf_i+0xe8>
 8007014:	681e      	ldr	r6, [r3, #0]
 8007016:	e002      	b.n	800701e <_printf_i+0xee>
 8007018:	0641      	lsls	r1, r0, #25
 800701a:	d5fb      	bpl.n	8007014 <_printf_i+0xe4>
 800701c:	881e      	ldrh	r6, [r3, #0]
 800701e:	4853      	ldr	r0, [pc, #332]	; (800716c <_printf_i+0x23c>)
 8007020:	2f6f      	cmp	r7, #111	; 0x6f
 8007022:	bf0c      	ite	eq
 8007024:	2308      	moveq	r3, #8
 8007026:	230a      	movne	r3, #10
 8007028:	2100      	movs	r1, #0
 800702a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800702e:	6865      	ldr	r5, [r4, #4]
 8007030:	60a5      	str	r5, [r4, #8]
 8007032:	2d00      	cmp	r5, #0
 8007034:	bfa2      	ittt	ge
 8007036:	6821      	ldrge	r1, [r4, #0]
 8007038:	f021 0104 	bicge.w	r1, r1, #4
 800703c:	6021      	strge	r1, [r4, #0]
 800703e:	b90e      	cbnz	r6, 8007044 <_printf_i+0x114>
 8007040:	2d00      	cmp	r5, #0
 8007042:	d04b      	beq.n	80070dc <_printf_i+0x1ac>
 8007044:	4615      	mov	r5, r2
 8007046:	fbb6 f1f3 	udiv	r1, r6, r3
 800704a:	fb03 6711 	mls	r7, r3, r1, r6
 800704e:	5dc7      	ldrb	r7, [r0, r7]
 8007050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007054:	4637      	mov	r7, r6
 8007056:	42bb      	cmp	r3, r7
 8007058:	460e      	mov	r6, r1
 800705a:	d9f4      	bls.n	8007046 <_printf_i+0x116>
 800705c:	2b08      	cmp	r3, #8
 800705e:	d10b      	bne.n	8007078 <_printf_i+0x148>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	07de      	lsls	r6, r3, #31
 8007064:	d508      	bpl.n	8007078 <_printf_i+0x148>
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	6861      	ldr	r1, [r4, #4]
 800706a:	4299      	cmp	r1, r3
 800706c:	bfde      	ittt	le
 800706e:	2330      	movle	r3, #48	; 0x30
 8007070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007074:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007078:	1b52      	subs	r2, r2, r5
 800707a:	6122      	str	r2, [r4, #16]
 800707c:	f8cd a000 	str.w	sl, [sp]
 8007080:	464b      	mov	r3, r9
 8007082:	aa03      	add	r2, sp, #12
 8007084:	4621      	mov	r1, r4
 8007086:	4640      	mov	r0, r8
 8007088:	f7ff fee4 	bl	8006e54 <_printf_common>
 800708c:	3001      	adds	r0, #1
 800708e:	d14a      	bne.n	8007126 <_printf_i+0x1f6>
 8007090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007094:	b004      	add	sp, #16
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	f043 0320 	orr.w	r3, r3, #32
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	4833      	ldr	r0, [pc, #204]	; (8007170 <_printf_i+0x240>)
 80070a4:	2778      	movs	r7, #120	; 0x78
 80070a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	6829      	ldr	r1, [r5, #0]
 80070ae:	061f      	lsls	r7, r3, #24
 80070b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80070b4:	d402      	bmi.n	80070bc <_printf_i+0x18c>
 80070b6:	065f      	lsls	r7, r3, #25
 80070b8:	bf48      	it	mi
 80070ba:	b2b6      	uxthmi	r6, r6
 80070bc:	07df      	lsls	r7, r3, #31
 80070be:	bf48      	it	mi
 80070c0:	f043 0320 	orrmi.w	r3, r3, #32
 80070c4:	6029      	str	r1, [r5, #0]
 80070c6:	bf48      	it	mi
 80070c8:	6023      	strmi	r3, [r4, #0]
 80070ca:	b91e      	cbnz	r6, 80070d4 <_printf_i+0x1a4>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f023 0320 	bic.w	r3, r3, #32
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	2310      	movs	r3, #16
 80070d6:	e7a7      	b.n	8007028 <_printf_i+0xf8>
 80070d8:	4824      	ldr	r0, [pc, #144]	; (800716c <_printf_i+0x23c>)
 80070da:	e7e4      	b.n	80070a6 <_printf_i+0x176>
 80070dc:	4615      	mov	r5, r2
 80070de:	e7bd      	b.n	800705c <_printf_i+0x12c>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	6826      	ldr	r6, [r4, #0]
 80070e4:	6961      	ldr	r1, [r4, #20]
 80070e6:	1d18      	adds	r0, r3, #4
 80070e8:	6028      	str	r0, [r5, #0]
 80070ea:	0635      	lsls	r5, r6, #24
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	d501      	bpl.n	80070f4 <_printf_i+0x1c4>
 80070f0:	6019      	str	r1, [r3, #0]
 80070f2:	e002      	b.n	80070fa <_printf_i+0x1ca>
 80070f4:	0670      	lsls	r0, r6, #25
 80070f6:	d5fb      	bpl.n	80070f0 <_printf_i+0x1c0>
 80070f8:	8019      	strh	r1, [r3, #0]
 80070fa:	2300      	movs	r3, #0
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	4615      	mov	r5, r2
 8007100:	e7bc      	b.n	800707c <_printf_i+0x14c>
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	1d1a      	adds	r2, r3, #4
 8007106:	602a      	str	r2, [r5, #0]
 8007108:	681d      	ldr	r5, [r3, #0]
 800710a:	6862      	ldr	r2, [r4, #4]
 800710c:	2100      	movs	r1, #0
 800710e:	4628      	mov	r0, r5
 8007110:	f7f9 f8ce 	bl	80002b0 <memchr>
 8007114:	b108      	cbz	r0, 800711a <_printf_i+0x1ea>
 8007116:	1b40      	subs	r0, r0, r5
 8007118:	6060      	str	r0, [r4, #4]
 800711a:	6863      	ldr	r3, [r4, #4]
 800711c:	6123      	str	r3, [r4, #16]
 800711e:	2300      	movs	r3, #0
 8007120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007124:	e7aa      	b.n	800707c <_printf_i+0x14c>
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	462a      	mov	r2, r5
 800712a:	4649      	mov	r1, r9
 800712c:	4640      	mov	r0, r8
 800712e:	47d0      	blx	sl
 8007130:	3001      	adds	r0, #1
 8007132:	d0ad      	beq.n	8007090 <_printf_i+0x160>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	079b      	lsls	r3, r3, #30
 8007138:	d413      	bmi.n	8007162 <_printf_i+0x232>
 800713a:	68e0      	ldr	r0, [r4, #12]
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	4298      	cmp	r0, r3
 8007140:	bfb8      	it	lt
 8007142:	4618      	movlt	r0, r3
 8007144:	e7a6      	b.n	8007094 <_printf_i+0x164>
 8007146:	2301      	movs	r3, #1
 8007148:	4632      	mov	r2, r6
 800714a:	4649      	mov	r1, r9
 800714c:	4640      	mov	r0, r8
 800714e:	47d0      	blx	sl
 8007150:	3001      	adds	r0, #1
 8007152:	d09d      	beq.n	8007090 <_printf_i+0x160>
 8007154:	3501      	adds	r5, #1
 8007156:	68e3      	ldr	r3, [r4, #12]
 8007158:	9903      	ldr	r1, [sp, #12]
 800715a:	1a5b      	subs	r3, r3, r1
 800715c:	42ab      	cmp	r3, r5
 800715e:	dcf2      	bgt.n	8007146 <_printf_i+0x216>
 8007160:	e7eb      	b.n	800713a <_printf_i+0x20a>
 8007162:	2500      	movs	r5, #0
 8007164:	f104 0619 	add.w	r6, r4, #25
 8007168:	e7f5      	b.n	8007156 <_printf_i+0x226>
 800716a:	bf00      	nop
 800716c:	080073f1 	.word	0x080073f1
 8007170:	08007402 	.word	0x08007402

08007174 <memmove>:
 8007174:	4288      	cmp	r0, r1
 8007176:	b510      	push	{r4, lr}
 8007178:	eb01 0402 	add.w	r4, r1, r2
 800717c:	d902      	bls.n	8007184 <memmove+0x10>
 800717e:	4284      	cmp	r4, r0
 8007180:	4623      	mov	r3, r4
 8007182:	d807      	bhi.n	8007194 <memmove+0x20>
 8007184:	1e43      	subs	r3, r0, #1
 8007186:	42a1      	cmp	r1, r4
 8007188:	d008      	beq.n	800719c <memmove+0x28>
 800718a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007192:	e7f8      	b.n	8007186 <memmove+0x12>
 8007194:	4402      	add	r2, r0
 8007196:	4601      	mov	r1, r0
 8007198:	428a      	cmp	r2, r1
 800719a:	d100      	bne.n	800719e <memmove+0x2a>
 800719c:	bd10      	pop	{r4, pc}
 800719e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071a6:	e7f7      	b.n	8007198 <memmove+0x24>

080071a8 <_sbrk_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d06      	ldr	r5, [pc, #24]	; (80071c4 <_sbrk_r+0x1c>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	f000 f840 	bl	8007238 <_sbrk>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_sbrk_r+0x1a>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_sbrk_r+0x1a>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	20014620 	.word	0x20014620

080071c8 <_realloc_r>:
 80071c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	4680      	mov	r8, r0
 80071ce:	4614      	mov	r4, r2
 80071d0:	460e      	mov	r6, r1
 80071d2:	b921      	cbnz	r1, 80071de <_realloc_r+0x16>
 80071d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	4611      	mov	r1, r2
 80071da:	f7ff bc57 	b.w	8006a8c <_malloc_r>
 80071de:	b92a      	cbnz	r2, 80071ec <_realloc_r+0x24>
 80071e0:	f7ff fbe8 	bl	80069b4 <_free_r>
 80071e4:	4625      	mov	r5, r4
 80071e6:	4628      	mov	r0, r5
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	f000 f81b 	bl	8007226 <_malloc_usable_size_r>
 80071f0:	4284      	cmp	r4, r0
 80071f2:	4607      	mov	r7, r0
 80071f4:	d802      	bhi.n	80071fc <_realloc_r+0x34>
 80071f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071fa:	d812      	bhi.n	8007222 <_realloc_r+0x5a>
 80071fc:	4621      	mov	r1, r4
 80071fe:	4640      	mov	r0, r8
 8007200:	f7ff fc44 	bl	8006a8c <_malloc_r>
 8007204:	4605      	mov	r5, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	d0ed      	beq.n	80071e6 <_realloc_r+0x1e>
 800720a:	42bc      	cmp	r4, r7
 800720c:	4622      	mov	r2, r4
 800720e:	4631      	mov	r1, r6
 8007210:	bf28      	it	cs
 8007212:	463a      	movcs	r2, r7
 8007214:	f7ff fbc0 	bl	8006998 <memcpy>
 8007218:	4631      	mov	r1, r6
 800721a:	4640      	mov	r0, r8
 800721c:	f7ff fbca 	bl	80069b4 <_free_r>
 8007220:	e7e1      	b.n	80071e6 <_realloc_r+0x1e>
 8007222:	4635      	mov	r5, r6
 8007224:	e7df      	b.n	80071e6 <_realloc_r+0x1e>

08007226 <_malloc_usable_size_r>:
 8007226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800722a:	1f18      	subs	r0, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfbc      	itt	lt
 8007230:	580b      	ldrlt	r3, [r1, r0]
 8007232:	18c0      	addlt	r0, r0, r3
 8007234:	4770      	bx	lr
	...

08007238 <_sbrk>:
 8007238:	4a04      	ldr	r2, [pc, #16]	; (800724c <_sbrk+0x14>)
 800723a:	6811      	ldr	r1, [r2, #0]
 800723c:	4603      	mov	r3, r0
 800723e:	b909      	cbnz	r1, 8007244 <_sbrk+0xc>
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <_sbrk+0x18>)
 8007242:	6011      	str	r1, [r2, #0]
 8007244:	6810      	ldr	r0, [r2, #0]
 8007246:	4403      	add	r3, r0
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4770      	bx	lr
 800724c:	20014630 	.word	0x20014630
 8007250:	20014638 	.word	0x20014638

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
