
007_Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800750c  0800750c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007514  08007514  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800751c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014498  2000001c  08007538  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144b4  08007538  000244b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015496  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000336a  00000000  00000000  00035525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f95  00000000  00000000  00039cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e4f  00000000  00000000  0003ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016abf  00000000  00000000  0005eabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddaa2  00000000  00000000  0007557b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b8  00000000  00000000  00153020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f0  00000000  00000000  001584d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007388 	.word	0x08007388

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007388 	.word	0x08007388

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ee0 	.word	0x20012ee0

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fad7 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f853 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8bd 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005b2:	4820      	ldr	r0, [pc, #128]	; (8000634 <main+0x94>)
 80005b4:	f004 fc2a 	bl	8004e0c <SEGGER_UART_init>

  // CYCLCNT enable
  DWT_CTRL |= (1<<0);
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <main+0x98>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <main+0x98>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c4:	f004 f9dc 	bl	8004980 <SEGGER_SYSVIEW_Conf>


  status = xTaskCreate(task1_handler, "Task1", 200, NULL, 2, &task1_handle);
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <main+0x9c>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	491a      	ldr	r1, [pc, #104]	; (8000640 <main+0xa0>)
 80005d6:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xa4>)
 80005d8:	f002 fa8a 	bl	8002af0 <xTaskCreate>
 80005dc:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f6:	bf00      	nop
 80005f8:	e7fe      	b.n	80005f8 <main+0x58>


  status = xTaskCreate(task2_handler, "Task2", 200, NULL, 1, &task2_handle);
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <main+0xa8>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	4911      	ldr	r1, [pc, #68]	; (800064c <main+0xac>)
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <main+0xb0>)
 800060a:	f002 fa71 	bl	8002af0 <xTaskCreate>
 800060e:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00a      	beq.n	800062c <main+0x8c>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	607b      	str	r3, [r7, #4]
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <main+0x8a>


  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 800062c:	f002 fcc2 	bl	8002fb4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x90>
 8000632:	bf00      	nop
 8000634:	0007a120 	.word	0x0007a120
 8000638:	e0001000 	.word	0xe0001000
 800063c:	2000003c 	.word	0x2000003c
 8000640:	080073a0 	.word	0x080073a0
 8000644:	080008b9 	.word	0x080008b9
 8000648:	20000040 	.word	0x20000040
 800064c:	080073a8 	.word	0x080073a8
 8000650:	080008e5 	.word	0x080008e5

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fe56 	bl	8007314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <SystemClock_Config+0xd0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xd4>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c8:	23a8      	movs	r3, #168	; 0xa8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f8d7 	bl	8001890 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e8:	f000 f926 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fd58 	bl	80011c0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000716:	f000 f90f 	bl	8000938 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_GPIO_Init+0x104>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a39      	ldr	r2, [pc, #228]	; (8000830 <MX_GPIO_Init+0x104>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <MX_GPIO_Init+0x104>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_GPIO_Init+0x104>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a32      	ldr	r2, [pc, #200]	; (8000830 <MX_GPIO_Init+0x104>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_GPIO_Init+0x104>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0x104>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <MX_GPIO_Init+0x104>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_GPIO_Init+0x104>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_GPIO_Init+0x104>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007b8:	481e      	ldr	r0, [pc, #120]	; (8000834 <MX_GPIO_Init+0x108>)
 80007ba:	f000 fca9 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <MX_GPIO_Init+0x10c>)
 80007d6:	f000 fb07 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007da:	230c      	movs	r3, #12
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ea:	2307      	movs	r3, #7
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <MX_GPIO_Init+0x108>)
 80007f6:	f000 faf7 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 80007fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <MX_GPIO_Init+0x108>)
 8000814:	f000 fae8 	bl	8000de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2106      	movs	r1, #6
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f000 fab9 	bl	8000d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000822:	2028      	movs	r0, #40	; 0x28
 8000824:	f000 fad2 	bl	8000dcc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020800 	.word	0x40020800

0800083c <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

	traceISR_ENTER();
 8000840:	f006 fa68 	bl	8006d14 <SEGGER_SYSVIEW_RecordEnterISR>
	switch_priority_flag = 1;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <button_interrupt_handler+0x18>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 800084a:	f006 faa5 	bl	8006d98 <SEGGER_SYSVIEW_RecordExitISR>


}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000038 	.word	0x20000038

08000858 <switch_priority>:

void switch_priority(void){
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

	portENTER_CRITICAL();
 800085e:	f003 fd8b 	bl	8004378 <vPortEnterCritical>
	if(switch_priority_flag == 1){
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <switch_priority+0x54>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11a      	bne.n	80008a0 <switch_priority+0x48>
		UBaseType_t tempPriority = uxTaskPriorityGet(task1_handle);
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <switch_priority+0x58>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fac6 	bl	8002e00 <uxTaskPriorityGet>
 8000874:	6078      	str	r0, [r7, #4]
		vTaskPrioritySet(task1_handle, uxTaskPriorityGet(task2_handle));
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <switch_priority+0x58>)
 8000878:	681c      	ldr	r4, [r3, #0]
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <switch_priority+0x5c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fabe 	bl	8002e00 <uxTaskPriorityGet>
 8000884:	4603      	mov	r3, r0
 8000886:	4619      	mov	r1, r3
 8000888:	4620      	mov	r0, r4
 800088a:	f002 fad3 	bl	8002e34 <vTaskPrioritySet>
		vTaskPrioritySet(task2_handle, tempPriority);
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <switch_priority+0x5c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4618      	mov	r0, r3
 8000896:	f002 facd 	bl	8002e34 <vTaskPrioritySet>
		switch_priority_flag = 0;
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <switch_priority+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 80008a0:	f003 fd9a 	bl	80043d8 <vPortExitCritical>


}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	20000038 	.word	0x20000038
 80008b0:	2000003c 	.word	0x2000003c
 80008b4:	20000040 	.word	0x20000040

080008b8 <task1_handler>:

static void task1_handler(void* parameters){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Task1 LED");
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <task1_handler+0x24>)
 80008c2:	f006 fc79 	bl	80071b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, TASK1_PIN);
 80008c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <task1_handler+0x28>)
 80008cc:	f000 fc39 	bl	8001142 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f000 f983 	bl	8000bdc <HAL_Delay>
		switch_priority();
 80008d6:	f7ff ffbf 	bl	8000858 <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Task1 LED");
 80008da:	e7f1      	b.n	80008c0 <task1_handler+0x8>
 80008dc:	080073b0 	.word	0x080073b0
 80008e0:	40020000 	.word	0x40020000

080008e4 <task2_handler>:
	}
}

static void task2_handler(void* parameters){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Task2 LED");
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <task2_handler+0x28>)
 80008ee:	f006 fc63 	bl	80071b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, TASK2_PIN);
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <task2_handler+0x2c>)
 80008f8:	f000 fc23 	bl	8001142 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000900:	f000 f96c 	bl	8000bdc <HAL_Delay>
		switch_priority();
 8000904:	f7ff ffa8 	bl	8000858 <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Task2 LED");
 8000908:	e7f0      	b.n	80008ec <task2_handler+0x8>
 800090a:	bf00      	nop
 800090c:	080073c4 	.word	0x080073c4
 8000910:	40020000 	.word	0x40020000

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 f939 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40000c00 	.word	0x40000c00

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <HAL_InitTick+0xe4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a32      	ldr	r2, [pc, #200]	; (8000a78 <HAL_InitTick+0xe4>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <HAL_InitTick+0xe4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fcfe 	bl	80013cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d103      	bne.n	80009e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009da:	f000 fce3 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 80009de:	6378      	str	r0, [r7, #52]	; 0x34
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e2:	f000 fcdf 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 80009e6:	4603      	mov	r3, r0
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <HAL_InitTick+0xe8>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	0c9b      	lsrs	r3, r3, #18
 80009f6:	3b01      	subs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_InitTick+0xec>)
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_InitTick+0xf0>)
 80009fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_InitTick+0xec>)
 8000a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a06:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_InitTick+0xec>)
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_InitTick+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_InitTick+0xec>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_InitTick+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <HAL_InitTick+0xec>)
 8000a22:	f001 f9d3 	bl	8001dcc <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d11b      	bne.n	8000a6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <HAL_InitTick+0xec>)
 8000a36:	f001 fa23 	bl	8001e80 <HAL_TIM_Base_Start_IT>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d111      	bne.n	8000a6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a48:	2032      	movs	r0, #50	; 0x32
 8000a4a:	f000 f9bf 	bl	8000dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d808      	bhi.n	8000a66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2032      	movs	r0, #50	; 0x32
 8000a5a:	f000 f99b 	bl	8000d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_InitTick+0xf4>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e002      	b.n	8000a6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3738      	adds	r7, #56	; 0x38
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	20000044 	.word	0x20000044
 8000a84:	40000c00 	.word	0x40000c00
 8000a88:	20000004 	.word	0x20000004

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	button_interrupt_handler();
 8000abc:	f7ff febe 	bl	800083c <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ac0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ac4:	f000 fb58 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM5_IRQHandler+0x10>)
 8000ad2:	f001 fa45 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000044 	.word	0x20000044

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 fbf7 	bl	8007324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd33 	bl	80005a0 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b48:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 8000b4c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b50:	200144b4 	.word	0x200144b4

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8fc 	bl	8000d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff ff04 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff feda 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000008c 	.word	0x2000008c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000008c 	.word	0x2000008c

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff4c 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da6:	f7ff ff61 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff ffb1 	bl	8000d18 <NVIC_EncodePriority>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff80 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff54 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e165      	b.n	80010d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8154 	bne.w	80010ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80ae 	beq.w	80010ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a5c      	ldr	r2, [pc, #368]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <HAL_GPIO_Init+0x304>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_GPIO_Init+0x310>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_GPIO_Init+0x314>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <HAL_GPIO_Init+0x318>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x20a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x31c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x206>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x202>
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b3a      	ldr	r3, [pc, #232]	; (800110c <HAL_GPIO_Init+0x324>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <HAL_GPIO_Init+0x324>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_GPIO_Init+0x324>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a26      	ldr	r2, [pc, #152]	; (800110c <HAL_GPIO_Init+0x324>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_GPIO_Init+0x324>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_GPIO_Init+0x324>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_GPIO_Init+0x324>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_GPIO_Init+0x324>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f ae96 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400
 8001108:	40021800 	.word	0x40021800
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001154:	887a      	ldrh	r2, [r7, #2]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	041a      	lsls	r2, r3, #16
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43d9      	mvns	r1, r3
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	400b      	ands	r3, r1
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f806 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0cc      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d90c      	bls.n	80011fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b65      	ldr	r3, [pc, #404]	; (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800121e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	494d      	ldr	r1, [pc, #308]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d044      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	2b03      	cmp	r3, #3
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e067      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f023 0203 	bic.w	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4934      	ldr	r1, [pc, #208]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b0:	f7ff fc88 	bl	8000bc4 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fc84 	bl	8000bc4 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e04f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 020c 	and.w	r2, r3, #12
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	429a      	cmp	r2, r3
 80012de:	d1eb      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d20c      	bcs.n	8001308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4916      	ldr	r1, [pc, #88]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	4313      	orrs	r3, r2
 8001344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f873 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	490a      	ldr	r1, [pc, #40]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb14 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00
 800137c:	40023800 	.word	0x40023800
 8001380:	080074b8 	.word	0x080074b8
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013a8:	f7ff fff0 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	0a9b      	lsrs	r3, r3, #10
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	4903      	ldr	r1, [pc, #12]	; (80013c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	080074c8 	.word	0x080074c8

080013cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	220f      	movs	r2, #15
 80013da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_GetClockConfig+0x60>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 020f 	and.w	r2, r3, #15
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40023c00 	.word	0x40023c00

08001430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001434:	b0ae      	sub	sp, #184	; 0xb8
 8001436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001456:	4bcb      	ldr	r3, [pc, #812]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b0c      	cmp	r3, #12
 8001460:	f200 8206 	bhi.w	8001870 <HAL_RCC_GetSysClockFreq+0x440>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	080014a1 	.word	0x080014a1
 8001470:	08001871 	.word	0x08001871
 8001474:	08001871 	.word	0x08001871
 8001478:	08001871 	.word	0x08001871
 800147c:	080014a9 	.word	0x080014a9
 8001480:	08001871 	.word	0x08001871
 8001484:	08001871 	.word	0x08001871
 8001488:	08001871 	.word	0x08001871
 800148c:	080014b1 	.word	0x080014b1
 8001490:	08001871 	.word	0x08001871
 8001494:	08001871 	.word	0x08001871
 8001498:	08001871 	.word	0x08001871
 800149c:	080016a1 	.word	0x080016a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a0:	4bb9      	ldr	r3, [pc, #740]	; (8001788 <HAL_RCC_GetSysClockFreq+0x358>)
 80014a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014a6:	e1e7      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a8:	4bb8      	ldr	r3, [pc, #736]	; (800178c <HAL_RCC_GetSysClockFreq+0x35c>)
 80014aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014ae:	e1e3      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b0:	4bb4      	ldr	r3, [pc, #720]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014bc:	4bb1      	ldr	r3, [pc, #708]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d071      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c8:	4bae      	ldr	r3, [pc, #696]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	2200      	movs	r2, #0
 80014d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014ee:	4622      	mov	r2, r4
 80014f0:	462b      	mov	r3, r5
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	0159      	lsls	r1, r3, #5
 80014fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001500:	0150      	lsls	r0, r2, #5
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4621      	mov	r1, r4
 8001508:	1a51      	subs	r1, r2, r1
 800150a:	6439      	str	r1, [r7, #64]	; 0x40
 800150c:	4629      	mov	r1, r5
 800150e:	eb63 0301 	sbc.w	r3, r3, r1
 8001512:	647b      	str	r3, [r7, #68]	; 0x44
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001520:	4649      	mov	r1, r9
 8001522:	018b      	lsls	r3, r1, #6
 8001524:	4641      	mov	r1, r8
 8001526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800152a:	4641      	mov	r1, r8
 800152c:	018a      	lsls	r2, r1, #6
 800152e:	4641      	mov	r1, r8
 8001530:	1a51      	subs	r1, r2, r1
 8001532:	63b9      	str	r1, [r7, #56]	; 0x38
 8001534:	4649      	mov	r1, r9
 8001536:	eb63 0301 	sbc.w	r3, r3, r1
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001548:	4649      	mov	r1, r9
 800154a:	00cb      	lsls	r3, r1, #3
 800154c:	4641      	mov	r1, r8
 800154e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001552:	4641      	mov	r1, r8
 8001554:	00ca      	lsls	r2, r1, #3
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	4603      	mov	r3, r0
 800155c:	4622      	mov	r2, r4
 800155e:	189b      	adds	r3, r3, r2
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
 8001562:	462b      	mov	r3, r5
 8001564:	460a      	mov	r2, r1
 8001566:	eb42 0303 	adc.w	r3, r2, r3
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001578:	4629      	mov	r1, r5
 800157a:	024b      	lsls	r3, r1, #9
 800157c:	4621      	mov	r1, r4
 800157e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001582:	4621      	mov	r1, r4
 8001584:	024a      	lsls	r2, r1, #9
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800158e:	2200      	movs	r2, #0
 8001590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001594:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001598:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800159c:	f7fe fe82 	bl	80002a4 <__aeabi_uldivmod>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4613      	mov	r3, r2
 80015a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015aa:	e067      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4b75      	ldr	r3, [pc, #468]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80015c6:	2300      	movs	r3, #0
 80015c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015ce:	4622      	mov	r2, r4
 80015d0:	462b      	mov	r3, r5
 80015d2:	f04f 0000 	mov.w	r0, #0
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	0159      	lsls	r1, r3, #5
 80015dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e0:	0150      	lsls	r0, r2, #5
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4621      	mov	r1, r4
 80015e8:	1a51      	subs	r1, r2, r1
 80015ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80015ec:	4629      	mov	r1, r5
 80015ee:	eb63 0301 	sbc.w	r3, r3, r1
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001600:	4649      	mov	r1, r9
 8001602:	018b      	lsls	r3, r1, #6
 8001604:	4641      	mov	r1, r8
 8001606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800160a:	4641      	mov	r1, r8
 800160c:	018a      	lsls	r2, r1, #6
 800160e:	4641      	mov	r1, r8
 8001610:	ebb2 0a01 	subs.w	sl, r2, r1
 8001614:	4649      	mov	r1, r9
 8001616:	eb63 0b01 	sbc.w	fp, r3, r1
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001626:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800162a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800162e:	4692      	mov	sl, r2
 8001630:	469b      	mov	fp, r3
 8001632:	4623      	mov	r3, r4
 8001634:	eb1a 0303 	adds.w	r3, sl, r3
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	462b      	mov	r3, r5
 800163c:	eb4b 0303 	adc.w	r3, fp, r3
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800164e:	4629      	mov	r1, r5
 8001650:	028b      	lsls	r3, r1, #10
 8001652:	4621      	mov	r1, r4
 8001654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001658:	4621      	mov	r1, r4
 800165a:	028a      	lsls	r2, r1, #10
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001664:	2200      	movs	r2, #0
 8001666:	673b      	str	r3, [r7, #112]	; 0x70
 8001668:	677a      	str	r2, [r7, #116]	; 0x74
 800166a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800166e:	f7fe fe19 	bl	80002a4 <__aeabi_uldivmod>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4613      	mov	r3, r2
 8001678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	0c1b      	lsrs	r3, r3, #16
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	3301      	adds	r3, #1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800168e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800169e:	e0eb      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d06b      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	2200      	movs	r2, #0
 80016c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80016c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ca:	663b      	str	r3, [r7, #96]	; 0x60
 80016cc:	2300      	movs	r3, #0
 80016ce:	667b      	str	r3, [r7, #100]	; 0x64
 80016d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016d4:	4622      	mov	r2, r4
 80016d6:	462b      	mov	r3, r5
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	0159      	lsls	r1, r3, #5
 80016e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e6:	0150      	lsls	r0, r2, #5
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4621      	mov	r1, r4
 80016ee:	1a51      	subs	r1, r2, r1
 80016f0:	61b9      	str	r1, [r7, #24]
 80016f2:	4629      	mov	r1, r5
 80016f4:	eb63 0301 	sbc.w	r3, r3, r1
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001706:	4659      	mov	r1, fp
 8001708:	018b      	lsls	r3, r1, #6
 800170a:	4651      	mov	r1, sl
 800170c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001710:	4651      	mov	r1, sl
 8001712:	018a      	lsls	r2, r1, #6
 8001714:	4651      	mov	r1, sl
 8001716:	ebb2 0801 	subs.w	r8, r2, r1
 800171a:	4659      	mov	r1, fp
 800171c:	eb63 0901 	sbc.w	r9, r3, r1
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800172c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001730:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001734:	4690      	mov	r8, r2
 8001736:	4699      	mov	r9, r3
 8001738:	4623      	mov	r3, r4
 800173a:	eb18 0303 	adds.w	r3, r8, r3
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	462b      	mov	r3, r5
 8001742:	eb49 0303 	adc.w	r3, r9, r3
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001754:	4629      	mov	r1, r5
 8001756:	024b      	lsls	r3, r1, #9
 8001758:	4621      	mov	r1, r4
 800175a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800175e:	4621      	mov	r1, r4
 8001760:	024a      	lsls	r2, r1, #9
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800176a:	2200      	movs	r2, #0
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
 800176e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001770:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001774:	f7fe fd96 	bl	80002a4 <__aeabi_uldivmod>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4613      	mov	r3, r2
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001782:	e065      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0x420>
 8001784:	40023800 	.word	0x40023800
 8001788:	00f42400 	.word	0x00f42400
 800178c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_GetSysClockFreq+0x458>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	4618      	mov	r0, r3
 800179a:	4611      	mov	r1, r2
 800179c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017a0:	653b      	str	r3, [r7, #80]	; 0x50
 80017a2:	2300      	movs	r3, #0
 80017a4:	657b      	str	r3, [r7, #84]	; 0x54
 80017a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017aa:	4642      	mov	r2, r8
 80017ac:	464b      	mov	r3, r9
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	0159      	lsls	r1, r3, #5
 80017b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017bc:	0150      	lsls	r0, r2, #5
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4641      	mov	r1, r8
 80017c4:	1a51      	subs	r1, r2, r1
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	4649      	mov	r1, r9
 80017ca:	eb63 0301 	sbc.w	r3, r3, r1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017dc:	4659      	mov	r1, fp
 80017de:	018b      	lsls	r3, r1, #6
 80017e0:	4651      	mov	r1, sl
 80017e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e6:	4651      	mov	r1, sl
 80017e8:	018a      	lsls	r2, r1, #6
 80017ea:	4651      	mov	r1, sl
 80017ec:	1a54      	subs	r4, r2, r1
 80017ee:	4659      	mov	r1, fp
 80017f0:	eb63 0501 	sbc.w	r5, r3, r1
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	00eb      	lsls	r3, r5, #3
 80017fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001802:	00e2      	lsls	r2, r4, #3
 8001804:	4614      	mov	r4, r2
 8001806:	461d      	mov	r5, r3
 8001808:	4643      	mov	r3, r8
 800180a:	18e3      	adds	r3, r4, r3
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	464b      	mov	r3, r9
 8001810:	eb45 0303 	adc.w	r3, r5, r3
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001822:	4629      	mov	r1, r5
 8001824:	028b      	lsls	r3, r1, #10
 8001826:	4621      	mov	r1, r4
 8001828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800182c:	4621      	mov	r1, r4
 800182e:	028a      	lsls	r2, r1, #10
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001838:	2200      	movs	r2, #0
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
 800183c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800183e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001842:	f7fe fd2f 	bl	80002a4 <__aeabi_uldivmod>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4613      	mov	r3, r2
 800184c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_RCC_GetSysClockFreq+0x458>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0f1b      	lsrs	r3, r3, #28
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800185e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800186e:	e003      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001878:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800187c:	4618      	mov	r0, r3
 800187e:	37b8      	adds	r7, #184	; 0xb8
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	00f42400 	.word	0x00f42400

08001890 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e28d      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8083 	beq.w	80019b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d019      	beq.n	80018f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018bc:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018c8:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d4:	d00c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d05b      	beq.n	80019b4 <HAL_RCC_OscConfig+0x124>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d157      	bne.n	80019b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e25a      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x90>
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xcc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0xb4>
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a75      	ldr	r2, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xcc>
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6b      	ldr	r2, [pc, #428]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f92e 	bl	8000bc4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f92a 	bl	8000bc4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e21f      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xdc>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f91a 	bl	8000bc4 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f916 	bl	8000bc4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e20b      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x104>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d06f      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019c2:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d017      	beq.n	80019fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x186>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1d3      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_OscConfig+0x278>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f8c3 	bl	8000bc4 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff f8bf 	bl	8000bc4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1b4      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4925      	ldr	r1, [pc, #148]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x278>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f8a2 	bl	8000bc4 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff f89e 	bl	8000bc4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e193      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d036      	beq.n	8001b1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f882 	bl	8000bc4 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f87e 	bl	8000bc4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e173      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x234>
 8001ae2:	e01b      	b.n	8001b1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff f86b 	bl	8000bc4 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	e00e      	b.n	8001b10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff f867 	bl	8000bc4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d907      	bls.n	8001b10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e15c      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	42470000 	.word	0x42470000
 8001b0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ea      	bne.n	8001af2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8097 	beq.w	8001c58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a7e      	ldr	r2, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff f827 	bl	8000bc4 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff f823 	bl	8000bc4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e118      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x4b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x31e>
 8001ba0:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a65      	ldr	r2, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x358>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x340>
 8001bb6:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0x358>
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a59      	ldr	r2, [pc, #356]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d015      	beq.n	8001c1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7fe ffe8 	bl	8000bc4 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7fe ffe4 	bl	8000bc4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0d7      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0ee      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x368>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7fe ffd2 	bl	8000bc4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7fe ffce 	bl	8000bc4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0c1      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ee      	bne.n	8001c24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80ad 	beq.w	8001dbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c62:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d060      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d145      	bne.n	8001d02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_RCC_OscConfig+0x4b4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7fe ffa2 	bl	8000bc4 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7fe ff9e 	bl	8000bc4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e093      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	071b      	lsls	r3, r3, #28
 8001cce:	491b      	ldr	r1, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x4b4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7fe ff73 	bl	8000bc4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7fe ff6f 	bl	8000bc4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e064      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x452>
 8001d00:	e05c      	b.n	8001dbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x4b4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7fe ff5c 	bl	8000bc4 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe ff58 	bl	8000bc4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e04d      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x480>
 8001d2e:	e045      	b.n	8001dbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e040      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000
 8001d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x538>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d030      	beq.n	8001db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d129      	bne.n	8001db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d122      	bne.n	8001db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d119      	bne.n	8001db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d10f      	bne.n	8001db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e041      	b.n	8001e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f839 	bl	8001e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 f9d8 	bl	80021c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d001      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e04e      	b.n	8001f36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d022      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d01d      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d018      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00e      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d010      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	e007      	b.n	8001f34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40000c00 	.word	0x40000c00
 8001f54:	40010400 	.word	0x40010400
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40001800 	.word	0x40001800

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8ee 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8e0 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8f1 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0204 	mvn.w	r2, #4
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8c4 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8b6 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8c7 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b08      	cmp	r3, #8
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0208 	mvn.w	r2, #8
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f89a 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f88c 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f89d 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b10      	cmp	r3, #16
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f870 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f862 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f873 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fc18 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f902 	bl	8002314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f838 	bl	80021ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0220 	mvn.w	r2, #32
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8cc 	bl	8002300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <TIM_Base_SetConfig+0x114>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d00f      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3d      	ldr	r2, [pc, #244]	; (80022d8 <TIM_Base_SetConfig+0x118>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00b      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <TIM_Base_SetConfig+0x11c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3b      	ldr	r2, [pc, #236]	; (80022e0 <TIM_Base_SetConfig+0x120>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <TIM_Base_SetConfig+0x124>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d108      	bne.n	8002212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <TIM_Base_SetConfig+0x114>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02b      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d027      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <TIM_Base_SetConfig+0x118>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d023      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <TIM_Base_SetConfig+0x11c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <TIM_Base_SetConfig+0x120>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01b      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <TIM_Base_SetConfig+0x124>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d017      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <TIM_Base_SetConfig+0x128>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <TIM_Base_SetConfig+0x12c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00f      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <TIM_Base_SetConfig+0x130>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00b      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <TIM_Base_SetConfig+0x134>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <TIM_Base_SetConfig+0x138>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <TIM_Base_SetConfig+0x13c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <TIM_Base_SetConfig+0x114>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_Base_SetConfig+0xf8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <TIM_Base_SetConfig+0x124>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d103      	bne.n	80022c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40000c00 	.word	0x40000c00
 80022e4:	40010400 	.word	0x40010400
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40014400 	.word	0x40014400
 80022f0:	40014800 	.word	0x40014800
 80022f4:	40001800 	.word	0x40001800
 80022f8:	40001c00 	.word	0x40001c00
 80022fc:	40002000 	.word	0x40002000

08002300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0208 	add.w	r2, r3, #8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002340:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 0208 	add.w	r2, r3, #8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f103 0208 	add.w	r2, r3, #8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	601a      	str	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e0:	d103      	bne.n	80023ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e00c      	b.n	8002404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3308      	adds	r3, #8
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e002      	b.n	80023f8 <vListInsert+0x2e>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	d2f6      	bcs.n	80023f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6892      	ldr	r2, [r2, #8]
 8002452:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6852      	ldr	r2, [r2, #4]
 800245c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d103      	bne.n	8002470 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1e5a      	subs	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800249a:	2301      	movs	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <xQueueGenericReset+0x2e>
        __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	60fb      	str	r3, [r7, #12]
    }
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05d      	beq.n	8002580 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d059      	beq.n	8002580 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	2100      	movs	r1, #0
 80024d6:	fba3 2302 	umull	r2, r3, r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d000      	beq.n	80024e0 <xQueueGenericReset+0x50>
 80024de:	2101      	movs	r1, #1
 80024e0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d14c      	bne.n	8002580 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80024e6:	f001 ff47 	bl	8004378 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	441a      	add	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2200      	movs	r2, #0
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	3b01      	subs	r3, #1
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	441a      	add	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	22ff      	movs	r2, #255	; 0xff
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d114      	bne.n	8002566 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01a      	beq.n	800257a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	3310      	adds	r3, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f001 f8b5 	bl	80036b8 <xTaskRemoveFromEventList>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <xQueueGenericReset+0x11c>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	e009      	b.n	800257a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	3310      	adds	r3, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fedc 	bl	8002328 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	3324      	adds	r3, #36	; 0x24
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fed7 	bl	8002328 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800257a:	f001 ff2d 	bl	80043d8 <vPortExitCritical>
 800257e:	e001      	b.n	8002584 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <xQueueGenericReset+0x110>
        __asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	60bb      	str	r3, [r7, #8]
    }
 800259c:	bf00      	nop
 800259e:	e7fe      	b.n	800259e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025a0:	697b      	ldr	r3, [r7, #20]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02e      	beq.n	8002626 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025c8:	2100      	movs	r1, #0
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	fba3 2302 	umull	r2, r3, r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d000      	beq.n	80025d8 <xQueueGenericCreate+0x28>
 80025d6:	2101      	movs	r1, #1
 80025d8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d123      	bne.n	8002626 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025e6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80025ea:	d81c      	bhi.n	8002626 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3350      	adds	r3, #80	; 0x50
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 ffe6 	bl	80045cc <pvPortMalloc>
 8002600:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3350      	adds	r3, #80	; 0x50
 8002610:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f814 	bl	800264c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002624:	e00d      	b.n	8002642 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <xQueueGenericCreate+0x92>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	613b      	str	r3, [r7, #16]
    }
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002642:	69fb      	ldr	r3, [r7, #28]
    }
 8002644:	4618      	mov	r0, r3
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e002      	b.n	800266e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800267a:	2101      	movs	r1, #1
 800267c:	69b8      	ldr	r0, [r7, #24]
 800267e:	f7ff ff07 	bl	8002490 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	68f9      	ldr	r1, [r7, #12]
 8002690:	2073      	movs	r0, #115	; 0x73
 8002692:	f003 ff6d 	bl	8006570 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b08f      	sub	sp, #60	; 0x3c
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <xQueueReceive+0x30>
        __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	623b      	str	r3, [r7, #32]
    }
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <xQueueReceive+0x3e>
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <xQueueReceive+0x42>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <xQueueReceive+0x44>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xQueueReceive+0x5e>
        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	61fb      	str	r3, [r7, #28]
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026fe:	f001 f9ed 	bl	8003adc <xTaskGetSchedulerState>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <xQueueReceive+0x6e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <xQueueReceive+0x72>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueReceive+0x74>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueReceive+0x8e>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	61bb      	str	r3, [r7, #24]
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800272e:	f001 fe23 	bl	8004378 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d02f      	beq.n	800279e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002742:	f000 f8bd 	bl	80028c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fc3f 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 800274e:	4604      	mov	r4, r0
 8002750:	2000      	movs	r0, #0
 8002752:	f004 fc3b 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 8002756:	4602      	mov	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2101      	movs	r1, #1
 800275c:	9100      	str	r1, [sp, #0]
 800275e:	4621      	mov	r1, r4
 8002760:	205c      	movs	r0, #92	; 0x5c
 8002762:	f003 ff7b 	bl	800665c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00f      	beq.n	8002796 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	3310      	adds	r3, #16
 800277a:	4618      	mov	r0, r3
 800277c:	f000 ff9c 	bl	80036b8 <xTaskRemoveFromEventList>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002786:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <xQueueReceive+0x21c>)
 8002788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002796:	f001 fe1f 	bl	80043d8 <vPortExitCritical>
                return pdPASS;
 800279a:	2301      	movs	r3, #1
 800279c:	e08a      	b.n	80028b4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d113      	bne.n	80027cc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027a4:	f001 fe18 	bl	80043d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fc0e 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 80027b0:	4604      	mov	r4, r0
 80027b2:	2000      	movs	r0, #0
 80027b4:	f004 fc0a 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2101      	movs	r1, #1
 80027be:	9100      	str	r1, [sp, #0]
 80027c0:	4621      	mov	r1, r4
 80027c2:	205c      	movs	r0, #92	; 0x5c
 80027c4:	f003 ff4a 	bl	800665c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e073      	b.n	80028b4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 f846 	bl	8003868 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027e0:	f001 fdfa 	bl	80043d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027e4:	f000 fc48 	bl	8003078 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027e8:	f001 fdc6 	bl	8004378 <vPortEnterCritical>
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f8:	d103      	bne.n	8002802 <xQueueReceive+0x162>
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002808:	b25b      	sxtb	r3, r3
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280e:	d103      	bne.n	8002818 <xQueueReceive+0x178>
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002818:	f001 fdde 	bl	80043d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800281c:	1d3a      	adds	r2, r7, #4
 800281e:	f107 0310 	add.w	r3, r7, #16
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f001 f835 	bl	8003894 <xTaskCheckForTimeOut>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d124      	bne.n	800287a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f8bd 	bl	80029b0 <prvIsQueueEmpty>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d018      	beq.n	800286e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fecb 	bl	80035e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800284a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284c:	f000 f85e 	bl	800290c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002850:	f000 fc20 	bl	8003094 <xTaskResumeAll>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f47f af69 	bne.w	800272e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <xQueueReceive+0x21c>)
 800285e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	e75f      	b.n	800272e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800286e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002870:	f000 f84c 	bl	800290c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002874:	f000 fc0e 	bl	8003094 <xTaskResumeAll>
 8002878:	e759      	b.n	800272e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800287a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287c:	f000 f846 	bl	800290c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002880:	f000 fc08 	bl	8003094 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002886:	f000 f893 	bl	80029b0 <prvIsQueueEmpty>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f43f af4e 	beq.w	800272e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	4618      	mov	r0, r3
 8002896:	f004 fb99 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 800289a:	4604      	mov	r4, r0
 800289c:	2000      	movs	r0, #0
 800289e:	f004 fb95 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2101      	movs	r1, #1
 80028a8:	9100      	str	r1, [sp, #0]
 80028aa:	4621      	mov	r1, r4
 80028ac:	205c      	movs	r0, #92	; 0x5c
 80028ae:	f003 fed5 	bl	800665c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80028b2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3734      	adds	r7, #52	; 0x34
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	e000ed04 	.word	0xe000ed04

080028c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d018      	beq.n	8002904 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	441a      	add	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d303      	bcc.n	80028f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68d9      	ldr	r1, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	461a      	mov	r2, r3
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	f004 fd34 	bl	800736c <memcpy>
    }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002914:	f001 fd30 	bl	8004378 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800291e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002920:	e011      	b.n	8002946 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d012      	beq.n	8002950 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3324      	adds	r3, #36	; 0x24
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fec2 	bl	80036b8 <xTaskRemoveFromEventList>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800293a:	f001 f811 	bl	8003960 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	3b01      	subs	r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	dce9      	bgt.n	8002922 <prvUnlockQueue+0x16>
 800294e:	e000      	b.n	8002952 <prvUnlockQueue+0x46>
                    break;
 8002950:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800295a:	f001 fd3d 	bl	80043d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800295e:	f001 fd0b 	bl	8004378 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002968:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800296a:	e011      	b.n	8002990 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3310      	adds	r3, #16
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fe9d 	bl	80036b8 <xTaskRemoveFromEventList>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002984:	f000 ffec 	bl	8003960 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	3b01      	subs	r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002994:	2b00      	cmp	r3, #0
 8002996:	dce9      	bgt.n	800296c <prvUnlockQueue+0x60>
 8002998:	e000      	b.n	800299c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800299a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	22ff      	movs	r2, #255	; 0xff
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80029a4:	f001 fd18 	bl	80043d8 <vPortExitCritical>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029b8:	f001 fcde 	bl	8004378 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e001      	b.n	80029ce <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029ce:	f001 fd03 	bl	80043d8 <vPortExitCritical>

    return xReturn;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	60fb      	str	r3, [r7, #12]
    }
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d024      	beq.n	8002a56 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e01e      	b.n	8002a50 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a12:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <vQueueAddToRegistry+0xa8>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d105      	bne.n	8002a2e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <vQueueAddToRegistry+0xa8>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
                    break;
 8002a2c:	e013      	b.n	8002a56 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <vQueueAddToRegistry+0x6e>
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <vQueueAddToRegistry+0xa8>)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <vQueueAddToRegistry+0xa8>)
 8002a46:	4413      	add	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b07      	cmp	r3, #7
 8002a54:	d9dd      	bls.n	8002a12 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00f      	beq.n	8002a7c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 faae 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 8002a70:	4601      	mov	r1, r0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	2071      	movs	r0, #113	; 0x71
 8002a78:	f003 fd20 	bl	80064bc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000090 	.word	0x20000090

08002a88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a98:	f001 fc6e 	bl	8004378 <vPortEnterCritical>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa8:	d103      	bne.n	8002ab2 <vQueueWaitForMessageRestricted+0x2a>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002abe:	d103      	bne.n	8002ac8 <vQueueWaitForMessageRestricted+0x40>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac8:	f001 fc86 	bl	80043d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3324      	adds	r3, #36	; 0x24
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fda3 	bl	8003628 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ff12 	bl	800290c <prvUnlockQueue>
    }
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af04      	add	r7, sp, #16
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 fd61 	bl	80045cc <pvPortMalloc>
 8002b0a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d013      	beq.n	8002b3a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b12:	2058      	movs	r0, #88	; 0x58
 8002b14:	f001 fd5a 	bl	80045cc <pvPortMalloc>
 8002b18:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b20:	2258      	movs	r2, #88	; 0x58
 8002b22:	2100      	movs	r1, #0
 8002b24:	69f8      	ldr	r0, [r7, #28]
 8002b26:	f004 fbf5 	bl	8007314 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b30:	e005      	b.n	8002b3e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f001 fe04 	bl	8004740 <vPortFree>
 8002b38:	e001      	b.n	8002b3e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	2300      	movs	r3, #0
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	9302      	str	r3, [sp, #8]
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f80e 	bl	8002b7c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b60:	69f8      	ldr	r0, [r7, #28]
 8002b62:	f000 f899 	bl	8002c98 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e002      	b.n	8002b72 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b70:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b72:	69bb      	ldr	r3, [r7, #24]
    }
 8002b74:	4618      	mov	r0, r3
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	21a5      	movs	r1, #165	; 0xa5
 8002b96:	f004 fbbd 	bl	8007314 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	617b      	str	r3, [r7, #20]
    }
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01e      	beq.n	8002c18 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e012      	b.n	8002c06 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	7819      	ldrb	r1, [r3, #0]
 8002be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	3334      	adds	r3, #52	; 0x34
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d9e9      	bls.n	8002be0 <prvInitialiseNewTask+0x64>
 8002c0c:	e000      	b.n	8002c10 <prvInitialiseNewTask+0x94>
            {
                break;
 8002c0e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d90a      	bls.n	8002c34 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	613b      	str	r3, [r7, #16]
    }
 8002c30:	bf00      	nop
 8002c32:	e7fe      	b.n	8002c32 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d901      	bls.n	8002c3e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c48:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fb8a 	bl	8002368 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	3318      	adds	r3, #24
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb85 	bl	8002368 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	f1c3 0205 	rsb	r2, r3, #5
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	69b8      	ldr	r0, [r7, #24]
 8002c7a:	f001 fa51 	bl	8004120 <pxPortInitialiseStack>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c90:	bf00      	nop
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ca0:	f001 fb6a 	bl	8004378 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <prvAddNewTaskToReadyList+0x14c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a4e      	ldr	r2, [pc, #312]	; (8002de4 <prvAddNewTaskToReadyList+0x14c>)
 8002cac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002cae:	4b4e      	ldr	r3, [pc, #312]	; (8002de8 <prvAddNewTaskToReadyList+0x150>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002cb6:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <prvAddNewTaskToReadyList+0x150>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <prvAddNewTaskToReadyList+0x14c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d110      	bne.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002cc4:	f000 fe70 	bl	80039a8 <prvInitialiseTaskLists>
 8002cc8:	e00d      	b.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002cca:	4b48      	ldr	r3, [pc, #288]	; (8002dec <prvAddNewTaskToReadyList+0x154>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cd2:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <prvAddNewTaskToReadyList+0x150>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d802      	bhi.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ce0:	4a41      	ldr	r2, [pc, #260]	; (8002de8 <prvAddNewTaskToReadyList+0x150>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ce6:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <prvAddNewTaskToReadyList+0x158>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <prvAddNewTaskToReadyList+0x158>)
 8002cee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <prvAddNewTaskToReadyList+0x158>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <prvAddNewTaskToReadyList+0x94>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 f89d 	bl	8006e40 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	461d      	mov	r5, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	1ae3      	subs	r3, r4, r3
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	462b      	mov	r3, r5
 8002d28:	f001 fecc 	bl	8004ac4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 f90a 	bl	8006f48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	2201      	movs	r2, #1
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <prvAddNewTaskToReadyList+0x15c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	4a2c      	ldr	r2, [pc, #176]	; (8002df4 <prvAddNewTaskToReadyList+0x15c>)
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4a:	492b      	ldr	r1, [pc, #172]	; (8002df8 <prvAddNewTaskToReadyList+0x160>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3304      	adds	r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	3204      	adds	r2, #4
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1d1a      	adds	r2, r3, #4
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <prvAddNewTaskToReadyList+0x160>)
 8002d8a:	441a      	add	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	615a      	str	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d94:	4918      	ldr	r1, [pc, #96]	; (8002df8 <prvAddNewTaskToReadyList+0x160>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1c59      	adds	r1, r3, #1
 8002da4:	4814      	ldr	r0, [pc, #80]	; (8002df8 <prvAddNewTaskToReadyList+0x160>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4403      	add	r3, r0
 8002db0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002db2:	f001 fb11 	bl	80043d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <prvAddNewTaskToReadyList+0x154>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <prvAddNewTaskToReadyList+0x150>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <prvAddNewTaskToReadyList+0x164>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bdb0      	pop	{r4, r5, r7, pc}
 8002de4:	200001a8 	.word	0x200001a8
 8002de8:	200000d0 	.word	0x200000d0
 8002dec:	200001b4 	.word	0x200001b4
 8002df0:	200001c4 	.word	0x200001c4
 8002df4:	200001b0 	.word	0x200001b0
 8002df8:	200000d4 	.word	0x200000d4
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002e08:	f001 fab6 	bl	8004378 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <uxTaskPriorityGet+0x18>
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <uxTaskPriorityGet+0x30>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e000      	b.n	8002e1a <uxTaskPriorityGet+0x1a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002e22:	f001 fad9 	bl	80043d8 <vPortExitCritical>

        return uxReturn;
 8002e26:	68bb      	ldr	r3, [r7, #8]
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200000d0 	.word	0x200000d0

08002e34 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d90a      	bls.n	8002e5e <vTaskPrioritySet+0x2a>
        __asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	60fb      	str	r3, [r7, #12]
    }
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d901      	bls.n	8002e68 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e64:	2304      	movs	r3, #4
 8002e66:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002e68:	f001 fa86 	bl	8004378 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <vTaskPrioritySet+0x44>
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <vTaskPrioritySet+0x170>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e000      	b.n	8002e7a <vTaskPrioritySet+0x46>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f8a4 	bl	8006fcc <SEGGER_SYSVIEW_ShrinkId>
 8002e84:	4603      	mov	r3, r0
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	2028      	movs	r0, #40	; 0x28
 8002e8c:	f003 fb16 	bl	80064bc <SEGGER_SYSVIEW_RecordU32x2>
 8002e90:	69b8      	ldr	r0, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	f001 fe75 	bl	8004b94 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eae:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d06f      	beq.n	8002f98 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d90d      	bls.n	8002edc <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002ec0:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <vTaskPrioritySet+0x170>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d00f      	beq.n	8002eea <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <vTaskPrioritySet+0x170>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d309      	bcc.n	8002eea <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e006      	b.n	8002eea <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <vTaskPrioritySet+0x170>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d101      	bne.n	8002eea <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d102      	bne.n	8002f02 <vTaskPrioritySet+0xce>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	649a      	str	r2, [r3, #72]	; 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db04      	blt.n	8002f1a <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f1c3 0205 	rsb	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6959      	ldr	r1, [r3, #20]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <vTaskPrioritySet+0x174>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4299      	cmp	r1, r3
 8002f2e:	d128      	bne.n	8002f82 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fa81 	bl	800243c <uxListRemove>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002f40:	2201      	movs	r2, #1
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <vTaskPrioritySet+0x178>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	4a16      	ldr	r2, [pc, #88]	; (8002fac <vTaskPrioritySet+0x178>)
 8002f52:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <vTaskPrioritySet+0x178>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <vTaskPrioritySet+0x178>)
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <vTaskPrioritySet+0x174>)
 8002f74:	441a      	add	r2, r3
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7ff fa00 	bl	8002382 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <vTaskPrioritySet+0x17c>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002f98:	f001 fa1e 	bl	80043d8 <vPortExitCritical>
    }
 8002f9c:	bf00      	nop
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200000d0 	.word	0x200000d0
 8002fa8:	200000d4 	.word	0x200000d4
 8002fac:	200001b0 	.word	0x200001b0
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <vTaskStartScheduler+0xa4>)
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2282      	movs	r2, #130	; 0x82
 8002fc6:	4925      	ldr	r1, [pc, #148]	; (800305c <vTaskStartScheduler+0xa8>)
 8002fc8:	4825      	ldr	r0, [pc, #148]	; (8003060 <vTaskStartScheduler+0xac>)
 8002fca:	f7ff fd91 	bl	8002af0 <xTaskCreate>
 8002fce:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002fd6:	f000 fe1f 	bl	8003c18 <xTimerCreateTimerTask>
 8002fda:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d124      	bne.n	800302c <vTaskStartScheduler+0x78>
        __asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	60bb      	str	r3, [r7, #8]
    }
 8002ff4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <vTaskStartScheduler+0xb0>)
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <vTaskStartScheduler+0xb4>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <vTaskStartScheduler+0xb8>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <vTaskStartScheduler+0xbc>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <vTaskStartScheduler+0xa4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d102      	bne.n	800301c <vTaskStartScheduler+0x68>
 8003016:	f003 fef7 	bl	8006e08 <SEGGER_SYSVIEW_OnIdle>
 800301a:	e004      	b.n	8003026 <vTaskStartScheduler+0x72>
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <vTaskStartScheduler+0xbc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 ff4f 	bl	8006ec4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003026:	f001 f905 	bl	8004234 <xPortStartScheduler>
 800302a:	e00e      	b.n	800304a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003032:	d10a      	bne.n	800304a <vTaskStartScheduler+0x96>
        __asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	607b      	str	r3, [r7, #4]
    }
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <vTaskStartScheduler+0xc0>)
 800304c:	681b      	ldr	r3, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200001cc 	.word	0x200001cc
 800305c:	080073d8 	.word	0x080073d8
 8003060:	08003979 	.word	0x08003979
 8003064:	200001c8 	.word	0x200001c8
 8003068:	200001b4 	.word	0x200001b4
 800306c:	200001ac 	.word	0x200001ac
 8003070:	200000d0 	.word	0x200000d0
 8003074:	2000000c 	.word	0x2000000c

08003078 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <vTaskSuspendAll+0x18>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a03      	ldr	r2, [pc, #12]	; (8003090 <vTaskSuspendAll+0x18>)
 8003084:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	200001d0 	.word	0x200001d0

08003094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030a2:	4b73      	ldr	r3, [pc, #460]	; (8003270 <xTaskResumeAll+0x1dc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	607b      	str	r3, [r7, #4]
    }
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030c0:	f001 f95a 	bl	8004378 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <xTaskResumeAll+0x1dc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	4a69      	ldr	r2, [pc, #420]	; (8003270 <xTaskResumeAll+0x1dc>)
 80030cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ce:	4b68      	ldr	r3, [pc, #416]	; (8003270 <xTaskResumeAll+0x1dc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80c4 	bne.w	8003260 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030d8:	4b66      	ldr	r3, [pc, #408]	; (8003274 <xTaskResumeAll+0x1e0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80bf 	beq.w	8003260 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e2:	e08e      	b.n	8003202 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <xTaskResumeAll+0x1e4>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	6a12      	ldr	r2, [r2, #32]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	69d2      	ldr	r2, [r2, #28]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3318      	adds	r3, #24
 800310e:	429a      	cmp	r2, r3
 8003110:	d103      	bne.n	800311a <xTaskResumeAll+0x86>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2200      	movs	r2, #0
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	68d2      	ldr	r2, [r2, #12]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	6892      	ldr	r2, [r2, #8]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3304      	adds	r3, #4
 800314c:	429a      	cmp	r2, r3
 800314e:	d103      	bne.n	8003158 <xTaskResumeAll+0xc4>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2200      	movs	r2, #0
 800315c:	615a      	str	r2, [r3, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4618      	mov	r0, r3
 800316c:	f003 feec 	bl	8006f48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2201      	movs	r2, #1
 8003176:	409a      	lsls	r2, r3
 8003178:	4b40      	ldr	r3, [pc, #256]	; (800327c <xTaskResumeAll+0x1e8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	4a3f      	ldr	r2, [pc, #252]	; (800327c <xTaskResumeAll+0x1e8>)
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	493e      	ldr	r1, [pc, #248]	; (8003280 <xTaskResumeAll+0x1ec>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3304      	adds	r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	3204      	adds	r2, #4
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	1d1a      	adds	r2, r3, #4
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4a2e      	ldr	r2, [pc, #184]	; (8003280 <xTaskResumeAll+0x1ec>)
 80031c6:	441a      	add	r2, r3
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	615a      	str	r2, [r3, #20]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	492b      	ldr	r1, [pc, #172]	; (8003280 <xTaskResumeAll+0x1ec>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	4827      	ldr	r0, [pc, #156]	; (8003280 <xTaskResumeAll+0x1ec>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4403      	add	r3, r0
 80031ec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <xTaskResumeAll+0x1f0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <xTaskResumeAll+0x1f4>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <xTaskResumeAll+0x1e4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f47f af6c 	bne.w	80030e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003212:	f000 fc47 	bl	8003aa4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <xTaskResumeAll+0x1f8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003222:	f000 f859 	bl	80032d8 <xTaskIncrementTick>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <xTaskResumeAll+0x1f4>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3b01      	subs	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f1      	bne.n	8003222 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <xTaskResumeAll+0x1f8>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <xTaskResumeAll+0x1f4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <xTaskResumeAll+0x1fc>)
 8003252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003260:	f001 f8ba 	bl	80043d8 <vPortExitCritical>

    return xAlreadyYielded;
 8003264:	69bb      	ldr	r3, [r7, #24]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200001d0 	.word	0x200001d0
 8003274:	200001a8 	.word	0x200001a8
 8003278:	20000168 	.word	0x20000168
 800327c:	200001b0 	.word	0x200001b0
 8003280:	200000d4 	.word	0x200000d4
 8003284:	200000d0 	.word	0x200000d0
 8003288:	200001bc 	.word	0x200001bc
 800328c:	200001b8 	.word	0x200001b8
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <xTaskGetTickCount+0x1c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	200001ac 	.word	0x200001ac

080032b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ba:	f001 f947 	bl	800454c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <xTaskGetTickCountFromISR+0x20>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032c8:	683b      	ldr	r3, [r7, #0]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200001ac 	.word	0x200001ac

080032d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e2:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <xTaskIncrementTick+0x208>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 80f0 	bne.w	80034cc <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032ec:	4b7d      	ldr	r3, [pc, #500]	; (80034e4 <xTaskIncrementTick+0x20c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032f4:	4a7b      	ldr	r2, [pc, #492]	; (80034e4 <xTaskIncrementTick+0x20c>)
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d120      	bne.n	8003342 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003300:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <xTaskIncrementTick+0x210>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <xTaskIncrementTick+0x48>
        __asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	607b      	str	r3, [r7, #4]
    }
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <xTaskIncrementTick+0x46>
 8003320:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <xTaskIncrementTick+0x210>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	4b71      	ldr	r3, [pc, #452]	; (80034ec <xTaskIncrementTick+0x214>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6f      	ldr	r2, [pc, #444]	; (80034e8 <xTaskIncrementTick+0x210>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	; (80034ec <xTaskIncrementTick+0x214>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b6e      	ldr	r3, [pc, #440]	; (80034f0 <xTaskIncrementTick+0x218>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a6d      	ldr	r2, [pc, #436]	; (80034f0 <xTaskIncrementTick+0x218>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	f000 fbb1 	bl	8003aa4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003342:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <xTaskIncrementTick+0x21c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	429a      	cmp	r2, r3
 800334a:	f0c0 80aa 	bcc.w	80034a2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334e:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <xTaskIncrementTick+0x210>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <xTaskIncrementTick+0x21c>)
 800335a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800335e:	601a      	str	r2, [r3, #0]
                    break;
 8003360:	e09f      	b.n	80034a2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003362:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <xTaskIncrementTick+0x210>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003372:	6a3a      	ldr	r2, [r7, #32]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	429a      	cmp	r2, r3
 8003378:	d203      	bcs.n	8003382 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800337a:	4a5e      	ldr	r2, [pc, #376]	; (80034f4 <xTaskIncrementTick+0x21c>)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003380:	e08f      	b.n	80034a2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	68d2      	ldr	r2, [r2, #12]
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	6892      	ldr	r2, [r2, #8]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	3304      	adds	r3, #4
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d103      	bne.n	80033b0 <xTaskIncrementTick+0xd8>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2200      	movs	r2, #0
 80033b4:	615a      	str	r2, [r3, #20]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01e      	beq.n	8003406 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	6a12      	ldr	r2, [r2, #32]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	69d2      	ldr	r2, [r2, #28]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	3318      	adds	r3, #24
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d103      	bne.n	80033f6 <xTaskIncrementTick+0x11e>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6a1a      	ldr	r2, [r3, #32]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2200      	movs	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 fd9d 	bl	8006f48 <SEGGER_SYSVIEW_OnTaskStartReady>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <xTaskIncrementTick+0x220>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	4a36      	ldr	r2, [pc, #216]	; (80034f8 <xTaskIncrementTick+0x220>)
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4935      	ldr	r1, [pc, #212]	; (80034fc <xTaskIncrementTick+0x224>)
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3304      	adds	r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	3204      	adds	r2, #4
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4a26      	ldr	r2, [pc, #152]	; (80034fc <xTaskIncrementTick+0x224>)
 8003464:	441a      	add	r2, r3
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	615a      	str	r2, [r3, #20]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	4923      	ldr	r1, [pc, #140]	; (80034fc <xTaskIncrementTick+0x224>)
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	1c59      	adds	r1, r3, #1
 800347e:	481f      	ldr	r0, [pc, #124]	; (80034fc <xTaskIncrementTick+0x224>)
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4403      	add	r3, r0
 800348a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <xTaskIncrementTick+0x228>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	429a      	cmp	r2, r3
 8003498:	f67f af59 	bls.w	800334e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a0:	e755      	b.n	800334e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <xTaskIncrementTick+0x228>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4914      	ldr	r1, [pc, #80]	; (80034fc <xTaskIncrementTick+0x224>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d901      	bls.n	80034be <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <xTaskIncrementTick+0x22c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e004      	b.n	80034d6 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <xTaskIncrementTick+0x230>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <xTaskIncrementTick+0x230>)
 80034d4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200001d0 	.word	0x200001d0
 80034e4:	200001ac 	.word	0x200001ac
 80034e8:	20000160 	.word	0x20000160
 80034ec:	20000164 	.word	0x20000164
 80034f0:	200001c0 	.word	0x200001c0
 80034f4:	200001c8 	.word	0x200001c8
 80034f8:	200001b0 	.word	0x200001b0
 80034fc:	200000d4 	.word	0x200000d4
 8003500:	200000d0 	.word	0x200000d0
 8003504:	200001bc 	.word	0x200001bc
 8003508:	200001b8 	.word	0x200001b8

0800350c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <vTaskSwitchContext+0xbc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <vTaskSwitchContext+0xc0>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003520:	e04d      	b.n	80035be <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <vTaskSwitchContext+0xc0>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <vTaskSwitchContext+0xc4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	f1c3 031f 	rsb	r3, r3, #31
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	4925      	ldr	r1, [pc, #148]	; (80035d4 <vTaskSwitchContext+0xc8>)
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	607b      	str	r3, [r7, #4]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <vTaskSwitchContext+0x5a>
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <vTaskSwitchContext+0xc8>)
 8003574:	4413      	add	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	3308      	adds	r3, #8
 800358a:	429a      	cmp	r2, r3
 800358c:	d104      	bne.n	8003598 <vTaskSwitchContext+0x8c>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <vTaskSwitchContext+0xcc>)
 80035a0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <vTaskSwitchContext+0xcc>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <vTaskSwitchContext+0xd0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d102      	bne.n	80035b4 <vTaskSwitchContext+0xa8>
 80035ae:	f003 fc2b 	bl	8006e08 <SEGGER_SYSVIEW_OnIdle>
}
 80035b2:	e004      	b.n	80035be <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <vTaskSwitchContext+0xcc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fc83 	bl	8006ec4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200001d0 	.word	0x200001d0
 80035cc:	200001bc 	.word	0x200001bc
 80035d0:	200001b0 	.word	0x200001b0
 80035d4:	200000d4 	.word	0x200000d4
 80035d8:	200000d0 	.word	0x200000d0
 80035dc:	200001cc 	.word	0x200001cc

080035e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	60fb      	str	r3, [r7, #12]
    }
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <vTaskPlaceOnEventList+0x44>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3318      	adds	r3, #24
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fe fedb 	bl	80023ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003614:	2101      	movs	r1, #1
 8003616:	6838      	ldr	r0, [r7, #0]
 8003618:	f000 fa7e 	bl	8003b18 <prvAddCurrentTaskToDelayedList>
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200000d0 	.word	0x200000d0

08003628 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	613b      	str	r3, [r7, #16]
    }
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	61da      	str	r2, [r3, #28]
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	621a      	str	r2, [r3, #32]
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	3218      	adds	r2, #24
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f103 0218 	add.w	r2, r3, #24
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800369c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800369e:	2024      	movs	r0, #36	; 0x24
 80036a0:	f002 feb2 	bl	8006408 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68b8      	ldr	r0, [r7, #8]
 80036a8:	f000 fa36 	bl	8003b18 <prvAddCurrentTaskToDelayedList>
    }
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200000d0 	.word	0x200000d0

080036b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	60fb      	str	r3, [r7, #12]
    }
 80036e0:	bf00      	nop
 80036e2:	e7fe      	b.n	80036e2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	6a12      	ldr	r2, [r2, #32]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	69d2      	ldr	r2, [r2, #28]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	3318      	adds	r3, #24
 8003706:	429a      	cmp	r2, r3
 8003708:	d103      	bne.n	8003712 <xTaskRemoveFromEventList+0x5a>
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2200      	movs	r2, #0
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003722:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <xTaskRemoveFromEventList+0x198>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d162      	bne.n	80037f0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	68d2      	ldr	r2, [r2, #12]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	6892      	ldr	r2, [r2, #8]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	3304      	adds	r3, #4
 800374c:	429a      	cmp	r2, r3
 800374e:	d103      	bne.n	8003758 <xTaskRemoveFromEventList+0xa0>
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	2200      	movs	r2, #0
 800375c:	615a      	str	r2, [r3, #20]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1e5a      	subs	r2, r3, #1
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fbec 	bl	8006f48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <xTaskRemoveFromEventList+0x19c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	4a35      	ldr	r2, [pc, #212]	; (8003854 <xTaskRemoveFromEventList+0x19c>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	4934      	ldr	r1, [pc, #208]	; (8003858 <xTaskRemoveFromEventList+0x1a0>)
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3304      	adds	r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	3204      	adds	r2, #4
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4a24      	ldr	r2, [pc, #144]	; (8003858 <xTaskRemoveFromEventList+0x1a0>)
 80037c6:	441a      	add	r2, r3
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	615a      	str	r2, [r3, #20]
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4921      	ldr	r1, [pc, #132]	; (8003858 <xTaskRemoveFromEventList+0x1a0>)
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	1c59      	adds	r1, r3, #1
 80037e0:	481d      	ldr	r0, [pc, #116]	; (8003858 <xTaskRemoveFromEventList+0x1a0>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4403      	add	r3, r0
 80037ec:	6019      	str	r1, [r3, #0]
 80037ee:	e01b      	b.n	8003828 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <xTaskRemoveFromEventList+0x1a4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	61da      	str	r2, [r3, #28]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	621a      	str	r2, [r3, #32]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	3218      	adds	r2, #24
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f103 0218 	add.w	r2, r3, #24
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <xTaskRemoveFromEventList+0x1a4>)
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
 800381e:	4b0f      	ldr	r3, [pc, #60]	; (800385c <xTaskRemoveFromEventList+0x1a4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <xTaskRemoveFromEventList+0x1a4>)
 8003826:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <xTaskRemoveFromEventList+0x1a8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	429a      	cmp	r2, r3
 8003834:	d905      	bls.n	8003842 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003836:	2301      	movs	r3, #1
 8003838:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <xTaskRemoveFromEventList+0x1ac>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e001      	b.n	8003846 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	; 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200001d0 	.word	0x200001d0
 8003854:	200001b0 	.word	0x200001b0
 8003858:	200000d4 	.word	0x200000d4
 800385c:	20000168 	.word	0x20000168
 8003860:	200000d0 	.word	0x200000d0
 8003864:	200001bc 	.word	0x200001bc

08003868 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <vTaskInternalSetTimeOutState+0x24>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <vTaskInternalSetTimeOutState+0x28>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	605a      	str	r2, [r3, #4]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	200001c0 	.word	0x200001c0
 8003890:	200001ac 	.word	0x200001ac

08003894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	613b      	str	r3, [r7, #16]
    }
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	60fb      	str	r3, [r7, #12]
    }
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80038d6:	f000 fd4f 	bl	8004378 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80038da:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <xTaskCheckForTimeOut+0xc4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f2:	d102      	bne.n	80038fa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e026      	b.n	8003948 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <xTaskCheckForTimeOut+0xc8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d00a      	beq.n	800391c <xTaskCheckForTimeOut+0x88>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	429a      	cmp	r2, r3
 800390e:	d305      	bcc.n	800391c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e015      	b.n	8003948 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20b      	bcs.n	800393e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	1ad2      	subs	r2, r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ff98 	bl	8003868 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e004      	b.n	8003948 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003948:	f000 fd46 	bl	80043d8 <vPortExitCritical>

    return xReturn;
 800394c:	69fb      	ldr	r3, [r7, #28]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200001ac 	.word	0x200001ac
 800395c:	200001c0 	.word	0x200001c0

08003960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <vTaskMissedYield+0x14>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	200001bc 	.word	0x200001bc

08003978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003980:	f000 f852 	bl	8003a28 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <prvIdleTask+0x28>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d9f9      	bls.n	8003980 <prvIdleTask+0x8>
            {
                taskYIELD();
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <prvIdleTask+0x2c>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800399c:	e7f0      	b.n	8003980 <prvIdleTask+0x8>
 800399e:	bf00      	nop
 80039a0:	200000d4 	.word	0x200000d4
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	e00c      	b.n	80039ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <prvInitialiseTaskLists+0x60>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fcb0 	bl	8002328 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3301      	adds	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d9ef      	bls.n	80039b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <prvInitialiseTaskLists+0x64>)
 80039d6:	f7fe fca7 	bl	8002328 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039da:	480d      	ldr	r0, [pc, #52]	; (8003a10 <prvInitialiseTaskLists+0x68>)
 80039dc:	f7fe fca4 	bl	8002328 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <prvInitialiseTaskLists+0x6c>)
 80039e2:	f7fe fca1 	bl	8002328 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80039e6:	480c      	ldr	r0, [pc, #48]	; (8003a18 <prvInitialiseTaskLists+0x70>)
 80039e8:	f7fe fc9e 	bl	8002328 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80039ec:	480b      	ldr	r0, [pc, #44]	; (8003a1c <prvInitialiseTaskLists+0x74>)
 80039ee:	f7fe fc9b 	bl	8002328 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <prvInitialiseTaskLists+0x78>)
 80039f4:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <prvInitialiseTaskLists+0x64>)
 80039f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <prvInitialiseTaskLists+0x7c>)
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <prvInitialiseTaskLists+0x68>)
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200000d4 	.word	0x200000d4
 8003a0c:	20000138 	.word	0x20000138
 8003a10:	2000014c 	.word	0x2000014c
 8003a14:	20000168 	.word	0x20000168
 8003a18:	2000017c 	.word	0x2000017c
 8003a1c:	20000194 	.word	0x20000194
 8003a20:	20000160 	.word	0x20000160
 8003a24:	20000164 	.word	0x20000164

08003a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2e:	e019      	b.n	8003a64 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a30:	f000 fca2 	bl	8004378 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <prvCheckTasksWaitingTermination+0x50>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fcfb 	bl	800243c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <prvCheckTasksWaitingTermination+0x54>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <prvCheckTasksWaitingTermination+0x54>)
 8003a4e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <prvCheckTasksWaitingTermination+0x58>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <prvCheckTasksWaitingTermination+0x58>)
 8003a58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a5a:	f000 fcbd 	bl	80043d8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f810 	bl	8003a84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <prvCheckTasksWaitingTermination+0x58>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e1      	bne.n	8003a30 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	2000017c 	.word	0x2000017c
 8003a7c:	200001a8 	.word	0x200001a8
 8003a80:	20000190 	.word	0x20000190

08003a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fe55 	bl	8004740 <vPortFree>
            vPortFree( pxTCB );
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe52 	bl	8004740 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <prvResetNextTaskUnblockTime+0x30>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <prvResetNextTaskUnblockTime+0x34>)
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ab8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003aba:	e005      	b.n	8003ac8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <prvResetNextTaskUnblockTime+0x30>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <prvResetNextTaskUnblockTime+0x34>)
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000160 	.word	0x20000160
 8003ad8:	200001c8 	.word	0x200001c8

08003adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <xTaskGetSchedulerState+0x34>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003aea:	2301      	movs	r3, #1
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	e008      	b.n	8003b02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <xTaskGetSchedulerState+0x38>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003af8:	2302      	movs	r3, #2
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e001      	b.n	8003b02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b02:	687b      	ldr	r3, [r7, #4]
    }
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	200001b4 	.word	0x200001b4
 8003b14:	200001d0 	.word	0x200001d0

08003b18 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b28:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fc84 	bl	800243c <uxListRemove>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	2201      	movs	r2, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b50:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b58:	d124      	bne.n	8003ba4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d021      	beq.n	8003ba4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b60:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	3204      	adds	r2, #4
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1d1a      	adds	r2, r3, #4
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b94:	615a      	str	r2, [r3, #20]
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ba2:	e026      	b.n	8003bf2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d209      	bcs.n	8003bd0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7fe fbfe 	bl	80023ca <vListInsert>
}
 8003bce:	e010      	b.n	8003bf2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7fe fbf4 	bl	80023ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d202      	bcs.n	8003bf2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200001ac 	.word	0x200001ac
 8003c00:	200000d0 	.word	0x200000d0
 8003c04:	200001b0 	.word	0x200001b0
 8003c08:	20000194 	.word	0x20000194
 8003c0c:	20000164 	.word	0x20000164
 8003c10:	20000160 	.word	0x20000160
 8003c14:	200001c8 	.word	0x200001c8

08003c18 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c22:	f000 fa47 	bl	80040b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <xTimerCreateTimerTask+0x54>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <xTimerCreateTimerTask+0x58>)
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	2302      	movs	r3, #2
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c3c:	490d      	ldr	r1, [pc, #52]	; (8003c74 <xTimerCreateTimerTask+0x5c>)
 8003c3e:	480e      	ldr	r0, [pc, #56]	; (8003c78 <xTimerCreateTimerTask+0x60>)
 8003c40:	f7fe ff56 	bl	8002af0 <xTaskCreate>
 8003c44:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	603b      	str	r3, [r7, #0]
    }
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c62:	687b      	ldr	r3, [r7, #4]
    }
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000204 	.word	0x20000204
 8003c70:	20000208 	.word	0x20000208
 8003c74:	080073e0 	.word	0x080073e0
 8003c78:	08003d21 	.word	0x08003d21

08003c7c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c88:	e008      	b.n	8003c9c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4413      	add	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	18d1      	adds	r1, r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f8dd 	bl	8003e68 <prvInsertTimerInActiveList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ea      	bne.n	8003c8a <prvReloadTimer+0xe>
        }
    }
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <prvProcessExpiredTimer+0x5c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fbaf 	bl	800243c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff ffc3 	bl	8003c7c <prvReloadTimer>
 8003cf6:	e008      	b.n	8003d0a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	4798      	blx	r3
    }
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200001fc 	.word	0x200001fc

08003d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f857 	bl	8003de0 <prvGetNextExpireTime>
 8003d32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4619      	mov	r1, r3
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f803 	bl	8003d44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d3e:	f000 f8d5 	bl	8003eec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d42:	e7f1      	b.n	8003d28 <prvTimerTask+0x8>

08003d44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d4e:	f7ff f993 	bl	8003078 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f866 	bl	8003e28 <prvSampleTimeNow>
 8003d5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d130      	bne.n	8003dc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <prvProcessTimerOrBlockTask+0x3c>
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d806      	bhi.n	8003d80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d72:	f7ff f98f 	bl	8003094 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ffa1 	bl	8003cc0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d7e:	e024      	b.n	8003dca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <prvProcessTimerOrBlockTask+0x90>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <prvProcessTimerOrBlockTask+0x50>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <prvProcessTimerOrBlockTask+0x52>
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <prvProcessTimerOrBlockTask+0x94>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fe fe6f 	bl	8002a88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003daa:	f7ff f973 	bl	8003094 <xTaskResumeAll>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <prvProcessTimerOrBlockTask+0x98>)
 8003db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	f3bf 8f6f 	isb	sy
    }
 8003dc4:	e001      	b.n	8003dca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003dc6:	f7ff f965 	bl	8003094 <xTaskResumeAll>
    }
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000200 	.word	0x20000200
 8003dd8:	20000204 	.word	0x20000204
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <prvGetNextExpireTime+0x44>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <prvGetNextExpireTime+0x16>
 8003df2:	2201      	movs	r2, #1
 8003df4:	e000      	b.n	8003df8 <prvGetNextExpireTime+0x18>
 8003df6:	2200      	movs	r2, #0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <prvGetNextExpireTime+0x44>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e001      	b.n	8003e14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e14:	68fb      	ldr	r3, [r7, #12]
    }
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	200001fc 	.word	0x200001fc

08003e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e30:	f7ff fa30 	bl	8003294 <xTaskGetTickCount>
 8003e34:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvSampleTimeNow+0x3c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d205      	bcs.n	8003e4c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e40:	f000 f912 	bl	8004068 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e52:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <prvSampleTimeNow+0x3c>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e58:	68fb      	ldr	r3, [r7, #12]
    }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000020c 	.word	0x2000020c

08003e68 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d812      	bhi.n	8003eb4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e01b      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <prvInsertTimerInActiveList+0x7c>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe fa8c 	bl	80023ca <vListInsert>
 8003eb2:	e012      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d206      	bcs.n	8003eca <prvInsertTimerInActiveList+0x62>
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e007      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <prvInsertTimerInActiveList+0x80>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe fa78 	bl	80023ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003eda:	697b      	ldr	r3, [r7, #20]
    }
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000200 	.word	0x20000200
 8003ee8:	200001fc 	.word	0x200001fc

08003eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ef2:	e0a6      	b.n	8004042 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f2c0 80a3 	blt.w	8004042 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fa95 	bl	800243c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff87 	bl	8003e28 <prvSampleTimeNow>
 8003f1a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	f200 808d 	bhi.w	8004040 <prvProcessReceivedCommands+0x154>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <prvProcessReceivedCommands+0x40>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f51 	.word	0x08003f51
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	08003fcd 	.word	0x08003fcd
 8003f3c:	08004017 	.word	0x08004017
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f51 	.word	0x08003f51
 8003f48:	08003fb9 	.word	0x08003fb9
 8003f4c:	08003fcd 	.word	0x08003fcd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	18d1      	adds	r1, r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	69f8      	ldr	r0, [r7, #28]
 8003f70:	f7ff ff7a 	bl	8003e68 <prvInsertTimerInActiveList>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	4413      	add	r3, r2
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4619      	mov	r1, r3
 8003f94:	69f8      	ldr	r0, [r7, #28]
 8003f96:	f7ff fe71 	bl	8003c7c <prvReloadTimer>
 8003f9a:	e008      	b.n	8003fae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	69f8      	ldr	r0, [r7, #28]
 8003fb4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003fb6:	e044      	b.n	8004042 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003fca:	e03a      	b.n	8004042 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	617b      	str	r3, [r7, #20]
    }
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	18d1      	adds	r1, r2, r3
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	69f8      	ldr	r0, [r7, #28]
 8004010:	f7ff ff2a 	bl	8003e68 <prvInsertTimerInActiveList>
                        break;
 8004014:	e015      	b.n	8004042 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004024:	69f8      	ldr	r0, [r7, #28]
 8004026:	f000 fb8b 	bl	8004740 <vPortFree>
 800402a:	e00a      	b.n	8004042 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800403e:	e000      	b.n	8004042 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004040:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <prvProcessReceivedCommands+0x178>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f107 0108 	add.w	r1, r7, #8
 800404a:	2200      	movs	r2, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fb27 	bl	80026a0 <xQueueReceive>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f af4d 	bne.w	8003ef4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000204 	.word	0x20000204

08004068 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800406e:	e009      	b.n	8004084 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <prvSwitchTimerLists+0x44>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800407a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800407e:	6838      	ldr	r0, [r7, #0]
 8004080:	f7ff fe1e 	bl	8003cc0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <prvSwitchTimerLists+0x44>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <prvSwitchTimerLists+0x44>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <prvSwitchTimerLists+0x48>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <prvSwitchTimerLists+0x44>)
 800409a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <prvSwitchTimerLists+0x48>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6013      	str	r3, [r2, #0]
    }
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200001fc 	.word	0x200001fc
 80040b0:	20000200 	.word	0x20000200

080040b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80040b8:	f000 f95e 	bl	8004378 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <prvCheckForValidListAndQueue+0x54>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11d      	bne.n	8004100 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80040c4:	4811      	ldr	r0, [pc, #68]	; (800410c <prvCheckForValidListAndQueue+0x58>)
 80040c6:	f7fe f92f 	bl	8002328 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80040ca:	4811      	ldr	r0, [pc, #68]	; (8004110 <prvCheckForValidListAndQueue+0x5c>)
 80040cc:	f7fe f92c 	bl	8002328 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <prvCheckForValidListAndQueue+0x60>)
 80040d2:	4a0e      	ldr	r2, [pc, #56]	; (800410c <prvCheckForValidListAndQueue+0x58>)
 80040d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <prvCheckForValidListAndQueue+0x64>)
 80040d8:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <prvCheckForValidListAndQueue+0x5c>)
 80040da:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80040dc:	2200      	movs	r2, #0
 80040de:	210c      	movs	r1, #12
 80040e0:	200a      	movs	r0, #10
 80040e2:	f7fe fa65 	bl	80025b0 <xQueueGenericCreate>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4a07      	ldr	r2, [pc, #28]	; (8004108 <prvCheckForValidListAndQueue+0x54>)
 80040ea:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvCheckForValidListAndQueue+0x54>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <prvCheckForValidListAndQueue+0x54>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4908      	ldr	r1, [pc, #32]	; (800411c <prvCheckForValidListAndQueue+0x68>)
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fc6e 	bl	80029dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004100:	f000 f96a 	bl	80043d8 <vPortExitCritical>
    }
 8004104:	bf00      	nop
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000204 	.word	0x20000204
 800410c:	200001d4 	.word	0x200001d4
 8004110:	200001e8 	.word	0x200001e8
 8004114:	200001fc 	.word	0x200001fc
 8004118:	20000200 	.word	0x20000200
 800411c:	080073e8 	.word	0x080073e8

08004120 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3b04      	subs	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004138:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3b04      	subs	r3, #4
 800413e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b04      	subs	r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <pxPortInitialiseStack+0x64>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b14      	subs	r3, #20
 800415a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3b04      	subs	r3, #4
 8004166:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f06f 0202 	mvn.w	r2, #2
 800416e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3b20      	subs	r3, #32
 8004174:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	08004189 	.word	0x08004189

08004188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <prvTaskExitError+0x54>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419a:	d00a      	beq.n	80041b2 <prvTaskExitError+0x2a>
        __asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	60fb      	str	r3, [r7, #12]
    }
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <prvTaskExitError+0x28>
        __asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60bb      	str	r3, [r7, #8]
    }
 80041c4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80041c6:	bf00      	nop
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0fc      	beq.n	80041c8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	20000010 	.word	0x20000010

080041e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <pxCurrentTCBConst2>)
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	f380 8809 	msr	PSP, r0
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f380 8811 	msr	BASEPRI, r0
 80041fa:	4770      	bx	lr
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst2>:
 8004200:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004208:	4808      	ldr	r0, [pc, #32]	; (800422c <prvPortStartFirstTask+0x24>)
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	6800      	ldr	r0, [r0, #0]
 800420e:	f380 8808 	msr	MSP, r0
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8814 	msr	CONTROL, r0
 800421a:	b662      	cpsie	i
 800421c:	b661      	cpsie	f
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	df00      	svc	0
 8004228:	bf00      	nop
 800422a:	0000      	.short	0x0000
 800422c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop

08004234 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800423a:	4b46      	ldr	r3, [pc, #280]	; (8004354 <xPortStartScheduler+0x120>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a46      	ldr	r2, [pc, #280]	; (8004358 <xPortStartScheduler+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10a      	bne.n	800425a <xPortStartScheduler+0x26>
        __asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	613b      	str	r3, [r7, #16]
    }
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800425a:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <xPortStartScheduler+0x120>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3f      	ldr	r2, [pc, #252]	; (800435c <xPortStartScheduler+0x128>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10a      	bne.n	800427a <xPortStartScheduler+0x46>
        __asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
    }
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <xPortStartScheduler+0x12c>)
 800427c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	22ff      	movs	r2, #255	; 0xff
 800428a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <xPortStartScheduler+0x130>)
 80042a0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <xPortStartScheduler+0x134>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042a8:	e009      	b.n	80042be <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <xPortStartScheduler+0x134>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a2d      	ldr	r2, [pc, #180]	; (8004368 <xPortStartScheduler+0x134>)
 80042b2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d0ef      	beq.n	80042aa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <xPortStartScheduler+0x134>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d00a      	beq.n	80042ec <xPortStartScheduler+0xb8>
        __asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	60bb      	str	r3, [r7, #8]
    }
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <xPortStartScheduler+0x134>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <xPortStartScheduler+0x134>)
 80042f4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <xPortStartScheduler+0x134>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042fe:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <xPortStartScheduler+0x134>)
 8004300:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <xPortStartScheduler+0x138>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <xPortStartScheduler+0x138>)
 8004310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004314:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <xPortStartScheduler+0x138>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <xPortStartScheduler+0x138>)
 800431c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004320:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004322:	f000 f8e3 	bl	80044ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <xPortStartScheduler+0x13c>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800432c:	f000 f902 	bl	8004534 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <xPortStartScheduler+0x140>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <xPortStartScheduler+0x140>)
 8004336:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800433a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800433c:	f7ff ff64 	bl	8004208 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004340:	f7ff f8e4 	bl	800350c <vTaskSwitchContext>
    prvTaskExitError();
 8004344:	f7ff ff20 	bl	8004188 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	e000ed00 	.word	0xe000ed00
 8004358:	410fc271 	.word	0x410fc271
 800435c:	410fc270 	.word	0x410fc270
 8004360:	e000e400 	.word	0xe000e400
 8004364:	20000210 	.word	0x20000210
 8004368:	20000214 	.word	0x20000214
 800436c:	e000ed20 	.word	0xe000ed20
 8004370:	20000010 	.word	0x20000010
 8004374:	e000ef34 	.word	0xe000ef34

08004378 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
        __asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
    }
 8004390:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <vPortEnterCritical+0x58>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <vPortEnterCritical+0x58>)
 800439a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <vPortEnterCritical+0x58>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10f      	bne.n	80043c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <vPortEnterCritical+0x5c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	603b      	str	r3, [r7, #0]
    }
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <vPortEnterCritical+0x4a>
    }
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000010 	.word	0x20000010
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <vPortExitCritical+0x50>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <vPortExitCritical+0x24>
        __asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	607b      	str	r3, [r7, #4]
    }
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <vPortExitCritical+0x50>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <vPortExitCritical+0x50>)
 8004404:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <vPortExitCritical+0x50>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <vPortExitCritical+0x42>
 800440e:	2300      	movs	r3, #0
 8004410:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004418:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000010 	.word	0x20000010
 800442c:	00000000 	.word	0x00000000

08004430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004430:	f3ef 8009 	mrs	r0, PSP
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <pxCurrentTCBConst>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f01e 0f10 	tst.w	lr, #16
 8004440:	bf08      	it	eq
 8004442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	6010      	str	r0, [r2, #0]
 800444c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004454:	f380 8811 	msr	BASEPRI, r0
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f7ff f854 	bl	800350c <vTaskSwitchContext>
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	f380 8811 	msr	BASEPRI, r0
 800446c:	bc09      	pop	{r0, r3}
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	6808      	ldr	r0, [r1, #0]
 8004472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004476:	f01e 0f10 	tst.w	lr, #16
 800447a:	bf08      	it	eq
 800447c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004480:	f380 8809 	msr	PSP, r0
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst>:
 8004490:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
        __asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
    }
 80044b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044b2:	f002 fc2f 	bl	8006d14 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044b6:	f7fe ff0f 	bl	80032d8 <xTaskIncrementTick>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044c0:	f002 fc86 	bl	8006dd0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <SysTick_Handler+0x50>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e001      	b.n	80044d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044ce:	f002 fc63 	bl	8006d98 <SEGGER_SYSVIEW_RecordExitISR>
 80044d2:	2300      	movs	r3, #0
 80044d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f383 8811 	msr	BASEPRI, r3
    }
 80044dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <vPortSetupTimerInterrupt+0x38>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <vPortSetupTimerInterrupt+0x3c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <vPortSetupTimerInterrupt+0x40>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <vPortSetupTimerInterrupt+0x44>)
 800450a:	3b01      	subs	r3, #1
 800450c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e010 	.word	0xe000e010
 8004524:	e000e018 	.word	0xe000e018
 8004528:	20000000 	.word	0x20000000
 800452c:	10624dd3 	.word	0x10624dd3
 8004530:	e000e014 	.word	0xe000e014

08004534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004544 <vPortEnableVFP+0x10>
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800453e:	6001      	str	r1, [r0, #0]
 8004540:	4770      	bx	lr
 8004542:	0000      	.short	0x0000
 8004544:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop

0800454c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004552:	f3ef 8305 	mrs	r3, IPSR
 8004556:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b0f      	cmp	r3, #15
 800455c:	d914      	bls.n	8004588 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <vPortValidateInterruptPriority+0x70>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <vPortValidateInterruptPriority+0x74>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	7afa      	ldrb	r2, [r7, #11]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20a      	bcs.n	8004588 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	607b      	str	r3, [r7, #4]
    }
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <vPortValidateInterruptPriority+0x78>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <vPortValidateInterruptPriority+0x7c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d90a      	bls.n	80045ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	603b      	str	r3, [r7, #0]
    }
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <vPortValidateInterruptPriority+0x60>
    }
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e3f0 	.word	0xe000e3f0
 80045c0:	20000210 	.word	0x20000210
 80045c4:	e000ed0c 	.word	0xe000ed0c
 80045c8:	20000214 	.word	0x20000214

080045cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80045d8:	f7fe fd4e 	bl	8003078 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <pvPortMalloc+0x160>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045e4:	f000 f908 	bl	80047f8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80045ee:	2208      	movs	r2, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	3308      	adds	r3, #8
 80045fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	43db      	mvns	r3, r3
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d804      	bhi.n	8004610 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e001      	b.n	8004614 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db70      	blt.n	80046fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d06d      	beq.n	80046fc <pvPortMalloc+0x130>
 8004620:	4b43      	ldr	r3, [pc, #268]	; (8004730 <pvPortMalloc+0x164>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d868      	bhi.n	80046fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <pvPortMalloc+0x168>)
 800462c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <pvPortMalloc+0x168>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004634:	e004      	b.n	8004640 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <pvPortMalloc+0x86>
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f1      	bne.n	8004636 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <pvPortMalloc+0x160>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	429a      	cmp	r2, r3
 800465a:	d04f      	beq.n	80046fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	4413      	add	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	2308      	movs	r3, #8
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	429a      	cmp	r2, r3
 800467c:	d91f      	bls.n	80046be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800467e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <pvPortMalloc+0xda>
        __asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
    }
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad2      	subs	r2, r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f000 f8f9 	bl	80048b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <pvPortMalloc+0x164>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	4a19      	ldr	r2, [pc, #100]	; (8004730 <pvPortMalloc+0x164>)
 80046ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <pvPortMalloc+0x164>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <pvPortMalloc+0x16c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d203      	bcs.n	80046e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <pvPortMalloc+0x164>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <pvPortMalloc+0x16c>)
 80046de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <pvPortMalloc+0x170>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <pvPortMalloc+0x170>)
 80046fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046fc:	f7fe fcca 	bl	8003094 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <pvPortMalloc+0x154>
        __asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60fb      	str	r3, [r7, #12]
    }
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <pvPortMalloc+0x152>
    return pvReturn;
 8004720:	69fb      	ldr	r3, [r7, #28]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3728      	adds	r7, #40	; 0x28
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20012e20 	.word	0x20012e20
 8004730:	20012e24 	.word	0x20012e24
 8004734:	20012e18 	.word	0x20012e18
 8004738:	20012e28 	.word	0x20012e28
 800473c:	20012e2c 	.word	0x20012e2c

08004740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d049      	beq.n	80047e6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004752:	2308      	movs	r3, #8
 8004754:	425b      	negs	r3, r3
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	db0a      	blt.n	800477e <vPortFree+0x3e>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60fb      	str	r3, [r7, #12]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <vPortFree+0x5c>
        __asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60bb      	str	r3, [r7, #8]
    }
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	0fdb      	lsrs	r3, r3, #31
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01c      	beq.n	80047e6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d118      	bne.n	80047e6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80047c0:	f7fe fc5a 	bl	8003078 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <vPortFree+0xb0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	4a08      	ldr	r2, [pc, #32]	; (80047f0 <vPortFree+0xb0>)
 80047d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047d2:	6938      	ldr	r0, [r7, #16]
 80047d4:	f000 f86c 	bl	80048b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <vPortFree+0xb4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <vPortFree+0xb4>)
 80047e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80047e2:	f7fe fc57 	bl	8003094 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20012e24 	.word	0x20012e24
 80047f4:	20012e30 	.word	0x20012e30

080047f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047fe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004802:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004804:	4b25      	ldr	r3, [pc, #148]	; (800489c <prvHeapInit+0xa4>)
 8004806:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3307      	adds	r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	4a1d      	ldr	r2, [pc, #116]	; (800489c <prvHeapInit+0xa4>)
 8004828:	4413      	add	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <prvHeapInit+0xa8>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <prvHeapInit+0xa8>)
 8004838:	2200      	movs	r2, #0
 800483a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004844:	2208      	movs	r2, #8
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0307 	bic.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <prvHeapInit+0xac>)
 8004858:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <prvHeapInit+0xac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <prvHeapInit+0xac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <prvHeapInit+0xac>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <prvHeapInit+0xb0>)
 8004886:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a07      	ldr	r2, [pc, #28]	; (80048ac <prvHeapInit+0xb4>)
 800488e:	6013      	str	r3, [r2, #0]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	20000218 	.word	0x20000218
 80048a0:	20012e18 	.word	0x20012e18
 80048a4:	20012e20 	.word	0x20012e20
 80048a8:	20012e28 	.word	0x20012e28
 80048ac:	20012e24 	.word	0x20012e24

080048b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <prvInsertBlockIntoFreeList+0xac>)
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e002      	b.n	80048c4 <prvInsertBlockIntoFreeList+0x14>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d8f7      	bhi.n	80048be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d108      	bne.n	80048f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	441a      	add	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	441a      	add	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d118      	bne.n	8004938 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <prvInsertBlockIntoFreeList+0xb0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d00d      	beq.n	800492e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e008      	b.n	8004940 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <prvInsertBlockIntoFreeList+0xb0>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e003      	b.n	8004940 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d002      	beq.n	800494e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20012e18 	.word	0x20012e18
 8004960:	20012e20 	.word	0x20012e20

08004964 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004968:	4803      	ldr	r0, [pc, #12]	; (8004978 <_cbSendSystemDesc+0x14>)
 800496a:	f002 f97d 	bl	8006c68 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800496e:	4803      	ldr	r0, [pc, #12]	; (800497c <_cbSendSystemDesc+0x18>)
 8004970:	f002 f97a 	bl	8006c68 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}
 8004978:	080073f0 	.word	0x080073f0
 800497c:	08007434 	.word	0x08007434

08004980 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <SEGGER_SYSVIEW_Conf+0x20>)
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <SEGGER_SYSVIEW_Conf+0x24>)
 800498e:	4a06      	ldr	r2, [pc, #24]	; (80049a8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004990:	f001 fce6 	bl	8006360 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004994:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004998:	f001 fd26 	bl	80063e8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000000 	.word	0x20000000
 80049a4:	08004965 	.word	0x08004965
 80049a8:	080074d0 	.word	0x080074d0

080049ac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80049ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e033      	b.n	8004a20 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80049b8:	491e      	ldr	r1, [pc, #120]	; (8004a34 <_cbSendTaskList+0x88>)
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	491a      	ldr	r1, [pc, #104]	; (8004a34 <_cbSendTaskList+0x88>)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	3304      	adds	r3, #4
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	4c16      	ldr	r4, [pc, #88]	; (8004a34 <_cbSendTaskList+0x88>)
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4423      	add	r3, r4
 80049e8:	3308      	adds	r3, #8
 80049ea:	681c      	ldr	r4, [r3, #0]
 80049ec:	4d11      	ldr	r5, [pc, #68]	; (8004a34 <_cbSendTaskList+0x88>)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	442b      	add	r3, r5
 80049fa:	330c      	adds	r3, #12
 80049fc:	681d      	ldr	r5, [r3, #0]
 80049fe:	4e0d      	ldr	r6, [pc, #52]	; (8004a34 <_cbSendTaskList+0x88>)
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4433      	add	r3, r6
 8004a0c:	3310      	adds	r3, #16
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	462b      	mov	r3, r5
 8004a14:	4622      	mov	r2, r4
 8004a16:	f000 f92d 	bl	8004c74 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <_cbSendTaskList+0x8c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3c6      	bcc.n	80049b8 <_cbSendTaskList+0xc>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a34:	20012e34 	.word	0x20012e34
 8004a38:	20012ed4 	.word	0x20012ed4

08004a3c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a44:	f7fe fc36 	bl	80032b4 <xTaskGetTickCountFromISR>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	469a      	mov	sl, r3
 8004a4e:	4693      	mov	fp, r2
 8004a50:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	f04f 0a00 	mov.w	sl, #0
 8004a60:	f04f 0b00 	mov.w	fp, #0
 8004a64:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004a68:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004a6c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004a70:	4652      	mov	r2, sl
 8004a72:	465b      	mov	r3, fp
 8004a74:	1a14      	subs	r4, r2, r0
 8004a76:	eb63 0501 	sbc.w	r5, r3, r1
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	00ab      	lsls	r3, r5, #2
 8004a84:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004a88:	00a2      	lsls	r2, r4, #2
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	eb14 0800 	adds.w	r8, r4, r0
 8004a92:	eb45 0901 	adc.w	r9, r5, r1
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aaa:	4690      	mov	r8, r2
 8004aac:	4699      	mov	r9, r3
 8004aae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ac4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ad2:	2205      	movs	r2, #5
 8004ad4:	492b      	ldr	r1, [pc, #172]	; (8004b84 <SYSVIEW_AddTask+0xc0>)
 8004ad6:	68b8      	ldr	r0, [r7, #8]
 8004ad8:	f002 fc0c 	bl	80072f4 <memcmp>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04b      	beq.n	8004b7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ae2:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b07      	cmp	r3, #7
 8004ae8:	d903      	bls.n	8004af2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004aea:	4828      	ldr	r0, [pc, #160]	; (8004b8c <SYSVIEW_AddTask+0xc8>)
 8004aec:	f002 fb78 	bl	80071e0 <SEGGER_SYSVIEW_Warn>
    return;
 8004af0:	e044      	b.n	8004b7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004af2:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4926      	ldr	r1, [pc, #152]	; (8004b90 <SYSVIEW_AddTask+0xcc>)
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4921      	ldr	r1, [pc, #132]	; (8004b90 <SYSVIEW_AddTask+0xcc>)
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	3304      	adds	r3, #4
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	491b      	ldr	r1, [pc, #108]	; (8004b90 <SYSVIEW_AddTask+0xcc>)
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4916      	ldr	r1, [pc, #88]	; (8004b90 <SYSVIEW_AddTask+0xcc>)
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	330c      	adds	r3, #12
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4910      	ldr	r1, [pc, #64]	; (8004b90 <SYSVIEW_AddTask+0xcc>)
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3310      	adds	r3, #16
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <SYSVIEW_AddTask+0xc4>)
 8004b66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f87e 	bl	8004c74 <SYSVIEW_SendTaskInfo>
 8004b78:	e000      	b.n	8004b7c <SYSVIEW_AddTask+0xb8>
    return;
 8004b7a:	bf00      	nop

}
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	08007444 	.word	0x08007444
 8004b88:	20012ed4 	.word	0x20012ed4
 8004b8c:	0800744c 	.word	0x0800744c
 8004b90:	20012e34 	.word	0x20012e34

08004b94 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	4930      	ldr	r1, [pc, #192]	; (8004c68 <SYSVIEW_UpdateTask+0xd4>)
 8004ba6:	68b8      	ldr	r0, [r7, #8]
 8004ba8:	f002 fba4 	bl	80072f4 <memcmp>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d056      	beq.n	8004c60 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e00d      	b.n	8004bd4 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004bb8:	492c      	ldr	r1, [pc, #176]	; (8004c6c <SYSVIEW_UpdateTask+0xd8>)
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d008      	beq.n	8004be0 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <SYSVIEW_UpdateTask+0xdc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3ec      	bcc.n	8004bb8 <SYSVIEW_UpdateTask+0x24>
 8004bde:	e000      	b.n	8004be2 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004be0:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004be2:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <SYSVIEW_UpdateTask+0xdc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d230      	bcs.n	8004c4e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004bec:	491f      	ldr	r1, [pc, #124]	; (8004c6c <SYSVIEW_UpdateTask+0xd8>)
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004c00:	491a      	ldr	r1, [pc, #104]	; (8004c6c <SYSVIEW_UpdateTask+0xd8>)
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3308      	adds	r3, #8
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004c14:	4915      	ldr	r1, [pc, #84]	; (8004c6c <SYSVIEW_UpdateTask+0xd8>)
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	330c      	adds	r3, #12
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004c28:	4910      	ldr	r1, [pc, #64]	; (8004c6c <SYSVIEW_UpdateTask+0xd8>)
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3310      	adds	r3, #16
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f814 	bl	8004c74 <SYSVIEW_SendTaskInfo>
 8004c4c:	e009      	b.n	8004c62 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff33 	bl	8004ac4 <SYSVIEW_AddTask>
 8004c5e:	e000      	b.n	8004c62 <SYSVIEW_UpdateTask+0xce>
    return;
 8004c60:	bf00      	nop
  }
}
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	08007444 	.word	0x08007444
 8004c6c:	20012e34 	.word	0x20012e34
 8004c70:	20012ed4 	.word	0x20012ed4

08004c74 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c82:	f107 0314 	add.w	r3, r7, #20
 8004c86:	2214      	movs	r2, #20
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f002 fb42 	bl	8007314 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fee5 	bl	8006a78 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004cae:	bf00      	nop
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <__NVIC_EnableIRQ>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	db0b      	blt.n	8004ce2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	4907      	ldr	r1, [pc, #28]	; (8004cf0 <__NVIC_EnableIRQ+0x38>)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2001      	movs	r0, #1
 8004cda:	fa00 f202 	lsl.w	r2, r0, r2
 8004cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000e100 	.word	0xe000e100

08004cf4 <__NVIC_SetPriority>:
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	db0a      	blt.n	8004d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	490c      	ldr	r1, [pc, #48]	; (8004d40 <__NVIC_SetPriority+0x4c>)
 8004d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d12:	0112      	lsls	r2, r2, #4
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	440b      	add	r3, r1
 8004d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d1c:	e00a      	b.n	8004d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4908      	ldr	r1, [pc, #32]	; (8004d44 <__NVIC_SetPriority+0x50>)
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	3b04      	subs	r3, #4
 8004d2c:	0112      	lsls	r2, r2, #4
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	440b      	add	r3, r1
 8004d32:	761a      	strb	r2, [r3, #24]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	e000e100 	.word	0xe000e100
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004d4e:	f002 faa3 	bl	8007298 <SEGGER_SYSVIEW_IsStarted>
 8004d52:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004d5a:	f001 fd11 	bl	8006780 <SEGGER_SYSVIEW_Start>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <_cbOnUARTRx+0x3c>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d806      	bhi.n	8004d88 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <_cbOnUARTRx+0x3c>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <_cbOnUARTRx+0x3c>)
 8004d84:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004d86:	e009      	b.n	8004d9c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004d88:	f7ff ffde 	bl	8004d48 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <_cbOnUARTRx+0x3c>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	2201      	movs	r2, #1
 8004d96:	4619      	mov	r1, r3
 8004d98:	f000 fb9c 	bl	80054d4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004d9c:	bf00      	nop
}
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000014 	.word	0x20000014

08004da8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <_cbOnUARTTx+0x5c>)
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d80f      	bhi.n	8004dd8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <_cbOnUARTTx+0x5c>)
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <_cbOnUARTTx+0x60>)
 8004dc0:	5c9a      	ldrb	r2, [r3, r2]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <_cbOnUARTTx+0x5c>)
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <_cbOnUARTTx+0x5c>)
 8004dd0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004dd6:	e00f      	b.n	8004df8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <_cbOnUARTTx+0x5c>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fa1b 	bl	800521c <SEGGER_RTT_ReadUpBufferNoLock>
 8004de6:	4603      	mov	r3, r0
 8004de8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	da02      	bge.n	8004df6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e000      	b.n	8004df8 <_cbOnUARTTx+0x50>
  }
Done:
 8004df6:	bf00      	nop
  return r;
 8004df8:	68fb      	ldr	r3, [r7, #12]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000014 	.word	0x20000014
 8004e08:	080074d8 	.word	0x080074d8

08004e0c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <SEGGER_UART_init+0x1c>)
 8004e16:	4905      	ldr	r1, [pc, #20]	; (8004e2c <SEGGER_UART_init+0x20>)
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f863 	bl	8004ee4 <HIF_UART_Init>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	08004d69 	.word	0x08004d69
 8004e2c:	08004da9 	.word	0x08004da9

08004e30 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <USART2_IRQHandler+0x80>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <USART2_IRQHandler+0x84>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 030b 	and.w	r3, r3, #11
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d108      	bne.n	8004e6a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <USART2_IRQHandler+0x88>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004e60:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <USART2_IRQHandler+0x88>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	79fa      	ldrb	r2, [r7, #7]
 8004e66:	4610      	mov	r0, r2
 8004e68:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01a      	beq.n	8004eaa <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <USART2_IRQHandler+0x8c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <USART2_IRQHandler+0x8c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1dfa      	adds	r2, r7, #7
 8004e82:	4610      	mov	r0, r2
 8004e84:	4798      	blx	r3
 8004e86:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <USART2_IRQHandler+0x90>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0b      	ldr	r2, [pc, #44]	; (8004ec0 <USART2_IRQHandler+0x90>)
 8004e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e006      	b.n	8004eaa <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <USART2_IRQHandler+0x80>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ea0:	79fa      	ldrb	r2, [r7, #7]
 8004ea2:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <USART2_IRQHandler+0x84>)
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e000      	b.n	8004eaa <USART2_IRQHandler+0x7a>
      return;
 8004ea8:	bf00      	nop
    }
  }
}
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40004400 	.word	0x40004400
 8004eb4:	40004404 	.word	0x40004404
 8004eb8:	20012ed8 	.word	0x20012ed8
 8004ebc:	20012edc 	.word	0x20012edc
 8004ec0:	4000440c 	.word	0x4000440c

08004ec4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	4000440c 	.word	0x4000440c

08004ee4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HIF_UART_Init+0xc8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2d      	ldr	r2, [pc, #180]	; (8004fac <HIF_UART_Init+0xc8>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004efc:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <HIF_UART_Init+0xcc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HIF_UART_Init+0xcc>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <HIF_UART_Init+0xd0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f14:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004f1c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004f1e:	4a25      	ldr	r2, [pc, #148]	; (8004fb4 <HIF_UART_Init+0xd0>)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004f24:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <HIF_UART_Init+0xd4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f30:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004f38:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <HIF_UART_Init+0xd4>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HIF_UART_Init+0xd8>)
 8004f42:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004f46:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HIF_UART_Init+0xdc>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HIF_UART_Init+0xe0>)
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HIF_UART_Init+0xe4>)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d302      	bcc.n	8004f7a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004f74:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004f78:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d004      	beq.n	8004f8a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <HIF_UART_Init+0xe8>)
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004f8a:	4a11      	ldr	r2, [pc, #68]	; (8004fd0 <HIF_UART_Init+0xec>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004f90:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <HIF_UART_Init+0xf0>)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004f96:	2106      	movs	r1, #6
 8004f98:	2026      	movs	r0, #38	; 0x26
 8004f9a:	f7ff feab 	bl	8004cf4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004f9e:	2026      	movs	r0, #38	; 0x26
 8004fa0:	f7ff fe8a 	bl	8004cb8 <__NVIC_EnableIRQ>
}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40023840 	.word	0x40023840
 8004fb0:	40023830 	.word	0x40023830
 8004fb4:	40020020 	.word	0x40020020
 8004fb8:	40020000 	.word	0x40020000
 8004fbc:	4000440c 	.word	0x4000440c
 8004fc0:	40004410 	.word	0x40004410
 8004fc4:	40004414 	.word	0x40004414
 8004fc8:	0501bd00 	.word	0x0501bd00
 8004fcc:	40004408 	.word	0x40004408
 8004fd0:	20012ed8 	.word	0x20012ed8
 8004fd4:	20012edc 	.word	0x20012edc

08004fd8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004fde:	4b26      	ldr	r3, [pc, #152]	; (8005078 <_DoInit+0xa0>)
 8004fe0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004fe2:	22a8      	movs	r2, #168	; 0xa8
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	6838      	ldr	r0, [r7, #0]
 8004fe8:	f002 f994 	bl	8007314 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4a20      	ldr	r2, [pc, #128]	; (800507c <_DoInit+0xa4>)
 8004ffc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <_DoInit+0xa8>)
 8005002:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800500a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	4a16      	ldr	r2, [pc, #88]	; (800507c <_DoInit+0xa4>)
 8005022:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4a17      	ldr	r2, [pc, #92]	; (8005084 <_DoInit+0xac>)
 8005028:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2210      	movs	r2, #16
 800502e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2200      	movs	r2, #0
 800503a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005042:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	e00c      	b.n	8005066 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1c3 030f 	rsb	r3, r3, #15
 8005052:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <_DoInit+0xb0>)
 8005054:	5cd1      	ldrb	r1, [r2, r3]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	460a      	mov	r2, r1
 800505e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b0f      	cmp	r3, #15
 800506a:	d9ef      	bls.n	800504c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800506c:	f3bf 8f5f 	dmb	sy
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20012ee0 	.word	0x20012ee0
 800507c:	0800749c 	.word	0x0800749c
 8005080:	20012f88 	.word	0x20012f88
 8005084:	20013388 	.word	0x20013388
 8005088:	080074dc 	.word	0x080074dc

0800508c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005098:	2300      	movs	r3, #0
 800509a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d905      	bls.n	80050bc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	e007      	b.n	80050cc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1acb      	subs	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	3b01      	subs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bf28      	it	cs
 80050da:	4613      	movcs	r3, r2
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4293      	cmp	r3, r2
 80050e4:	bf28      	it	cs
 80050e6:	4613      	movcs	r3, r2
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80050f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	6978      	ldr	r0, [r7, #20]
 80050fa:	f002 f937 	bl	800736c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	4413      	add	r3, r2
 8005104:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	4413      	add	r3, r2
 800510c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	4413      	add	r3, r2
 800511c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	429a      	cmp	r2, r3
 8005126:	d101      	bne.n	800512c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800512c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b2      	bne.n	80050a2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800513c:	6a3b      	ldr	r3, [r7, #32]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3728      	adds	r7, #40	; 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005146:	b580      	push	{r7, lr}
 8005148:	b088      	sub	sp, #32
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d911      	bls.n	800518e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	6938      	ldr	r0, [r7, #16]
 800517a:	f002 f8f7 	bl	800736c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800517e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800518c:	e01f      	b.n	80051ce <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	6938      	ldr	r0, [r7, #16]
 80051a2:	f002 f8e3 	bl	800736c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	4413      	add	r3, r2
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4619      	mov	r1, r3
 80051be:	6938      	ldr	r0, [r7, #16]
 80051c0:	f002 f8d4 	bl	800736c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051c4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	60da      	str	r2, [r3, #12]
}
 80051ce:	bf00      	nop
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d808      	bhi.n	8005204 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad2      	subs	r2, r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4413      	add	r3, r2
 80051fe:	3b01      	subs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e004      	b.n	800520e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800520e:	697b      	ldr	r3, [r7, #20]
}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005228:	4b3e      	ldr	r3, [pc, #248]	; (8005324 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b53      	cmp	r3, #83	; 0x53
 8005234:	d001      	beq.n	800523a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005236:	f7ff fecf 	bl	8004fd8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4a37      	ldr	r2, [pc, #220]	; (8005324 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005248:	4413      	add	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800525c:	2300      	movs	r3, #0
 800525e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	d92b      	bls.n	80052c0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4293      	cmp	r3, r2
 8005278:	bf28      	it	cs
 800527a:	4613      	movcs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	4413      	add	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528e:	f002 f86d 	bl	800736c <memcpy>
    NumBytesRead += NumBytesRem;
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d101      	bne.n	80052c0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4293      	cmp	r3, r2
 80052ce:	bf28      	it	cs
 80052d0:	4613      	movcs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d019      	beq.n	800530e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	4413      	add	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	6939      	ldr	r1, [r7, #16]
 80052e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ea:	f002 f83f 	bl	800736c <memcpy>
    NumBytesRead += NumBytesRem;
 80052ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005318:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800531c:	4618      	mov	r0, r3
 800531e:	3730      	adds	r7, #48	; 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20012ee0 	.word	0x20012ee0

08005328 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005334:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <SEGGER_RTT_ReadNoLock+0x108>)
 8005336:	623b      	str	r3, [r7, #32]
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b53      	cmp	r3, #83	; 0x53
 8005340:	d001      	beq.n	8005346 <SEGGER_RTT_ReadNoLock+0x1e>
 8005342:	f7ff fe49 	bl	8004fd8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	3360      	adds	r3, #96	; 0x60
 8005352:	4a37      	ldr	r2, [pc, #220]	; (8005430 <SEGGER_RTT_ReadNoLock+0x108>)
 8005354:	4413      	add	r3, r2
 8005356:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005368:	2300      	movs	r3, #0
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d92b      	bls.n	80053cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4293      	cmp	r3, r2
 8005384:	bf28      	it	cs
 8005386:	4613      	movcs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	4413      	add	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6939      	ldr	r1, [r7, #16]
 8005398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800539a:	f001 ffe7 	bl	800736c <memcpy>
    NumBytesRead += NumBytesRem;
 800539e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d101      	bne.n	80053cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053c8:	2300      	movs	r3, #0
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4293      	cmp	r3, r2
 80053da:	bf28      	it	cs
 80053dc:	4613      	movcs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d019      	beq.n	800541a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	4413      	add	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053f6:	f001 ffb9 	bl	800736c <memcpy>
    NumBytesRead += NumBytesRem;
 80053fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4413      	add	r3, r2
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005424:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	; 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20012ee0 	.word	0x20012ee0

08005434 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	3360      	adds	r3, #96	; 0x60
 8005450:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005452:	4413      	add	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d029      	beq.n	80054b2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800545e:	2b02      	cmp	r3, #2
 8005460:	d82e      	bhi.n	80054c0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005466:	2b01      	cmp	r3, #1
 8005468:	d013      	beq.n	8005492 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800546a:	e029      	b.n	80054c0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800546c:	6978      	ldr	r0, [r7, #20]
 800546e:	f7ff feb2 	bl	80051d6 <_GetAvailWriteSpace>
 8005472:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d202      	bcs.n	8005482 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005480:	e021      	b.n	80054c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	f7ff fe5b 	bl	8005146 <_WriteNoCheck>
    break;
 8005490:	e019      	b.n	80054c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f7ff fe9f 	bl	80051d6 <_GetAvailWriteSpace>
 8005498:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4293      	cmp	r3, r2
 80054a0:	bf28      	it	cs
 80054a2:	4613      	movcs	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	6978      	ldr	r0, [r7, #20]
 80054ac:	f7ff fe4b 	bl	8005146 <_WriteNoCheck>
    break;
 80054b0:	e009      	b.n	80054c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff fde8 	bl	800508c <_WriteBlocking>
 80054bc:	61f8      	str	r0, [r7, #28]
    break;
 80054be:	e002      	b.n	80054c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
    break;
 80054c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80054c6:	69fb      	ldr	r3, [r7, #28]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20012ee0 	.word	0x20012ee0

080054d4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b53      	cmp	r3, #83	; 0x53
 80054ec:	d001      	beq.n	80054f2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80054ee:	f7ff fd73 	bl	8004fd8 <_DoInit>
  SEGGER_RTT_LOCK();
 80054f2:	f3ef 8311 	mrs	r3, BASEPRI
 80054f6:	f04f 0120 	mov.w	r1, #32
 80054fa:	f381 8811 	msr	BASEPRI, r1
 80054fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff ff95 	bl	8005434 <SEGGER_RTT_WriteDownBufferNoLock>
 800550a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005512:	697b      	ldr	r3, [r7, #20]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20012ee0 	.word	0x20012ee0

08005520 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800552e:	4b3d      	ldr	r3, [pc, #244]	; (8005624 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b53      	cmp	r3, #83	; 0x53
 800553a:	d001      	beq.n	8005540 <SEGGER_RTT_AllocUpBuffer+0x20>
 800553c:	f7ff fd4c 	bl	8004fd8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005540:	f3ef 8311 	mrs	r3, BASEPRI
 8005544:	f04f 0120 	mov.w	r1, #32
 8005548:	f381 8811 	msr	BASEPRI, r1
 800554c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800554e:	4b35      	ldr	r3, [pc, #212]	; (8005624 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005550:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005556:	6939      	ldr	r1, [r7, #16]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	3304      	adds	r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3301      	adds	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	429a      	cmp	r2, r3
 800557c:	dbeb      	blt.n	8005556 <SEGGER_RTT_AllocUpBuffer+0x36>
 800557e:	e000      	b.n	8005582 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005580:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	429a      	cmp	r2, r3
 800558a:	da3f      	bge.n	800560c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800558c:	6939      	ldr	r1, [r7, #16]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80055a0:	6939      	ldr	r1, [r7, #16]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	4613      	mov	r3, r2
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	4413      	add	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	440b      	add	r3, r1
 80055b0:	3304      	adds	r3, #4
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80055b6:	6939      	ldr	r1, [r7, #16]
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	4613      	mov	r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	440b      	add	r3, r1
 80055c4:	3320      	adds	r3, #32
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80055ca:	6939      	ldr	r1, [r7, #16]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	4613      	mov	r3, r2
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	3328      	adds	r3, #40	; 0x28
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80055de:	6939      	ldr	r1, [r7, #16]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	3324      	adds	r3, #36	; 0x24
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80055f2:	6939      	ldr	r1, [r7, #16]
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	332c      	adds	r3, #44	; 0x2c
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005606:	f3bf 8f5f 	dmb	sy
 800560a:	e002      	b.n	8005612 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800560c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005610:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005618:	69fb      	ldr	r3, [r7, #28]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20012ee0 	.word	0x20012ee0

08005628 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b53      	cmp	r3, #83	; 0x53
 8005642:	d001      	beq.n	8005648 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005644:	f7ff fcc8 	bl	8004fd8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005648:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800564a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d82c      	bhi.n	80056ac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005652:	f3ef 8311 	mrs	r3, BASEPRI
 8005656:	f04f 0120 	mov.w	r1, #32
 800565a:	f381 8811 	msr	BASEPRI, r1
 800565e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	3360      	adds	r3, #96	; 0x60
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800569c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
 80056aa:	e002      	b.n	80056b2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20012ee0 	.word	0x20012ee0

080056c0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	60fa      	str	r2, [r7, #12]
 80056d6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d90a      	bls.n	80056f4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80056e2:	e007      	b.n	80056f4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	1c53      	adds	r3, r2, #1
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	60f9      	str	r1, [r7, #12]
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <_EncodeStr+0x46>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ee      	bne.n	80056e4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	b2da      	uxtb	r2, r3
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3307      	adds	r3, #7
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800573e:	4b34      	ldr	r3, [pc, #208]	; (8005810 <_HandleIncomingPacket+0xd8>)
 8005740:	7e1b      	ldrb	r3, [r3, #24]
 8005742:	4618      	mov	r0, r3
 8005744:	1cfb      	adds	r3, r7, #3
 8005746:	2201      	movs	r2, #1
 8005748:	4619      	mov	r1, r3
 800574a:	f7ff fded 	bl	8005328 <SEGGER_RTT_ReadNoLock>
 800574e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d057      	beq.n	8005806 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d031      	beq.n	80057c0 <_HandleIncomingPacket+0x88>
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	dc40      	bgt.n	80057e2 <_HandleIncomingPacket+0xaa>
 8005760:	2b07      	cmp	r3, #7
 8005762:	dc15      	bgt.n	8005790 <_HandleIncomingPacket+0x58>
 8005764:	2b00      	cmp	r3, #0
 8005766:	dd3c      	ble.n	80057e2 <_HandleIncomingPacket+0xaa>
 8005768:	3b01      	subs	r3, #1
 800576a:	2b06      	cmp	r3, #6
 800576c:	d839      	bhi.n	80057e2 <_HandleIncomingPacket+0xaa>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <_HandleIncomingPacket+0x3c>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005797 	.word	0x08005797
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057a3 	.word	0x080057a3
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057af 	.word	0x080057af
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057bb 	.word	0x080057bb
 8005790:	2b7f      	cmp	r3, #127	; 0x7f
 8005792:	d033      	beq.n	80057fc <_HandleIncomingPacket+0xc4>
 8005794:	e025      	b.n	80057e2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005796:	f000 fff3 	bl	8006780 <SEGGER_SYSVIEW_Start>
      break;
 800579a:	e034      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800579c:	f001 f8ac 	bl	80068f8 <SEGGER_SYSVIEW_Stop>
      break;
 80057a0:	e031      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80057a2:	f001 fa85 	bl	8006cb0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80057a6:	e02e      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80057a8:	f001 fa4a 	bl	8006c40 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80057ac:	e02b      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80057ae:	f001 f8c9 	bl	8006944 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80057b2:	e028      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80057b4:	f001 fcc2 	bl	800713c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80057b8:	e025      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80057ba:	f001 fca1 	bl	8007100 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80057be:	e022      	b.n	8005806 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <_HandleIncomingPacket+0xd8>)
 80057c2:	7e1b      	ldrb	r3, [r3, #24]
 80057c4:	4618      	mov	r0, r3
 80057c6:	1cfb      	adds	r3, r7, #3
 80057c8:	2201      	movs	r2, #1
 80057ca:	4619      	mov	r1, r3
 80057cc:	f7ff fdac 	bl	8005328 <SEGGER_RTT_ReadNoLock>
 80057d0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d013      	beq.n	8005800 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fc06 	bl	8006fec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80057e0:	e00e      	b.n	8005800 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	b25b      	sxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da0c      	bge.n	8005804 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <_HandleIncomingPacket+0xd8>)
 80057ec:	7e1b      	ldrb	r3, [r3, #24]
 80057ee:	4618      	mov	r0, r3
 80057f0:	1cfb      	adds	r3, r7, #3
 80057f2:	2201      	movs	r2, #1
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7ff fd97 	bl	8005328 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80057fa:	e003      	b.n	8005804 <_HandleIncomingPacket+0xcc>
      break;
 80057fc:	bf00      	nop
 80057fe:	e002      	b.n	8005806 <_HandleIncomingPacket+0xce>
      break;
 8005800:	bf00      	nop
 8005802:	e000      	b.n	8005806 <_HandleIncomingPacket+0xce>
      break;
 8005804:	bf00      	nop
    }
  }
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	200143a0 	.word	0x200143a0

08005814 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b08c      	sub	sp, #48	; 0x30
 8005818:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800581a:	2301      	movs	r3, #1
 800581c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005828:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
 800582e:	e00b      	b.n	8005848 <_TrySendOverflowPacket+0x34>
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	b2da      	uxtb	r2, r3
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	62f9      	str	r1, [r7, #44]	; 0x2c
 800583a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	09db      	lsrs	r3, r3, #7
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	d8f0      	bhi.n	8005830 <_TrySendOverflowPacket+0x1c>
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800585e:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <_TrySendOverflowPacket+0xe4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	e00b      	b.n	8005890 <_TrySendOverflowPacket+0x7c>
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	b2da      	uxtb	r2, r3
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	6279      	str	r1, [r7, #36]	; 0x24
 8005882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	09db      	lsrs	r3, r3, #7
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	2b7f      	cmp	r3, #127	; 0x7f
 8005894:	d8f0      	bhi.n	8005878 <_TrySendOverflowPacket+0x64>
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	627a      	str	r2, [r7, #36]	; 0x24
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80058a6:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	4618      	mov	r0, r3
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	f7fa fcaa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058bc:	4603      	mov	r3, r0
 80058be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80058c0:	f7ff fb00 	bl	8004ec4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058ca:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e004      	b.n	80058e8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	3301      	adds	r3, #1
 80058e4:	4a03      	ldr	r2, [pc, #12]	; (80058f4 <_TrySendOverflowPacket+0xe0>)
 80058e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80058e8:	693b      	ldr	r3, [r7, #16]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3730      	adds	r7, #48	; 0x30
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	200143a0 	.word	0x200143a0
 80058f8:	e0001004 	.word	0xe0001004

080058fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005908:	4b96      	ldr	r3, [pc, #600]	; (8005b64 <_SendPacket+0x268>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d010      	beq.n	8005932 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005910:	4b94      	ldr	r3, [pc, #592]	; (8005b64 <_SendPacket+0x268>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8130 	beq.w	8005b7a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800591a:	4b92      	ldr	r3, [pc, #584]	; (8005b64 <_SendPacket+0x268>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d109      	bne.n	8005936 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005922:	f7ff ff77 	bl	8005814 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005926:	4b8f      	ldr	r3, [pc, #572]	; (8005b64 <_SendPacket+0x268>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	f040 8127 	bne.w	8005b7e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005930:	e001      	b.n	8005936 <_SendPacket+0x3a>
    goto Send;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <_SendPacket+0x3c>
Send:
 8005936:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b1f      	cmp	r3, #31
 800593c:	d809      	bhi.n	8005952 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800593e:	4b89      	ldr	r3, [pc, #548]	; (8005b64 <_SendPacket+0x268>)
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 8118 	bne.w	8005b82 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b17      	cmp	r3, #23
 8005956:	d807      	bhi.n	8005968 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3b01      	subs	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e0c4      	b.n	8005af2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b7f      	cmp	r3, #127	; 0x7f
 8005974:	d912      	bls.n	800599c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	09da      	lsrs	r2, r3, #7
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b01      	subs	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	3a01      	subs	r2, #1
 800598e:	60fa      	str	r2, [r7, #12]
 8005990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e006      	b.n	80059aa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3b01      	subs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b7e      	cmp	r3, #126	; 0x7e
 80059ae:	d807      	bhi.n	80059c0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e098      	b.n	8005af2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c6:	d212      	bcs.n	80059ee <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	09da      	lsrs	r2, r3, #7
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	3a01      	subs	r2, #1
 80059e0:	60fa      	str	r2, [r7, #12]
 80059e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e081      	b.n	8005af2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059f4:	d21d      	bcs.n	8005a32 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	0b9a      	lsrs	r2, r3, #14
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	09db      	lsrs	r3, r3, #7
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	60fa      	str	r2, [r7, #12]
 8005a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	3a01      	subs	r2, #1
 8005a24:	60fa      	str	r2, [r7, #12]
 8005a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e05f      	b.n	8005af2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a38:	d228      	bcs.n	8005a8c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	0d5a      	lsrs	r2, r3, #21
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0b9b      	lsrs	r3, r3, #14
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	3a01      	subs	r2, #1
 8005a54:	60fa      	str	r2, [r7, #12]
 8005a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	09db      	lsrs	r3, r3, #7
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	60fa      	str	r2, [r7, #12]
 8005a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	60fa      	str	r2, [r7, #12]
 8005a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e032      	b.n	8005af2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	0f1a      	lsrs	r2, r3, #28
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0d5b      	lsrs	r3, r3, #21
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	60fa      	str	r2, [r7, #12]
 8005aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0b9b      	lsrs	r3, r3, #14
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	3a01      	subs	r2, #1
 8005abc:	60fa      	str	r2, [r7, #12]
 8005abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	09db      	lsrs	r3, r3, #7
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	60fa      	str	r2, [r7, #12]
 8005ad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	3a01      	subs	r2, #1
 8005ae6:	60fa      	str	r2, [r7, #12]
 8005ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005af2:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <_SendPacket+0x26c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <_SendPacket+0x268>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	e00b      	b.n	8005b24 <_SendPacket+0x228>
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	6279      	str	r1, [r7, #36]	; 0x24
 8005b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	623b      	str	r3, [r7, #32]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	2b7f      	cmp	r3, #127	; 0x7f
 8005b28:	d8f0      	bhi.n	8005b0c <_SendPacket+0x210>
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <_SendPacket+0x268>)
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	f7fa fb61 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b4e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005b50:	f7ff f9b8 	bl	8004ec4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b5a:	4a02      	ldr	r2, [pc, #8]	; (8005b64 <_SendPacket+0x268>)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	60d3      	str	r3, [r2, #12]
 8005b60:	e010      	b.n	8005b84 <_SendPacket+0x288>
 8005b62:	bf00      	nop
 8005b64:	200143a0 	.word	0x200143a0
 8005b68:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <_SendPacket+0x2d8>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <_SendPacket+0x2d8>)
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	e004      	b.n	8005b84 <_SendPacket+0x288>
    goto SendDone;
 8005b7a:	bf00      	nop
 8005b7c:	e002      	b.n	8005b84 <_SendPacket+0x288>
      goto SendDone;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <_SendPacket+0x288>
      goto SendDone;
 8005b82:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b84:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <_SendPacket+0x2d8>)
 8005b86:	7e1b      	ldrb	r3, [r3, #24]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <_SendPacket+0x2dc>)
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	440b      	add	r3, r1
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	336c      	adds	r3, #108	; 0x6c
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <_SendPacket+0x2d8>)
 8005b9c:	7e1b      	ldrb	r3, [r3, #24]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	490d      	ldr	r1, [pc, #52]	; (8005bd8 <_SendPacket+0x2dc>)
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	4403      	add	r3, r0
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	440b      	add	r3, r1
 8005bac:	3370      	adds	r3, #112	; 0x70
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d00b      	beq.n	8005bcc <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005bb4:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <_SendPacket+0x2d8>)
 8005bb6:	789b      	ldrb	r3, [r3, #2]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <_SendPacket+0x2d8>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005bc2:	f7ff fdb9 	bl	8005738 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005bc6:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <_SendPacket+0x2d8>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005bcc:	bf00      	nop
 8005bce:	3728      	adds	r7, #40	; 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	200143a0 	.word	0x200143a0
 8005bd8:	20012ee0 	.word	0x20012ee0

08005bdc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d80a      	bhi.n	8005c0c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6051      	str	r1, [r2, #4]
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d15a      	bne.n	8005cca <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	e00b      	b.n	8005c4e <_StoreChar+0x72>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d8f0      	bhi.n	8005c36 <_StoreChar+0x5a>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5a:	6a3a      	ldr	r2, [r7, #32]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e00b      	b.n	8005c86 <_StoreChar+0xaa>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	61f9      	str	r1, [r7, #28]
 8005c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	09db      	lsrs	r3, r3, #7
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8a:	d8f0      	bhi.n	8005c6e <_StoreChar+0x92>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	61fa      	str	r2, [r7, #28]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	221a      	movs	r2, #26
 8005ca2:	6939      	ldr	r1, [r7, #16]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fe29 	bl	80058fc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fd36 	bl	8005720 <_PreparePacket>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
  }
}
 8005cca:	bf00      	nop
 8005ccc:	3728      	adds	r7, #40	; 0x28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005cea:	2301      	movs	r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005cee:	e007      	b.n	8005d00 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	623b      	str	r3, [r7, #32]
    Width++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d00:	6a3a      	ldr	r2, [r7, #32]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d2f3      	bcs.n	8005cf0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d901      	bls.n	8005d14 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11f      	bne.n	8005d5e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01c      	beq.n	8005d5e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <_PrintUnsigned+0x66>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <_PrintUnsigned+0x66>
        c = '0';
 8005d34:	2330      	movs	r3, #48	; 0x30
 8005d36:	76fb      	strb	r3, [r7, #27]
 8005d38:	e001      	b.n	8005d3e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d3e:	e007      	b.n	8005d50 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	3b01      	subs	r3, #1
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005d46:	7efb      	ldrb	r3, [r7, #27]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff ff46 	bl	8005bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <_PrintUnsigned+0x8a>
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d3f0      	bcc.n	8005d40 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d903      	bls.n	8005d6c <_PrintUnsigned+0x98>
      NumDigits--;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	603b      	str	r3, [r7, #0]
 8005d6a:	e009      	b.n	8005d80 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d200      	bcs.n	8005d80 <_PrintUnsigned+0xac>
        break;
 8005d7e:	e005      	b.n	8005d8c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d8a:	e7e8      	b.n	8005d5e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <_PrintUnsigned+0x128>)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff ff14 	bl	8005bdc <_StoreChar>
    Digit /= Base;
 8005db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e3      	bne.n	8005d8c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d011      	beq.n	8005df2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dd4:	e006      	b.n	8005de4 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005ddc:	2120      	movs	r1, #32
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff fefc 	bl	8005bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <_PrintUnsigned+0x11e>
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d3f1      	bcc.n	8005dd6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005df2:	bf00      	nop
 8005df4:	3728      	adds	r7, #40	; 0x28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	080074fc 	.word	0x080074fc

08005e00 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bfb8      	it	lt
 8005e14:	425b      	neglt	r3, r3
 8005e16:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e1c:	e007      	b.n	8005e2e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e26:	613b      	str	r3, [r7, #16]
    Width++;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	daf3      	bge.n	8005e1e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d901      	bls.n	8005e42 <_PrintInt+0x42>
    Width = NumDigits;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <_PrintInt+0x5e>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	db04      	blt.n	8005e58 <_PrintInt+0x58>
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <_PrintInt+0x5e>
    FieldWidth--;
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <_PrintInt+0x6e>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <_PrintInt+0x9c>
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d111      	bne.n	8005e9c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e7e:	e006      	b.n	8005e8e <_PrintInt+0x8e>
        FieldWidth--;
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e86:	2120      	movs	r1, #32
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff fea7 	bl	8005bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <_PrintInt+0x9c>
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d3f1      	bcc.n	8005e80 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da07      	bge.n	8005eb2 <_PrintInt+0xb2>
    v = -v;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	425b      	negs	r3, r3
 8005ea6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005ea8:	212d      	movs	r1, #45	; 0x2d
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fe96 	bl	8005bdc <_StoreChar>
 8005eb0:	e008      	b.n	8005ec4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ebc:	212b      	movs	r1, #43	; 0x2b
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fe8c 	bl	8005bdc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d019      	beq.n	8005f02 <_PrintInt+0x102>
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d114      	bne.n	8005f02 <_PrintInt+0x102>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d111      	bne.n	8005f02 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00e      	beq.n	8005f02 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ee4:	e006      	b.n	8005ef4 <_PrintInt+0xf4>
        FieldWidth--;
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005eec:	2130      	movs	r1, #48	; 0x30
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff fe74 	bl	8005bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <_PrintInt+0x102>
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d3f1      	bcc.n	8005ee6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fedf 	bl	8005cd4 <_PrintUnsigned>
}
 8005f16:	bf00      	nop
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b098      	sub	sp, #96	; 0x60
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f30:	f04f 0120 	mov.w	r1, #32
 8005f34:	f381 8811 	msr	BASEPRI, r1
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3a:	48b7      	ldr	r0, [pc, #732]	; (8006218 <_VPrintTarget+0x2f8>)
 8005f3c:	f7ff fbf0 	bl	8005720 <_PreparePacket>
 8005f40:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005f42:	4bb5      	ldr	r3, [pc, #724]	; (8006218 <_VPrintTarget+0x2f8>)
 8005f44:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005f46:	2300      	movs	r3, #0
 8005f48:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	3301      	adds	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 81a8 	beq.w	80062c0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f74:	2b25      	cmp	r3, #37	; 0x25
 8005f76:	f040 8195 	bne.w	80062a4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f8e:	3b23      	subs	r3, #35	; 0x23
 8005f90:	2b0d      	cmp	r3, #13
 8005f92:	d83f      	bhi.n	8006014 <_VPrintTarget+0xf4>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <_VPrintTarget+0x7c>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08006015 	.word	0x08006015
 8005fa4:	08006015 	.word	0x08006015
 8005fa8:	08006015 	.word	0x08006015
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08006015 	.word	0x08006015
 8005fb4:	08006015 	.word	0x08006015
 8005fb8:	08006015 	.word	0x08006015
 8005fbc:	08005ff5 	.word	0x08005ff5
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08006015 	.word	0x08006015
 8005fcc:	08006015 	.word	0x08006015
 8005fd0:	08005fe5 	.word	0x08005fe5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e01a      	b.n	800601a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e012      	b.n	800601a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff6:	f043 0304 	orr.w	r3, r3, #4
 8005ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e00a      	b.n	800601a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006006:	f043 0308 	orr.w	r3, r3, #8
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e002      	b.n	800601a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006014:	2300      	movs	r3, #0
 8006016:	653b      	str	r3, [r7, #80]	; 0x50
 8006018:	bf00      	nop
        }
      } while (v);
 800601a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1b0      	bne.n	8005f82 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006020:	2300      	movs	r3, #0
 8006022:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800602c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006030:	2b2f      	cmp	r3, #47	; 0x2f
 8006032:	d912      	bls.n	800605a <_VPrintTarget+0x13a>
 8006034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006038:	2b39      	cmp	r3, #57	; 0x39
 800603a:	d80e      	bhi.n	800605a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	461a      	mov	r2, r3
 800604e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006052:	4413      	add	r3, r2
 8006054:	3b30      	subs	r3, #48	; 0x30
 8006056:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006058:	e7e4      	b.n	8006024 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800605a:	2300      	movs	r3, #0
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800606a:	2b2e      	cmp	r3, #46	; 0x2e
 800606c:	d11d      	bne.n	80060aa <_VPrintTarget+0x18a>
        sFormat++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800607c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006080:	2b2f      	cmp	r3, #47	; 0x2f
 8006082:	d912      	bls.n	80060aa <_VPrintTarget+0x18a>
 8006084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006088:	2b39      	cmp	r3, #57	; 0x39
 800608a:	d80e      	bhi.n	80060aa <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	461a      	mov	r2, r3
 800609e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060a2:	4413      	add	r3, r2
 80060a4:	3b30      	subs	r3, #48	; 0x30
 80060a6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80060a8:	e7e4      	b.n	8006074 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80060b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060b6:	2b6c      	cmp	r3, #108	; 0x6c
 80060b8:	d003      	beq.n	80060c2 <_VPrintTarget+0x1a2>
 80060ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060be:	2b68      	cmp	r3, #104	; 0x68
 80060c0:	d107      	bne.n	80060d2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80060d0:	e7ef      	b.n	80060b2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80060d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060d6:	2b25      	cmp	r3, #37	; 0x25
 80060d8:	f000 80d8 	beq.w	800628c <_VPrintTarget+0x36c>
 80060dc:	2b25      	cmp	r3, #37	; 0x25
 80060de:	f2c0 80dc 	blt.w	800629a <_VPrintTarget+0x37a>
 80060e2:	2b78      	cmp	r3, #120	; 0x78
 80060e4:	f300 80d9 	bgt.w	800629a <_VPrintTarget+0x37a>
 80060e8:	2b58      	cmp	r3, #88	; 0x58
 80060ea:	f2c0 80d6 	blt.w	800629a <_VPrintTarget+0x37a>
 80060ee:	3b58      	subs	r3, #88	; 0x58
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	f200 80d2 	bhi.w	800629a <_VPrintTarget+0x37a>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <_VPrintTarget+0x1dc>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	080061f3 	.word	0x080061f3
 8006100:	0800629b 	.word	0x0800629b
 8006104:	0800629b 	.word	0x0800629b
 8006108:	0800629b 	.word	0x0800629b
 800610c:	0800629b 	.word	0x0800629b
 8006110:	0800629b 	.word	0x0800629b
 8006114:	0800629b 	.word	0x0800629b
 8006118:	0800629b 	.word	0x0800629b
 800611c:	0800629b 	.word	0x0800629b
 8006120:	0800629b 	.word	0x0800629b
 8006124:	0800629b 	.word	0x0800629b
 8006128:	08006181 	.word	0x08006181
 800612c:	080061a7 	.word	0x080061a7
 8006130:	0800629b 	.word	0x0800629b
 8006134:	0800629b 	.word	0x0800629b
 8006138:	0800629b 	.word	0x0800629b
 800613c:	0800629b 	.word	0x0800629b
 8006140:	0800629b 	.word	0x0800629b
 8006144:	0800629b 	.word	0x0800629b
 8006148:	0800629b 	.word	0x0800629b
 800614c:	0800629b 	.word	0x0800629b
 8006150:	0800629b 	.word	0x0800629b
 8006154:	0800629b 	.word	0x0800629b
 8006158:	0800629b 	.word	0x0800629b
 800615c:	08006267 	.word	0x08006267
 8006160:	0800629b 	.word	0x0800629b
 8006164:	0800629b 	.word	0x0800629b
 8006168:	0800621d 	.word	0x0800621d
 800616c:	0800629b 	.word	0x0800629b
 8006170:	080061cd 	.word	0x080061cd
 8006174:	0800629b 	.word	0x0800629b
 8006178:	0800629b 	.word	0x0800629b
 800617c:	080061f3 	.word	0x080061f3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6011      	str	r1, [r2, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800618e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006194:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fd1c 	bl	8005bdc <_StoreChar>
        break;
 80061a4:	e07a      	b.n	800629c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1d19      	adds	r1, r3, #4
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6011      	str	r1, [r2, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80061b4:	f107 0010 	add.w	r0, r7, #16
 80061b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c2:	220a      	movs	r2, #10
 80061c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061c6:	f7ff fe1b 	bl	8005e00 <_PrintInt>
        break;
 80061ca:	e067      	b.n	800629c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	1d19      	adds	r1, r3, #4
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80061da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061dc:	f107 0010 	add.w	r0, r7, #16
 80061e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	220a      	movs	r2, #10
 80061ec:	f7ff fd72 	bl	8005cd4 <_PrintUnsigned>
        break;
 80061f0:	e054      	b.n	800629c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	1d19      	adds	r1, r3, #4
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6011      	str	r1, [r2, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006200:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006202:	f107 0010 	add.w	r0, r7, #16
 8006206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006210:	2210      	movs	r2, #16
 8006212:	f7ff fd5f 	bl	8005cd4 <_PrintUnsigned>
        break;
 8006216:	e041      	b.n	800629c <_VPrintTarget+0x37c>
 8006218:	200143d0 	.word	0x200143d0
      case 's':
        s = va_arg(*pParamList, const char*);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	1d19      	adds	r1, r3, #4
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6011      	str	r1, [r2, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800622a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <_VPrintTarget+0x314>
          s = "(null)";
 8006230:	4b4a      	ldr	r3, [pc, #296]	; (800635c <_VPrintTarget+0x43c>)
 8006232:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800623c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623e:	3301      	adds	r3, #1
 8006240:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006242:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800624a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800624e:	f107 0310 	add.w	r3, r7, #16
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fcc1 	bl	8005bdc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	2b7f      	cmp	r3, #127	; 0x7f
 800625e:	d9e9      	bls.n	8006234 <_VPrintTarget+0x314>
        break;
 8006260:	e01c      	b.n	800629c <_VPrintTarget+0x37c>
            break;
 8006262:	bf00      	nop
        break;
 8006264:	e01a      	b.n	800629c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1d19      	adds	r1, r3, #4
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6011      	str	r1, [r2, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006276:	f107 0010 	add.w	r0, r7, #16
 800627a:	2300      	movs	r3, #0
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2308      	movs	r3, #8
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2308      	movs	r3, #8
 8006284:	2210      	movs	r2, #16
 8006286:	f7ff fd25 	bl	8005cd4 <_PrintUnsigned>
        break;
 800628a:	e007      	b.n	800629c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800628c:	f107 0310 	add.w	r3, r7, #16
 8006290:	2125      	movs	r1, #37	; 0x25
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fca2 	bl	8005bdc <_StoreChar>
        break;
 8006298:	e000      	b.n	800629c <_VPrintTarget+0x37c>
      default:
        break;
 800629a:	bf00      	nop
      }
      sFormat++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e007      	b.n	80062b4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80062a4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80062a8:	f107 0310 	add.w	r3, r7, #16
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fc94 	bl	8005bdc <_StoreChar>
    }
  } while (*sFormat);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f47f ae4d 	bne.w	8005f58 <_VPrintTarget+0x38>
 80062be:	e000      	b.n	80062c2 <_VPrintTarget+0x3a2>
      break;
 80062c0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d041      	beq.n	800634c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d8:	e00b      	b.n	80062f2 <_VPrintTarget+0x3d2>
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e0:	1c59      	adds	r1, r3, #1
 80062e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80062e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	09db      	lsrs	r3, r3, #7
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2b7f      	cmp	r3, #127	; 0x7f
 80062f6:	d8f0      	bhi.n	80062da <_VPrintTarget+0x3ba>
 80062f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
 800630c:	2300      	movs	r3, #0
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
 8006310:	e00b      	b.n	800632a <_VPrintTarget+0x40a>
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	6379      	str	r1, [r7, #52]	; 0x34
 800631c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	09db      	lsrs	r3, r3, #7
 8006328:	633b      	str	r3, [r7, #48]	; 0x30
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2b7f      	cmp	r3, #127	; 0x7f
 800632e:	d8f0      	bhi.n	8006312 <_VPrintTarget+0x3f2>
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	637a      	str	r2, [r7, #52]	; 0x34
 8006336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	221a      	movs	r2, #26
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fad8 	bl	80058fc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006352:	bf00      	nop
 8006354:	3758      	adds	r7, #88	; 0x58
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	080074a8 	.word	0x080074a8

08006360 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800636e:	2300      	movs	r3, #0
 8006370:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006374:	4917      	ldr	r1, [pc, #92]	; (80063d4 <SEGGER_SYSVIEW_Init+0x74>)
 8006376:	4818      	ldr	r0, [pc, #96]	; (80063d8 <SEGGER_SYSVIEW_Init+0x78>)
 8006378:	f7ff f8d2 	bl	8005520 <SEGGER_RTT_AllocUpBuffer>
 800637c:	4603      	mov	r3, r0
 800637e:	b2da      	uxtb	r2, r3
 8006380:	4b16      	ldr	r3, [pc, #88]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 8006382:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 8006386:	785a      	ldrb	r2, [r3, #1]
 8006388:	4b14      	ldr	r3, [pc, #80]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 800638a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800638c:	4b13      	ldr	r3, [pc, #76]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 800638e:	7e1b      	ldrb	r3, [r3, #24]
 8006390:	4618      	mov	r0, r3
 8006392:	2300      	movs	r3, #0
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	2308      	movs	r3, #8
 8006398:	4a11      	ldr	r2, [pc, #68]	; (80063e0 <SEGGER_SYSVIEW_Init+0x80>)
 800639a:	490f      	ldr	r1, [pc, #60]	; (80063d8 <SEGGER_SYSVIEW_Init+0x78>)
 800639c:	f7ff f944 	bl	8005628 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063a6:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <SEGGER_SYSVIEW_Init+0x84>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063ac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80063ae:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80063b4:	4a09      	ldr	r2, [pc, #36]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80063ba:	4a08      	ldr	r2, [pc, #32]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80063c0:	4a06      	ldr	r2, [pc, #24]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <SEGGER_SYSVIEW_Init+0x7c>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20013398 	.word	0x20013398
 80063d8:	080074b0 	.word	0x080074b0
 80063dc:	200143a0 	.word	0x200143a0
 80063e0:	20014398 	.word	0x20014398
 80063e4:	e0001004 	.word	0xe0001004

080063e8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6113      	str	r3, [r2, #16]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	200143a0 	.word	0x200143a0

08006408 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006410:	f3ef 8311 	mrs	r3, BASEPRI
 8006414:	f04f 0120 	mov.w	r1, #32
 8006418:	f381 8811 	msr	BASEPRI, r1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	4808      	ldr	r0, [pc, #32]	; (8006440 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006420:	f7ff f97e 	bl	8005720 <_PreparePacket>
 8006424:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f7ff fa66 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f383 8811 	msr	BASEPRI, r3
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200143d0 	.word	0x200143d0

08006444 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800644e:	f3ef 8311 	mrs	r3, BASEPRI
 8006452:	f04f 0120 	mov.w	r1, #32
 8006456:	f381 8811 	msr	BASEPRI, r1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	4816      	ldr	r0, [pc, #88]	; (80064b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800645e:	f7ff f95f 	bl	8005720 <_PreparePacket>
 8006462:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e00b      	b.n	800648a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	1c59      	adds	r1, r3, #1
 800647a:	61f9      	str	r1, [r7, #28]
 800647c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	09db      	lsrs	r3, r3, #7
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d8f0      	bhi.n	8006472 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	61fa      	str	r2, [r7, #28]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6938      	ldr	r0, [r7, #16]
 80064a6:	f7ff fa29 	bl	80058fc <_SendPacket>
  RECORD_END();
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f383 8811 	msr	BASEPRI, r3
}
 80064b0:	bf00      	nop
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200143d0 	.word	0x200143d0

080064bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064c8:	f3ef 8311 	mrs	r3, BASEPRI
 80064cc:	f04f 0120 	mov.w	r1, #32
 80064d0:	f381 8811 	msr	BASEPRI, r1
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	4825      	ldr	r0, [pc, #148]	; (800656c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80064d8:	f7ff f922 	bl	8005720 <_PreparePacket>
 80064dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ea:	e00b      	b.n	8006504 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	1c59      	adds	r1, r3, #1
 80064f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	09db      	lsrs	r3, r3, #7
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	2b7f      	cmp	r3, #127	; 0x7f
 8006508:	d8f0      	bhi.n	80064ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	e00b      	b.n	800653c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	1c59      	adds	r1, r3, #1
 800652c:	6279      	str	r1, [r7, #36]	; 0x24
 800652e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	09db      	lsrs	r3, r3, #7
 800653a:	623b      	str	r3, [r7, #32]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	d8f0      	bhi.n	8006524 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	627a      	str	r2, [r7, #36]	; 0x24
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	6979      	ldr	r1, [r7, #20]
 8006556:	69b8      	ldr	r0, [r7, #24]
 8006558:	f7ff f9d0 	bl	80058fc <_SendPacket>
  RECORD_END();
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f383 8811 	msr	BASEPRI, r3
}
 8006562:	bf00      	nop
 8006564:	3730      	adds	r7, #48	; 0x30
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	200143d0 	.word	0x200143d0

08006570 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800657e:	f3ef 8311 	mrs	r3, BASEPRI
 8006582:	f04f 0120 	mov.w	r1, #32
 8006586:	f381 8811 	msr	BASEPRI, r1
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	4832      	ldr	r0, [pc, #200]	; (8006658 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800658e:	f7ff f8c7 	bl	8005720 <_PreparePacket>
 8006592:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	633b      	str	r3, [r7, #48]	; 0x30
 80065a0:	e00b      	b.n	80065ba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	1c59      	adds	r1, r3, #1
 80065aa:	6379      	str	r1, [r7, #52]	; 0x34
 80065ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	09db      	lsrs	r3, r3, #7
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	2b7f      	cmp	r3, #127	; 0x7f
 80065be:	d8f0      	bhi.n	80065a2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	637a      	str	r2, [r7, #52]	; 0x34
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d8:	e00b      	b.n	80065f2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	09db      	lsrs	r3, r3, #7
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	2b7f      	cmp	r3, #127	; 0x7f
 80065f6:	d8f0      	bhi.n	80065da <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	e00b      	b.n	800662a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	6279      	str	r1, [r7, #36]	; 0x24
 800661c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	623b      	str	r3, [r7, #32]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2b7f      	cmp	r3, #127	; 0x7f
 800662e:	d8f0      	bhi.n	8006612 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	627a      	str	r2, [r7, #36]	; 0x24
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	6979      	ldr	r1, [r7, #20]
 8006644:	69b8      	ldr	r0, [r7, #24]
 8006646:	f7ff f959 	bl	80058fc <_SendPacket>
  RECORD_END();
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f383 8811 	msr	BASEPRI, r3
}
 8006650:	bf00      	nop
 8006652:	3738      	adds	r7, #56	; 0x38
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	200143d0 	.word	0x200143d0

0800665c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b090      	sub	sp, #64	; 0x40
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800666a:	f3ef 8311 	mrs	r3, BASEPRI
 800666e:	f04f 0120 	mov.w	r1, #32
 8006672:	f381 8811 	msr	BASEPRI, r1
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	4840      	ldr	r0, [pc, #256]	; (800677c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800667a:	f7ff f851 	bl	8005720 <_PreparePacket>
 800667e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
 800668c:	e00b      	b.n	80066a6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	1c59      	adds	r1, r3, #1
 8006696:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	09db      	lsrs	r3, r3, #7
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	2b7f      	cmp	r3, #127	; 0x7f
 80066aa:	d8f0      	bhi.n	800668e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30
 80066c4:	e00b      	b.n	80066de <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	1c59      	adds	r1, r3, #1
 80066ce:	6379      	str	r1, [r7, #52]	; 0x34
 80066d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	09db      	lsrs	r3, r3, #7
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2b7f      	cmp	r3, #127	; 0x7f
 80066e2:	d8f0      	bhi.n	80066c6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	637a      	str	r2, [r7, #52]	; 0x34
 80066ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fc:	e00b      	b.n	8006716 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	1c59      	adds	r1, r3, #1
 8006706:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	09db      	lsrs	r3, r3, #7
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b7f      	cmp	r3, #127	; 0x7f
 800671a:	d8f0      	bhi.n	80066fe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	e00b      	b.n	800674e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1c59      	adds	r1, r3, #1
 800673e:	6279      	str	r1, [r7, #36]	; 0x24
 8006740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	09db      	lsrs	r3, r3, #7
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b7f      	cmp	r3, #127	; 0x7f
 8006752:	d8f0      	bhi.n	8006736 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	627a      	str	r2, [r7, #36]	; 0x24
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	6979      	ldr	r1, [r7, #20]
 8006768:	69b8      	ldr	r0, [r7, #24]
 800676a:	f7ff f8c7 	bl	80058fc <_SendPacket>
  RECORD_END();
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f383 8811 	msr	BASEPRI, r3
}
 8006774:	bf00      	nop
 8006776:	3740      	adds	r7, #64	; 0x40
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	200143d0 	.word	0x200143d0

08006780 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b08c      	sub	sp, #48	; 0x30
 8006784:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006786:	4b59      	ldr	r3, [pc, #356]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800678c:	f3ef 8311 	mrs	r3, BASEPRI
 8006790:	f04f 0120 	mov.w	r1, #32
 8006794:	f381 8811 	msr	BASEPRI, r1
 8006798:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800679a:	4b54      	ldr	r3, [pc, #336]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	220a      	movs	r2, #10
 80067a0:	4953      	ldr	r1, [pc, #332]	; (80068f0 <SEGGER_SYSVIEW_Start+0x170>)
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7f9 fd34 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80067ae:	f7fe fb89 	bl	8004ec4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80067b2:	200a      	movs	r0, #10
 80067b4:	f7ff fe28 	bl	8006408 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067b8:	f3ef 8311 	mrs	r3, BASEPRI
 80067bc:	f04f 0120 	mov.w	r1, #32
 80067c0:	f381 8811 	msr	BASEPRI, r1
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	484b      	ldr	r0, [pc, #300]	; (80068f4 <SEGGER_SYSVIEW_Start+0x174>)
 80067c8:	f7fe ffaa 	bl	8005720 <_PreparePacket>
 80067cc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	4b45      	ldr	r3, [pc, #276]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
 80067dc:	e00b      	b.n	80067f6 <SEGGER_SYSVIEW_Start+0x76>
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	1c59      	adds	r1, r3, #1
 80067e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	09db      	lsrs	r3, r3, #7
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	2b7f      	cmp	r3, #127	; 0x7f
 80067fa:	d8f0      	bhi.n	80067de <SEGGER_SYSVIEW_Start+0x5e>
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
 8006810:	4b36      	ldr	r3, [pc, #216]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	e00b      	b.n	8006830 <SEGGER_SYSVIEW_Start+0xb0>
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	b2da      	uxtb	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	6279      	str	r1, [r7, #36]	; 0x24
 8006822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	09db      	lsrs	r3, r3, #7
 800682e:	623b      	str	r3, [r7, #32]
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b7f      	cmp	r3, #127	; 0x7f
 8006834:	d8f0      	bhi.n	8006818 <SEGGER_SYSVIEW_Start+0x98>
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	627a      	str	r2, [r7, #36]	; 0x24
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	4b28      	ldr	r3, [pc, #160]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	e00b      	b.n	800686a <SEGGER_SYSVIEW_Start+0xea>
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	61f9      	str	r1, [r7, #28]
 800685c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b7f      	cmp	r3, #127	; 0x7f
 800686e:	d8f0      	bhi.n	8006852 <SEGGER_SYSVIEW_Start+0xd2>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	61fa      	str	r2, [r7, #28]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	2300      	movs	r3, #0
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	e00b      	b.n	80068a2 <SEGGER_SYSVIEW_Start+0x122>
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	1c59      	adds	r1, r3, #1
 8006892:	6179      	str	r1, [r7, #20]
 8006894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	09db      	lsrs	r3, r3, #7
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	2b7f      	cmp	r3, #127	; 0x7f
 80068a6:	d8f0      	bhi.n	800688a <SEGGER_SYSVIEW_Start+0x10a>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	617a      	str	r2, [r7, #20]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068b8:	2218      	movs	r2, #24
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff f81d 	bl	80058fc <_SendPacket>
      RECORD_END();
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80068c8:	4b08      	ldr	r3, [pc, #32]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <SEGGER_SYSVIEW_Start+0x16c>)
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80068d6:	f000 f9eb 	bl	8006cb0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80068da:	f000 f9b1 	bl	8006c40 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80068de:	f000 fc2d 	bl	800713c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80068e2:	bf00      	nop
 80068e4:	3730      	adds	r7, #48	; 0x30
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200143a0 	.word	0x200143a0
 80068f0:	080074f0 	.word	0x080074f0
 80068f4:	200143d0 	.word	0x200143d0

080068f8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006902:	f04f 0120 	mov.w	r1, #32
 8006906:	f381 8811 	msr	BASEPRI, r1
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	480b      	ldr	r0, [pc, #44]	; (800693c <SEGGER_SYSVIEW_Stop+0x44>)
 800690e:	f7fe ff07 	bl	8005720 <_PreparePacket>
 8006912:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <SEGGER_SYSVIEW_Stop+0x48>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800691c:	220b      	movs	r2, #11
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6838      	ldr	r0, [r7, #0]
 8006922:	f7fe ffeb 	bl	80058fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <SEGGER_SYSVIEW_Stop+0x48>)
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f383 8811 	msr	BASEPRI, r3
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200143d0 	.word	0x200143d0
 8006940:	200143a0 	.word	0x200143a0

08006944 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b08c      	sub	sp, #48	; 0x30
 8006948:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800694a:	f3ef 8311 	mrs	r3, BASEPRI
 800694e:	f04f 0120 	mov.w	r1, #32
 8006952:	f381 8811 	msr	BASEPRI, r1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	4845      	ldr	r0, [pc, #276]	; (8006a70 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800695a:	f7fe fee1 	bl	8005720 <_PreparePacket>
 800695e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006968:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
 800696e:	e00b      	b.n	8006988 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	b2da      	uxtb	r2, r3
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	62f9      	str	r1, [r7, #44]	; 0x2c
 800697a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	09db      	lsrs	r3, r3, #7
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	2b7f      	cmp	r3, #127	; 0x7f
 800698c:	d8f0      	bhi.n	8006970 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
 80069a2:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	623b      	str	r3, [r7, #32]
 80069a8:	e00b      	b.n	80069c2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	6279      	str	r1, [r7, #36]	; 0x24
 80069b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	09db      	lsrs	r3, r3, #7
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	2b7f      	cmp	r3, #127	; 0x7f
 80069c6:	d8f0      	bhi.n	80069aa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	627a      	str	r2, [r7, #36]	; 0x24
 80069ce:	6a3a      	ldr	r2, [r7, #32]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	4b25      	ldr	r3, [pc, #148]	; (8006a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e00b      	b.n	80069fc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	61f9      	str	r1, [r7, #28]
 80069ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	09db      	lsrs	r3, r3, #7
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006a00:	d8f0      	bhi.n	80069e4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	61fa      	str	r2, [r7, #28]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	e00b      	b.n	8006a34 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	6179      	str	r1, [r7, #20]
 8006a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d8f0      	bhi.n	8006a1c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	617a      	str	r2, [r7, #20]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a4a:	2218      	movs	r2, #24
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	68b8      	ldr	r0, [r7, #8]
 8006a50:	f7fe ff54 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006a62:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	4798      	blx	r3
  }
}
 8006a68:	bf00      	nop
 8006a6a:	3730      	adds	r7, #48	; 0x30
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200143d0 	.word	0x200143d0
 8006a74:	200143a0 	.word	0x200143a0

08006a78 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b092      	sub	sp, #72	; 0x48
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006a80:	f3ef 8311 	mrs	r3, BASEPRI
 8006a84:	f04f 0120 	mov.w	r1, #32
 8006a88:	f381 8811 	msr	BASEPRI, r1
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	486a      	ldr	r0, [pc, #424]	; (8006c38 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006a90:	f7fe fe46 	bl	8005720 <_PreparePacket>
 8006a94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b66      	ldr	r3, [pc, #408]	; (8006c3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aaa:	e00b      	b.n	8006ac4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	6479      	str	r1, [r7, #68]	; 0x44
 8006ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac0:	09db      	lsrs	r3, r3, #7
 8006ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac8:	d8f0      	bhi.n	8006aac <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	647a      	str	r2, [r7, #68]	; 0x44
 8006ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ae4:	e00b      	b.n	8006afe <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	09db      	lsrs	r3, r3, #7
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	2b7f      	cmp	r3, #127	; 0x7f
 8006b02:	d8f0      	bhi.n	8006ae6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7fe fdcf 	bl	80056c0 <_EncodeStr>
 8006b22:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b24:	2209      	movs	r2, #9
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7fe fee7 	bl	80058fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	633b      	str	r3, [r7, #48]	; 0x30
 8006b42:	e00b      	b.n	8006b5c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	1c59      	adds	r1, r3, #1
 8006b4c:	6379      	str	r1, [r7, #52]	; 0x34
 8006b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	09db      	lsrs	r3, r3, #7
 8006b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b60:	d8f0      	bhi.n	8006b44 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	637a      	str	r2, [r7, #52]	; 0x34
 8006b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	e00b      	b.n	8006bd0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	6279      	str	r1, [r7, #36]	; 0x24
 8006bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	09db      	lsrs	r3, r3, #7
 8006bce:	623b      	str	r3, [r7, #32]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d8f0      	bhi.n	8006bb8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	627a      	str	r2, [r7, #36]	; 0x24
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e00b      	b.n	8006c08 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	61f9      	str	r1, [r7, #28]
 8006bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	09db      	lsrs	r3, r3, #7
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0c:	d8f0      	bhi.n	8006bf0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	61fa      	str	r2, [r7, #28]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c1e:	2215      	movs	r2, #21
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	6938      	ldr	r0, [r7, #16]
 8006c24:	f7fe fe6a 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
 8006c30:	3748      	adds	r7, #72	; 0x48
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200143d0 	.word	0x200143d0
 8006c3c:	200143a0 	.word	0x200143a0

08006c40 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c44:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4798      	blx	r3
  }
}
 8006c5e:	bf00      	nop
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	200143a0 	.word	0x200143a0

08006c68 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c70:	f3ef 8311 	mrs	r3, BASEPRI
 8006c74:	f04f 0120 	mov.w	r1, #32
 8006c78:	f381 8811 	msr	BASEPRI, r1
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	480b      	ldr	r0, [pc, #44]	; (8006cac <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006c80:	f7fe fd4e 	bl	8005720 <_PreparePacket>
 8006c84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c86:	2280      	movs	r2, #128	; 0x80
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f7fe fd18 	bl	80056c0 <_EncodeStr>
 8006c90:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006c92:	220e      	movs	r2, #14
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f7fe fe30 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ca2:	bf00      	nop
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200143d0 	.word	0x200143d0

08006cb0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006cb6:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01a      	beq.n	8006cf4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d015      	beq.n	8006cf4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006cc8:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4798      	blx	r3
 8006cd0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006cd4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	000a      	movs	r2, r1
 8006ce4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4621      	mov	r1, r4
 8006cec:	200d      	movs	r0, #13
 8006cee:	f7ff fbe5 	bl	80064bc <SEGGER_SYSVIEW_RecordU32x2>
 8006cf2:	e006      	b.n	8006d02 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	200c      	movs	r0, #12
 8006cfc:	f7ff fba2 	bl	8006444 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd90      	pop	{r4, r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	200143a0 	.word	0x200143a0
 8006d10:	e0001004 	.word	0xe0001004

08006d14 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d1e:	f04f 0120 	mov.w	r1, #32
 8006d22:	f381 8811 	msr	BASEPRI, r1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	4819      	ldr	r0, [pc, #100]	; (8006d90 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d2a:	f7fe fcf9 	bl	8005720 <_PreparePacket>
 8006d2e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d34:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e00b      	b.n	8006d60 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	1c59      	adds	r1, r3, #1
 8006d50:	6179      	str	r1, [r7, #20]
 8006d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	09db      	lsrs	r3, r3, #7
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b7f      	cmp	r3, #127	; 0x7f
 8006d64:	d8f0      	bhi.n	8006d48 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	617a      	str	r2, [r7, #20]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006d76:	2202      	movs	r2, #2
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	68b8      	ldr	r0, [r7, #8]
 8006d7c:	f7fe fdbe 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f383 8811 	msr	BASEPRI, r3
}
 8006d86:	bf00      	nop
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200143d0 	.word	0x200143d0
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006da2:	f04f 0120 	mov.w	r1, #32
 8006da6:	f381 8811 	msr	BASEPRI, r1
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	4807      	ldr	r0, [pc, #28]	; (8006dcc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006dae:	f7fe fcb7 	bl	8005720 <_PreparePacket>
 8006db2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006db4:	2203      	movs	r2, #3
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6838      	ldr	r0, [r7, #0]
 8006dba:	f7fe fd9f 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f383 8811 	msr	BASEPRI, r3
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200143d0 	.word	0x200143d0

08006dd0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dda:	f04f 0120 	mov.w	r1, #32
 8006dde:	f381 8811 	msr	BASEPRI, r1
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	4807      	ldr	r0, [pc, #28]	; (8006e04 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006de6:	f7fe fc9b 	bl	8005720 <_PreparePacket>
 8006dea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006dec:	2212      	movs	r2, #18
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6838      	ldr	r0, [r7, #0]
 8006df2:	f7fe fd83 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f383 8811 	msr	BASEPRI, r3
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	200143d0 	.word	0x200143d0

08006e08 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e12:	f04f 0120 	mov.w	r1, #32
 8006e16:	f381 8811 	msr	BASEPRI, r1
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	4807      	ldr	r0, [pc, #28]	; (8006e3c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e1e:	f7fe fc7f 	bl	8005720 <_PreparePacket>
 8006e22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e24:	2211      	movs	r2, #17
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6838      	ldr	r0, [r7, #0]
 8006e2a:	f7fe fd67 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f383 8811 	msr	BASEPRI, r3
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	200143d0 	.word	0x200143d0

08006e40 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e48:	f3ef 8311 	mrs	r3, BASEPRI
 8006e4c:	f04f 0120 	mov.w	r1, #32
 8006e50:	f381 8811 	msr	BASEPRI, r1
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	4819      	ldr	r0, [pc, #100]	; (8006ebc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006e58:	f7fe fc62 	bl	8005720 <_PreparePacket>
 8006e5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e62:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e00b      	b.n	8006e8e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	1c59      	adds	r1, r3, #1
 8006e7e:	61f9      	str	r1, [r7, #28]
 8006e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	09db      	lsrs	r3, r3, #7
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b7f      	cmp	r3, #127	; 0x7f
 8006e92:	d8f0      	bhi.n	8006e76 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	61fa      	str	r2, [r7, #28]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	6938      	ldr	r0, [r7, #16]
 8006eaa:	f7fe fd27 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f383 8811 	msr	BASEPRI, r3
}
 8006eb4:	bf00      	nop
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	200143d0 	.word	0x200143d0
 8006ec0:	200143a0 	.word	0x200143a0

08006ec4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed0:	f04f 0120 	mov.w	r1, #32
 8006ed4:	f381 8811 	msr	BASEPRI, r1
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	4819      	ldr	r0, [pc, #100]	; (8006f40 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006edc:	f7fe fc20 	bl	8005720 <_PreparePacket>
 8006ee0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ee6:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	e00b      	b.n	8006f12 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	61f9      	str	r1, [r7, #28]
 8006f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	09db      	lsrs	r3, r3, #7
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b7f      	cmp	r3, #127	; 0x7f
 8006f16:	d8f0      	bhi.n	8006efa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	61fa      	str	r2, [r7, #28]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f28:	2204      	movs	r2, #4
 8006f2a:	68f9      	ldr	r1, [r7, #12]
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f7fe fce5 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f383 8811 	msr	BASEPRI, r3
}
 8006f38:	bf00      	nop
 8006f3a:	3720      	adds	r7, #32
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200143d0 	.word	0x200143d0
 8006f44:	200143a0 	.word	0x200143a0

08006f48 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f50:	f3ef 8311 	mrs	r3, BASEPRI
 8006f54:	f04f 0120 	mov.w	r1, #32
 8006f58:	f381 8811 	msr	BASEPRI, r1
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	4819      	ldr	r0, [pc, #100]	; (8006fc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f60:	f7fe fbde 	bl	8005720 <_PreparePacket>
 8006f64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f6a:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e00b      	b.n	8006f96 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	1c59      	adds	r1, r3, #1
 8006f86:	61f9      	str	r1, [r7, #28]
 8006f88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	09db      	lsrs	r3, r3, #7
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b7f      	cmp	r3, #127	; 0x7f
 8006f9a:	d8f0      	bhi.n	8006f7e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	61fa      	str	r2, [r7, #28]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006fac:	2206      	movs	r2, #6
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	6938      	ldr	r0, [r7, #16]
 8006fb2:	f7fe fca3 	bl	80058fc <_SendPacket>
  RECORD_END();
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f383 8811 	msr	BASEPRI, r3
}
 8006fbc:	bf00      	nop
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	200143d0 	.word	0x200143d0
 8006fc8:	200143a0 	.word	0x200143a0

08006fcc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	1ad3      	subs	r3, r2, r3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	200143a0 	.word	0x200143a0

08006fec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08c      	sub	sp, #48	; 0x30
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ff6:	4b40      	ldr	r3, [pc, #256]	; (80070f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d077      	beq.n	80070ee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006ffe:	4b3e      	ldr	r3, [pc, #248]	; (80070f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007004:	2300      	movs	r3, #0
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
 8007008:	e008      	b.n	800701c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	3301      	adds	r3, #1
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007020:	429a      	cmp	r2, r3
 8007022:	d3f2      	bcc.n	800700a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007024:	e000      	b.n	8007028 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007026:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d055      	beq.n	80070da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800702e:	f3ef 8311 	mrs	r3, BASEPRI
 8007032:	f04f 0120 	mov.w	r1, #32
 8007036:	f381 8811 	msr	BASEPRI, r1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	482f      	ldr	r0, [pc, #188]	; (80070fc <SEGGER_SYSVIEW_SendModule+0x110>)
 800703e:	f7fe fb6f 	bl	8005720 <_PreparePacket>
 8007042:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	e00b      	b.n	800706a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1c59      	adds	r1, r3, #1
 800705a:	6279      	str	r1, [r7, #36]	; 0x24
 800705c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	09db      	lsrs	r3, r3, #7
 8007068:	623b      	str	r3, [r7, #32]
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	2b7f      	cmp	r3, #127	; 0x7f
 800706e:	d8f0      	bhi.n	8007052 <SEGGER_SYSVIEW_SendModule+0x66>
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	627a      	str	r2, [r7, #36]	; 0x24
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	e00b      	b.n	80070a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	61f9      	str	r1, [r7, #28]
 8007096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b7f      	cmp	r3, #127	; 0x7f
 80070a8:	d8f0      	bhi.n	800708c <SEGGER_SYSVIEW_SendModule+0xa0>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	61fa      	str	r2, [r7, #28]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2280      	movs	r2, #128	; 0x80
 80070c0:	4619      	mov	r1, r3
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7fe fafc 	bl	80056c0 <_EncodeStr>
 80070c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070ca:	2216      	movs	r2, #22
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	6938      	ldr	r0, [r7, #16]
 80070d0:	f7fe fc14 	bl	80058fc <_SendPacket>
      RECORD_END();
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <SEGGER_SYSVIEW_SendModule+0x102>
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4798      	blx	r3
    }
  }
}
 80070ee:	bf00      	nop
 80070f0:	3730      	adds	r7, #48	; 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200143c8 	.word	0x200143c8
 80070fc:	200143d0 	.word	0x200143d0

08007100 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00f      	beq.n	800712e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800710e:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f2      	bne.n	8007114 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200143c8 	.word	0x200143c8

0800713c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007142:	f3ef 8311 	mrs	r3, BASEPRI
 8007146:	f04f 0120 	mov.w	r1, #32
 800714a:	f381 8811 	msr	BASEPRI, r1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	4817      	ldr	r0, [pc, #92]	; (80071b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007152:	f7fe fae5 	bl	8005720 <_PreparePacket>
 8007156:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	e00b      	b.n	8007180 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1c59      	adds	r1, r3, #1
 8007170:	6179      	str	r1, [r7, #20]
 8007172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	09db      	lsrs	r3, r3, #7
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b7f      	cmp	r3, #127	; 0x7f
 8007184:	d8f0      	bhi.n	8007168 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	617a      	str	r2, [r7, #20]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007196:	221b      	movs	r2, #27
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	68b8      	ldr	r0, [r7, #8]
 800719c:	f7fe fbae 	bl	80058fc <_SendPacket>
  RECORD_END();
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f383 8811 	msr	BASEPRI, r3
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200143d0 	.word	0x200143d0
 80071b4:	200143cc 	.word	0x200143cc

080071b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80071b8:	b40f      	push	{r0, r1, r2, r3}
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80071c6:	1d3b      	adds	r3, r7, #4
 80071c8:	461a      	mov	r2, r3
 80071ca:	2100      	movs	r1, #0
 80071cc:	6938      	ldr	r0, [r7, #16]
 80071ce:	f7fe fea7 	bl	8005f20 <_VPrintTarget>
  va_end(ParamList);
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071dc:	b004      	add	sp, #16
 80071de:	4770      	bx	lr

080071e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071e8:	f3ef 8311 	mrs	r3, BASEPRI
 80071ec:	f04f 0120 	mov.w	r1, #32
 80071f0:	f381 8811 	msr	BASEPRI, r1
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	4827      	ldr	r0, [pc, #156]	; (8007294 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071f8:	f7fe fa92 	bl	8005720 <_PreparePacket>
 80071fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071fe:	2280      	movs	r2, #128	; 0x80
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	6938      	ldr	r0, [r7, #16]
 8007204:	f7fe fa5c 	bl	80056c0 <_EncodeStr>
 8007208:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
 800720e:	2301      	movs	r3, #1
 8007210:	623b      	str	r3, [r7, #32]
 8007212:	e00b      	b.n	800722c <SEGGER_SYSVIEW_Warn+0x4c>
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	1c59      	adds	r1, r3, #1
 800721c:	6279      	str	r1, [r7, #36]	; 0x24
 800721e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	09db      	lsrs	r3, r3, #7
 800722a:	623b      	str	r3, [r7, #32]
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2b7f      	cmp	r3, #127	; 0x7f
 8007230:	d8f0      	bhi.n	8007214 <SEGGER_SYSVIEW_Warn+0x34>
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	627a      	str	r2, [r7, #36]	; 0x24
 8007238:	6a3a      	ldr	r2, [r7, #32]
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	2300      	movs	r3, #0
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e00b      	b.n	8007264 <SEGGER_SYSVIEW_Warn+0x84>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	61f9      	str	r1, [r7, #28]
 8007256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	09db      	lsrs	r3, r3, #7
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b7f      	cmp	r3, #127	; 0x7f
 8007268:	d8f0      	bhi.n	800724c <SEGGER_SYSVIEW_Warn+0x6c>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	61fa      	str	r2, [r7, #28]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800727a:	221a      	movs	r2, #26
 800727c:	68f9      	ldr	r1, [r7, #12]
 800727e:	6938      	ldr	r0, [r7, #16]
 8007280:	f7fe fb3c 	bl	80058fc <_SendPacket>
  RECORD_END();
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f383 8811 	msr	BASEPRI, r3
}
 800728a:	bf00      	nop
 800728c:	3728      	adds	r7, #40	; 0x28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200143d0 	.word	0x200143d0

08007298 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800729c:	4b13      	ldr	r3, [pc, #76]	; (80072ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 800729e:	7e1b      	ldrb	r3, [r3, #24]
 80072a0:	4619      	mov	r1, r3
 80072a2:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80072a4:	460b      	mov	r3, r1
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	440b      	add	r3, r1
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	336c      	adds	r3, #108	; 0x6c
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072b4:	7e1b      	ldrb	r3, [r3, #24]
 80072b6:	4618      	mov	r0, r3
 80072b8:	490d      	ldr	r1, [pc, #52]	; (80072f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80072ba:	4603      	mov	r3, r0
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4403      	add	r3, r0
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	440b      	add	r3, r1
 80072c4:	3370      	adds	r3, #112	; 0x70
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d00b      	beq.n	80072e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072ce:	789b      	ldrb	r3, [r3, #2]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80072da:	f7fe fa2d 	bl	8005738 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80072e4:	4b01      	ldr	r3, [pc, #4]	; (80072ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200143a0 	.word	0x200143a0
 80072f0:	20012ee0 	.word	0x20012ee0

080072f4 <memcmp>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	3901      	subs	r1, #1
 80072f8:	4402      	add	r2, r0
 80072fa:	4290      	cmp	r0, r2
 80072fc:	d101      	bne.n	8007302 <memcmp+0xe>
 80072fe:	2000      	movs	r0, #0
 8007300:	e005      	b.n	800730e <memcmp+0x1a>
 8007302:	7803      	ldrb	r3, [r0, #0]
 8007304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007308:	42a3      	cmp	r3, r4
 800730a:	d001      	beq.n	8007310 <memcmp+0x1c>
 800730c:	1b18      	subs	r0, r3, r4
 800730e:	bd10      	pop	{r4, pc}
 8007310:	3001      	adds	r0, #1
 8007312:	e7f2      	b.n	80072fa <memcmp+0x6>

08007314 <memset>:
 8007314:	4402      	add	r2, r0
 8007316:	4603      	mov	r3, r0
 8007318:	4293      	cmp	r3, r2
 800731a:	d100      	bne.n	800731e <memset+0xa>
 800731c:	4770      	bx	lr
 800731e:	f803 1b01 	strb.w	r1, [r3], #1
 8007322:	e7f9      	b.n	8007318 <memset+0x4>

08007324 <__libc_init_array>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4d0d      	ldr	r5, [pc, #52]	; (800735c <__libc_init_array+0x38>)
 8007328:	4c0d      	ldr	r4, [pc, #52]	; (8007360 <__libc_init_array+0x3c>)
 800732a:	1b64      	subs	r4, r4, r5
 800732c:	10a4      	asrs	r4, r4, #2
 800732e:	2600      	movs	r6, #0
 8007330:	42a6      	cmp	r6, r4
 8007332:	d109      	bne.n	8007348 <__libc_init_array+0x24>
 8007334:	4d0b      	ldr	r5, [pc, #44]	; (8007364 <__libc_init_array+0x40>)
 8007336:	4c0c      	ldr	r4, [pc, #48]	; (8007368 <__libc_init_array+0x44>)
 8007338:	f000 f826 	bl	8007388 <_init>
 800733c:	1b64      	subs	r4, r4, r5
 800733e:	10a4      	asrs	r4, r4, #2
 8007340:	2600      	movs	r6, #0
 8007342:	42a6      	cmp	r6, r4
 8007344:	d105      	bne.n	8007352 <__libc_init_array+0x2e>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	f855 3b04 	ldr.w	r3, [r5], #4
 800734c:	4798      	blx	r3
 800734e:	3601      	adds	r6, #1
 8007350:	e7ee      	b.n	8007330 <__libc_init_array+0xc>
 8007352:	f855 3b04 	ldr.w	r3, [r5], #4
 8007356:	4798      	blx	r3
 8007358:	3601      	adds	r6, #1
 800735a:	e7f2      	b.n	8007342 <__libc_init_array+0x1e>
 800735c:	08007514 	.word	0x08007514
 8007360:	08007514 	.word	0x08007514
 8007364:	08007514 	.word	0x08007514
 8007368:	08007518 	.word	0x08007518

0800736c <memcpy>:
 800736c:	440a      	add	r2, r1
 800736e:	4291      	cmp	r1, r2
 8007370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007374:	d100      	bne.n	8007378 <memcpy+0xc>
 8007376:	4770      	bx	lr
 8007378:	b510      	push	{r4, lr}
 800737a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800737e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007382:	4291      	cmp	r1, r2
 8007384:	d1f9      	bne.n	800737a <memcpy+0xe>
 8007386:	bd10      	pop	{r4, pc}

08007388 <_init>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	bf00      	nop
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr

08007394 <_fini>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr
