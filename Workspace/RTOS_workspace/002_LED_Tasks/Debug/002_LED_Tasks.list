
002_LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e0  080072e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072e8  080072e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080072f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  0800730c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  0800730c  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015181  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000331e  00000000  00000000  00035210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  00039968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f04  00000000  00000000  0003a8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d8f  00000000  00000000  0005e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda5e  00000000  00000000  00075584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005474  00000000  00000000  00152fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ec  00000000  00000000  00158458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007128 	.word	0x08007128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007128 	.word	0x08007128

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed4 	.word	0x20012ed4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fab3 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f86d 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8d7 	bl	8000760 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005b2:	482d      	ldr	r0, [pc, #180]	; (8000668 <main+0xc8>)
 80005b4:	f004 fafa 	bl	8004bac <SEGGER_UART_init>

  // CYCLCNT enable
  DWT_CTRL |= (1<<0);
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <main+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <main+0xcc>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c4:	f004 f91c 	bl	8004800 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	4926      	ldr	r1, [pc, #152]	; (8000670 <main+0xd0>)
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <main+0xd4>)
 80005da:	f002 fa1d 	bl	8002a18 <xTaskCreate>
 80005de:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x5a>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task2_handle);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	491b      	ldr	r1, [pc, #108]	; (8000678 <main+0xd8>)
 800060c:	481b      	ldr	r0, [pc, #108]	; (800067c <main+0xdc>)
 800060e:	f002 fa03 	bl	8002a18 <xTaskCreate>
 8000612:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0x90>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	617b      	str	r3, [r7, #20]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0x8e>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task3_handle);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0xe0>)
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0xe4>)
 8000640:	f002 f9ea 	bl	8002a18 <xTaskCreate>
 8000644:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0xc2>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0xc0>


  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8000662:	f002 fb61 	bl	8002d28 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0xc6>
 8000668:	0007a120 	.word	0x0007a120
 800066c:	e0001000 	.word	0xe0001000
 8000670:	08007140 	.word	0x08007140
 8000674:	08000861 	.word	0x08000861
 8000678:	08007150 	.word	0x08007150
 800067c:	08000889 	.word	0x08000889
 8000680:	08007160 	.word	0x08007160
 8000684:	080008b5 	.word	0x080008b5

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fd0c 	bl	80070b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemClock_Config+0xd0>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <SystemClock_Config+0xd4>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f875 	bl	8001800 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800071c:	f000 f8f2 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fcf6 	bl	8001130 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074a:	f000 f8db 	bl	8000904 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <MX_GPIO_Init+0xf4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <MX_GPIO_Init+0xf4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a27      	ldr	r2, [pc, #156]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0xf8>)
 80007ee:	f000 fc6b 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_GPIO_Init+0xfc>)
 800080a:	f000 fac9 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0xf8>)
 800082a:	f000 fab9 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 800082e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0xf8>)
 8000848:	f000 faaa 	bl	8000da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <led_green_handler+0x20>)
 800086a:	f006 fb75 	bl	8006f58 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 800086e:	2120      	movs	r1, #32
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <led_green_handler+0x24>)
 8000872:	f000 fc42 	bl	80010fa <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	f000 f98b 	bl	8000b94 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800087e:	e7f3      	b.n	8000868 <led_green_handler+0x8>
 8000880:	08007170 	.word	0x08007170
 8000884:	40020000 	.word	0x40020000

08000888 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <led_orange_handler+0x24>)
 8000892:	f006 fb61 	bl	8006f58 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN);
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <led_orange_handler+0x28>)
 800089c:	f000 fc2d 	bl	80010fa <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80008a0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008a4:	f000 f976 	bl	8000b94 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 80008a8:	e7f2      	b.n	8000890 <led_orange_handler+0x8>
 80008aa:	bf00      	nop
 80008ac:	08007184 	.word	0x08007184
 80008b0:	40020000 	.word	0x40020000

080008b4 <led_red_handler>:
	}
}

static void led_red_handler(void* parameters){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <led_red_handler+0x24>)
 80008be:	f006 fb4b 	bl	8006f58 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <led_red_handler+0x28>)
 80008c8:	f000 fc17 	bl	80010fa <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 80008cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008d0:	f000 f960 	bl	8000b94 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008d4:	e7f2      	b.n	80008bc <led_red_handler+0x8>
 80008d6:	bf00      	nop
 80008d8:	08007198 	.word	0x08007198
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 f92f 	bl	8000b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40000c00 	.word	0x40000c00

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800094e:	f003 fbd3 	bl	80040f8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <HAL_InitTick+0xe4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <HAL_InitTick+0xe4>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <HAL_InitTick+0xe4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098c:	f107 0210 	add.w	r2, r7, #16
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fcd0 	bl	800133c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a6:	f000 fcb5 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 80009aa:	6378      	str	r0, [r7, #52]	; 0x34
 80009ac:	e004      	b.n	80009b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ae:	f000 fcb1 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 80009b2:	4603      	mov	r3, r0
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <HAL_InitTick+0xe8>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	0c9b      	lsrs	r3, r3, #18
 80009c2:	3b01      	subs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_InitTick+0xec>)
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <HAL_InitTick+0xf0>)
 80009ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <HAL_InitTick+0xec>)
 80009ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_InitTick+0xec>)
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_InitTick+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_InitTick+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_InitTick+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009ec:	4817      	ldr	r0, [pc, #92]	; (8000a4c <HAL_InitTick+0xec>)
 80009ee:	f001 f9a5 	bl	8001d3c <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11b      	bne.n	8000a38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <HAL_InitTick+0xec>)
 8000a02:	f001 f9f5 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a14:	2032      	movs	r0, #50	; 0x32
 8000a16:	f000 f9b5 	bl	8000d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d808      	bhi.n	8000a32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f000 f991 	bl	8000d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_InitTick+0xf4>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	e002      	b.n	8000a38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	40000c00 	.word	0x40000c00
 8000a54:	20000004 	.word	0x20000004

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM5_IRQHandler+0x10>)
 8000a8a:	f001 fa21 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000038 	.word	0x20000038

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f006 faeb 	bl	80070c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd57 	bl	80005a0 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b00:	080072f0 	.word	0x080072f0
  ldr r2, =_sbss
 8000b04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b08:	200144a8 	.word	0x200144a8

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f8fc 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ff0e 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fee4 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000080 	.word	0x20000080

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000080 	.word	0x20000080

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e165      	b.n	8001088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8154 	bne.w	8001082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ae 	beq.w	8001082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x308>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d025      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01f      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x310>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x20a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x206>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae96 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43d9      	mvns	r1, r3
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	400b      	ands	r3, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0cc      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800118e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a52      	ldr	r2, [pc, #328]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d044      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e067      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4934      	ldr	r1, [pc, #208]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fcac 	bl	8000b7c <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fca8 	bl	8000b7c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f873 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb42 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	0800728c 	.word	0x0800728c
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_RCC_GetHCLKFreq+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001318:	f7ff fff0 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4903      	ldr	r1, [pc, #12]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	0800729c 	.word	0x0800729c

0800133c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220f      	movs	r2, #15
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_RCC_GetClockConfig+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b0ae      	sub	sp, #184	; 0xb8
 80013a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c6:	4bcb      	ldr	r3, [pc, #812]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	f200 8206 	bhi.w	80017e0 <HAL_RCC_GetSysClockFreq+0x440>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080017e1 	.word	0x080017e1
 80013e4:	080017e1 	.word	0x080017e1
 80013e8:	080017e1 	.word	0x080017e1
 80013ec:	08001419 	.word	0x08001419
 80013f0:	080017e1 	.word	0x080017e1
 80013f4:	080017e1 	.word	0x080017e1
 80013f8:	080017e1 	.word	0x080017e1
 80013fc:	08001421 	.word	0x08001421
 8001400:	080017e1 	.word	0x080017e1
 8001404:	080017e1 	.word	0x080017e1
 8001408:	080017e1 	.word	0x080017e1
 800140c:	08001611 	.word	0x08001611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4bb9      	ldr	r3, [pc, #740]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001416:	e1e7      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001418:	4bb8      	ldr	r3, [pc, #736]	; (80016fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800141e:	e1e3      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4bb4      	ldr	r3, [pc, #720]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	4bb1      	ldr	r3, [pc, #708]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d071      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4bae      	ldr	r3, [pc, #696]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001444:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800145a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800145e:	4622      	mov	r2, r4
 8001460:	462b      	mov	r3, r5
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	0159      	lsls	r1, r3, #5
 800146c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001470:	0150      	lsls	r0, r2, #5
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4621      	mov	r1, r4
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	6439      	str	r1, [r7, #64]	; 0x40
 800147c:	4629      	mov	r1, r5
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	647b      	str	r3, [r7, #68]	; 0x44
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001490:	4649      	mov	r1, r9
 8001492:	018b      	lsls	r3, r1, #6
 8001494:	4641      	mov	r1, r8
 8001496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149a:	4641      	mov	r1, r8
 800149c:	018a      	lsls	r2, r1, #6
 800149e:	4641      	mov	r1, r8
 80014a0:	1a51      	subs	r1, r2, r1
 80014a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	eb63 0301 	sbc.w	r3, r3, r1
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014b8:	4649      	mov	r1, r9
 80014ba:	00cb      	lsls	r3, r1, #3
 80014bc:	4641      	mov	r1, r8
 80014be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014c2:	4641      	mov	r1, r8
 80014c4:	00ca      	lsls	r2, r1, #3
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	4622      	mov	r2, r4
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
 80014d2:	462b      	mov	r3, r5
 80014d4:	460a      	mov	r2, r1
 80014d6:	eb42 0303 	adc.w	r3, r2, r3
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014e8:	4629      	mov	r1, r5
 80014ea:	024b      	lsls	r3, r1, #9
 80014ec:	4621      	mov	r1, r4
 80014ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014f2:	4621      	mov	r1, r4
 80014f4:	024a      	lsls	r2, r1, #9
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800150c:	f7fe feca 	bl	80002a4 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4613      	mov	r3, r2
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800151a:	e067      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151c:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001528:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001534:	67bb      	str	r3, [r7, #120]	; 0x78
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	; 0x7c
 800153a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f04f 0100 	mov.w	r1, #0
 800154a:	0159      	lsls	r1, r3, #5
 800154c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001550:	0150      	lsls	r0, r2, #5
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4621      	mov	r1, r4
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	62b9      	str	r1, [r7, #40]	; 0x28
 800155c:	4629      	mov	r1, r5
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001570:	4649      	mov	r1, r9
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157a:	4641      	mov	r1, r8
 800157c:	018a      	lsls	r2, r1, #6
 800157e:	4641      	mov	r1, r8
 8001580:	ebb2 0a01 	subs.w	sl, r2, r1
 8001584:	4649      	mov	r1, r9
 8001586:	eb63 0b01 	sbc.w	fp, r3, r1
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800159a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800159e:	4692      	mov	sl, r2
 80015a0:	469b      	mov	fp, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	eb1a 0303 	adds.w	r3, sl, r3
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	462b      	mov	r3, r5
 80015ac:	eb4b 0303 	adc.w	r3, fp, r3
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015be:	4629      	mov	r1, r5
 80015c0:	028b      	lsls	r3, r1, #10
 80015c2:	4621      	mov	r1, r4
 80015c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c8:	4621      	mov	r1, r4
 80015ca:	028a      	lsls	r2, r1, #10
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015d4:	2200      	movs	r2, #0
 80015d6:	673b      	str	r3, [r7, #112]	; 0x70
 80015d8:	677a      	str	r2, [r7, #116]	; 0x74
 80015da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015de:	f7fe fe61 	bl	80002a4 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4613      	mov	r3, r2
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	3301      	adds	r3, #1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800160e:	e0eb      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06b      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	66bb      	str	r3, [r7, #104]	; 0x68
 8001632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163a:	663b      	str	r3, [r7, #96]	; 0x60
 800163c:	2300      	movs	r3, #0
 800163e:	667b      	str	r3, [r7, #100]	; 0x64
 8001640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0159      	lsls	r1, r3, #5
 8001652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001656:	0150      	lsls	r0, r2, #5
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4621      	mov	r1, r4
 800165e:	1a51      	subs	r1, r2, r1
 8001660:	61b9      	str	r1, [r7, #24]
 8001662:	4629      	mov	r1, r5
 8001664:	eb63 0301 	sbc.w	r3, r3, r1
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001676:	4659      	mov	r1, fp
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	4651      	mov	r1, sl
 800167c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001680:	4651      	mov	r1, sl
 8001682:	018a      	lsls	r2, r1, #6
 8001684:	4651      	mov	r1, sl
 8001686:	ebb2 0801 	subs.w	r8, r2, r1
 800168a:	4659      	mov	r1, fp
 800168c:	eb63 0901 	sbc.w	r9, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800169c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a4:	4690      	mov	r8, r2
 80016a6:	4699      	mov	r9, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	eb18 0303 	adds.w	r3, r8, r3
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	462b      	mov	r3, r5
 80016b2:	eb49 0303 	adc.w	r3, r9, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016c4:	4629      	mov	r1, r5
 80016c6:	024b      	lsls	r3, r1, #9
 80016c8:	4621      	mov	r1, r4
 80016ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ce:	4621      	mov	r1, r4
 80016d0:	024a      	lsls	r2, r1, #9
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016da:	2200      	movs	r2, #0
 80016dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80016de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016e4:	f7fe fdde 	bl	80002a4 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016f2:	e065      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x420>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	2200      	movs	r2, #0
 8001708:	4618      	mov	r0, r3
 800170a:	4611      	mov	r1, r2
 800170c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001710:	653b      	str	r3, [r7, #80]	; 0x50
 8001712:	2300      	movs	r3, #0
 8001714:	657b      	str	r3, [r7, #84]	; 0x54
 8001716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4641      	mov	r1, r8
 8001734:	1a51      	subs	r1, r2, r1
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4649      	mov	r1, r9
 800173a:	eb63 0301 	sbc.w	r3, r3, r1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800174c:	4659      	mov	r1, fp
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4651      	mov	r1, sl
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4651      	mov	r1, sl
 800175c:	1a54      	subs	r4, r2, r1
 800175e:	4659      	mov	r1, fp
 8001760:	eb63 0501 	sbc.w	r5, r3, r1
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	00eb      	lsls	r3, r5, #3
 800176e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001772:	00e2      	lsls	r2, r4, #3
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4643      	mov	r3, r8
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	464b      	mov	r3, r9
 8001780:	eb45 0303 	adc.w	r3, r5, r3
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80017ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017b2:	f7fe fd77 	bl	80002a4 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0f1b      	lsrs	r3, r3, #28
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017de:	e003      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	37b8      	adds	r7, #184	; 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400

08001800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e28d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8083 	beq.w	8001926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001820:	4b94      	ldr	r3, [pc, #592]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800182c:	4b91      	ldr	r3, [pc, #580]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001834:	2b08      	cmp	r3, #8
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001838:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x124>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e25a      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x90>
 8001882:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7b      	ldr	r2, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xb4>
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a72      	ldr	r2, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6c      	ldr	r3, [pc, #432]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f952 	bl	8000b7c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f94e 	bl	8000b7c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e21f      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xdc>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f93e 	bl	8000b7c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f93a 	bl	8000b7c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e20b      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x104>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06f      	beq.n	8001a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001932:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193e:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001946:	2b08      	cmp	r3, #8
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1d3      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f8e7 	bl	8000b7c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f8e3 	bl	8000b7c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b4      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f8c6 	bl	8000b7c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff f8c2 	bl	8000b7c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e193      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f8a6 	bl	8000b7c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f8a2 	bl	8000b7c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e173      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x234>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f88f 	bl	8000b7c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f88b 	bl	8000b7c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e15c      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b83      	ldr	r3, [pc, #524]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b7c      	ldr	r3, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f84b 	bl	8000b7c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff f847 	bl	8000b7c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e118      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x31e>
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x340>
 8001b26:	4b61      	ldr	r3, [pc, #388]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a60      	ldr	r2, [pc, #384]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	4b5e      	ldr	r3, [pc, #376]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f80c 	bl	8000b7c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff f808 	bl	8000b7c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0d7      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x368>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7fe fff6 	bl	8000b7c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7fe fff2 	bl	8000b7c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0c1      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ad 	beq.w	8001d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d060      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d145      	bne.n	8001c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ffc6 	bl	8000b7c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7fe ffc2 	bl	8000b7c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e093      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	071b      	lsls	r3, r3, #28
 8001c3e:	491b      	ldr	r1, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ff97 	bl	8000b7c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe ff93 	bl	8000b7c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e064      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x452>
 8001c70:	e05c      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe ff80 	bl	8000b7c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ff7c 	bl	8000b7c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
 8001c9e:	e045      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e040      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCC_OscConfig+0x538>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d129      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d122      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d119      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f839 	bl	8001dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f9d8 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e32:	d01d      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40001800 	.word	0x40001800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0202 	mvn.w	r2, #2
 8001efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8ee 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8e0 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8f1 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8c4 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8b6 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8c7 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0208 	mvn.w	r2, #8
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f89a 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f88c 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f89d 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0210 	mvn.w	r2, #16
 8001ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f870 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f862 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f873 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0201 	mvn.w	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fc46 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f902 	bl	8002284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f838 	bl	800211c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0220 	mvn.w	r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8cc 	bl	8002270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a40      	ldr	r2, [pc, #256]	; (8002244 <TIM_Base_SetConfig+0x114>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d00f      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3d      	ldr	r2, [pc, #244]	; (8002248 <TIM_Base_SetConfig+0x118>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00b      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <TIM_Base_SetConfig+0x11c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <TIM_Base_SetConfig+0x120>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <TIM_Base_SetConfig+0x124>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d108      	bne.n	8002182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <TIM_Base_SetConfig+0x114>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d027      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <TIM_Base_SetConfig+0x118>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d023      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <TIM_Base_SetConfig+0x11c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <TIM_Base_SetConfig+0x120>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a29      	ldr	r2, [pc, #164]	; (8002254 <TIM_Base_SetConfig+0x124>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d017      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a28      	ldr	r2, [pc, #160]	; (8002258 <TIM_Base_SetConfig+0x128>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <TIM_Base_SetConfig+0x12c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00f      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <TIM_Base_SetConfig+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00b      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <TIM_Base_SetConfig+0x134>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <TIM_Base_SetConfig+0x138>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a23      	ldr	r2, [pc, #140]	; (800226c <TIM_Base_SetConfig+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <TIM_Base_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d003      	beq.n	8002228 <TIM_Base_SetConfig+0xf8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <TIM_Base_SetConfig+0x124>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d103      	bne.n	8002230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	615a      	str	r2, [r3, #20]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40010400 	.word	0x40010400
 8002258:	40014000 	.word	0x40014000
 800225c:	40014400 	.word	0x40014400
 8002260:	40014800 	.word	0x40014800
 8002264:	40001800 	.word	0x40001800
 8002268:	40001c00 	.word	0x40001c00
 800226c:	40002000 	.word	0x40002000

08002270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0208 	add.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0208 	add.w	r2, r3, #8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 0208 	add.w	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002308:	d103      	bne.n	8002312 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e00c      	b.n	800232c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3308      	adds	r3, #8
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e002      	b.n	8002320 <vListInsert+0x2e>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d2f6      	bcs.n	800231a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6852      	ldr	r2, [r2, #4]
 8002384:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d103      	bne.n	8002398 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023c2:	2301      	movs	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <xQueueGenericReset+0x2e>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	60fb      	str	r3, [r7, #12]
    }
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05d      	beq.n	80024a8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d059      	beq.n	80024a8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	2100      	movs	r1, #0
 80023fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d000      	beq.n	8002408 <xQueueGenericReset+0x50>
 8002406:	2101      	movs	r1, #1
 8002408:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800240a:	2b00      	cmp	r3, #0
 800240c:	d14c      	bne.n	80024a8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800240e:	f001 fef1 	bl	80041f4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	6939      	ldr	r1, [r7, #16]
 800241c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	441a      	add	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2200      	movs	r2, #0
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	3b01      	subs	r3, #1
 8002440:	6939      	ldr	r1, [r7, #16]
 8002442:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	441a      	add	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	22ff      	movs	r2, #255	; 0xff
 800245a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d114      	bne.n	800248e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01a      	beq.n	80024a2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	3310      	adds	r3, #16
 8002470:	4618      	mov	r0, r3
 8002472:	f000 ffdb 	bl	800342c <xTaskRemoveFromEventList>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <xQueueGenericReset+0x11c>)
 800247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	e009      	b.n	80024a2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	3310      	adds	r3, #16
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff00 	bl	8002298 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	3324      	adds	r3, #36	; 0x24
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fefb 	bl	8002298 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024a2:	f001 fed7 	bl	8004254 <vPortExitCritical>
 80024a6:	e001      	b.n	80024ac <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <xQueueGenericReset+0x110>
        __asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	60bb      	str	r3, [r7, #8]
    }
 80024c4:	bf00      	nop
 80024c6:	e7fe      	b.n	80024c6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024c8:	697b      	ldr	r3, [r7, #20]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000ed04 	.word	0xe000ed04

080024d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02e      	beq.n	800254e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024f0:	2100      	movs	r1, #0
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	fba3 2302 	umull	r2, r3, r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <xQueueGenericCreate+0x28>
 80024fe:	2101      	movs	r1, #1
 8002500:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	d123      	bne.n	800254e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800250e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002512:	d81c      	bhi.n	800254e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3350      	adds	r3, #80	; 0x50
 8002522:	4618      	mov	r0, r3
 8002524:	f001 ff92 	bl	800444c <pvPortMalloc>
 8002528:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01c      	beq.n	800256a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3350      	adds	r3, #80	; 0x50
 8002538:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f814 	bl	8002574 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800254c:	e00d      	b.n	800256a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <xQueueGenericCreate+0x92>
        __asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	613b      	str	r3, [r7, #16]
    }
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800256a:	69fb      	ldr	r3, [r7, #28]
    }
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d103      	bne.n	8002590 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e002      	b.n	8002596 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025a2:	2101      	movs	r1, #1
 80025a4:	69b8      	ldr	r0, [r7, #24]
 80025a6:	f7ff ff07 	bl	80023b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	2073      	movs	r0, #115	; 0x73
 80025ba:	f003 fea9 	bl	8006310 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b08f      	sub	sp, #60	; 0x3c
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <xQueueReceive+0x30>
        __asm volatile
 80025e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	623b      	str	r3, [r7, #32]
    }
 80025f4:	bf00      	nop
 80025f6:	e7fe      	b.n	80025f6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <xQueueReceive+0x3e>
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <xQueueReceive+0x42>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <xQueueReceive+0x44>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xQueueReceive+0x5e>
        __asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	61fb      	str	r3, [r7, #28]
    }
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002626:	f001 f913 	bl	8003850 <xTaskGetSchedulerState>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <xQueueReceive+0x6e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <xQueueReceive+0x72>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueReceive+0x74>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueReceive+0x8e>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	61bb      	str	r3, [r7, #24]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002656:	f001 fdcd 	bl	80041f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d02f      	beq.n	80026c6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800266a:	f000 f8bd 	bl	80027e8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fb7b 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 8002676:	4604      	mov	r4, r0
 8002678:	2000      	movs	r0, #0
 800267a:	f004 fb77 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 800267e:	4602      	mov	r2, r0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2101      	movs	r1, #1
 8002684:	9100      	str	r1, [sp, #0]
 8002686:	4621      	mov	r1, r4
 8002688:	205c      	movs	r0, #92	; 0x5c
 800268a:	f003 feb7 	bl	80063fc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00f      	beq.n	80026be <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	3310      	adds	r3, #16
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fec2 	bl	800342c <xTaskRemoveFromEventList>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026ae:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <xQueueReceive+0x21c>)
 80026b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026be:	f001 fdc9 	bl	8004254 <vPortExitCritical>
                return pdPASS;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08a      	b.n	80027dc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d113      	bne.n	80026f4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026cc:	f001 fdc2 	bl	8004254 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 fb4a 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 80026d8:	4604      	mov	r4, r0
 80026da:	2000      	movs	r0, #0
 80026dc:	f004 fb46 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2101      	movs	r1, #1
 80026e6:	9100      	str	r1, [sp, #0]
 80026e8:	4621      	mov	r1, r4
 80026ea:	205c      	movs	r0, #92	; 0x5c
 80026ec:	f003 fe86 	bl	80063fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e073      	b.n	80027dc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 ff6c 	bl	80035dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002708:	f001 fda4 	bl	8004254 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800270c:	f000 fb6e 	bl	8002dec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002710:	f001 fd70 	bl	80041f4 <vPortEnterCritical>
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800271a:	b25b      	sxtb	r3, r3
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002720:	d103      	bne.n	800272a <xQueueReceive+0x162>
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002730:	b25b      	sxtb	r3, r3
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002736:	d103      	bne.n	8002740 <xQueueReceive+0x178>
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002740:	f001 fd88 	bl	8004254 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002744:	1d3a      	adds	r2, r7, #4
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f000 ff5b 	bl	8003608 <xTaskCheckForTimeOut>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d124      	bne.n	80027a2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275a:	f000 f8bd 	bl	80028d8 <prvIsQueueEmpty>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	3324      	adds	r3, #36	; 0x24
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fdf1 	bl	8003354 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002774:	f000 f85e 	bl	8002834 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002778:	f000 fb46 	bl	8002e08 <xTaskResumeAll>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	f47f af69 	bne.w	8002656 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <xQueueReceive+0x21c>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	e75f      	b.n	8002656 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002798:	f000 f84c 	bl	8002834 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800279c:	f000 fb34 	bl	8002e08 <xTaskResumeAll>
 80027a0:	e759      	b.n	8002656 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a4:	f000 f846 	bl	8002834 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027a8:	f000 fb2e 	bl	8002e08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ae:	f000 f893 	bl	80028d8 <prvIsQueueEmpty>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f43f af4e 	beq.w	8002656 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 fad5 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 80027c2:	4604      	mov	r4, r0
 80027c4:	2000      	movs	r0, #0
 80027c6:	f004 fad1 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2101      	movs	r1, #1
 80027d0:	9100      	str	r1, [sp, #0]
 80027d2:	4621      	mov	r1, r4
 80027d4:	205c      	movs	r0, #92	; 0x5c
 80027d6:	f003 fe11 	bl	80063fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80027da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3734      	adds	r7, #52	; 0x34
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd90      	pop	{r4, r7, pc}
 80027e4:	e000ed04 	.word	0xe000ed04

080027e8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d018      	beq.n	800282c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d303      	bcc.n	800281c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	461a      	mov	r2, r3
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	f004 fc70 	bl	800710c <memcpy>
    }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800283c:	f001 fcda 	bl	80041f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002846:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002848:	e011      	b.n	800286e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3324      	adds	r3, #36	; 0x24
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fde8 	bl	800342c <xTaskRemoveFromEventList>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002862:	f000 ff37 	bl	80036d4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	3b01      	subs	r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800286e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	dce9      	bgt.n	800284a <prvUnlockQueue+0x16>
 8002876:	e000      	b.n	800287a <prvUnlockQueue+0x46>
                    break;
 8002878:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002882:	f001 fce7 	bl	8004254 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002886:	f001 fcb5 	bl	80041f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002890:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002892:	e011      	b.n	80028b8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3310      	adds	r3, #16
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fdc3 	bl	800342c <xTaskRemoveFromEventList>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028ac:	f000 ff12 	bl	80036d4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	dce9      	bgt.n	8002894 <prvUnlockQueue+0x60>
 80028c0:	e000      	b.n	80028c4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028c2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028cc:	f001 fcc2 	bl	8004254 <vPortExitCritical>
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028e0:	f001 fc88 	bl	80041f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e001      	b.n	80028f6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028f6:	f001 fcad 	bl	8004254 <vPortExitCritical>

    return xReturn;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	60fb      	str	r3, [r7, #12]
    }
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d024      	beq.n	800297e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e01e      	b.n	8002978 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <vQueueAddToRegistry+0xa8>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d105      	bne.n	8002956 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <vQueueAddToRegistry+0xa8>)
 8002950:	4413      	add	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
                    break;
 8002954:	e013      	b.n	800297e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <vQueueAddToRegistry+0x6e>
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <vQueueAddToRegistry+0xa8>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <vQueueAddToRegistry+0xa8>)
 800296e:	4413      	add	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b07      	cmp	r3, #7
 800297c:	d9dd      	bls.n	800293a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00f      	beq.n	80029a4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 f9ea 	bl	8006d6c <SEGGER_SYSVIEW_ShrinkId>
 8002998:	4601      	mov	r1, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	2071      	movs	r0, #113	; 0x71
 80029a0:	f003 fc5c 	bl	800625c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000084 	.word	0x20000084

080029b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029c0:	f001 fc18 	bl	80041f4 <vPortEnterCritical>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d0:	d103      	bne.n	80029da <vQueueWaitForMessageRestricted+0x2a>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e6:	d103      	bne.n	80029f0 <vQueueWaitForMessageRestricted+0x40>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f0:	f001 fc30 	bl	8004254 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3324      	adds	r3, #36	; 0x24
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fcc9 	bl	800339c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff12 	bl	8002834 <prvUnlockQueue>
    }
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	; 0x30
 8002a1c:	af04      	add	r7, sp, #16
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fd0d 	bl	800444c <pvPortMalloc>
 8002a32:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a3a:	2058      	movs	r0, #88	; 0x58
 8002a3c:	f001 fd06 	bl	800444c <pvPortMalloc>
 8002a40:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a48:	2258      	movs	r2, #88	; 0x58
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	69f8      	ldr	r0, [r7, #28]
 8002a4e:	f004 fb31 	bl	80070b4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
 8002a58:	e005      	b.n	8002a66 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f001 fdb0 	bl	80045c0 <vPortFree>
 8002a60:	e001      	b.n	8002a66 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9303      	str	r3, [sp, #12]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f80e 	bl	8002aa4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a88:	69f8      	ldr	r0, [r7, #28]
 8002a8a:	f000 f899 	bl	8002bc0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e002      	b.n	8002a9a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a98:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
    }
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	461a      	mov	r2, r3
 8002abc:	21a5      	movs	r1, #165	; 0xa5
 8002abe:	f004 faf9 	bl	80070b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002acc:	3b01      	subs	r3, #1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	617b      	str	r3, [r7, #20]
    }
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01e      	beq.n	8002b40 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e012      	b.n	8002b2e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	7819      	ldrb	r1, [r3, #0]
 8002b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	3334      	adds	r3, #52	; 0x34
 8002b18:	460a      	mov	r2, r1
 8002b1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	d9e9      	bls.n	8002b08 <prvInitialiseNewTask+0x64>
 8002b34:	e000      	b.n	8002b38 <prvInitialiseNewTask+0x94>
            {
                break;
 8002b36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d90a      	bls.n	8002b5c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	613b      	str	r3, [r7, #16]
    }
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d901      	bls.n	8002b66 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b62:	2304      	movs	r3, #4
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b70:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	3304      	adds	r3, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fbae 	bl	80022d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	3318      	adds	r3, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fba9 	bl	80022d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	f1c3 0205 	rsb	r2, r3, #5
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	69b8      	ldr	r0, [r7, #24]
 8002ba2:	f001 f977 	bl	8003e94 <pxPortInitialiseStack>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bb8:	bf00      	nop
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bc8:	f001 fb14 	bl	80041f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <prvAddNewTaskToReadyList+0x14c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <prvAddNewTaskToReadyList+0x14c>)
 8002bd4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bd6:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <prvAddNewTaskToReadyList+0x150>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002bde:	4a4c      	ldr	r2, [pc, #304]	; (8002d10 <prvAddNewTaskToReadyList+0x150>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be4:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <prvAddNewTaskToReadyList+0x14c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d110      	bne.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002bec:	f000 fd96 	bl	800371c <prvInitialiseTaskLists>
 8002bf0:	e00d      	b.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <prvAddNewTaskToReadyList+0x154>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bfa:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <prvAddNewTaskToReadyList+0x150>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d802      	bhi.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c08:	4a41      	ldr	r2, [pc, #260]	; (8002d10 <prvAddNewTaskToReadyList+0x150>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c0e:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <prvAddNewTaskToReadyList+0x158>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a40      	ldr	r2, [pc, #256]	; (8002d18 <prvAddNewTaskToReadyList+0x158>)
 8002c16:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c18:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <prvAddNewTaskToReadyList+0x158>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <prvAddNewTaskToReadyList+0x94>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 ffd9 	bl	8006be0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	461d      	mov	r5, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461c      	mov	r4, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	1ae3      	subs	r3, r4, r3
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	f001 fe78 	bl	8004944 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 f846 	bl	8006ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <prvAddNewTaskToReadyList+0x15c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <prvAddNewTaskToReadyList+0x15c>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	492b      	ldr	r1, [pc, #172]	; (8002d20 <prvAddNewTaskToReadyList+0x160>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3304      	adds	r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	3204      	adds	r2, #4
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <prvAddNewTaskToReadyList+0x160>)
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	615a      	str	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	4918      	ldr	r1, [pc, #96]	; (8002d20 <prvAddNewTaskToReadyList+0x160>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	4814      	ldr	r0, [pc, #80]	; (8002d20 <prvAddNewTaskToReadyList+0x160>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4403      	add	r3, r0
 8002cd8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cda:	f001 fabb 	bl	8004254 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <prvAddNewTaskToReadyList+0x154>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00e      	beq.n	8002d04 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <prvAddNewTaskToReadyList+0x150>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d207      	bcs.n	8002d04 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <prvAddNewTaskToReadyList+0x164>)
 8002cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0c:	2000019c 	.word	0x2000019c
 8002d10:	200000c4 	.word	0x200000c4
 8002d14:	200001a8 	.word	0x200001a8
 8002d18:	200001b8 	.word	0x200001b8
 8002d1c:	200001a4 	.word	0x200001a4
 8002d20:	200000c8 	.word	0x200000c8
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d2e:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <vTaskStartScheduler+0xa4>)
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	2282      	movs	r2, #130	; 0x82
 8002d3a:	4925      	ldr	r1, [pc, #148]	; (8002dd0 <vTaskStartScheduler+0xa8>)
 8002d3c:	4825      	ldr	r0, [pc, #148]	; (8002dd4 <vTaskStartScheduler+0xac>)
 8002d3e:	f7ff fe6b 	bl	8002a18 <xTaskCreate>
 8002d42:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d4a:	f000 fe1f 	bl	800398c <xTimerCreateTimerTask>
 8002d4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d124      	bne.n	8002da0 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	60bb      	str	r3, [r7, #8]
    }
 8002d68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <vTaskStartScheduler+0xb0>)
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <vTaskStartScheduler+0xb4>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <vTaskStartScheduler+0xb8>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <vTaskStartScheduler+0xbc>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <vTaskStartScheduler+0xa4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d102      	bne.n	8002d90 <vTaskStartScheduler+0x68>
 8002d8a:	f003 ff0d 	bl	8006ba8 <SEGGER_SYSVIEW_OnIdle>
 8002d8e:	e004      	b.n	8002d9a <vTaskStartScheduler+0x72>
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <vTaskStartScheduler+0xbc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 ff65 	bl	8006c64 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d9a:	f001 f90b 	bl	8003fb4 <xPortStartScheduler>
 8002d9e:	e00e      	b.n	8002dbe <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da6:	d10a      	bne.n	8002dbe <vTaskStartScheduler+0x96>
        __asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	607b      	str	r3, [r7, #4]
    }
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <vTaskStartScheduler+0xc0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200001c0 	.word	0x200001c0
 8002dd0:	080071ac 	.word	0x080071ac
 8002dd4:	080036ed 	.word	0x080036ed
 8002dd8:	200001bc 	.word	0x200001bc
 8002ddc:	200001a8 	.word	0x200001a8
 8002de0:	200001a0 	.word	0x200001a0
 8002de4:	200000c4 	.word	0x200000c4
 8002de8:	2000000c 	.word	0x2000000c

08002dec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <vTaskSuspendAll+0x18>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <vTaskSuspendAll+0x18>)
 8002df8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	200001c4 	.word	0x200001c4

08002e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e16:	4b73      	ldr	r3, [pc, #460]	; (8002fe4 <xTaskResumeAll+0x1dc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <xTaskResumeAll+0x2c>
        __asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	607b      	str	r3, [r7, #4]
    }
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e34:	f001 f9de 	bl	80041f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <xTaskResumeAll+0x1dc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <xTaskResumeAll+0x1dc>)
 8002e40:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e42:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <xTaskResumeAll+0x1dc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 80c4 	bne.w	8002fd4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <xTaskResumeAll+0x1e0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80bf 	beq.w	8002fd4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e56:	e08e      	b.n	8002f76 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <xTaskResumeAll+0x1e4>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	6a12      	ldr	r2, [r2, #32]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	69d2      	ldr	r2, [r2, #28]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3318      	adds	r3, #24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d103      	bne.n	8002e8e <xTaskResumeAll+0x86>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2200      	movs	r2, #0
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	68d2      	ldr	r2, [r2, #12]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	6892      	ldr	r2, [r2, #8]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d103      	bne.n	8002ecc <xTaskResumeAll+0xc4>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	615a      	str	r2, [r3, #20]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1e5a      	subs	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 ff02 	bl	8006ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <xTaskResumeAll+0x1e8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	4a3f      	ldr	r2, [pc, #252]	; (8002ff0 <xTaskResumeAll+0x1e8>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	493e      	ldr	r1, [pc, #248]	; (8002ff4 <xTaskResumeAll+0x1ec>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3304      	adds	r3, #4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	3204      	adds	r2, #4
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	1d1a      	adds	r2, r3, #4
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a2e      	ldr	r2, [pc, #184]	; (8002ff4 <xTaskResumeAll+0x1ec>)
 8002f3a:	441a      	add	r2, r3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	615a      	str	r2, [r3, #20]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	492b      	ldr	r1, [pc, #172]	; (8002ff4 <xTaskResumeAll+0x1ec>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	4827      	ldr	r0, [pc, #156]	; (8002ff4 <xTaskResumeAll+0x1ec>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4403      	add	r3, r0
 8002f60:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <xTaskResumeAll+0x1f0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f70:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <xTaskResumeAll+0x1f4>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <xTaskResumeAll+0x1e4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f47f af6c 	bne.w	8002e58 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f86:	f000 fc47 	bl	8003818 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <xTaskResumeAll+0x1f8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f96:	f000 f859 	bl	800304c <xTaskIncrementTick>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <xTaskResumeAll+0x1f4>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f1      	bne.n	8002f96 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <xTaskResumeAll+0x1f8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <xTaskResumeAll+0x1f4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <xTaskResumeAll+0x1fc>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fd4:	f001 f93e 	bl	8004254 <vPortExitCritical>

    return xAlreadyYielded;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200001c4 	.word	0x200001c4
 8002fe8:	2000019c 	.word	0x2000019c
 8002fec:	2000015c 	.word	0x2000015c
 8002ff0:	200001a4 	.word	0x200001a4
 8002ff4:	200000c8 	.word	0x200000c8
 8002ff8:	200000c4 	.word	0x200000c4
 8002ffc:	200001b0 	.word	0x200001b0
 8003000:	200001ac 	.word	0x200001ac
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <xTaskGetTickCount+0x1c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	200001a0 	.word	0x200001a0

08003028 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800302e:	f001 f9cd 	bl	80043cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <xTaskGetTickCountFromISR+0x20>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800303c:	683b      	ldr	r3, [r7, #0]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200001a0 	.word	0x200001a0

0800304c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003056:	4b7f      	ldr	r3, [pc, #508]	; (8003254 <xTaskIncrementTick+0x208>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 80f0 	bne.w	8003240 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003060:	4b7d      	ldr	r3, [pc, #500]	; (8003258 <xTaskIncrementTick+0x20c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003068:	4a7b      	ldr	r2, [pc, #492]	; (8003258 <xTaskIncrementTick+0x20c>)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d120      	bne.n	80030b6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003074:	4b79      	ldr	r3, [pc, #484]	; (800325c <xTaskIncrementTick+0x210>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <xTaskIncrementTick+0x48>
        __asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	607b      	str	r3, [r7, #4]
    }
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <xTaskIncrementTick+0x46>
 8003094:	4b71      	ldr	r3, [pc, #452]	; (800325c <xTaskIncrementTick+0x210>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	4b71      	ldr	r3, [pc, #452]	; (8003260 <xTaskIncrementTick+0x214>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6f      	ldr	r2, [pc, #444]	; (800325c <xTaskIncrementTick+0x210>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4a6f      	ldr	r2, [pc, #444]	; (8003260 <xTaskIncrementTick+0x214>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b6e      	ldr	r3, [pc, #440]	; (8003264 <xTaskIncrementTick+0x218>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a6d      	ldr	r2, [pc, #436]	; (8003264 <xTaskIncrementTick+0x218>)
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	f000 fbb1 	bl	8003818 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030b6:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <xTaskIncrementTick+0x21c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f0c0 80aa 	bcc.w	8003216 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c2:	4b66      	ldr	r3, [pc, #408]	; (800325c <xTaskIncrementTick+0x210>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030cc:	4b66      	ldr	r3, [pc, #408]	; (8003268 <xTaskIncrementTick+0x21c>)
 80030ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d2:	601a      	str	r2, [r3, #0]
                    break;
 80030d4:	e09f      	b.n	8003216 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d6:	4b61      	ldr	r3, [pc, #388]	; (800325c <xTaskIncrementTick+0x210>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d203      	bcs.n	80030f6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030ee:	4a5e      	ldr	r2, [pc, #376]	; (8003268 <xTaskIncrementTick+0x21c>)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030f4:	e08f      	b.n	8003216 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	68d2      	ldr	r2, [r2, #12]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	3304      	adds	r3, #4
 8003118:	429a      	cmp	r2, r3
 800311a:	d103      	bne.n	8003124 <xTaskIncrementTick+0xd8>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2200      	movs	r2, #0
 8003128:	615a      	str	r2, [r3, #20]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01e      	beq.n	800317a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	6a12      	ldr	r2, [r2, #32]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	69d2      	ldr	r2, [r2, #28]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3318      	adds	r3, #24
 800315e:	429a      	cmp	r2, r3
 8003160:	d103      	bne.n	800316a <xTaskIncrementTick+0x11e>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2200      	movs	r2, #0
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	1e5a      	subs	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4618      	mov	r0, r3
 800317e:	f003 fdb3 	bl	8006ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	2201      	movs	r2, #1
 8003188:	409a      	lsls	r2, r3
 800318a:	4b38      	ldr	r3, [pc, #224]	; (800326c <xTaskIncrementTick+0x220>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	4a36      	ldr	r2, [pc, #216]	; (800326c <xTaskIncrementTick+0x220>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4935      	ldr	r1, [pc, #212]	; (8003270 <xTaskIncrementTick+0x224>)
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3304      	adds	r3, #4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	3204      	adds	r2, #4
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <xTaskIncrementTick+0x224>)
 80031d8:	441a      	add	r2, r3
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	615a      	str	r2, [r3, #20]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	4923      	ldr	r1, [pc, #140]	; (8003270 <xTaskIncrementTick+0x224>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	1c59      	adds	r1, r3, #1
 80031f2:	481f      	ldr	r0, [pc, #124]	; (8003270 <xTaskIncrementTick+0x224>)
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4403      	add	r3, r0
 80031fe:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <xTaskIncrementTick+0x228>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	429a      	cmp	r2, r3
 800320c:	f67f af59 	bls.w	80030c2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003214:	e755      	b.n	80030c2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <xTaskIncrementTick+0x228>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	4914      	ldr	r1, [pc, #80]	; (8003270 <xTaskIncrementTick+0x224>)
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d901      	bls.n	8003232 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800322e:	2301      	movs	r3, #1
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <xTaskIncrementTick+0x22c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800323a:	2301      	movs	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	e004      	b.n	800324a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <xTaskIncrementTick+0x230>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	4a0d      	ldr	r2, [pc, #52]	; (800327c <xTaskIncrementTick+0x230>)
 8003248:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200001c4 	.word	0x200001c4
 8003258:	200001a0 	.word	0x200001a0
 800325c:	20000154 	.word	0x20000154
 8003260:	20000158 	.word	0x20000158
 8003264:	200001b4 	.word	0x200001b4
 8003268:	200001bc 	.word	0x200001bc
 800326c:	200001a4 	.word	0x200001a4
 8003270:	200000c8 	.word	0x200000c8
 8003274:	200000c4 	.word	0x200000c4
 8003278:	200001b0 	.word	0x200001b0
 800327c:	200001ac 	.word	0x200001ac

08003280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003286:	4b2d      	ldr	r3, [pc, #180]	; (800333c <vTaskSwitchContext+0xbc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800328e:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <vTaskSwitchContext+0xc0>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003294:	e04d      	b.n	8003332 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <vTaskSwitchContext+0xc0>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329c:	4b29      	ldr	r3, [pc, #164]	; (8003344 <vTaskSwitchContext+0xc4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	f1c3 031f 	rsb	r3, r3, #31
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	4925      	ldr	r1, [pc, #148]	; (8003348 <vTaskSwitchContext+0xc8>)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <vTaskSwitchContext+0x5c>
        __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	607b      	str	r3, [r7, #4]
    }
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <vTaskSwitchContext+0x5a>
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <vTaskSwitchContext+0xc8>)
 80032e8:	4413      	add	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	3308      	adds	r3, #8
 80032fe:	429a      	cmp	r2, r3
 8003300:	d104      	bne.n	800330c <vTaskSwitchContext+0x8c>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <vTaskSwitchContext+0xcc>)
 8003314:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <vTaskSwitchContext+0xcc>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <vTaskSwitchContext+0xd0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d102      	bne.n	8003328 <vTaskSwitchContext+0xa8>
 8003322:	f003 fc41 	bl	8006ba8 <SEGGER_SYSVIEW_OnIdle>
}
 8003326:	e004      	b.n	8003332 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <vTaskSwitchContext+0xcc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f003 fc99 	bl	8006c64 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200001c4 	.word	0x200001c4
 8003340:	200001b0 	.word	0x200001b0
 8003344:	200001a4 	.word	0x200001a4
 8003348:	200000c8 	.word	0x200000c8
 800334c:	200000c4 	.word	0x200000c4
 8003350:	200001c0 	.word	0x200001c0

08003354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	60fb      	str	r3, [r7, #12]
    }
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <vTaskPlaceOnEventList+0x44>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3318      	adds	r3, #24
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe ffb5 	bl	80022f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003388:	2101      	movs	r1, #1
 800338a:	6838      	ldr	r0, [r7, #0]
 800338c:	f000 fa7e 	bl	800388c <prvAddCurrentTaskToDelayedList>
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200000c4 	.word	0x200000c4

0800339c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	613b      	str	r3, [r7, #16]
    }
 80033c0:	bf00      	nop
 80033c2:	e7fe      	b.n	80033c2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	4b17      	ldr	r3, [pc, #92]	; (8003428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	61da      	str	r2, [r3, #28]
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	621a      	str	r2, [r3, #32]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	3218      	adds	r2, #24
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f103 0218 	add.w	r2, r3, #24
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003410:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003412:	2024      	movs	r0, #36	; 0x24
 8003414:	f002 fec8 	bl	80061a8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f000 fa36 	bl	800388c <prvAddCurrentTaskToDelayedList>
    }
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	200000c4 	.word	0x200000c4

0800342c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	60fb      	str	r3, [r7, #12]
    }
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	6a12      	ldr	r2, [r2, #32]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	69d2      	ldr	r2, [r2, #28]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	3318      	adds	r3, #24
 800347a:	429a      	cmp	r2, r3
 800347c:	d103      	bne.n	8003486 <xTaskRemoveFromEventList+0x5a>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	6a1a      	ldr	r2, [r3, #32]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2200      	movs	r2, #0
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003496:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <xTaskRemoveFromEventList+0x198>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d162      	bne.n	8003564 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	6a3a      	ldr	r2, [r7, #32]
 80034aa:	68d2      	ldr	r2, [r2, #12]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	6a3a      	ldr	r2, [r7, #32]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	3304      	adds	r3, #4
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <xTaskRemoveFromEventList+0xa0>
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 fc02 	bl	8006ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <xTaskRemoveFromEventList+0x19c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <xTaskRemoveFromEventList+0x19c>)
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4934      	ldr	r1, [pc, #208]	; (80035cc <xTaskRemoveFromEventList+0x1a0>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3304      	adds	r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	3204      	adds	r2, #4
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <xTaskRemoveFromEventList+0x1a0>)
 800353a:	441a      	add	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	615a      	str	r2, [r3, #20]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4921      	ldr	r1, [pc, #132]	; (80035cc <xTaskRemoveFromEventList+0x1a0>)
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	481d      	ldr	r0, [pc, #116]	; (80035cc <xTaskRemoveFromEventList+0x1a0>)
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	6019      	str	r1, [r3, #0]
 8003562:	e01b      	b.n	800359c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <xTaskRemoveFromEventList+0x1a4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	61da      	str	r2, [r3, #28]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	621a      	str	r2, [r3, #32]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	6a3a      	ldr	r2, [r7, #32]
 800357e:	3218      	adds	r2, #24
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f103 0218 	add.w	r2, r3, #24
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <xTaskRemoveFromEventList+0x1a4>)
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <xTaskRemoveFromEventList+0x1a4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <xTaskRemoveFromEventList+0x1a4>)
 800359a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <xTaskRemoveFromEventList+0x1a8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d905      	bls.n	80035b6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <xTaskRemoveFromEventList+0x1ac>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e001      	b.n	80035ba <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200001c4 	.word	0x200001c4
 80035c8:	200001a4 	.word	0x200001a4
 80035cc:	200000c8 	.word	0x200000c8
 80035d0:	2000015c 	.word	0x2000015c
 80035d4:	200000c4 	.word	0x200000c4
 80035d8:	200001b0 	.word	0x200001b0

080035dc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <vTaskInternalSetTimeOutState+0x24>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <vTaskInternalSetTimeOutState+0x28>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	605a      	str	r2, [r3, #4]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	200001b4 	.word	0x200001b4
 8003604:	200001a0 	.word	0x200001a0

08003608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	613b      	str	r3, [r7, #16]
    }
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60fb      	str	r3, [r7, #12]
    }
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800364a:	f000 fdd3 	bl	80041f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800364e:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <xTaskCheckForTimeOut+0xc4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003666:	d102      	bne.n	800366e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e026      	b.n	80036bc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <xTaskCheckForTimeOut+0xc8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d00a      	beq.n	8003690 <xTaskCheckForTimeOut+0x88>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d305      	bcc.n	8003690 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e015      	b.n	80036bc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	429a      	cmp	r2, r3
 8003698:	d20b      	bcs.n	80036b2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff98 	bl	80035dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e004      	b.n	80036bc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036bc:	f000 fdca 	bl	8004254 <vPortExitCritical>

    return xReturn;
 80036c0:	69fb      	ldr	r3, [r7, #28]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200001a0 	.word	0x200001a0
 80036d0:	200001b4 	.word	0x200001b4

080036d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <vTaskMissedYield+0x14>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	200001b0 	.word	0x200001b0

080036ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036f4:	f000 f852 	bl	800379c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <prvIdleTask+0x28>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d9f9      	bls.n	80036f4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <prvIdleTask+0x2c>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003710:	e7f0      	b.n	80036f4 <prvIdleTask+0x8>
 8003712:	bf00      	nop
 8003714:	200000c8 	.word	0x200000c8
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	e00c      	b.n	8003742 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <prvInitialiseTaskLists+0x60>)
 8003734:	4413      	add	r3, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fdae 	bl	8002298 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3301      	adds	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d9ef      	bls.n	8003728 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003748:	480d      	ldr	r0, [pc, #52]	; (8003780 <prvInitialiseTaskLists+0x64>)
 800374a:	f7fe fda5 	bl	8002298 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800374e:	480d      	ldr	r0, [pc, #52]	; (8003784 <prvInitialiseTaskLists+0x68>)
 8003750:	f7fe fda2 	bl	8002298 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003754:	480c      	ldr	r0, [pc, #48]	; (8003788 <prvInitialiseTaskLists+0x6c>)
 8003756:	f7fe fd9f 	bl	8002298 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800375a:	480c      	ldr	r0, [pc, #48]	; (800378c <prvInitialiseTaskLists+0x70>)
 800375c:	f7fe fd9c 	bl	8002298 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <prvInitialiseTaskLists+0x74>)
 8003762:	f7fe fd99 	bl	8002298 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <prvInitialiseTaskLists+0x78>)
 8003768:	4a05      	ldr	r2, [pc, #20]	; (8003780 <prvInitialiseTaskLists+0x64>)
 800376a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <prvInitialiseTaskLists+0x7c>)
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <prvInitialiseTaskLists+0x68>)
 8003770:	601a      	str	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200000c8 	.word	0x200000c8
 8003780:	2000012c 	.word	0x2000012c
 8003784:	20000140 	.word	0x20000140
 8003788:	2000015c 	.word	0x2000015c
 800378c:	20000170 	.word	0x20000170
 8003790:	20000188 	.word	0x20000188
 8003794:	20000154 	.word	0x20000154
 8003798:	20000158 	.word	0x20000158

0800379c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037a2:	e019      	b.n	80037d8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037a4:	f000 fd26 	bl	80041f4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <prvCheckTasksWaitingTermination+0x50>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fdd5 	bl	8002364 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <prvCheckTasksWaitingTermination+0x54>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3b01      	subs	r3, #1
 80037c0:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <prvCheckTasksWaitingTermination+0x54>)
 80037c2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <prvCheckTasksWaitingTermination+0x58>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <prvCheckTasksWaitingTermination+0x58>)
 80037cc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80037ce:	f000 fd41 	bl	8004254 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f810 	bl	80037f8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <prvCheckTasksWaitingTermination+0x58>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e1      	bne.n	80037a4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000170 	.word	0x20000170
 80037f0:	2000019c 	.word	0x2000019c
 80037f4:	20000184 	.word	0x20000184

080037f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fedb 	bl	80045c0 <vPortFree>
            vPortFree( pxTCB );
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fed8 	bl	80045c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <prvResetNextTaskUnblockTime+0x30>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <prvResetNextTaskUnblockTime+0x34>)
 8003828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800382c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800382e:	e005      	b.n	800383c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <prvResetNextTaskUnblockTime+0x30>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <prvResetNextTaskUnblockTime+0x34>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000154 	.word	0x20000154
 800384c:	200001bc 	.word	0x200001bc

08003850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <xTaskGetSchedulerState+0x34>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800385e:	2301      	movs	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	e008      	b.n	8003876 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <xTaskGetSchedulerState+0x38>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800386c:	2302      	movs	r3, #2
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	e001      	b.n	8003876 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003876:	687b      	ldr	r3, [r7, #4]
    }
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	200001a8 	.word	0x200001a8
 8003888:	200001c4 	.word	0x200001c4

0800388c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fd5e 	bl	8002364 <uxListRemove>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2201      	movs	r2, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <prvAddCurrentTaskToDelayedList+0xec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4013      	ands	r3, r2
 80038c2:	4a2d      	ldr	r2, [pc, #180]	; (8003978 <prvAddCurrentTaskToDelayedList+0xec>)
 80038c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038cc:	d124      	bne.n	8003918 <prvAddCurrentTaskToDelayedList+0x8c>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d021      	beq.n	8003918 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <prvAddCurrentTaskToDelayedList+0xf0>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	4b21      	ldr	r3, [pc, #132]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	3204      	adds	r2, #4
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1d1a      	adds	r2, r3, #4
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003908:	615a      	str	r2, [r3, #20]
 800390a:	4b1c      	ldr	r3, [pc, #112]	; (800397c <prvAddCurrentTaskToDelayedList+0xf0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a1a      	ldr	r2, [pc, #104]	; (800397c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003916:	e026      	b.n	8003966 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	429a      	cmp	r2, r3
 800392e:	d209      	bcs.n	8003944 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003930:	4b13      	ldr	r3, [pc, #76]	; (8003980 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fe fcd8 	bl	80022f2 <vListInsert>
}
 8003942:	e010      	b.n	8003966 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddCurrentTaskToDelayedList+0xe8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fcce 	bl	80022f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d202      	bcs.n	8003966 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6013      	str	r3, [r2, #0]
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200001a0 	.word	0x200001a0
 8003974:	200000c4 	.word	0x200000c4
 8003978:	200001a4 	.word	0x200001a4
 800397c:	20000188 	.word	0x20000188
 8003980:	20000158 	.word	0x20000158
 8003984:	20000154 	.word	0x20000154
 8003988:	200001bc 	.word	0x200001bc

0800398c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003996:	f000 fa47 	bl	8003e28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <xTimerCreateTimerTask+0x54>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <xTimerCreateTimerTask+0x58>)
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2302      	movs	r3, #2
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039b0:	490d      	ldr	r1, [pc, #52]	; (80039e8 <xTimerCreateTimerTask+0x5c>)
 80039b2:	480e      	ldr	r0, [pc, #56]	; (80039ec <xTimerCreateTimerTask+0x60>)
 80039b4:	f7ff f830 	bl	8002a18 <xTaskCreate>
 80039b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	603b      	str	r3, [r7, #0]
    }
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039d6:	687b      	ldr	r3, [r7, #4]
    }
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	200001f8 	.word	0x200001f8
 80039e4:	200001fc 	.word	0x200001fc
 80039e8:	080071b4 	.word	0x080071b4
 80039ec:	08003a95 	.word	0x08003a95

080039f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80039fc:	e008      	b.n	8003a10 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	18d1      	adds	r1, r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f8dd 	bl	8003bdc <prvInsertTimerInActiveList>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ea      	bne.n	80039fe <prvReloadTimer+0xe>
        }
    }
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <prvProcessExpiredTimer+0x5c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fc89 	bl	8002364 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff ffc3 	bl	80039f0 <prvReloadTimer>
 8003a6a:	e008      	b.n	8003a7e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	4798      	blx	r3
    }
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200001f0 	.word	0x200001f0

08003a94 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a9c:	f107 0308 	add.w	r3, r7, #8
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f857 	bl	8003b54 <prvGetNextExpireTime>
 8003aa6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f803 	bl	8003ab8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ab2:	f000 f8d5 	bl	8003c60 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ab6:	e7f1      	b.n	8003a9c <prvTimerTask+0x8>

08003ab8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ac2:	f7ff f993 	bl	8002dec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f866 	bl	8003b9c <prvSampleTimeNow>
 8003ad0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d130      	bne.n	8003b3a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <prvProcessTimerOrBlockTask+0x3c>
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d806      	bhi.n	8003af4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003ae6:	f7ff f98f 	bl	8002e08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ffa1 	bl	8003a34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003af2:	e024      	b.n	8003b3e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <prvProcessTimerOrBlockTask+0x90>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <prvProcessTimerOrBlockTask+0x50>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <prvProcessTimerOrBlockTask+0x52>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <prvProcessTimerOrBlockTask+0x94>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f7fe ff49 	bl	80029b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b1e:	f7ff f973 	bl	8002e08 <xTaskResumeAll>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <prvProcessTimerOrBlockTask+0x98>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
    }
 8003b38:	e001      	b.n	8003b3e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b3a:	f7ff f965 	bl	8002e08 <xTaskResumeAll>
    }
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200001f4 	.word	0x200001f4
 8003b4c:	200001f8 	.word	0x200001f8
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <prvGetNextExpireTime+0x44>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <prvGetNextExpireTime+0x16>
 8003b66:	2201      	movs	r2, #1
 8003b68:	e000      	b.n	8003b6c <prvGetNextExpireTime+0x18>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <prvGetNextExpireTime+0x44>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e001      	b.n	8003b88 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b88:	68fb      	ldr	r3, [r7, #12]
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200001f0 	.word	0x200001f0

08003b9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ba4:	f7ff fa30 	bl	8003008 <xTaskGetTickCount>
 8003ba8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <prvSampleTimeNow+0x3c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d205      	bcs.n	8003bc0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bb4:	f000 f912 	bl	8003ddc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e002      	b.n	8003bc6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <prvSampleTimeNow+0x3c>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000200 	.word	0x20000200

08003bdc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d812      	bhi.n	8003c28 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d302      	bcc.n	8003c16 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e01b      	b.n	8003c4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <prvInsertTimerInActiveList+0x7c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7fe fb66 	bl	80022f2 <vListInsert>
 8003c26:	e012      	b.n	8003c4e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d206      	bcs.n	8003c3e <prvInsertTimerInActiveList+0x62>
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e007      	b.n	8003c4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <prvInsertTimerInActiveList+0x80>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe fb52 	bl	80022f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c4e:	697b      	ldr	r3, [r7, #20]
    }
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200001f4 	.word	0x200001f4
 8003c5c:	200001f0 	.word	0x200001f0

08003c60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c66:	e0a6      	b.n	8003db6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f2c0 80a3 	blt.w	8003db6 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fb6f 	bl	8002364 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff87 	bl	8003b9c <prvSampleTimeNow>
 8003c8e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	f200 808d 	bhi.w	8003db4 <prvProcessReceivedCommands+0x154>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <prvProcessReceivedCommands+0x40>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003cc5 	.word	0x08003cc5
 8003ca8:	08003d2d 	.word	0x08003d2d
 8003cac:	08003d41 	.word	0x08003d41
 8003cb0:	08003d8b 	.word	0x08003d8b
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cc5 	.word	0x08003cc5
 8003cbc:	08003d2d 	.word	0x08003d2d
 8003cc0:	08003d41 	.word	0x08003d41
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	18d1      	adds	r1, r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	69f8      	ldr	r0, [r7, #28]
 8003ce4:	f7ff ff7a 	bl	8003bdc <prvInsertTimerInActiveList>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d063      	beq.n	8003db6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	4413      	add	r3, r2
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4619      	mov	r1, r3
 8003d08:	69f8      	ldr	r0, [r7, #28]
 8003d0a:	f7ff fe71 	bl	80039f0 <prvReloadTimer>
 8003d0e:	e008      	b.n	8003d22 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	69f8      	ldr	r0, [r7, #28]
 8003d28:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d2a:	e044      	b.n	8003db6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d3e:	e03a      	b.n	8003db6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	617b      	str	r3, [r7, #20]
    }
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	18d1      	adds	r1, r2, r3
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	69f8      	ldr	r0, [r7, #28]
 8003d84:	f7ff ff2a 	bl	8003bdc <prvInsertTimerInActiveList>
                        break;
 8003d88:	e015      	b.n	8003db6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003d98:	69f8      	ldr	r0, [r7, #28]
 8003d9a:	f000 fc11 	bl	80045c0 <vPortFree>
 8003d9e:	e00a      	b.n	8003db6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003db2:	e000      	b.n	8003db6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003db4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <prvProcessReceivedCommands+0x178>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f107 0108 	add.w	r1, r7, #8
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fc01 	bl	80025c8 <xQueueReceive>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f af4d 	bne.w	8003c68 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	200001f8 	.word	0x200001f8

08003ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003de2:	e009      	b.n	8003df8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <prvSwitchTimerLists+0x44>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003dee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003df2:	6838      	ldr	r0, [r7, #0]
 8003df4:	f7ff fe1e 	bl	8003a34 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <prvSwitchTimerLists+0x44>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <prvSwitchTimerLists+0x44>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <prvSwitchTimerLists+0x48>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <prvSwitchTimerLists+0x44>)
 8003e0e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <prvSwitchTimerLists+0x48>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
    }
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200001f0 	.word	0x200001f0
 8003e24:	200001f4 	.word	0x200001f4

08003e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e2c:	f000 f9e2 	bl	80041f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <prvCheckForValidListAndQueue+0x54>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11d      	bne.n	8003e74 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e38:	4811      	ldr	r0, [pc, #68]	; (8003e80 <prvCheckForValidListAndQueue+0x58>)
 8003e3a:	f7fe fa2d 	bl	8002298 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e3e:	4811      	ldr	r0, [pc, #68]	; (8003e84 <prvCheckForValidListAndQueue+0x5c>)
 8003e40:	f7fe fa2a 	bl	8002298 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <prvCheckForValidListAndQueue+0x60>)
 8003e46:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <prvCheckForValidListAndQueue+0x58>)
 8003e48:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <prvCheckForValidListAndQueue+0x64>)
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <prvCheckForValidListAndQueue+0x5c>)
 8003e4e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e50:	2200      	movs	r2, #0
 8003e52:	210c      	movs	r1, #12
 8003e54:	200a      	movs	r0, #10
 8003e56:	f7fe fb3f 	bl	80024d8 <xQueueGenericCreate>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <prvCheckForValidListAndQueue+0x54>)
 8003e5e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <prvCheckForValidListAndQueue+0x54>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <prvCheckForValidListAndQueue+0x54>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4908      	ldr	r1, [pc, #32]	; (8003e90 <prvCheckForValidListAndQueue+0x68>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fd48 	bl	8002904 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e74:	f000 f9ee 	bl	8004254 <vPortExitCritical>
    }
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	200001f8 	.word	0x200001f8
 8003e80:	200001c8 	.word	0x200001c8
 8003e84:	200001dc 	.word	0x200001dc
 8003e88:	200001f0 	.word	0x200001f0
 8003e8c:	200001f4 	.word	0x200001f4
 8003e90:	080071bc 	.word	0x080071bc

08003e94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3b04      	subs	r3, #4
 8003ea4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f023 0201 	bic.w	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b04      	subs	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ec4:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <pxPortInitialiseStack+0x64>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3b14      	subs	r3, #20
 8003ece:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b04      	subs	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f06f 0202 	mvn.w	r2, #2
 8003ee2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b20      	subs	r3, #32
 8003ee8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	08003efd 	.word	0x08003efd

08003efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <prvTaskExitError+0x54>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0e:	d00a      	beq.n	8003f26 <prvTaskExitError+0x2a>
        __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
    }
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <prvTaskExitError+0x28>
        __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
    }
 8003f38:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f3a:	bf00      	nop
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0fc      	beq.n	8003f3c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000010 	.word	0x20000010
	...

08003f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <pxCurrentTCBConst2>)
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	f380 8809 	msr	PSP, r0
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8811 	msr	BASEPRI, r0
 8003f7a:	4770      	bx	lr
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst2>:
 8003f80:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f88:	4808      	ldr	r0, [pc, #32]	; (8003fac <prvPortStartFirstTask+0x24>)
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f380 8808 	msr	MSP, r0
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8814 	msr	CONTROL, r0
 8003f9a:	b662      	cpsie	i
 8003f9c:	b661      	cpsie	f
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	df00      	svc	0
 8003fa8:	bf00      	nop
 8003faa:	0000      	.short	0x0000
 8003fac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop

08003fb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fba:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <xPortStartScheduler+0x120>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <xPortStartScheduler+0x124>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10a      	bne.n	8003fda <xPortStartScheduler+0x26>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	613b      	str	r3, [r7, #16]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <xPortStartScheduler+0x120>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a3f      	ldr	r2, [pc, #252]	; (80040dc <xPortStartScheduler+0x128>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10a      	bne.n	8003ffa <xPortStartScheduler+0x46>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ffa:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <xPortStartScheduler+0x12c>)
 8003ffc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <xPortStartScheduler+0x130>)
 8004020:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004022:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <xPortStartScheduler+0x134>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004028:	e009      	b.n	800403e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <xPortStartScheduler+0x134>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <xPortStartScheduler+0x134>)
 8004032:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d0ef      	beq.n	800402a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <xPortStartScheduler+0x134>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00a      	beq.n	800406c <xPortStartScheduler+0xb8>
        __asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
    }
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <xPortStartScheduler+0x134>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <xPortStartScheduler+0x134>)
 8004074:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <xPortStartScheduler+0x134>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <xPortStartScheduler+0x134>)
 8004080:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <xPortStartScheduler+0x138>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <xPortStartScheduler+0x138>)
 8004090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004094:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <xPortStartScheduler+0x138>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a14      	ldr	r2, [pc, #80]	; (80040ec <xPortStartScheduler+0x138>)
 800409c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040a2:	f000 f963 	bl	800436c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <xPortStartScheduler+0x13c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80040ac:	f000 f982 	bl	80043b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <xPortStartScheduler+0x140>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <xPortStartScheduler+0x140>)
 80040b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040bc:	f7ff ff64 	bl	8003f88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040c0:	f7ff f8de 	bl	8003280 <vTaskSwitchContext>
    prvTaskExitError();
 80040c4:	f7ff ff1a 	bl	8003efc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00
 80040d8:	410fc271 	.word	0x410fc271
 80040dc:	410fc270 	.word	0x410fc270
 80040e0:	e000e400 	.word	0xe000e400
 80040e4:	20000204 	.word	0x20000204
 80040e8:	20000208 	.word	0x20000208
 80040ec:	e000ed20 	.word	0xe000ed20
 80040f0:	20000010 	.word	0x20000010
 80040f4:	e000ef34 	.word	0xe000ef34

080040f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <vInitPrioGroupValue+0xe4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <vInitPrioGroupValue+0xe8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10a      	bne.n	800411e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	613b      	str	r3, [r7, #16]
    }
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800411e:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <vInitPrioGroupValue+0xe4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <vInitPrioGroupValue+0xec>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d10a      	bne.n	800413e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <vInitPrioGroupValue+0xf0>)
 8004140:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <vInitPrioGroupValue+0xf4>)
 8004164:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004168:	2207      	movs	r2, #7
 800416a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416c:	e009      	b.n	8004182 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800416e:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004176:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d0ef      	beq.n	800416e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	d00a      	beq.n	80041b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60bb      	str	r3, [r7, #8]
    }
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000ed00 	.word	0xe000ed00
 80041e0:	410fc271 	.word	0x410fc271
 80041e4:	410fc270 	.word	0x410fc270
 80041e8:	e000e400 	.word	0xe000e400
 80041ec:	20000204 	.word	0x20000204
 80041f0:	20000208 	.word	0x20000208

080041f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
        __asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	607b      	str	r3, [r7, #4]
    }
 800420c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <vPortEnterCritical+0x58>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <vPortEnterCritical+0x58>)
 8004216:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <vPortEnterCritical+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10f      	bne.n	8004240 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <vPortEnterCritical+0x5c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <vPortEnterCritical+0x4c>
        __asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	603b      	str	r3, [r7, #0]
    }
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vPortEnterCritical+0x4a>
    }
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000010 	.word	0x20000010
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vPortExitCritical+0x50>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <vPortExitCritical+0x24>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <vPortExitCritical+0x50>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <vPortExitCritical+0x50>)
 8004280:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <vPortExitCritical+0x50>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <vPortExitCritical+0x42>
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004294:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000010 	.word	0x20000010
	...

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f01e 0f10 	tst.w	lr, #16
 80042c0:	bf08      	it	eq
 80042c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	6010      	str	r0, [r2, #0]
 80042cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042d4:	f380 8811 	msr	BASEPRI, r0
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f7fe ffce 	bl	8003280 <vTaskSwitchContext>
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f380 8811 	msr	BASEPRI, r0
 80042ec:	bc09      	pop	{r0, r3}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f6:	f01e 0f10 	tst.w	lr, #16
 80042fa:	bf08      	it	eq
 80042fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004300:	f380 8809 	msr	PSP, r0
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst>:
 8004310:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
        __asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
    }
 8004330:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004332:	f002 fbbf 	bl	8006ab4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004336:	f7fe fe89 	bl	800304c <xTaskIncrementTick>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004340:	f002 fc16 	bl	8006b70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004344:	4b08      	ldr	r3, [pc, #32]	; (8004368 <SysTick_Handler+0x50>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e001      	b.n	8004352 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800434e:	f002 fbf3 	bl	8006b38 <SEGGER_SYSVIEW_RecordExitISR>
 8004352:	2300      	movs	r3, #0
 8004354:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f383 8811 	msr	BASEPRI, r3
    }
 800435c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <vPortSetupTimerInterrupt+0x38>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <vPortSetupTimerInterrupt+0x3c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <vPortSetupTimerInterrupt+0x40>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <vPortSetupTimerInterrupt+0x44>)
 800438a:	3b01      	subs	r3, #1
 800438c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010
 80043a4:	e000e018 	.word	0xe000e018
 80043a8:	20000000 	.word	0x20000000
 80043ac:	10624dd3 	.word	0x10624dd3
 80043b0:	e000e014 	.word	0xe000e014

080043b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80043b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043c4 <vPortEnableVFP+0x10>
 80043b8:	6801      	ldr	r1, [r0, #0]
 80043ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043be:	6001      	str	r1, [r0, #0]
 80043c0:	4770      	bx	lr
 80043c2:	0000      	.short	0x0000
 80043c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop

080043cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80043d2:	f3ef 8305 	mrs	r3, IPSR
 80043d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d914      	bls.n	8004408 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <vPortValidateInterruptPriority+0x70>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <vPortValidateInterruptPriority+0x74>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	7afa      	ldrb	r2, [r7, #11]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20a      	bcs.n	8004408 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	607b      	str	r3, [r7, #4]
    }
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004408:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <vPortValidateInterruptPriority+0x78>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <vPortValidateInterruptPriority+0x7c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d90a      	bls.n	800442e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	603b      	str	r3, [r7, #0]
    }
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vPortValidateInterruptPriority+0x60>
    }
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	e000e3f0 	.word	0xe000e3f0
 8004440:	20000204 	.word	0x20000204
 8004444:	e000ed0c 	.word	0xe000ed0c
 8004448:	20000208 	.word	0x20000208

0800444c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004458:	f7fe fcc8 	bl	8002dec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <pvPortMalloc+0x160>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004464:	f000 f908 	bl	8004678 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d012      	beq.n	8004494 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800446e:	2208      	movs	r2, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	3308      	adds	r3, #8
 800447a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	43db      	mvns	r3, r3
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d804      	bhi.n	8004490 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	4413      	add	r3, r2
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e001      	b.n	8004494 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	db70      	blt.n	800457c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d06d      	beq.n	800457c <pvPortMalloc+0x130>
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <pvPortMalloc+0x164>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d868      	bhi.n	800457c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80044aa:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <pvPortMalloc+0x168>)
 80044ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <pvPortMalloc+0x168>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b4:	e004      	b.n	80044c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <pvPortMalloc+0x86>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f1      	bne.n	80044b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80044d2:	4b36      	ldr	r3, [pc, #216]	; (80045ac <pvPortMalloc+0x160>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	429a      	cmp	r2, r3
 80044da:	d04f      	beq.n	800457c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	4413      	add	r3, r2
 80044e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	2308      	movs	r3, #8
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d91f      	bls.n	800453e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <pvPortMalloc+0xda>
        __asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
    }
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004538:	6978      	ldr	r0, [r7, #20]
 800453a:	f000 f8f9 	bl	8004730 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <pvPortMalloc+0x164>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <pvPortMalloc+0x164>)
 800454a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800454c:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <pvPortMalloc+0x164>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <pvPortMalloc+0x16c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d203      	bcs.n	8004560 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <pvPortMalloc+0x164>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <pvPortMalloc+0x16c>)
 800455e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <pvPortMalloc+0x170>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a10      	ldr	r2, [pc, #64]	; (80045bc <pvPortMalloc+0x170>)
 800457a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800457c:	f7fe fc44 	bl	8002e08 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <pvPortMalloc+0x154>
        __asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	60fb      	str	r3, [r7, #12]
    }
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <pvPortMalloc+0x152>
    return pvReturn;
 80045a0:	69fb      	ldr	r3, [r7, #28]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3728      	adds	r7, #40	; 0x28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20012e14 	.word	0x20012e14
 80045b0:	20012e18 	.word	0x20012e18
 80045b4:	20012e0c 	.word	0x20012e0c
 80045b8:	20012e1c 	.word	0x20012e1c
 80045bc:	20012e20 	.word	0x20012e20

080045c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d049      	beq.n	8004666 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80045d2:	2308      	movs	r3, #8
 80045d4:	425b      	negs	r3, r3
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4413      	add	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	db0a      	blt.n	80045fe <vPortFree+0x3e>
        __asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	60fb      	str	r3, [r7, #12]
    }
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <vPortFree+0x5c>
        __asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60bb      	str	r3, [r7, #8]
    }
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0fdb      	lsrs	r3, r3, #31
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01c      	beq.n	8004666 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d118      	bne.n	8004666 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004640:	f7fe fbd4 	bl	8002dec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <vPortFree+0xb0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4413      	add	r3, r2
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <vPortFree+0xb0>)
 8004650:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004652:	6938      	ldr	r0, [r7, #16]
 8004654:	f000 f86c 	bl	8004730 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <vPortFree+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <vPortFree+0xb4>)
 8004660:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004662:	f7fe fbd1 	bl	8002e08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20012e18 	.word	0x20012e18
 8004674:	20012e24 	.word	0x20012e24

08004678 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800467e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004682:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004684:	4b25      	ldr	r3, [pc, #148]	; (800471c <prvHeapInit+0xa4>)
 8004686:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <prvHeapInit+0xa4>)
 80046a8:	4413      	add	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <prvHeapInit+0xa8>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <prvHeapInit+0xa8>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80046c4:	2208      	movs	r2, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a13      	ldr	r2, [pc, #76]	; (8004724 <prvHeapInit+0xac>)
 80046d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <prvHeapInit+0xac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <prvHeapInit+0xac>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <prvHeapInit+0xac>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a08      	ldr	r2, [pc, #32]	; (8004728 <prvHeapInit+0xb0>)
 8004706:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a07      	ldr	r2, [pc, #28]	; (800472c <prvHeapInit+0xb4>)
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	2000020c 	.word	0x2000020c
 8004720:	20012e0c 	.word	0x20012e0c
 8004724:	20012e14 	.word	0x20012e14
 8004728:	20012e1c 	.word	0x20012e1c
 800472c:	20012e18 	.word	0x20012e18

08004730 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <prvInsertBlockIntoFreeList+0xac>)
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e002      	b.n	8004744 <prvInsertBlockIntoFreeList+0x14>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d8f7      	bhi.n	800473e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4413      	add	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d108      	bne.n	8004772 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	441a      	add	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d118      	bne.n	80047b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <prvInsertBlockIntoFreeList+0xb0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d00d      	beq.n	80047ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e008      	b.n	80047c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <prvInsertBlockIntoFreeList+0xb0>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e003      	b.n	80047c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d002      	beq.n	80047ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20012e0c 	.word	0x20012e0c
 80047e0:	20012e14 	.word	0x20012e14

080047e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80047e8:	4803      	ldr	r0, [pc, #12]	; (80047f8 <_cbSendSystemDesc+0x14>)
 80047ea:	f002 f90d 	bl	8006a08 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80047ee:	4803      	ldr	r0, [pc, #12]	; (80047fc <_cbSendSystemDesc+0x18>)
 80047f0:	f002 f90a 	bl	8006a08 <SEGGER_SYSVIEW_SendSysDesc>
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	080071c4 	.word	0x080071c4
 80047fc:	08007208 	.word	0x08007208

08004800 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <SEGGER_SYSVIEW_Conf+0x20>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <SEGGER_SYSVIEW_Conf+0x20>)
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <SEGGER_SYSVIEW_Conf+0x24>)
 800480e:	4a06      	ldr	r2, [pc, #24]	; (8004828 <SEGGER_SYSVIEW_Conf+0x28>)
 8004810:	f001 fc76 	bl	8006100 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004814:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004818:	f001 fcb6 	bl	8006188 <SEGGER_SYSVIEW_SetRAMBase>
}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000000 	.word	0x20000000
 8004824:	080047e5 	.word	0x080047e5
 8004828:	080072a4 	.word	0x080072a4

0800482c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800482c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	e033      	b.n	80048a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004838:	491e      	ldr	r1, [pc, #120]	; (80048b4 <_cbSendTaskList+0x88>)
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	491a      	ldr	r1, [pc, #104]	; (80048b4 <_cbSendTaskList+0x88>)
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3304      	adds	r3, #4
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	4c16      	ldr	r4, [pc, #88]	; (80048b4 <_cbSendTaskList+0x88>)
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4423      	add	r3, r4
 8004868:	3308      	adds	r3, #8
 800486a:	681c      	ldr	r4, [r3, #0]
 800486c:	4d11      	ldr	r5, [pc, #68]	; (80048b4 <_cbSendTaskList+0x88>)
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	442b      	add	r3, r5
 800487a:	330c      	adds	r3, #12
 800487c:	681d      	ldr	r5, [r3, #0]
 800487e:	4e0d      	ldr	r6, [pc, #52]	; (80048b4 <_cbSendTaskList+0x88>)
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4433      	add	r3, r6
 800488c:	3310      	adds	r3, #16
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	462b      	mov	r3, r5
 8004894:	4622      	mov	r2, r4
 8004896:	f000 f8bd 	bl	8004a14 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3301      	adds	r3, #1
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_cbSendTaskList+0x8c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d3c6      	bcc.n	8004838 <_cbSendTaskList+0xc>
  }
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b4:	20012e28 	.word	0x20012e28
 80048b8:	20012ec8 	.word	0x20012ec8

080048bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80048c4:	f7fe fbb0 	bl	8003028 <xTaskGetTickCountFromISR>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2200      	movs	r2, #0
 80048cc:	469a      	mov	sl, r3
 80048ce:	4693      	mov	fp, r2
 80048d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80048d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	f04f 0a00 	mov.w	sl, #0
 80048e0:	f04f 0b00 	mov.w	fp, #0
 80048e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80048e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80048ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80048f0:	4652      	mov	r2, sl
 80048f2:	465b      	mov	r3, fp
 80048f4:	1a14      	subs	r4, r2, r0
 80048f6:	eb63 0501 	sbc.w	r5, r3, r1
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	00ab      	lsls	r3, r5, #2
 8004904:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004908:	00a2      	lsls	r2, r4, #2
 800490a:	4614      	mov	r4, r2
 800490c:	461d      	mov	r5, r3
 800490e:	eb14 0800 	adds.w	r8, r4, r0
 8004912:	eb45 0901 	adc.w	r9, r5, r1
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492a:	4690      	mov	r8, r2
 800492c:	4699      	mov	r9, r3
 800492e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004932:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004944 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004952:	2205      	movs	r2, #5
 8004954:	492b      	ldr	r1, [pc, #172]	; (8004a04 <SYSVIEW_AddTask+0xc0>)
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f002 fb9c 	bl	8007094 <memcmp>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04b      	beq.n	80049fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b07      	cmp	r3, #7
 8004968:	d903      	bls.n	8004972 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800496a:	4828      	ldr	r0, [pc, #160]	; (8004a0c <SYSVIEW_AddTask+0xc8>)
 800496c:	f002 fb08 	bl	8006f80 <SEGGER_SYSVIEW_Warn>
    return;
 8004970:	e044      	b.n	80049fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004972:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4926      	ldr	r1, [pc, #152]	; (8004a10 <SYSVIEW_AddTask+0xcc>)
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4921      	ldr	r1, [pc, #132]	; (8004a10 <SYSVIEW_AddTask+0xcc>)
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	3304      	adds	r3, #4
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	491b      	ldr	r1, [pc, #108]	; (8004a10 <SYSVIEW_AddTask+0xcc>)
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	3308      	adds	r3, #8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4916      	ldr	r1, [pc, #88]	; (8004a10 <SYSVIEW_AddTask+0xcc>)
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	330c      	adds	r3, #12
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4910      	ldr	r1, [pc, #64]	; (8004a10 <SYSVIEW_AddTask+0xcc>)
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	3310      	adds	r3, #16
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <SYSVIEW_AddTask+0xc4>)
 80049e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f80e 	bl	8004a14 <SYSVIEW_SendTaskInfo>
 80049f8:	e000      	b.n	80049fc <SYSVIEW_AddTask+0xb8>
    return;
 80049fa:	bf00      	nop

}
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	08007218 	.word	0x08007218
 8004a08:	20012ec8 	.word	0x20012ec8
 8004a0c:	08007220 	.word	0x08007220
 8004a10:	20012e28 	.word	0x20012e28

08004a14 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	2214      	movs	r2, #20
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f002 fb42 	bl	80070b4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fee5 	bl	8006818 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004a4e:	bf00      	nop
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <__NVIC_EnableIRQ>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db0b      	blt.n	8004a82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	f003 021f 	and.w	r2, r3, #31
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <__NVIC_EnableIRQ+0x38>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2001      	movs	r0, #1
 8004a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e100 	.word	0xe000e100

08004a94 <__NVIC_SetPriority>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db0a      	blt.n	8004abe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	490c      	ldr	r1, [pc, #48]	; (8004ae0 <__NVIC_SetPriority+0x4c>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004abc:	e00a      	b.n	8004ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4908      	ldr	r1, [pc, #32]	; (8004ae4 <__NVIC_SetPriority+0x50>)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	3b04      	subs	r3, #4
 8004acc:	0112      	lsls	r2, r2, #4
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	761a      	strb	r2, [r3, #24]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000e100 	.word	0xe000e100
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004aee:	f002 faa3 	bl	8007038 <SEGGER_SYSVIEW_IsStarted>
 8004af2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004afa:	f001 fd11 	bl	8006520 <SEGGER_SYSVIEW_Start>
  }
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <_cbOnUARTRx+0x3c>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d806      	bhi.n	8004b28 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <_cbOnUARTRx+0x3c>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <_cbOnUARTRx+0x3c>)
 8004b24:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004b26:	e009      	b.n	8004b3c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004b28:	f7ff ffde 	bl	8004ae8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <_cbOnUARTRx+0x3c>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	1dfb      	adds	r3, r7, #7
 8004b34:	2201      	movs	r2, #1
 8004b36:	4619      	mov	r1, r3
 8004b38:	f000 fb9c 	bl	8005274 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004b3c:	bf00      	nop
}
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000014 	.word	0x20000014

08004b48 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <_cbOnUARTTx+0x5c>)
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d80f      	bhi.n	8004b78 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <_cbOnUARTTx+0x5c>)
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <_cbOnUARTTx+0x60>)
 8004b60:	5c9a      	ldrb	r2, [r3, r2]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004b66:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <_cbOnUARTTx+0x5c>)
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <_cbOnUARTTx+0x5c>)
 8004b70:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004b76:	e00f      	b.n	8004b98 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <_cbOnUARTTx+0x5c>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fa1b 	bl	8004fbc <SEGGER_RTT_ReadUpBufferNoLock>
 8004b86:	4603      	mov	r3, r0
 8004b88:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da02      	bge.n	8004b96 <_cbOnUARTTx+0x4e>
    r = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e000      	b.n	8004b98 <_cbOnUARTTx+0x50>
  }
Done:
 8004b96:	bf00      	nop
  return r;
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000014 	.word	0x20000014
 8004ba8:	080072ac 	.word	0x080072ac

08004bac <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <SEGGER_UART_init+0x1c>)
 8004bb6:	4905      	ldr	r1, [pc, #20]	; (8004bcc <SEGGER_UART_init+0x20>)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f863 	bl	8004c84 <HIF_UART_Init>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08004b09 	.word	0x08004b09
 8004bcc:	08004b49 	.word	0x08004b49

08004bd0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <USART2_IRQHandler+0x80>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d011      	beq.n	8004c0a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <USART2_IRQHandler+0x84>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 030b 	and.w	r3, r3, #11
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d108      	bne.n	8004c0a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004bf8:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <USART2_IRQHandler+0x88>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004c00:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <USART2_IRQHandler+0x88>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	79fa      	ldrb	r2, [r7, #7]
 8004c06:	4610      	mov	r0, r2
 8004c08:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004c14:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <USART2_IRQHandler+0x8c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d015      	beq.n	8004c48 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <USART2_IRQHandler+0x8c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1dfa      	adds	r2, r7, #7
 8004c22:	4610      	mov	r0, r2
 8004c24:	4798      	blx	r3
 8004c26:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <USART2_IRQHandler+0x90>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <USART2_IRQHandler+0x90>)
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e006      	b.n	8004c4a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <USART2_IRQHandler+0x80>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004c40:	79fa      	ldrb	r2, [r7, #7]
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <USART2_IRQHandler+0x84>)
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e000      	b.n	8004c4a <USART2_IRQHandler+0x7a>
      return;
 8004c48:	bf00      	nop
    }
  }
}
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40004400 	.word	0x40004400
 8004c54:	40004404 	.word	0x40004404
 8004c58:	20012ecc 	.word	0x20012ecc
 8004c5c:	20012ed0 	.word	0x20012ed0
 8004c60:	4000440c 	.word	0x4000440c

08004c64 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c72:	6013      	str	r3, [r2, #0]
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	4000440c 	.word	0x4000440c

08004c84 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HIF_UART_Init+0xc8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2d      	ldr	r2, [pc, #180]	; (8004d4c <HIF_UART_Init+0xc8>)
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <HIF_UART_Init+0xcc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	; (8004d50 <HIF_UART_Init+0xcc>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HIF_UART_Init+0xd0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004cbc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004cbe:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <HIF_UART_Init+0xd0>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HIF_UART_Init+0xd4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004cd8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004cda:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HIF_UART_Init+0xd4>)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HIF_UART_Init+0xd8>)
 8004ce2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004ce6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HIF_UART_Init+0xdc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HIF_UART_Init+0xe0>)
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HIF_UART_Init+0xe4>)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	3301      	adds	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	d302      	bcc.n	8004d1a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004d14:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004d18:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <HIF_UART_Init+0xe8>)
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004d2a:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <HIF_UART_Init+0xec>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004d30:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HIF_UART_Init+0xf0>)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004d36:	2106      	movs	r1, #6
 8004d38:	2026      	movs	r0, #38	; 0x26
 8004d3a:	f7ff feab 	bl	8004a94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004d3e:	2026      	movs	r0, #38	; 0x26
 8004d40:	f7ff fe8a 	bl	8004a58 <__NVIC_EnableIRQ>
}
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40023840 	.word	0x40023840
 8004d50:	40023830 	.word	0x40023830
 8004d54:	40020020 	.word	0x40020020
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	4000440c 	.word	0x4000440c
 8004d60:	40004410 	.word	0x40004410
 8004d64:	40004414 	.word	0x40004414
 8004d68:	0501bd00 	.word	0x0501bd00
 8004d6c:	40004408 	.word	0x40004408
 8004d70:	20012ecc 	.word	0x20012ecc
 8004d74:	20012ed0 	.word	0x20012ed0

08004d78 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d7e:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <_DoInit+0xa0>)
 8004d80:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d82:	22a8      	movs	r2, #168	; 0xa8
 8004d84:	2100      	movs	r1, #0
 8004d86:	6838      	ldr	r0, [r7, #0]
 8004d88:	f002 f994 	bl	80070b4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2203      	movs	r2, #3
 8004d96:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <_DoInit+0xa4>)
 8004d9c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <_DoInit+0xa8>)
 8004da2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004daa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <_DoInit+0xa4>)
 8004dc2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <_DoInit+0xac>)
 8004dc8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2200      	movs	r2, #0
 8004de0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004de2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	e00c      	b.n	8004e06 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1c3 030f 	rsb	r3, r3, #15
 8004df2:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <_DoInit+0xb0>)
 8004df4:	5cd1      	ldrb	r1, [r2, r3]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3301      	adds	r3, #1
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d9ef      	bls.n	8004dec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e0c:	f3bf 8f5f 	dmb	sy
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20012ed4 	.word	0x20012ed4
 8004e1c:	08007270 	.word	0x08007270
 8004e20:	20012f7c 	.word	0x20012f7c
 8004e24:	2001337c 	.word	0x2001337c
 8004e28:	080072b0 	.word	0x080072b0

08004e2c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d905      	bls.n	8004e5c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	e007      	b.n	8004e6c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	1acb      	subs	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bf28      	it	cs
 8004e7a:	4613      	movcs	r3, r2
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bf28      	it	cs
 8004e86:	4613      	movcs	r3, r2
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	f002 f937 	bl	800710c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	4413      	add	r3, r2
 8004ea4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	4413      	add	r3, r2
 8004eac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	4413      	add	r3, r2
 8004ebc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d101      	bne.n	8004ecc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ecc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1b2      	bne.n	8004e42 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	; 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b088      	sub	sp, #32
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d911      	bls.n	8004f2e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	6938      	ldr	r0, [r7, #16]
 8004f1a:	f002 f8f7 	bl	800710c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f1e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f2c:	e01f      	b.n	8004f6e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	6938      	ldr	r0, [r7, #16]
 8004f42:	f002 f8e3 	bl	800710c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	4413      	add	r3, r2
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6938      	ldr	r0, [r7, #16]
 8004f60:	f002 f8d4 	bl	800710c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f64:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	60da      	str	r2, [r3, #12]
}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d808      	bhi.n	8004fa4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e004      	b.n	8004fae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004fae:	697b      	ldr	r3, [r7, #20]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08c      	sub	sp, #48	; 0x30
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004fc8:	4b3e      	ldr	r3, [pc, #248]	; (80050c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b53      	cmp	r3, #83	; 0x53
 8004fd4:	d001      	beq.n	8004fda <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004fd6:	f7ff fecf 	bl	8004d78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4a37      	ldr	r2, [pc, #220]	; (80050c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	429a      	cmp	r2, r3
 8005006:	d92b      	bls.n	8005060 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4293      	cmp	r3, r2
 8005018:	bf28      	it	cs
 800501a:	4613      	movcs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	4413      	add	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502e:	f002 f86d 	bl	800710c <memcpy>
    NumBytesRead += NumBytesRem;
 8005032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4413      	add	r3, r2
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800503a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800504a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005058:	429a      	cmp	r2, r3
 800505a:	d101      	bne.n	8005060 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800505c:	2300      	movs	r3, #0
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4293      	cmp	r3, r2
 800506e:	bf28      	it	cs
 8005070:	4613      	movcs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d019      	beq.n	80050ae <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	4413      	add	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	6939      	ldr	r1, [r7, #16]
 8005088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508a:	f002 f83f 	bl	800710c <memcpy>
    NumBytesRead += NumBytesRem;
 800508e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4413      	add	r3, r2
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3730      	adds	r7, #48	; 0x30
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20012ed4 	.word	0x20012ed4

080050c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050d4:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b53      	cmp	r3, #83	; 0x53
 80050e0:	d001      	beq.n	80050e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80050e2:	f7ff fe49 	bl	8004d78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	3360      	adds	r3, #96	; 0x60
 80050f2:	4a37      	ldr	r2, [pc, #220]	; (80051d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050f4:	4413      	add	r3, r2
 80050f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	d92b      	bls.n	800516c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4293      	cmp	r3, r2
 8005124:	bf28      	it	cs
 8005126:	4613      	movcs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	4413      	add	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513a:	f001 ffe7 	bl	800710c <memcpy>
    NumBytesRead += NumBytesRem;
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005164:	429a      	cmp	r2, r3
 8005166:	d101      	bne.n	800516c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005168:	2300      	movs	r3, #0
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4293      	cmp	r3, r2
 800517a:	bf28      	it	cs
 800517c:	4613      	movcs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d019      	beq.n	80051ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	4413      	add	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	6939      	ldr	r1, [r7, #16]
 8005194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005196:	f001 ffb9 	bl	800710c <memcpy>
    NumBytesRead += NumBytesRem;
 800519a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	4413      	add	r3, r2
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3730      	adds	r7, #48	; 0x30
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20012ed4 	.word	0x20012ed4

080051d4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	3360      	adds	r3, #96	; 0x60
 80051f0:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80051f2:	4413      	add	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d029      	beq.n	8005252 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d82e      	bhi.n	8005260 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005206:	2b01      	cmp	r3, #1
 8005208:	d013      	beq.n	8005232 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800520a:	e029      	b.n	8005260 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800520c:	6978      	ldr	r0, [r7, #20]
 800520e:	f7ff feb2 	bl	8004f76 <_GetAvailWriteSpace>
 8005212:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d202      	bcs.n	8005222 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005220:	e021      	b.n	8005266 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	69b9      	ldr	r1, [r7, #24]
 800522a:	6978      	ldr	r0, [r7, #20]
 800522c:	f7ff fe5b 	bl	8004ee6 <_WriteNoCheck>
    break;
 8005230:	e019      	b.n	8005266 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff fe9f 	bl	8004f76 <_GetAvailWriteSpace>
 8005238:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4293      	cmp	r3, r2
 8005240:	bf28      	it	cs
 8005242:	4613      	movcs	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7ff fe4b 	bl	8004ee6 <_WriteNoCheck>
    break;
 8005250:	e009      	b.n	8005266 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	69b9      	ldr	r1, [r7, #24]
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f7ff fde8 	bl	8004e2c <_WriteBlocking>
 800525c:	61f8      	str	r0, [r7, #28]
    break;
 800525e:	e002      	b.n	8005266 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
    break;
 8005264:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005266:	69fb      	ldr	r3, [r7, #28]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20012ed4 	.word	0x20012ed4

08005274 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005280:	4b0e      	ldr	r3, [pc, #56]	; (80052bc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b53      	cmp	r3, #83	; 0x53
 800528c:	d001      	beq.n	8005292 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800528e:	f7ff fd73 	bl	8004d78 <_DoInit>
  SEGGER_RTT_LOCK();
 8005292:	f3ef 8311 	mrs	r3, BASEPRI
 8005296:	f04f 0120 	mov.w	r1, #32
 800529a:	f381 8811 	msr	BASEPRI, r1
 800529e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff ff95 	bl	80051d4 <SEGGER_RTT_WriteDownBufferNoLock>
 80052aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80052b2:	697b      	ldr	r3, [r7, #20]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20012ed4 	.word	0x20012ed4

080052c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052ce:	4b3d      	ldr	r3, [pc, #244]	; (80053c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b53      	cmp	r3, #83	; 0x53
 80052da:	d001      	beq.n	80052e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052dc:	f7ff fd4c 	bl	8004d78 <_DoInit>
  SEGGER_RTT_LOCK();
 80052e0:	f3ef 8311 	mrs	r3, BASEPRI
 80052e4:	f04f 0120 	mov.w	r1, #32
 80052e8:	f381 8811 	msr	BASEPRI, r1
 80052ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ee:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	4613      	mov	r3, r2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	4413      	add	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	440b      	add	r3, r1
 8005306:	3304      	adds	r3, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3301      	adds	r3, #1
 8005312:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	429a      	cmp	r2, r3
 800531c:	dbeb      	blt.n	80052f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800531e:	e000      	b.n	8005322 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005320:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	429a      	cmp	r2, r3
 800532a:	da3f      	bge.n	80053ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005340:	6939      	ldr	r1, [r7, #16]
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	4613      	mov	r3, r2
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4413      	add	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	440b      	add	r3, r1
 8005350:	3304      	adds	r3, #4
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005356:	6939      	ldr	r1, [r7, #16]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	4613      	mov	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	440b      	add	r3, r1
 8005364:	3320      	adds	r3, #32
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800536a:	6939      	ldr	r1, [r7, #16]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	3328      	adds	r3, #40	; 0x28
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800537e:	6939      	ldr	r1, [r7, #16]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	3324      	adds	r3, #36	; 0x24
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	440b      	add	r3, r1
 80053a0:	332c      	adds	r3, #44	; 0x2c
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053a6:	f3bf 8f5f 	dmb	sy
 80053aa:	e002      	b.n	80053b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80053b8:	69fb      	ldr	r3, [r7, #28]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20012ed4 	.word	0x20012ed4

080053c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053d8:	623b      	str	r3, [r7, #32]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b53      	cmp	r3, #83	; 0x53
 80053e2:	d001      	beq.n	80053e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053e4:	f7ff fcc8 	bl	8004d78 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053ea:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d82c      	bhi.n	800544c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053f2:	f3ef 8311 	mrs	r3, BASEPRI
 80053f6:	f04f 0120 	mov.w	r1, #32
 80053fa:	f381 8811 	msr	BASEPRI, r1
 80053fe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4613      	mov	r3, r2
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	3360      	adds	r3, #96	; 0x60
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00e      	beq.n	8005436 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800543c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	e002      	b.n	8005452 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800544c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005454:	4618      	mov	r0, r3
 8005456:	3728      	adds	r7, #40	; 0x28
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20012ed4 	.word	0x20012ed4

08005460 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	60fa      	str	r2, [r7, #12]
 8005476:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d90a      	bls.n	8005494 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005482:	e007      	b.n	8005494 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	1c53      	adds	r3, r2, #1
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1c59      	adds	r1, r3, #1
 800548e:	60f9      	str	r1, [r7, #12]
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	1e5a      	subs	r2, r3, #1
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <_EncodeStr+0x46>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1ee      	bne.n	8005484 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3307      	adds	r3, #7
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <_HandleIncomingPacket+0xd8>)
 80054e0:	7e1b      	ldrb	r3, [r3, #24]
 80054e2:	4618      	mov	r0, r3
 80054e4:	1cfb      	adds	r3, r7, #3
 80054e6:	2201      	movs	r2, #1
 80054e8:	4619      	mov	r1, r3
 80054ea:	f7ff fded 	bl	80050c8 <SEGGER_RTT_ReadNoLock>
 80054ee:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d057      	beq.n	80055a6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d031      	beq.n	8005560 <_HandleIncomingPacket+0x88>
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	dc40      	bgt.n	8005582 <_HandleIncomingPacket+0xaa>
 8005500:	2b07      	cmp	r3, #7
 8005502:	dc15      	bgt.n	8005530 <_HandleIncomingPacket+0x58>
 8005504:	2b00      	cmp	r3, #0
 8005506:	dd3c      	ble.n	8005582 <_HandleIncomingPacket+0xaa>
 8005508:	3b01      	subs	r3, #1
 800550a:	2b06      	cmp	r3, #6
 800550c:	d839      	bhi.n	8005582 <_HandleIncomingPacket+0xaa>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <_HandleIncomingPacket+0x3c>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005537 	.word	0x08005537
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005543 	.word	0x08005543
 8005520:	08005549 	.word	0x08005549
 8005524:	0800554f 	.word	0x0800554f
 8005528:	08005555 	.word	0x08005555
 800552c:	0800555b 	.word	0x0800555b
 8005530:	2b7f      	cmp	r3, #127	; 0x7f
 8005532:	d033      	beq.n	800559c <_HandleIncomingPacket+0xc4>
 8005534:	e025      	b.n	8005582 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005536:	f000 fff3 	bl	8006520 <SEGGER_SYSVIEW_Start>
      break;
 800553a:	e034      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800553c:	f001 f8ac 	bl	8006698 <SEGGER_SYSVIEW_Stop>
      break;
 8005540:	e031      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005542:	f001 fa85 	bl	8006a50 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005546:	e02e      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005548:	f001 fa4a 	bl	80069e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800554c:	e02b      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800554e:	f001 f8c9 	bl	80066e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005552:	e028      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005554:	f001 fcc2 	bl	8006edc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005558:	e025      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800555a:	f001 fca1 	bl	8006ea0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800555e:	e022      	b.n	80055a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005560:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <_HandleIncomingPacket+0xd8>)
 8005562:	7e1b      	ldrb	r3, [r3, #24]
 8005564:	4618      	mov	r0, r3
 8005566:	1cfb      	adds	r3, r7, #3
 8005568:	2201      	movs	r2, #1
 800556a:	4619      	mov	r1, r3
 800556c:	f7ff fdac 	bl	80050c8 <SEGGER_RTT_ReadNoLock>
 8005570:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	4618      	mov	r0, r3
 800557c:	f001 fc06 	bl	8006d8c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005580:	e00e      	b.n	80055a0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	b25b      	sxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	da0c      	bge.n	80055a4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <_HandleIncomingPacket+0xd8>)
 800558c:	7e1b      	ldrb	r3, [r3, #24]
 800558e:	4618      	mov	r0, r3
 8005590:	1cfb      	adds	r3, r7, #3
 8005592:	2201      	movs	r2, #1
 8005594:	4619      	mov	r1, r3
 8005596:	f7ff fd97 	bl	80050c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800559a:	e003      	b.n	80055a4 <_HandleIncomingPacket+0xcc>
      break;
 800559c:	bf00      	nop
 800559e:	e002      	b.n	80055a6 <_HandleIncomingPacket+0xce>
      break;
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <_HandleIncomingPacket+0xce>
      break;
 80055a4:	bf00      	nop
    }
  }
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20014394 	.word	0x20014394

080055b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055ba:	2301      	movs	r3, #1
 80055bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	3301      	adds	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c8:	4b32      	ldr	r3, [pc, #200]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ce:	e00b      	b.n	80055e8 <_TrySendOverflowPacket+0x34>
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	2b7f      	cmp	r3, #127	; 0x7f
 80055ec:	d8f0      	bhi.n	80055d0 <_TrySendOverflowPacket+0x1c>
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055fe:	4b26      	ldr	r3, [pc, #152]	; (8005698 <_TrySendOverflowPacket+0xe4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005604:	4b23      	ldr	r3, [pc, #140]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	e00b      	b.n	8005630 <_TrySendOverflowPacket+0x7c>
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	6279      	str	r1, [r7, #36]	; 0x24
 8005622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	09db      	lsrs	r3, r3, #7
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b7f      	cmp	r3, #127	; 0x7f
 8005634:	d8f0      	bhi.n	8005618 <_TrySendOverflowPacket+0x64>
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	627a      	str	r2, [r7, #36]	; 0x24
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	4618      	mov	r0, r3
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	461a      	mov	r2, r3
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	4619      	mov	r1, r3
 8005658:	f7fa fdda 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800565c:	4603      	mov	r3, r0
 800565e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005660:	f7ff fb00 	bl	8004c64 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800566a:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005670:	4b08      	ldr	r3, [pc, #32]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	3b01      	subs	r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e004      	b.n	8005688 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	3301      	adds	r3, #1
 8005684:	4a03      	ldr	r2, [pc, #12]	; (8005694 <_TrySendOverflowPacket+0xe0>)
 8005686:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005688:	693b      	ldr	r3, [r7, #16]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3730      	adds	r7, #48	; 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20014394 	.word	0x20014394
 8005698:	e0001004 	.word	0xe0001004

0800569c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	; 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056a8:	4b96      	ldr	r3, [pc, #600]	; (8005904 <_SendPacket+0x268>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d010      	beq.n	80056d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056b0:	4b94      	ldr	r3, [pc, #592]	; (8005904 <_SendPacket+0x268>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8130 	beq.w	800591a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056ba:	4b92      	ldr	r3, [pc, #584]	; (8005904 <_SendPacket+0x268>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d109      	bne.n	80056d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056c2:	f7ff ff77 	bl	80055b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056c6:	4b8f      	ldr	r3, [pc, #572]	; (8005904 <_SendPacket+0x268>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f040 8127 	bne.w	800591e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80056d0:	e001      	b.n	80056d6 <_SendPacket+0x3a>
    goto Send;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <_SendPacket+0x3c>
Send:
 80056d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b1f      	cmp	r3, #31
 80056dc:	d809      	bhi.n	80056f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056de:	4b89      	ldr	r3, [pc, #548]	; (8005904 <_SendPacket+0x268>)
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 8118 	bne.w	8005922 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b17      	cmp	r3, #23
 80056f6:	d807      	bhi.n	8005708 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e0c4      	b.n	8005892 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b7f      	cmp	r3, #127	; 0x7f
 8005714:	d912      	bls.n	800573c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	09da      	lsrs	r2, r3, #7
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b01      	subs	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	3a01      	subs	r2, #1
 800572e:	60fa      	str	r2, [r7, #12]
 8005730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e006      	b.n	800574a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b7e      	cmp	r3, #126	; 0x7e
 800574e:	d807      	bhi.n	8005760 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3b01      	subs	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e098      	b.n	8005892 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005766:	d212      	bcs.n	800578e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	09da      	lsrs	r2, r3, #7
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	3a01      	subs	r2, #1
 8005780:	60fa      	str	r2, [r7, #12]
 8005782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005786:	b2da      	uxtb	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e081      	b.n	8005892 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005794:	d21d      	bcs.n	80057d2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0b9a      	lsrs	r2, r3, #14
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b01      	subs	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	09db      	lsrs	r3, r3, #7
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	3a01      	subs	r2, #1
 80057b0:	60fa      	str	r2, [r7, #12]
 80057b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	3a01      	subs	r2, #1
 80057c4:	60fa      	str	r2, [r7, #12]
 80057c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e05f      	b.n	8005892 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d8:	d228      	bcs.n	800582c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0d5a      	lsrs	r2, r3, #21
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0b9b      	lsrs	r3, r3, #14
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	3a01      	subs	r2, #1
 80057f4:	60fa      	str	r2, [r7, #12]
 80057f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	b2db      	uxtb	r3, r3
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	3a01      	subs	r2, #1
 800580a:	60fa      	str	r2, [r7, #12]
 800580c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	3a01      	subs	r2, #1
 800581e:	60fa      	str	r2, [r7, #12]
 8005820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e032      	b.n	8005892 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0f1a      	lsrs	r2, r3, #28
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3b01      	subs	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	0d5b      	lsrs	r3, r3, #21
 8005840:	b2db      	uxtb	r3, r3
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	3a01      	subs	r2, #1
 8005846:	60fa      	str	r2, [r7, #12]
 8005848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	0b9b      	lsrs	r3, r3, #14
 8005856:	b2db      	uxtb	r3, r3
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	3a01      	subs	r2, #1
 800585c:	60fa      	str	r2, [r7, #12]
 800585e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	09db      	lsrs	r3, r3, #7
 800586c:	b2db      	uxtb	r3, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	3a01      	subs	r2, #1
 8005872:	60fa      	str	r2, [r7, #12]
 8005874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	3a01      	subs	r2, #1
 8005886:	60fa      	str	r2, [r7, #12]
 8005888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <_SendPacket+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <_SendPacket+0x268>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	e00b      	b.n	80058c4 <_SendPacket+0x228>
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	6279      	str	r1, [r7, #36]	; 0x24
 80058b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	09db      	lsrs	r3, r3, #7
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	2b7f      	cmp	r3, #127	; 0x7f
 80058c8:	d8f0      	bhi.n	80058ac <_SendPacket+0x210>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	627a      	str	r2, [r7, #36]	; 0x24
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <_SendPacket+0x268>)
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	4618      	mov	r0, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	f7fa fc91 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058ee:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058f0:	f7ff f9b8 	bl	8004c64 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058fa:	4a02      	ldr	r2, [pc, #8]	; (8005904 <_SendPacket+0x268>)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	60d3      	str	r3, [r2, #12]
 8005900:	e010      	b.n	8005924 <_SendPacket+0x288>
 8005902:	bf00      	nop
 8005904:	20014394 	.word	0x20014394
 8005908:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <_SendPacket+0x2d8>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b17      	ldr	r3, [pc, #92]	; (8005974 <_SendPacket+0x2d8>)
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	e004      	b.n	8005924 <_SendPacket+0x288>
    goto SendDone;
 800591a:	bf00      	nop
 800591c:	e002      	b.n	8005924 <_SendPacket+0x288>
      goto SendDone;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <_SendPacket+0x288>
      goto SendDone;
 8005922:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <_SendPacket+0x2d8>)
 8005926:	7e1b      	ldrb	r3, [r3, #24]
 8005928:	4619      	mov	r1, r3
 800592a:	4a13      	ldr	r2, [pc, #76]	; (8005978 <_SendPacket+0x2dc>)
 800592c:	460b      	mov	r3, r1
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	440b      	add	r3, r1
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4413      	add	r3, r2
 8005936:	336c      	adds	r3, #108	; 0x6c
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <_SendPacket+0x2d8>)
 800593c:	7e1b      	ldrb	r3, [r3, #24]
 800593e:	4618      	mov	r0, r3
 8005940:	490d      	ldr	r1, [pc, #52]	; (8005978 <_SendPacket+0x2dc>)
 8005942:	4603      	mov	r3, r0
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	4403      	add	r3, r0
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	440b      	add	r3, r1
 800594c:	3370      	adds	r3, #112	; 0x70
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d00b      	beq.n	800596c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005954:	4b07      	ldr	r3, [pc, #28]	; (8005974 <_SendPacket+0x2d8>)
 8005956:	789b      	ldrb	r3, [r3, #2]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d107      	bne.n	800596c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <_SendPacket+0x2d8>)
 800595e:	2201      	movs	r2, #1
 8005960:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005962:	f7ff fdb9 	bl	80054d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <_SendPacket+0x2d8>)
 8005968:	2200      	movs	r2, #0
 800596a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800596c:	bf00      	nop
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20014394 	.word	0x20014394
 8005978:	20012ed4 	.word	0x20012ed4

0800597c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	; 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d80a      	bhi.n	80059ac <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6051      	str	r1, [r2, #4]
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d15a      	bne.n	8005a6a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	623b      	str	r3, [r7, #32]
 80059d4:	e00b      	b.n	80059ee <_StoreChar+0x72>
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	6279      	str	r1, [r7, #36]	; 0x24
 80059e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	09db      	lsrs	r3, r3, #7
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	2b7f      	cmp	r3, #127	; 0x7f
 80059f2:	d8f0      	bhi.n	80059d6 <_StoreChar+0x5a>
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	627a      	str	r2, [r7, #36]	; 0x24
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e00b      	b.n	8005a26 <_StoreChar+0xaa>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	61f9      	str	r1, [r7, #28]
 8005a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	09db      	lsrs	r3, r3, #7
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2a:	d8f0      	bhi.n	8005a0e <_StoreChar+0x92>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	61fa      	str	r2, [r7, #28]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	221a      	movs	r2, #26
 8005a42:	6939      	ldr	r1, [r7, #16]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fe29 	bl	800569c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fd36 	bl	80054c0 <_PreparePacket>
 8005a54:	4602      	mov	r2, r0
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3728      	adds	r7, #40	; 0x28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a86:	2301      	movs	r3, #1
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a8e:	e007      	b.n	8005aa0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	623b      	str	r3, [r7, #32]
    Width++;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d2f3      	bcs.n	8005a90 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d901      	bls.n	8005ab4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11f      	bne.n	8005afe <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01c      	beq.n	8005afe <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <_PrintUnsigned+0x66>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <_PrintUnsigned+0x66>
        c = '0';
 8005ad4:	2330      	movs	r3, #48	; 0x30
 8005ad6:	76fb      	strb	r3, [r7, #27]
 8005ad8:	e001      	b.n	8005ade <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ada:	2320      	movs	r3, #32
 8005adc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ade:	e007      	b.n	8005af0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005ae6:	7efb      	ldrb	r3, [r7, #27]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff ff46 	bl	800597c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <_PrintUnsigned+0x8a>
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3f0      	bcc.n	8005ae0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d903      	bls.n	8005b0c <_PrintUnsigned+0x98>
      NumDigits--;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	e009      	b.n	8005b20 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d200      	bcs.n	8005b20 <_PrintUnsigned+0xac>
        break;
 8005b1e:	e005      	b.n	8005b2c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b2a:	e7e8      	b.n	8005afe <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <_PrintUnsigned+0x128>)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff ff14 	bl	800597c <_StoreChar>
    Digit /= Base;
 8005b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e3      	bne.n	8005b2c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d011      	beq.n	8005b92 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00e      	beq.n	8005b92 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b74:	e006      	b.n	8005b84 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fefc 	bl	800597c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <_PrintUnsigned+0x11e>
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d3f1      	bcc.n	8005b76 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b92:	bf00      	nop
 8005b94:	3728      	adds	r7, #40	; 0x28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	080072d0 	.word	0x080072d0

08005ba0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bfb8      	it	lt
 8005bb4:	425b      	neglt	r3, r3
 8005bb6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bbc:	e007      	b.n	8005bce <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bc6:	613b      	str	r3, [r7, #16]
    Width++;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	daf3      	bge.n	8005bbe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d901      	bls.n	8005be2 <_PrintInt+0x42>
    Width = NumDigits;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <_PrintInt+0x5e>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	db04      	blt.n	8005bf8 <_PrintInt+0x58>
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <_PrintInt+0x5e>
    FieldWidth--;
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <_PrintInt+0x6e>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <_PrintInt+0x9c>
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d111      	bne.n	8005c3c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c1e:	e006      	b.n	8005c2e <_PrintInt+0x8e>
        FieldWidth--;
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c26:	2120      	movs	r1, #32
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fea7 	bl	800597c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <_PrintInt+0x9c>
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d3f1      	bcc.n	8005c20 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da07      	bge.n	8005c52 <_PrintInt+0xb2>
    v = -v;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	425b      	negs	r3, r3
 8005c46:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c48:	212d      	movs	r1, #45	; 0x2d
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff fe96 	bl	800597c <_StoreChar>
 8005c50:	e008      	b.n	8005c64 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c5c:	212b      	movs	r1, #43	; 0x2b
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff fe8c 	bl	800597c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d019      	beq.n	8005ca2 <_PrintInt+0x102>
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d114      	bne.n	8005ca2 <_PrintInt+0x102>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d111      	bne.n	8005ca2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c84:	e006      	b.n	8005c94 <_PrintInt+0xf4>
        FieldWidth--;
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c8c:	2130      	movs	r1, #48	; 0x30
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff fe74 	bl	800597c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <_PrintInt+0x102>
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3f1      	bcc.n	8005c86 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fedf 	bl	8005a74 <_PrintUnsigned>
}
 8005cb6:	bf00      	nop
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b098      	sub	sp, #96	; 0x60
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd0:	f04f 0120 	mov.w	r1, #32
 8005cd4:	f381 8811 	msr	BASEPRI, r1
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cda:	48b7      	ldr	r0, [pc, #732]	; (8005fb8 <_VPrintTarget+0x2f8>)
 8005cdc:	f7ff fbf0 	bl	80054c0 <_PreparePacket>
 8005ce0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ce2:	4bb5      	ldr	r3, [pc, #724]	; (8005fb8 <_VPrintTarget+0x2f8>)
 8005ce4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 81a8 	beq.w	8006060 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d14:	2b25      	cmp	r3, #37	; 0x25
 8005d16:	f040 8195 	bne.w	8006044 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d2e:	3b23      	subs	r3, #35	; 0x23
 8005d30:	2b0d      	cmp	r3, #13
 8005d32:	d83f      	bhi.n	8005db4 <_VPrintTarget+0xf4>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <_VPrintTarget+0x7c>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005da5 	.word	0x08005da5
 8005d40:	08005db5 	.word	0x08005db5
 8005d44:	08005db5 	.word	0x08005db5
 8005d48:	08005db5 	.word	0x08005db5
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005db5 	.word	0x08005db5
 8005d54:	08005db5 	.word	0x08005db5
 8005d58:	08005db5 	.word	0x08005db5
 8005d5c:	08005d95 	.word	0x08005d95
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d75 	.word	0x08005d75
 8005d68:	08005db5 	.word	0x08005db5
 8005d6c:	08005db5 	.word	0x08005db5
 8005d70:	08005d85 	.word	0x08005d85
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e01a      	b.n	8005dba <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d86:	f043 0302 	orr.w	r3, r3, #2
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e012      	b.n	8005dba <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	f043 0304 	orr.w	r3, r3, #4
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e00a      	b.n	8005dba <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da6:	f043 0308 	orr.w	r3, r3, #8
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e002      	b.n	8005dba <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005db4:	2300      	movs	r3, #0
 8005db6:	653b      	str	r3, [r7, #80]	; 0x50
 8005db8:	bf00      	nop
        }
      } while (v);
 8005dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1b0      	bne.n	8005d22 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd0:	2b2f      	cmp	r3, #47	; 0x2f
 8005dd2:	d912      	bls.n	8005dfa <_VPrintTarget+0x13a>
 8005dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd8:	2b39      	cmp	r3, #57	; 0x39
 8005dda:	d80e      	bhi.n	8005dfa <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	461a      	mov	r2, r3
 8005dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df2:	4413      	add	r3, r2
 8005df4:	3b30      	subs	r3, #48	; 0x30
 8005df6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005df8:	e7e4      	b.n	8005dc4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e0c:	d11d      	bne.n	8005e4a <_VPrintTarget+0x18a>
        sFormat++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e20:	2b2f      	cmp	r3, #47	; 0x2f
 8005e22:	d912      	bls.n	8005e4a <_VPrintTarget+0x18a>
 8005e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e28:	2b39      	cmp	r3, #57	; 0x39
 8005e2a:	d80e      	bhi.n	8005e4a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e42:	4413      	add	r3, r2
 8005e44:	3b30      	subs	r3, #48	; 0x30
 8005e46:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e48:	e7e4      	b.n	8005e14 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e56:	2b6c      	cmp	r3, #108	; 0x6c
 8005e58:	d003      	beq.n	8005e62 <_VPrintTarget+0x1a2>
 8005e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e5e:	2b68      	cmp	r3, #104	; 0x68
 8005e60:	d107      	bne.n	8005e72 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e70:	e7ef      	b.n	8005e52 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e76:	2b25      	cmp	r3, #37	; 0x25
 8005e78:	f000 80d8 	beq.w	800602c <_VPrintTarget+0x36c>
 8005e7c:	2b25      	cmp	r3, #37	; 0x25
 8005e7e:	f2c0 80dc 	blt.w	800603a <_VPrintTarget+0x37a>
 8005e82:	2b78      	cmp	r3, #120	; 0x78
 8005e84:	f300 80d9 	bgt.w	800603a <_VPrintTarget+0x37a>
 8005e88:	2b58      	cmp	r3, #88	; 0x58
 8005e8a:	f2c0 80d6 	blt.w	800603a <_VPrintTarget+0x37a>
 8005e8e:	3b58      	subs	r3, #88	; 0x58
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	f200 80d2 	bhi.w	800603a <_VPrintTarget+0x37a>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <_VPrintTarget+0x1dc>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005f93 	.word	0x08005f93
 8005ea0:	0800603b 	.word	0x0800603b
 8005ea4:	0800603b 	.word	0x0800603b
 8005ea8:	0800603b 	.word	0x0800603b
 8005eac:	0800603b 	.word	0x0800603b
 8005eb0:	0800603b 	.word	0x0800603b
 8005eb4:	0800603b 	.word	0x0800603b
 8005eb8:	0800603b 	.word	0x0800603b
 8005ebc:	0800603b 	.word	0x0800603b
 8005ec0:	0800603b 	.word	0x0800603b
 8005ec4:	0800603b 	.word	0x0800603b
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f47 	.word	0x08005f47
 8005ed0:	0800603b 	.word	0x0800603b
 8005ed4:	0800603b 	.word	0x0800603b
 8005ed8:	0800603b 	.word	0x0800603b
 8005edc:	0800603b 	.word	0x0800603b
 8005ee0:	0800603b 	.word	0x0800603b
 8005ee4:	0800603b 	.word	0x0800603b
 8005ee8:	0800603b 	.word	0x0800603b
 8005eec:	0800603b 	.word	0x0800603b
 8005ef0:	0800603b 	.word	0x0800603b
 8005ef4:	0800603b 	.word	0x0800603b
 8005ef8:	0800603b 	.word	0x0800603b
 8005efc:	08006007 	.word	0x08006007
 8005f00:	0800603b 	.word	0x0800603b
 8005f04:	0800603b 	.word	0x0800603b
 8005f08:	08005fbd 	.word	0x08005fbd
 8005f0c:	0800603b 	.word	0x0800603b
 8005f10:	08005f6d 	.word	0x08005f6d
 8005f14:	0800603b 	.word	0x0800603b
 8005f18:	0800603b 	.word	0x0800603b
 8005f1c:	08005f93 	.word	0x08005f93
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6011      	str	r1, [r2, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005f34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f38:	f107 0310 	add.w	r3, r7, #16
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fd1c 	bl	800597c <_StoreChar>
        break;
 8005f44:	e07a      	b.n	800603c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1d19      	adds	r1, r3, #4
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6011      	str	r1, [r2, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f54:	f107 0010 	add.w	r0, r7, #16
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f62:	220a      	movs	r2, #10
 8005f64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f66:	f7ff fe1b 	bl	8005ba0 <_PrintInt>
        break;
 8005f6a:	e067      	b.n	800603c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	1d19      	adds	r1, r3, #4
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f7c:	f107 0010 	add.w	r0, r7, #16
 8005f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	f7ff fd72 	bl	8005a74 <_PrintUnsigned>
        break;
 8005f90:	e054      	b.n	800603c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1d19      	adds	r1, r3, #4
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6011      	str	r1, [r2, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005fa0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fa2:	f107 0010 	add.w	r0, r7, #16
 8005fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	f7ff fd5f 	bl	8005a74 <_PrintUnsigned>
        break;
 8005fb6:	e041      	b.n	800603c <_VPrintTarget+0x37c>
 8005fb8:	200143c4 	.word	0x200143c4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	1d19      	adds	r1, r3, #4
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <_VPrintTarget+0x314>
          s = "(null)";
 8005fd0:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <_VPrintTarget+0x43c>)
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	3301      	adds	r3, #1
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005fe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005fea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fee:	f107 0310 	add.w	r3, r7, #16
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fcc1 	bl	800597c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d9e9      	bls.n	8005fd4 <_VPrintTarget+0x314>
        break;
 8006000:	e01c      	b.n	800603c <_VPrintTarget+0x37c>
            break;
 8006002:	bf00      	nop
        break;
 8006004:	e01a      	b.n	800603c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1d19      	adds	r1, r3, #4
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6011      	str	r1, [r2, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006014:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006016:	f107 0010 	add.w	r0, r7, #16
 800601a:	2300      	movs	r3, #0
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	2308      	movs	r3, #8
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2308      	movs	r3, #8
 8006024:	2210      	movs	r2, #16
 8006026:	f7ff fd25 	bl	8005a74 <_PrintUnsigned>
        break;
 800602a:	e007      	b.n	800603c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800602c:	f107 0310 	add.w	r3, r7, #16
 8006030:	2125      	movs	r1, #37	; 0x25
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fca2 	bl	800597c <_StoreChar>
        break;
 8006038:	e000      	b.n	800603c <_VPrintTarget+0x37c>
      default:
        break;
 800603a:	bf00      	nop
      }
      sFormat++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e007      	b.n	8006054 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006044:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006048:	f107 0310 	add.w	r3, r7, #16
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fc94 	bl	800597c <_StoreChar>
    }
  } while (*sFormat);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f47f ae4d 	bne.w	8005cf8 <_VPrintTarget+0x38>
 800605e:	e000      	b.n	8006062 <_VPrintTarget+0x3a2>
      break;
 8006060:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d041      	beq.n	80060ec <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
 8006078:	e00b      	b.n	8006092 <_VPrintTarget+0x3d2>
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	b2da      	uxtb	r2, r3
 800607e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b7f      	cmp	r3, #127	; 0x7f
 8006096:	d8f0      	bhi.n	800607a <_VPrintTarget+0x3ba>
 8006098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
 80060ac:	2300      	movs	r3, #0
 80060ae:	633b      	str	r3, [r7, #48]	; 0x30
 80060b0:	e00b      	b.n	80060ca <_VPrintTarget+0x40a>
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	6379      	str	r1, [r7, #52]	; 0x34
 80060bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	09db      	lsrs	r3, r3, #7
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2b7f      	cmp	r3, #127	; 0x7f
 80060ce:	d8f0      	bhi.n	80060b2 <_VPrintTarget+0x3f2>
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	637a      	str	r2, [r7, #52]	; 0x34
 80060d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	221a      	movs	r2, #26
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fad8 	bl	800569c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060f2:	bf00      	nop
 80060f4:	3758      	adds	r7, #88	; 0x58
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0800727c 	.word	0x0800727c

08006100 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800610e:	2300      	movs	r3, #0
 8006110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006114:	4917      	ldr	r1, [pc, #92]	; (8006174 <SEGGER_SYSVIEW_Init+0x74>)
 8006116:	4818      	ldr	r0, [pc, #96]	; (8006178 <SEGGER_SYSVIEW_Init+0x78>)
 8006118:	f7ff f8d2 	bl	80052c0 <SEGGER_RTT_AllocUpBuffer>
 800611c:	4603      	mov	r3, r0
 800611e:	b2da      	uxtb	r2, r3
 8006120:	4b16      	ldr	r3, [pc, #88]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006122:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006124:	4b15      	ldr	r3, [pc, #84]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006126:	785a      	ldrb	r2, [r3, #1]
 8006128:	4b14      	ldr	r3, [pc, #80]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 800612a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 800612e:	7e1b      	ldrb	r3, [r3, #24]
 8006130:	4618      	mov	r0, r3
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	2308      	movs	r3, #8
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <SEGGER_SYSVIEW_Init+0x80>)
 800613a:	490f      	ldr	r1, [pc, #60]	; (8006178 <SEGGER_SYSVIEW_Init+0x78>)
 800613c:	f7ff f944 	bl	80053c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006146:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <SEGGER_SYSVIEW_Init+0x84>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0c      	ldr	r2, [pc, #48]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 800614c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800614e:	4a0b      	ldr	r2, [pc, #44]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006160:	4a06      	ldr	r2, [pc, #24]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <SEGGER_SYSVIEW_Init+0x7c>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	2001338c 	.word	0x2001338c
 8006178:	08007284 	.word	0x08007284
 800617c:	20014394 	.word	0x20014394
 8006180:	2001438c 	.word	0x2001438c
 8006184:	e0001004 	.word	0xe0001004

08006188 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006190:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6113      	str	r3, [r2, #16]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20014394 	.word	0x20014394

080061a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061b0:	f3ef 8311 	mrs	r3, BASEPRI
 80061b4:	f04f 0120 	mov.w	r1, #32
 80061b8:	f381 8811 	msr	BASEPRI, r1
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	4808      	ldr	r0, [pc, #32]	; (80061e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061c0:	f7ff f97e 	bl	80054c0 <_PreparePacket>
 80061c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68b8      	ldr	r0, [r7, #8]
 80061cc:	f7ff fa66 	bl	800569c <_SendPacket>
  RECORD_END();
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f383 8811 	msr	BASEPRI, r3
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200143c4 	.word	0x200143c4

080061e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061ee:	f3ef 8311 	mrs	r3, BASEPRI
 80061f2:	f04f 0120 	mov.w	r1, #32
 80061f6:	f381 8811 	msr	BASEPRI, r1
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	4816      	ldr	r0, [pc, #88]	; (8006258 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061fe:	f7ff f95f 	bl	80054c0 <_PreparePacket>
 8006202:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	e00b      	b.n	800622a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	1c59      	adds	r1, r3, #1
 800621a:	61f9      	str	r1, [r7, #28]
 800621c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	09db      	lsrs	r3, r3, #7
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b7f      	cmp	r3, #127	; 0x7f
 800622e:	d8f0      	bhi.n	8006212 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	61fa      	str	r2, [r7, #28]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	6938      	ldr	r0, [r7, #16]
 8006246:	f7ff fa29 	bl	800569c <_SendPacket>
  RECORD_END();
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f383 8811 	msr	BASEPRI, r3
}
 8006250:	bf00      	nop
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200143c4 	.word	0x200143c4

0800625c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006268:	f3ef 8311 	mrs	r3, BASEPRI
 800626c:	f04f 0120 	mov.w	r1, #32
 8006270:	f381 8811 	msr	BASEPRI, r1
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	4825      	ldr	r0, [pc, #148]	; (800630c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006278:	f7ff f922 	bl	80054c0 <_PreparePacket>
 800627c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
 800628a:	e00b      	b.n	80062a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	b2da      	uxtb	r2, r3
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	1c59      	adds	r1, r3, #1
 8006294:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	09db      	lsrs	r3, r3, #7
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2b7f      	cmp	r3, #127	; 0x7f
 80062a8:	d8f0      	bhi.n	800628c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	e00b      	b.n	80062dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	1c59      	adds	r1, r3, #1
 80062cc:	6279      	str	r1, [r7, #36]	; 0x24
 80062ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	09db      	lsrs	r3, r3, #7
 80062da:	623b      	str	r3, [r7, #32]
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b7f      	cmp	r3, #127	; 0x7f
 80062e0:	d8f0      	bhi.n	80062c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	627a      	str	r2, [r7, #36]	; 0x24
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	6979      	ldr	r1, [r7, #20]
 80062f6:	69b8      	ldr	r0, [r7, #24]
 80062f8:	f7ff f9d0 	bl	800569c <_SendPacket>
  RECORD_END();
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f383 8811 	msr	BASEPRI, r3
}
 8006302:	bf00      	nop
 8006304:	3730      	adds	r7, #48	; 0x30
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200143c4 	.word	0x200143c4

08006310 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b08e      	sub	sp, #56	; 0x38
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800631e:	f3ef 8311 	mrs	r3, BASEPRI
 8006322:	f04f 0120 	mov.w	r1, #32
 8006326:	f381 8811 	msr	BASEPRI, r1
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	4832      	ldr	r0, [pc, #200]	; (80063f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800632e:	f7ff f8c7 	bl	80054c0 <_PreparePacket>
 8006332:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	637b      	str	r3, [r7, #52]	; 0x34
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	6379      	str	r1, [r7, #52]	; 0x34
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	633b      	str	r3, [r7, #48]	; 0x30
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	637a      	str	r2, [r7, #52]	; 0x34
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
 8006378:	e00b      	b.n	8006392 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	2b7f      	cmp	r3, #127	; 0x7f
 8006396:	d8f0      	bhi.n	800637a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800639e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	e00b      	b.n	80063ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1c59      	adds	r1, r3, #1
 80063ba:	6279      	str	r1, [r7, #36]	; 0x24
 80063bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	09db      	lsrs	r3, r3, #7
 80063c8:	623b      	str	r3, [r7, #32]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	2b7f      	cmp	r3, #127	; 0x7f
 80063ce:	d8f0      	bhi.n	80063b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	627a      	str	r2, [r7, #36]	; 0x24
 80063d6:	6a3a      	ldr	r2, [r7, #32]
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6979      	ldr	r1, [r7, #20]
 80063e4:	69b8      	ldr	r0, [r7, #24]
 80063e6:	f7ff f959 	bl	800569c <_SendPacket>
  RECORD_END();
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f383 8811 	msr	BASEPRI, r3
}
 80063f0:	bf00      	nop
 80063f2:	3738      	adds	r7, #56	; 0x38
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200143c4 	.word	0x200143c4

080063fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b090      	sub	sp, #64	; 0x40
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800640a:	f3ef 8311 	mrs	r3, BASEPRI
 800640e:	f04f 0120 	mov.w	r1, #32
 8006412:	f381 8811 	msr	BASEPRI, r1
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	4840      	ldr	r0, [pc, #256]	; (800651c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800641a:	f7ff f851 	bl	80054c0 <_PreparePacket>
 800641e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	63bb      	str	r3, [r7, #56]	; 0x38
 800642c:	e00b      	b.n	8006446 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	63bb      	str	r3, [r7, #56]	; 0x38
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	2b7f      	cmp	r3, #127	; 0x7f
 800644a:	d8f0      	bhi.n	800642e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	633b      	str	r3, [r7, #48]	; 0x30
 8006464:	e00b      	b.n	800647e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	6379      	str	r1, [r7, #52]	; 0x34
 8006470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	633b      	str	r3, [r7, #48]	; 0x30
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	2b7f      	cmp	r3, #127	; 0x7f
 8006482:	d8f0      	bhi.n	8006466 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	637a      	str	r2, [r7, #52]	; 0x34
 800648a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006492:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
 800649c:	e00b      	b.n	80064b6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	09db      	lsrs	r3, r3, #7
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ba:	d8f0      	bhi.n	800649e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d2:	623b      	str	r3, [r7, #32]
 80064d4:	e00b      	b.n	80064ee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	6279      	str	r1, [r7, #36]	; 0x24
 80064e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	09db      	lsrs	r3, r3, #7
 80064ec:	623b      	str	r3, [r7, #32]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2b7f      	cmp	r3, #127	; 0x7f
 80064f2:	d8f0      	bhi.n	80064d6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	627a      	str	r2, [r7, #36]	; 0x24
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	69b8      	ldr	r0, [r7, #24]
 800650a:	f7ff f8c7 	bl	800569c <_SendPacket>
  RECORD_END();
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f383 8811 	msr	BASEPRI, r3
}
 8006514:	bf00      	nop
 8006516:	3740      	adds	r7, #64	; 0x40
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	200143c4 	.word	0x200143c4

08006520 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006526:	4b59      	ldr	r3, [pc, #356]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800652c:	f3ef 8311 	mrs	r3, BASEPRI
 8006530:	f04f 0120 	mov.w	r1, #32
 8006534:	f381 8811 	msr	BASEPRI, r1
 8006538:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800653a:	4b54      	ldr	r3, [pc, #336]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	220a      	movs	r2, #10
 8006540:	4953      	ldr	r1, [pc, #332]	; (8006690 <SEGGER_SYSVIEW_Start+0x170>)
 8006542:	4618      	mov	r0, r3
 8006544:	f7f9 fe64 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800654e:	f7fe fb89 	bl	8004c64 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006552:	200a      	movs	r0, #10
 8006554:	f7ff fe28 	bl	80061a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006558:	f3ef 8311 	mrs	r3, BASEPRI
 800655c:	f04f 0120 	mov.w	r1, #32
 8006560:	f381 8811 	msr	BASEPRI, r1
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	484b      	ldr	r0, [pc, #300]	; (8006694 <SEGGER_SYSVIEW_Start+0x174>)
 8006568:	f7fe ffaa 	bl	80054c0 <_PreparePacket>
 800656c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006576:	4b45      	ldr	r3, [pc, #276]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28
 800657c:	e00b      	b.n	8006596 <SEGGER_SYSVIEW_Start+0x76>
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	09db      	lsrs	r3, r3, #7
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b7f      	cmp	r3, #127	; 0x7f
 800659a:	d8f0      	bhi.n	800657e <SEGGER_SYSVIEW_Start+0x5e>
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
 80065b0:	4b36      	ldr	r3, [pc, #216]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	623b      	str	r3, [r7, #32]
 80065b6:	e00b      	b.n	80065d0 <SEGGER_SYSVIEW_Start+0xb0>
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	6279      	str	r1, [r7, #36]	; 0x24
 80065c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	09db      	lsrs	r3, r3, #7
 80065ce:	623b      	str	r3, [r7, #32]
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b7f      	cmp	r3, #127	; 0x7f
 80065d4:	d8f0      	bhi.n	80065b8 <SEGGER_SYSVIEW_Start+0x98>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	627a      	str	r2, [r7, #36]	; 0x24
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	4b28      	ldr	r3, [pc, #160]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	e00b      	b.n	800660a <SEGGER_SYSVIEW_Start+0xea>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	61f9      	str	r1, [r7, #28]
 80065fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	09db      	lsrs	r3, r3, #7
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b7f      	cmp	r3, #127	; 0x7f
 800660e:	d8f0      	bhi.n	80065f2 <SEGGER_SYSVIEW_Start+0xd2>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	61fa      	str	r2, [r7, #28]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	e00b      	b.n	8006642 <SEGGER_SYSVIEW_Start+0x122>
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	1c59      	adds	r1, r3, #1
 8006632:	6179      	str	r1, [r7, #20]
 8006634:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	09db      	lsrs	r3, r3, #7
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b7f      	cmp	r3, #127	; 0x7f
 8006646:	d8f0      	bhi.n	800662a <SEGGER_SYSVIEW_Start+0x10a>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	617a      	str	r2, [r7, #20]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006658:	2218      	movs	r2, #24
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff f81d 	bl	800569c <_SendPacket>
      RECORD_END();
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <SEGGER_SYSVIEW_Start+0x16c>)
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006676:	f000 f9eb 	bl	8006a50 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800667a:	f000 f9b1 	bl	80069e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800667e:	f000 fc2d 	bl	8006edc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006682:	bf00      	nop
 8006684:	3730      	adds	r7, #48	; 0x30
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20014394 	.word	0x20014394
 8006690:	080072c4 	.word	0x080072c4
 8006694:	200143c4 	.word	0x200143c4

08006698 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	f04f 0120 	mov.w	r1, #32
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	480b      	ldr	r0, [pc, #44]	; (80066dc <SEGGER_SYSVIEW_Stop+0x44>)
 80066ae:	f7fe ff07 	bl	80054c0 <_PreparePacket>
 80066b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80066bc:	220b      	movs	r2, #11
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6838      	ldr	r0, [r7, #0]
 80066c2:	f7fe ffeb 	bl	800569c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f383 8811 	msr	BASEPRI, r3
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200143c4 	.word	0x200143c4
 80066e0:	20014394 	.word	0x20014394

080066e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08c      	sub	sp, #48	; 0x30
 80066e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066ea:	f3ef 8311 	mrs	r3, BASEPRI
 80066ee:	f04f 0120 	mov.w	r1, #32
 80066f2:	f381 8811 	msr	BASEPRI, r1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	4845      	ldr	r0, [pc, #276]	; (8006810 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066fa:	f7fe fee1 	bl	80054c0 <_PreparePacket>
 80066fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006708:	4b42      	ldr	r3, [pc, #264]	; (8006814 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
 800670e:	e00b      	b.n	8006728 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	62f9      	str	r1, [r7, #44]	; 0x2c
 800671a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	09db      	lsrs	r3, r3, #7
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	2b7f      	cmp	r3, #127	; 0x7f
 800672c:	d8f0      	bhi.n	8006710 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
 8006742:	4b34      	ldr	r3, [pc, #208]	; (8006814 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	623b      	str	r3, [r7, #32]
 8006748:	e00b      	b.n	8006762 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	b2da      	uxtb	r2, r3
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	1c59      	adds	r1, r3, #1
 8006752:	6279      	str	r1, [r7, #36]	; 0x24
 8006754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	09db      	lsrs	r3, r3, #7
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	2b7f      	cmp	r3, #127	; 0x7f
 8006766:	d8f0      	bhi.n	800674a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	627a      	str	r2, [r7, #36]	; 0x24
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e00b      	b.n	800679c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	1c59      	adds	r1, r3, #1
 800678c:	61f9      	str	r1, [r7, #28]
 800678e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	09db      	lsrs	r3, r3, #7
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b7f      	cmp	r3, #127	; 0x7f
 80067a0:	d8f0      	bhi.n	8006784 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	61fa      	str	r2, [r7, #28]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	2300      	movs	r3, #0
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	e00b      	b.n	80067d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	6179      	str	r1, [r7, #20]
 80067c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	09db      	lsrs	r3, r3, #7
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b7f      	cmp	r3, #127	; 0x7f
 80067d8:	d8f0      	bhi.n	80067bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	617a      	str	r2, [r7, #20]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067ea:	2218      	movs	r2, #24
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f7fe ff54 	bl	800569c <_SendPacket>
  RECORD_END();
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006802:	4b04      	ldr	r3, [pc, #16]	; (8006814 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	4798      	blx	r3
  }
}
 8006808:	bf00      	nop
 800680a:	3730      	adds	r7, #48	; 0x30
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	200143c4 	.word	0x200143c4
 8006814:	20014394 	.word	0x20014394

08006818 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b092      	sub	sp, #72	; 0x48
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006820:	f3ef 8311 	mrs	r3, BASEPRI
 8006824:	f04f 0120 	mov.w	r1, #32
 8006828:	f381 8811 	msr	BASEPRI, r1
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	486a      	ldr	r0, [pc, #424]	; (80069d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006830:	f7fe fe46 	bl	80054c0 <_PreparePacket>
 8006834:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	647b      	str	r3, [r7, #68]	; 0x44
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b66      	ldr	r3, [pc, #408]	; (80069dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	643b      	str	r3, [r7, #64]	; 0x40
 800684a:	e00b      	b.n	8006864 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800684c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684e:	b2da      	uxtb	r2, r3
 8006850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006852:	1c59      	adds	r1, r3, #1
 8006854:	6479      	str	r1, [r7, #68]	; 0x44
 8006856:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006860:	09db      	lsrs	r3, r3, #7
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
 8006864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006866:	2b7f      	cmp	r3, #127	; 0x7f
 8006868:	d8f0      	bhi.n	800684c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800686a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	647a      	str	r2, [r7, #68]	; 0x44
 8006870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006878:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	63bb      	str	r3, [r7, #56]	; 0x38
 8006884:	e00b      	b.n	800689e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	b2da      	uxtb	r2, r3
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	09db      	lsrs	r3, r3, #7
 800689c:	63bb      	str	r3, [r7, #56]	; 0x38
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	2b7f      	cmp	r3, #127	; 0x7f
 80068a2:	d8f0      	bhi.n	8006886 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7fe fdcf 	bl	8005460 <_EncodeStr>
 80068c2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80068c4:	2209      	movs	r2, #9
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	6938      	ldr	r0, [r7, #16]
 80068ca:	f7fe fee7 	bl	800569c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b40      	ldr	r3, [pc, #256]	; (80069dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
 80068e2:	e00b      	b.n	80068fc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	1c59      	adds	r1, r3, #1
 80068ec:	6379      	str	r1, [r7, #52]	; 0x34
 80068ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	09db      	lsrs	r3, r3, #7
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006900:	d8f0      	bhi.n	80068e4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	637a      	str	r2, [r7, #52]	; 0x34
 8006908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
 800691c:	e00b      	b.n	8006936 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	b2da      	uxtb	r2, r3
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	1c59      	adds	r1, r3, #1
 8006926:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006928:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	09db      	lsrs	r3, r3, #7
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	2b7f      	cmp	r3, #127	; 0x7f
 800693a:	d8f0      	bhi.n	800691e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e00b      	b.n	8006970 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	6279      	str	r1, [r7, #36]	; 0x24
 8006962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	09db      	lsrs	r3, r3, #7
 800696e:	623b      	str	r3, [r7, #32]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b7f      	cmp	r3, #127	; 0x7f
 8006974:	d8f0      	bhi.n	8006958 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	627a      	str	r2, [r7, #36]	; 0x24
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e00b      	b.n	80069a8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	b2da      	uxtb	r2, r3
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	1c59      	adds	r1, r3, #1
 8006998:	61f9      	str	r1, [r7, #28]
 800699a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	09db      	lsrs	r3, r3, #7
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b7f      	cmp	r3, #127	; 0x7f
 80069ac:	d8f0      	bhi.n	8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	61fa      	str	r2, [r7, #28]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80069be:	2215      	movs	r2, #21
 80069c0:	68f9      	ldr	r1, [r7, #12]
 80069c2:	6938      	ldr	r0, [r7, #16]
 80069c4:	f7fe fe6a 	bl	800569c <_SendPacket>
  RECORD_END();
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f383 8811 	msr	BASEPRI, r3
}
 80069ce:	bf00      	nop
 80069d0:	3748      	adds	r7, #72	; 0x48
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200143c4 	.word	0x200143c4
 80069dc:	20014394 	.word	0x20014394

080069e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069e4:	4b07      	ldr	r3, [pc, #28]	; (8006a04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069f6:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4798      	blx	r3
  }
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20014394 	.word	0x20014394

08006a08 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a10:	f3ef 8311 	mrs	r3, BASEPRI
 8006a14:	f04f 0120 	mov.w	r1, #32
 8006a18:	f381 8811 	msr	BASEPRI, r1
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	480b      	ldr	r0, [pc, #44]	; (8006a4c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a20:	f7fe fd4e 	bl	80054c0 <_PreparePacket>
 8006a24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a26:	2280      	movs	r2, #128	; 0x80
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f7fe fd18 	bl	8005460 <_EncodeStr>
 8006a30:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a32:	220e      	movs	r2, #14
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	6938      	ldr	r0, [r7, #16]
 8006a38:	f7fe fe30 	bl	800569c <_SendPacket>
  RECORD_END();
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f383 8811 	msr	BASEPRI, r3
}
 8006a42:	bf00      	nop
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200143c4 	.word	0x200143c4

08006a50 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01a      	beq.n	8006a94 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a5e:	4b13      	ldr	r3, [pc, #76]	; (8006aac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d015      	beq.n	8006a94 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a68:	4b10      	ldr	r3, [pc, #64]	; (8006aac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4798      	blx	r3
 8006a70:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a74:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	000a      	movs	r2, r1
 8006a84:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a86:	4613      	mov	r3, r2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	200d      	movs	r0, #13
 8006a8e:	f7ff fbe5 	bl	800625c <SEGGER_SYSVIEW_RecordU32x2>
 8006a92:	e006      	b.n	8006aa2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	200c      	movs	r0, #12
 8006a9c:	f7ff fba2 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20014394 	.word	0x20014394
 8006ab0:	e0001004 	.word	0xe0001004

08006ab4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aba:	f3ef 8311 	mrs	r3, BASEPRI
 8006abe:	f04f 0120 	mov.w	r1, #32
 8006ac2:	f381 8811 	msr	BASEPRI, r1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	4819      	ldr	r0, [pc, #100]	; (8006b30 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006aca:	f7fe fcf9 	bl	80054c0 <_PreparePacket>
 8006ace:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006adc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	e00b      	b.n	8006b00 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	6179      	str	r1, [r7, #20]
 8006af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	09db      	lsrs	r3, r3, #7
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b7f      	cmp	r3, #127	; 0x7f
 8006b04:	d8f0      	bhi.n	8006ae8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	617a      	str	r2, [r7, #20]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b16:	2202      	movs	r2, #2
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f7fe fdbe 	bl	800569c <_SendPacket>
  RECORD_END();
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f383 8811 	msr	BASEPRI, r3
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200143c4 	.word	0x200143c4
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b42:	f04f 0120 	mov.w	r1, #32
 8006b46:	f381 8811 	msr	BASEPRI, r1
 8006b4a:	607b      	str	r3, [r7, #4]
 8006b4c:	4807      	ldr	r0, [pc, #28]	; (8006b6c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b4e:	f7fe fcb7 	bl	80054c0 <_PreparePacket>
 8006b52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b54:	2203      	movs	r2, #3
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6838      	ldr	r0, [r7, #0]
 8006b5a:	f7fe fd9f 	bl	800569c <_SendPacket>
  RECORD_END();
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f383 8811 	msr	BASEPRI, r3
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200143c4 	.word	0x200143c4

08006b70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b76:	f3ef 8311 	mrs	r3, BASEPRI
 8006b7a:	f04f 0120 	mov.w	r1, #32
 8006b7e:	f381 8811 	msr	BASEPRI, r1
 8006b82:	607b      	str	r3, [r7, #4]
 8006b84:	4807      	ldr	r0, [pc, #28]	; (8006ba4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b86:	f7fe fc9b 	bl	80054c0 <_PreparePacket>
 8006b8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b8c:	2212      	movs	r2, #18
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6838      	ldr	r0, [r7, #0]
 8006b92:	f7fe fd83 	bl	800569c <_SendPacket>
  RECORD_END();
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f383 8811 	msr	BASEPRI, r3
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200143c4 	.word	0x200143c4

08006ba8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bae:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb2:	f04f 0120 	mov.w	r1, #32
 8006bb6:	f381 8811 	msr	BASEPRI, r1
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	4807      	ldr	r0, [pc, #28]	; (8006bdc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006bbe:	f7fe fc7f 	bl	80054c0 <_PreparePacket>
 8006bc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006bc4:	2211      	movs	r2, #17
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6838      	ldr	r0, [r7, #0]
 8006bca:	f7fe fd67 	bl	800569c <_SendPacket>
  RECORD_END();
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f383 8811 	msr	BASEPRI, r3
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	200143c4 	.word	0x200143c4

08006be0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006be8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bec:	f04f 0120 	mov.w	r1, #32
 8006bf0:	f381 8811 	msr	BASEPRI, r1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	4819      	ldr	r0, [pc, #100]	; (8006c5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006bf8:	f7fe fc62 	bl	80054c0 <_PreparePacket>
 8006bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c02:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	e00b      	b.n	8006c2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	1c59      	adds	r1, r3, #1
 8006c1e:	61f9      	str	r1, [r7, #28]
 8006c20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	09db      	lsrs	r3, r3, #7
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b7f      	cmp	r3, #127	; 0x7f
 8006c32:	d8f0      	bhi.n	8006c16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	61fa      	str	r2, [r7, #28]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c44:	2208      	movs	r2, #8
 8006c46:	68f9      	ldr	r1, [r7, #12]
 8006c48:	6938      	ldr	r0, [r7, #16]
 8006c4a:	f7fe fd27 	bl	800569c <_SendPacket>
  RECORD_END();
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f383 8811 	msr	BASEPRI, r3
}
 8006c54:	bf00      	nop
 8006c56:	3720      	adds	r7, #32
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	200143c4 	.word	0x200143c4
 8006c60:	20014394 	.word	0x20014394

08006c64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c70:	f04f 0120 	mov.w	r1, #32
 8006c74:	f381 8811 	msr	BASEPRI, r1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	4819      	ldr	r0, [pc, #100]	; (8006ce0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c7c:	f7fe fc20 	bl	80054c0 <_PreparePacket>
 8006c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c86:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	e00b      	b.n	8006cb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	1c59      	adds	r1, r3, #1
 8006ca2:	61f9      	str	r1, [r7, #28]
 8006ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	09db      	lsrs	r3, r3, #7
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb6:	d8f0      	bhi.n	8006c9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	61fa      	str	r2, [r7, #28]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006cc8:	2204      	movs	r2, #4
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	6938      	ldr	r0, [r7, #16]
 8006cce:	f7fe fce5 	bl	800569c <_SendPacket>
  RECORD_END();
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f383 8811 	msr	BASEPRI, r3
}
 8006cd8:	bf00      	nop
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	200143c4 	.word	0x200143c4
 8006ce4:	20014394 	.word	0x20014394

08006ce8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf4:	f04f 0120 	mov.w	r1, #32
 8006cf8:	f381 8811 	msr	BASEPRI, r1
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	4819      	ldr	r0, [pc, #100]	; (8006d64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d00:	f7fe fbde 	bl	80054c0 <_PreparePacket>
 8006d04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d0a:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	e00b      	b.n	8006d36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	1c59      	adds	r1, r3, #1
 8006d26:	61f9      	str	r1, [r7, #28]
 8006d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	09db      	lsrs	r3, r3, #7
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3a:	d8f0      	bhi.n	8006d1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	61fa      	str	r2, [r7, #28]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d4c:	2206      	movs	r2, #6
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	6938      	ldr	r0, [r7, #16]
 8006d52:	f7fe fca3 	bl	800569c <_SendPacket>
  RECORD_END();
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f383 8811 	msr	BASEPRI, r3
}
 8006d5c:	bf00      	nop
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	200143c4 	.word	0x200143c4
 8006d68:	20014394 	.word	0x20014394

08006d6c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d74:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	1ad3      	subs	r3, r2, r3
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20014394 	.word	0x20014394

08006d8c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08c      	sub	sp, #48	; 0x30
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d96:	4b40      	ldr	r3, [pc, #256]	; (8006e98 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d077      	beq.n	8006e8e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006d9e:	4b3e      	ldr	r3, [pc, #248]	; (8006e98 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006da4:	2300      	movs	r3, #0
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da8:	e008      	b.n	8006dbc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d007      	beq.n	8006dc6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	3301      	adds	r3, #1
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d3f2      	bcc.n	8006daa <SEGGER_SYSVIEW_SendModule+0x1e>
 8006dc4:	e000      	b.n	8006dc8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006dc6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d055      	beq.n	8006e7a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dce:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd2:	f04f 0120 	mov.w	r1, #32
 8006dd6:	f381 8811 	msr	BASEPRI, r1
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	482f      	ldr	r0, [pc, #188]	; (8006e9c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006dde:	f7fe fb6f 	bl	80054c0 <_PreparePacket>
 8006de2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	623b      	str	r3, [r7, #32]
 8006df0:	e00b      	b.n	8006e0a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	1c59      	adds	r1, r3, #1
 8006dfa:	6279      	str	r1, [r7, #36]	; 0x24
 8006dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	09db      	lsrs	r3, r3, #7
 8006e08:	623b      	str	r3, [r7, #32]
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0e:	d8f0      	bhi.n	8006df2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	627a      	str	r2, [r7, #36]	; 0x24
 8006e16:	6a3a      	ldr	r2, [r7, #32]
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	e00b      	b.n	8006e44 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	1c59      	adds	r1, r3, #1
 8006e34:	61f9      	str	r1, [r7, #28]
 8006e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	09db      	lsrs	r3, r3, #7
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b7f      	cmp	r3, #127	; 0x7f
 8006e48:	d8f0      	bhi.n	8006e2c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	61fa      	str	r2, [r7, #28]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	4619      	mov	r1, r3
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7fe fafc 	bl	8005460 <_EncodeStr>
 8006e68:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e6a:	2216      	movs	r2, #22
 8006e6c:	68f9      	ldr	r1, [r7, #12]
 8006e6e:	6938      	ldr	r0, [r7, #16]
 8006e70:	f7fe fc14 	bl	800569c <_SendPacket>
      RECORD_END();
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <SEGGER_SYSVIEW_SendModule+0x102>
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4798      	blx	r3
    }
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3730      	adds	r7, #48	; 0x30
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200143bc 	.word	0x200143bc
 8006e9c:	200143c4 	.word	0x200143c4

08006ea0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00f      	beq.n	8006ece <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006eae:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f2      	bne.n	8006eb4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200143bc 	.word	0x200143bc

08006edc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee6:	f04f 0120 	mov.w	r1, #32
 8006eea:	f381 8811 	msr	BASEPRI, r1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	4817      	ldr	r0, [pc, #92]	; (8006f50 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ef2:	f7fe fae5 	bl	80054c0 <_PreparePacket>
 8006ef6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e00b      	b.n	8006f20 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	1c59      	adds	r1, r3, #1
 8006f10:	6179      	str	r1, [r7, #20]
 8006f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	09db      	lsrs	r3, r3, #7
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b7f      	cmp	r3, #127	; 0x7f
 8006f24:	d8f0      	bhi.n	8006f08 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	617a      	str	r2, [r7, #20]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f36:	221b      	movs	r2, #27
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f7fe fbae 	bl	800569c <_SendPacket>
  RECORD_END();
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f383 8811 	msr	BASEPRI, r3
}
 8006f46:	bf00      	nop
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200143c4 	.word	0x200143c4
 8006f54:	200143c0 	.word	0x200143c0

08006f58 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f58:	b40f      	push	{r0, r1, r2, r3}
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f60:	f107 0314 	add.w	r3, r7, #20
 8006f64:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	6938      	ldr	r0, [r7, #16]
 8006f6e:	f7fe fea7 	bl	8005cc0 <_VPrintTarget>
  va_end(ParamList);
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f7c:	b004      	add	sp, #16
 8006f7e:	4770      	bx	lr

08006f80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f88:	f3ef 8311 	mrs	r3, BASEPRI
 8006f8c:	f04f 0120 	mov.w	r1, #32
 8006f90:	f381 8811 	msr	BASEPRI, r1
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	4827      	ldr	r0, [pc, #156]	; (8007034 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f98:	f7fe fa92 	bl	80054c0 <_PreparePacket>
 8006f9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f9e:	2280      	movs	r2, #128	; 0x80
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	f7fe fa5c 	bl	8005460 <_EncodeStr>
 8006fa8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
 8006fae:	2301      	movs	r3, #1
 8006fb0:	623b      	str	r3, [r7, #32]
 8006fb2:	e00b      	b.n	8006fcc <SEGGER_SYSVIEW_Warn+0x4c>
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	1c59      	adds	r1, r3, #1
 8006fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8006fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	09db      	lsrs	r3, r3, #7
 8006fca:	623b      	str	r3, [r7, #32]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2b7f      	cmp	r3, #127	; 0x7f
 8006fd0:	d8f0      	bhi.n	8006fb4 <SEGGER_SYSVIEW_Warn+0x34>
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd8:	6a3a      	ldr	r2, [r7, #32]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	61fb      	str	r3, [r7, #28]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e00b      	b.n	8007004 <SEGGER_SYSVIEW_Warn+0x84>
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	61f9      	str	r1, [r7, #28]
 8006ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	09db      	lsrs	r3, r3, #7
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b7f      	cmp	r3, #127	; 0x7f
 8007008:	d8f0      	bhi.n	8006fec <SEGGER_SYSVIEW_Warn+0x6c>
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	61fa      	str	r2, [r7, #28]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800701a:	221a      	movs	r2, #26
 800701c:	68f9      	ldr	r1, [r7, #12]
 800701e:	6938      	ldr	r0, [r7, #16]
 8007020:	f7fe fb3c 	bl	800569c <_SendPacket>
  RECORD_END();
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f383 8811 	msr	BASEPRI, r3
}
 800702a:	bf00      	nop
 800702c:	3728      	adds	r7, #40	; 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200143c4 	.word	0x200143c4

08007038 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800703c:	4b13      	ldr	r3, [pc, #76]	; (800708c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800703e:	7e1b      	ldrb	r3, [r3, #24]
 8007040:	4619      	mov	r1, r3
 8007042:	4a13      	ldr	r2, [pc, #76]	; (8007090 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007044:	460b      	mov	r3, r1
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	440b      	add	r3, r1
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	336c      	adds	r3, #108	; 0x6c
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b0e      	ldr	r3, [pc, #56]	; (800708c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007054:	7e1b      	ldrb	r3, [r3, #24]
 8007056:	4618      	mov	r0, r3
 8007058:	490d      	ldr	r1, [pc, #52]	; (8007090 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800705a:	4603      	mov	r3, r0
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4403      	add	r3, r0
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	440b      	add	r3, r1
 8007064:	3370      	adds	r3, #112	; 0x70
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d00b      	beq.n	8007084 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800706c:	4b07      	ldr	r3, [pc, #28]	; (800708c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d107      	bne.n	8007084 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007076:	2201      	movs	r2, #1
 8007078:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800707a:	f7fe fa2d 	bl	80054d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007080:	2200      	movs	r2, #0
 8007082:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007084:	4b01      	ldr	r3, [pc, #4]	; (800708c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007086:	781b      	ldrb	r3, [r3, #0]
}
 8007088:	4618      	mov	r0, r3
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20014394 	.word	0x20014394
 8007090:	20012ed4 	.word	0x20012ed4

08007094 <memcmp>:
 8007094:	b510      	push	{r4, lr}
 8007096:	3901      	subs	r1, #1
 8007098:	4402      	add	r2, r0
 800709a:	4290      	cmp	r0, r2
 800709c:	d101      	bne.n	80070a2 <memcmp+0xe>
 800709e:	2000      	movs	r0, #0
 80070a0:	e005      	b.n	80070ae <memcmp+0x1a>
 80070a2:	7803      	ldrb	r3, [r0, #0]
 80070a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d001      	beq.n	80070b0 <memcmp+0x1c>
 80070ac:	1b18      	subs	r0, r3, r4
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	3001      	adds	r0, #1
 80070b2:	e7f2      	b.n	800709a <memcmp+0x6>

080070b4 <memset>:
 80070b4:	4402      	add	r2, r0
 80070b6:	4603      	mov	r3, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d100      	bne.n	80070be <memset+0xa>
 80070bc:	4770      	bx	lr
 80070be:	f803 1b01 	strb.w	r1, [r3], #1
 80070c2:	e7f9      	b.n	80070b8 <memset+0x4>

080070c4 <__libc_init_array>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	4d0d      	ldr	r5, [pc, #52]	; (80070fc <__libc_init_array+0x38>)
 80070c8:	4c0d      	ldr	r4, [pc, #52]	; (8007100 <__libc_init_array+0x3c>)
 80070ca:	1b64      	subs	r4, r4, r5
 80070cc:	10a4      	asrs	r4, r4, #2
 80070ce:	2600      	movs	r6, #0
 80070d0:	42a6      	cmp	r6, r4
 80070d2:	d109      	bne.n	80070e8 <__libc_init_array+0x24>
 80070d4:	4d0b      	ldr	r5, [pc, #44]	; (8007104 <__libc_init_array+0x40>)
 80070d6:	4c0c      	ldr	r4, [pc, #48]	; (8007108 <__libc_init_array+0x44>)
 80070d8:	f000 f826 	bl	8007128 <_init>
 80070dc:	1b64      	subs	r4, r4, r5
 80070de:	10a4      	asrs	r4, r4, #2
 80070e0:	2600      	movs	r6, #0
 80070e2:	42a6      	cmp	r6, r4
 80070e4:	d105      	bne.n	80070f2 <__libc_init_array+0x2e>
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ec:	4798      	blx	r3
 80070ee:	3601      	adds	r6, #1
 80070f0:	e7ee      	b.n	80070d0 <__libc_init_array+0xc>
 80070f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f6:	4798      	blx	r3
 80070f8:	3601      	adds	r6, #1
 80070fa:	e7f2      	b.n	80070e2 <__libc_init_array+0x1e>
 80070fc:	080072e8 	.word	0x080072e8
 8007100:	080072e8 	.word	0x080072e8
 8007104:	080072e8 	.word	0x080072e8
 8007108:	080072ec 	.word	0x080072ec

0800710c <memcpy>:
 800710c:	440a      	add	r2, r1
 800710e:	4291      	cmp	r1, r2
 8007110:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007114:	d100      	bne.n	8007118 <memcpy+0xc>
 8007116:	4770      	bx	lr
 8007118:	b510      	push	{r4, lr}
 800711a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007122:	4291      	cmp	r1, r2
 8007124:	d1f9      	bne.n	800711a <memcpy+0xe>
 8007126:	bd10      	pop	{r4, pc}

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
