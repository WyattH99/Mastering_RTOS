
008_Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d4c  08006d4c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d54  08006d54  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e90  20000014  08006d70  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ea4  08006d70  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015204  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003315  00000000  00000000  0003528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edf  00000000  00000000  000398b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e20  00000000  00000000  0003a797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169f5  00000000  00000000  0003d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df7a1  00000000  00000000  00053fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fcc  00000000  00000000  00133750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006cc8 	.word	0x08006cc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08006cc8 	.word	0x08006cc8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fcb1 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f8df 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f99d 	bl	8000858 <MX_GPIO_Init>
  MX_RTC_Init();
 800051e:	f000 f94b 	bl	80007b8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f96f 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(menu_task_handler, "menu_task", 250, NULL, 2, &menu_task_handle);
 8000526:	4b59      	ldr	r3, [pc, #356]	; (800068c <main+0x180>)
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	22fa      	movs	r2, #250	; 0xfa
 8000532:	4957      	ldr	r1, [pc, #348]	; (8000690 <main+0x184>)
 8000534:	4857      	ldr	r0, [pc, #348]	; (8000694 <main+0x188>)
 8000536:	f004 fa05 	bl	8004944 <xTaskCreate>
 800053a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d00a      	beq.n	8000558 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000546:	f383 8811 	msr	BASEPRI, r3
 800054a:	f3bf 8f6f 	isb	sy
 800054e:	f3bf 8f4f 	dsb	sy
 8000552:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000554:	bf00      	nop
 8000556:	e7fe      	b.n	8000556 <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 250, NULL, 2, &cmd_task_handle);
 8000558:	4b4f      	ldr	r3, [pc, #316]	; (8000698 <main+0x18c>)
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2302      	movs	r3, #2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	22fa      	movs	r2, #250	; 0xfa
 8000564:	494d      	ldr	r1, [pc, #308]	; (800069c <main+0x190>)
 8000566:	484e      	ldr	r0, [pc, #312]	; (80006a0 <main+0x194>)
 8000568:	f004 f9ec 	bl	8004944 <xTaskCreate>
 800056c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d00a      	beq.n	800058a <main+0x7e>
        __asm volatile
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	617b      	str	r3, [r7, #20]
    }
 8000586:	bf00      	nop
 8000588:	e7fe      	b.n	8000588 <main+0x7c>

  status = xTaskCreate(print_task_handler, "print_task", 250, NULL, 2, &print_task_handle);
 800058a:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <main+0x198>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22fa      	movs	r2, #250	; 0xfa
 8000596:	4944      	ldr	r1, [pc, #272]	; (80006a8 <main+0x19c>)
 8000598:	4844      	ldr	r0, [pc, #272]	; (80006ac <main+0x1a0>)
 800059a:	f004 f9d3 	bl	8004944 <xTaskCreate>
 800059e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0xb0>
        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	613b      	str	r3, [r7, #16]
    }
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0xae>

  status = xTaskCreate(led_task_handler, "led_task", 250, NULL, 2, &led_task_handle);
 80005bc:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <main+0x1a4>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	22fa      	movs	r2, #250	; 0xfa
 80005c8:	493a      	ldr	r1, [pc, #232]	; (80006b4 <main+0x1a8>)
 80005ca:	483b      	ldr	r0, [pc, #236]	; (80006b8 <main+0x1ac>)
 80005cc:	f004 f9ba 	bl	8004944 <xTaskCreate>
 80005d0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0xe2>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	60fb      	str	r3, [r7, #12]
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0xe0>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 250, NULL, 2, &rtc_task_handle);
 80005ee:	4b33      	ldr	r3, [pc, #204]	; (80006bc <main+0x1b0>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22fa      	movs	r2, #250	; 0xfa
 80005fa:	4931      	ldr	r1, [pc, #196]	; (80006c0 <main+0x1b4>)
 80005fc:	4831      	ldr	r0, [pc, #196]	; (80006c4 <main+0x1b8>)
 80005fe:	f004 f9a1 	bl	8004944 <xTaskCreate>
 8000602:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d00a      	beq.n	8000620 <main+0x114>
        __asm volatile
 800060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060e:	f383 8811 	msr	BASEPRI, r3
 8000612:	f3bf 8f6f 	isb	sy
 8000616:	f3bf 8f4f 	dsb	sy
 800061a:	60bb      	str	r3, [r7, #8]
    }
 800061c:	bf00      	nop
 800061e:	e7fe      	b.n	800061e <main+0x112>

  q_data_handle = xQueueCreate(10, sizeof(char));
 8000620:	2200      	movs	r2, #0
 8000622:	2101      	movs	r1, #1
 8000624:	200a      	movs	r0, #10
 8000626:	f003 fd33 	bl	8004090 <xQueueGenericCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <main+0x1bc>)
 800062e:	6013      	str	r3, [r2, #0]

  configASSERT(q_data_handle != NULL);
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <main+0x1bc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10a      	bne.n	800064e <main+0x142>
        __asm volatile
 8000638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063c:	f383 8811 	msr	BASEPRI, r3
 8000640:	f3bf 8f6f 	isb	sy
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	607b      	str	r3, [r7, #4]
    }
 800064a:	bf00      	nop
 800064c:	e7fe      	b.n	800064c <main+0x140>

  q_print_handle = xQueueCreate(10, sizeof(size_t));
 800064e:	2200      	movs	r2, #0
 8000650:	2104      	movs	r1, #4
 8000652:	200a      	movs	r0, #10
 8000654:	f003 fd1c 	bl	8004090 <xQueueGenericCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <main+0x1c0>)
 800065c:	6013      	str	r3, [r2, #0]

  configASSERT(q_print_handle != NULL);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <main+0x1c0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10a      	bne.n	800067c <main+0x170>
        __asm volatile
 8000666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066a:	f383 8811 	msr	BASEPRI, r3
 800066e:	f3bf 8f6f 	isb	sy
 8000672:	f3bf 8f4f 	dsb	sy
 8000676:	603b      	str	r3, [r7, #0]
    }
 8000678:	bf00      	nop
 800067a:	e7fe      	b.n	800067a <main+0x16e>

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	4914      	ldr	r1, [pc, #80]	; (80006d0 <main+0x1c4>)
 8000680:	4814      	ldr	r0, [pc, #80]	; (80006d4 <main+0x1c8>)
 8000682:	f002 fc96 	bl	8002fb2 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000686:	f004 fac7 	bl	8004c18 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x17e>
 800068c:	20000094 	.word	0x20000094
 8000690:	08006ce0 	.word	0x08006ce0
 8000694:	08000ce1 	.word	0x08000ce1
 8000698:	20000098 	.word	0x20000098
 800069c:	08006cec 	.word	0x08006cec
 80006a0:	08000ceb 	.word	0x08000ceb
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	08006cf8 	.word	0x08006cf8
 80006ac:	08000e05 	.word	0x08000e05
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	08006d04 	.word	0x08006d04
 80006b8:	08000e0f 	.word	0x08000e0f
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	08006d10 	.word	0x08006d10
 80006c4:	08000e19 	.word	0x08000e19
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	200000ac 	.word	0x200000ac
 80006d0:	200000b0 	.word	0x200000b0
 80006d4:	20000050 	.word	0x20000050

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fab4 	bl	8006c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <SystemClock_Config+0xd8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <SystemClock_Config+0xdc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000734:	230a      	movs	r3, #10
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000754:	23a8      	movs	r3, #168	; 0xa8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fd8f 	bl	800228c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000774:	f000 f954 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fed2 	bl	8001540 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007a2:	f000 f93d 	bl	8000a20 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_RTC_Init+0x44>)
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <MX_RTC_Init+0x48>)
 80007c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_RTC_Init+0x44>)
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_RTC_Init+0x44>)
 80007ca:	227f      	movs	r2, #127	; 0x7f
 80007cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_RTC_Init+0x44>)
 80007d0:	22ff      	movs	r2, #255	; 0xff
 80007d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_RTC_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_RTC_Init+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_RTC_Init+0x44>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_RTC_Init+0x44>)
 80007e8:	f001 ffee 	bl	80027c8 <HAL_RTC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007f2:	f000 f915 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000030 	.word	0x20000030
 8000800:	40002800 	.word	0x40002800

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f002 fb6c 	bl	8002f18 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f8eb 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000050 	.word	0x20000050
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b39      	ldr	r3, [pc, #228]	; (8000958 <MX_GPIO_Init+0x100>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a38      	ldr	r2, [pc, #224]	; (8000958 <MX_GPIO_Init+0x100>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b36      	ldr	r3, [pc, #216]	; (8000958 <MX_GPIO_Init+0x100>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MX_GPIO_Init+0x100>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a31      	ldr	r2, [pc, #196]	; (8000958 <MX_GPIO_Init+0x100>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <MX_GPIO_Init+0x100>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_GPIO_Init+0x100>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <MX_GPIO_Init+0x100>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_GPIO_Init+0x100>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0x100>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_GPIO_Init+0x100>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0x100>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008e4:	481d      	ldr	r0, [pc, #116]	; (800095c <MX_GPIO_Init+0x104>)
 80008e6:	f000 fe11 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x108>)
 80008f2:	f000 fe0b 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_GPIO_Init+0x10c>)
 800090e:	f000 fc69 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin|LD3_Pin;
 8000912:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0x104>)
 800092c:	f000 fc5a 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin;
 8000930:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0x108>)
 800094a:	f000 fc4b 	bl	80011e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400
 8000964:	40020800 	.word	0x40020800

08000968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]

	if(!xQueueIsQueueFullFromISR(q_data_handle)){
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_UART_RxCpltCallback+0x84>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f003 ff3c 	bl	80047f2 <xQueueIsQueueFullFromISR>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <HAL_UART_RxCpltCallback+0x28>
		// Enqueue Data
		xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_RxCpltCallback+0x84>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	2200      	movs	r2, #0
 8000988:	4919      	ldr	r1, [pc, #100]	; (80009f0 <HAL_UART_RxCpltCallback+0x88>)
 800098a:	f003 fbf2 	bl	8004172 <xQueueGenericSendFromISR>
 800098e:	e013      	b.n	80009b8 <HAL_UART_RxCpltCallback+0x50>
	}else{
		if(user_data == '\n'){
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_UART_RxCpltCallback+0x88>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b0a      	cmp	r3, #10
 8000998:	d10e      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x50>
			// Remove the last item in the Queue
			uint8_t empty_data;
			xQueueReceiveFromISR(q_data_handle, (void*)&empty_data, NULL);
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_RxCpltCallback+0x84>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f107 010f 	add.w	r1, r7, #15
 80009a2:	2200      	movs	r2, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fd77 	bl	8004498 <xQueueReceiveFromISR>
			// Enqueue the \n
			xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_UART_RxCpltCallback+0x84>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	490f      	ldr	r1, [pc, #60]	; (80009f0 <HAL_UART_RxCpltCallback+0x88>)
 80009b4:	f003 fbdd 	bl	8004172 <xQueueGenericSendFromISR>
		}
	}

	// If data is \n then notify the cmd_task
	if(user_data == '\n'){
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_UART_RxCpltCallback+0x88>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b0a      	cmp	r3, #10
 80009c0:	d10a      	bne.n	80009d8 <HAL_UART_RxCpltCallback+0x70>
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_UART_RxCpltCallback+0x8c>)
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	2300      	movs	r3, #0
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	f005 f8be 	bl	8005b54 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	4905      	ldr	r1, [pc, #20]	; (80009f0 <HAL_UART_RxCpltCallback+0x88>)
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <HAL_UART_RxCpltCallback+0x90>)
 80009de:	f002 fae8 	bl	8002fb2 <HAL_UART_Receive_IT>


}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000a8 	.word	0x200000a8
 80009f0:	200000b0 	.word	0x200000b0
 80009f4:	20000098 	.word	0x20000098
 80009f8:	20000050 	.word	0x20000050

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 fa55 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40001000 	.word	0x40001000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09a      	sub	sp, #104	; 0x68
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	225c      	movs	r2, #92	; 0x5c
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 f8e1 	bl	8006c54 <memset>
  if(hrtc->Instance==RTC)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <HAL_RTC_MspInit+0x4c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d111      	bne.n	8000ac0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fe94 	bl	80017d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000ab6:	f7ff ffb3 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_RTC_MspInit+0x50>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3768      	adds	r7, #104	; 0x68
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40002800 	.word	0x40002800
 8000acc:	42470e3c 	.word	0x42470e3c

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_UART_MspInit+0x94>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d133      	bne.n	8000b5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_UART_MspInit+0x98>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_UART_MspInit+0x98>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_UART_MspInit+0x98>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <HAL_UART_MspInit+0x98>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_UART_MspInit+0x9c>)
 8000b46:	f000 fb4d 	bl	80011e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2106      	movs	r1, #6
 8000b4e:	2026      	movs	r0, #38	; 0x26
 8000b50:	f000 fa8c 	bl	800106c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b54:	2026      	movs	r0, #38	; 0x26
 8000b56:	f000 faa5 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <HAL_InitTick+0xe4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <HAL_InitTick+0xe4>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <HAL_InitTick+0xe4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 0210 	add.w	r2, r7, #16
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fde4 	bl	8001774 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb6:	f000 fdb5 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8000bba:	6378      	str	r0, [r7, #52]	; 0x34
 8000bbc:	e004      	b.n	8000bc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bbe:	f000 fdb1 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <HAL_InitTick+0xe8>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9b      	lsrs	r3, r3, #18
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_InitTick+0xec>)
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <HAL_InitTick+0xf0>)
 8000bda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_InitTick+0xec>)
 8000bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_InitTick+0xec>)
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_InitTick+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_InitTick+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_InitTick+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <HAL_InitTick+0xec>)
 8000bfe:	f001 fedd 	bl	80029bc <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d11b      	bne.n	8000c48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <HAL_InitTick+0xec>)
 8000c12:	f001 ff2d 	bl	8002a70 <HAL_TIM_Base_Start_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c24:	2036      	movs	r0, #54	; 0x36
 8000c26:	f000 fa3d 	bl	80010a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d808      	bhi.n	8000c42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2036      	movs	r0, #54	; 0x36
 8000c36:	f000 fa19 	bl	800106c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0xf4>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e002      	b.n	8000c48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3738      	adds	r7, #56	; 0x38
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	200000b4 	.word	0x200000b4
 8000c60:	40001000 	.word	0x40001000
 8000c64:	20000004 	.word	0x20000004

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <USART2_IRQHandler+0x10>)
 8000c9a:	f002 f9bb 	bl	8003014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000050 	.word	0x20000050

08000ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM6_DAC_IRQHandler+0x10>)
 8000cae:	f001 ff4f 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000b4 	.word	0x200000b4

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <menu_task_handler>:
int extract_command(command_t* cmd);
void process_command(command_t* cmd);



void menu_task_handler(void* param){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	while(1){
 8000ce8:	e7fe      	b.n	8000ce8 <menu_task_handler+0x8>

08000cea <cmd_task_handler>:

	}
}


void cmd_task_handler(void* param){
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b088      	sub	sp, #32
 8000cee:	af02      	add	r7, sp, #8
 8000cf0:	6078      	str	r0, [r7, #4]
	command_t command;

	while(1){

		// Notify wait until notification
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f004 fd86 	bl	8005810 <xTaskGenericNotifyWait>
 8000d04:	6178      	str	r0, [r7, #20]
		// Process the user data(command) stored in input data queue
		if(returnedVal == pdTRUE){
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d1f2      	bne.n	8000cf2 <cmd_task_handler+0x8>
			process_command(&command);
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f801 	bl	8000d18 <process_command>
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d16:	e7ec      	b.n	8000cf2 <cmd_task_handler+0x8>

08000d18 <process_command>:
		// Notify the command to relevant task
	}
}

// Helper function for Command
void process_command(command_t* cmd){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f835 	bl	8000d90 <extract_command>

	switch(curr_state){
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <process_command+0x68>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	dc24      	bgt.n	8000d78 <process_command+0x60>
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	da18      	bge.n	8000d64 <process_command+0x4c>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <process_command+0x24>
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00a      	beq.n	8000d50 <process_command+0x38>
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}
 8000d3a:	e01d      	b.n	8000d78 <process_command+0x60>
		xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <process_command+0x6c>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	2300      	movs	r3, #0
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f004 fde1 	bl	8005910 <xTaskGenericNotify>
		break;
 8000d4e:	e013      	b.n	8000d78 <process_command+0x60>
		xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <process_command+0x70>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	2300      	movs	r3, #0
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f004 fdd7 	bl	8005910 <xTaskGenericNotify>
		break;
 8000d62:	e009      	b.n	8000d78 <process_command+0x60>
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <process_command+0x74>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2303      	movs	r3, #3
 8000d70:	2100      	movs	r1, #0
 8000d72:	f004 fdcd 	bl	8005910 <xTaskGenericNotify>
		break;
 8000d76:	bf00      	nop
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000b1 	.word	0x200000b1
 8000d84:	20000094 	.word	0x20000094
 8000d88:	200000a0 	.word	0x200000a0
 8000d8c:	200000a4 	.word	0x200000a4

08000d90 <extract_command>:

// Helper Function for Process_Command
int extract_command(command_t* cmd){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data_handle);
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <extract_command+0x70>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fc12 	bl	80045c6 <uxQueueMessagesWaiting>
 8000da2:	4603      	mov	r3, r0
 8000da4:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <extract_command+0x22>
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db0:	e022      	b.n	8000df8 <extract_command+0x68>
	uint8_t i = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data_handle, &item, 0);
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <extract_command+0x70>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f107 010f 	add.w	r1, r7, #15
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 fa89 	bl	80042d8 <xQueueReceive>
 8000dc6:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d106      	bne.n	8000ddc <extract_command+0x4c>
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	75fa      	strb	r2, [r7, #23]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	7bf9      	ldrb	r1, [r7, #15]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b0a      	cmp	r3, #10
 8000de0:	d1e9      	bne.n	8000db6 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	2100      	movs	r1, #0
 8000dea:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	729a      	strb	r2, [r3, #10]

	return 0;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000a8 	.word	0x200000a8

08000e04 <print_task_handler>:


void print_task_handler(void* param){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	while(1){
 8000e0c:	e7fe      	b.n	8000e0c <print_task_handler+0x8>

08000e0e <led_task_handler>:

	}
}

void led_task_handler(void* param){
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	while(1){
 8000e16:	e7fe      	b.n	8000e16 <led_task_handler+0x8>

08000e18 <rtc_task_handler>:

	}
}

void rtc_task_handler(void* param){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	while(1){
 8000e20:	e7fe      	b.n	8000e20 <rtc_task_handler+0x8>
	...

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ff35 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f005 ff07 	bl	8006c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fb59 	bl	800050c <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e68:	08006d5c 	.word	0x08006d5c
  ldr r2, =_sbss
 8000e6c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e70:	20012ea4 	.word	0x20012ea4

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8d8 	bl	8001056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff fe62 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fdbe 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	200000fc 	.word	0x200000fc

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000fc 	.word	0x200000fc

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff4c 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107e:	f7ff ff61 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 8001082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff ffb1 	bl	8000ff0 <NVIC_EncodePriority>
 800108e:	4602      	mov	r2, r0
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff80 	bl	8000f9c <__NVIC_SetPriority>
}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff54 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ce:	f7ff ff09 	bl	8000ee4 <HAL_GetTick>
 80010d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d008      	beq.n	80010f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e052      	b.n	8001198 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0216 	bic.w	r2, r2, #22
 8001100:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001110:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <HAL_DMA_Abort+0x62>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0208 	bic.w	r2, r2, #8
 8001130:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0201 	bic.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	e013      	b.n	800116c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001144:	f7ff fece 	bl	8000ee4 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b05      	cmp	r3, #5
 8001150:	d90c      	bls.n	800116c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2220      	movs	r2, #32
 8001156:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e015      	b.n	8001198 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1e4      	bne.n	8001144 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	223f      	movs	r2, #63	; 0x3f
 8001180:	409a      	lsls	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d004      	beq.n	80011be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00c      	b.n	80011d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e165      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8154 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80ae 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a5c      	ldr	r2, [pc, #368]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <HAL_GPIO_Init+0x300>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <HAL_GPIO_Init+0x308>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x21a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4e      	ldr	r2, [pc, #312]	; (80014f0 <HAL_GPIO_Init+0x30c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x216>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4d      	ldr	r2, [pc, #308]	; (80014f4 <HAL_GPIO_Init+0x310>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x212>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <HAL_GPIO_Init+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_GPIO_Init+0x318>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x20a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <HAL_GPIO_Init+0x31c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x206>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_GPIO_Init+0x320>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x202>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a31      	ldr	r2, [pc, #196]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x324>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <HAL_GPIO_Init+0x324>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <HAL_GPIO_Init+0x324>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x324>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_GPIO_Init+0x324>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae96 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0cc      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d90c      	bls.n	800157c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b8      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001594:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a58      	ldr	r2, [pc, #352]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800159e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	494d      	ldr	r1, [pc, #308]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d044      	beq.n	8001660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d119      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e07f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e067      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f023 0203 	bic.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4934      	ldr	r1, [pc, #208]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff fc58 	bl	8000ee4 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	e00a      	b.n	800164e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fc54 	bl	8000ee4 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e04f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 020c 	and.w	r2, r3, #12
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1eb      	bne.n	8001638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d20c      	bcs.n	8001688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e032      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4916      	ldr	r1, [pc, #88]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c6:	f000 fbb1 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	490a      	ldr	r1, [pc, #40]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fa42 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00
 80016fc:	40023800 	.word	0x40023800
 8001700:	08006d34 	.word	0x08006d34
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_RCC_GetHCLKFreq+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001728:	f7ff fff0 	bl	800170c <HAL_RCC_GetHCLKFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	0a9b      	lsrs	r3, r3, #10
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	4903      	ldr	r1, [pc, #12]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	08006d44 	.word	0x08006d44

0800174c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001750:	f7ff ffdc 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0b5b      	lsrs	r3, r3, #13
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08006d44 	.word	0x08006d44

08001774 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	220f      	movs	r2, #15
 8001782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_GetClockConfig+0x5c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_GetClockConfig+0x5c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCC_GetClockConfig+0x60>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 020f 	and.w	r2, r3, #15
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001810:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001816:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	496c      	ldr	r1, [pc, #432]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001820:	4313      	orrs	r3, r2
 8001822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800182e:	2301      	movs	r3, #1
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d010      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800183e:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001844:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800185c:	2301      	movs	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800186c:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4955      	ldr	r1, [pc, #340]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188a:	d101      	bne.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800188c:	2301      	movs	r3, #1
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001898:	2301      	movs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d017      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018a8:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	4946      	ldr	r1, [pc, #280]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c6:	d101      	bne.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0320 	and.w	r3, r3, #32
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808a 	beq.w	80019fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800190e:	f7ff fae9 	bl	8000ee4 <HAL_GetTick>
 8001912:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff fae5 	bl	8000ee4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e278      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d02f      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	429a      	cmp	r2, r3
 8001950:	d028      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d114      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fab3 	bl	8000ee4 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	e00a      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff faaf 	bl	8000ee4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e240      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ee      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019b0:	d114      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80019c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c6:	4902      	ldr	r1, [pc, #8]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	e00c      	b.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000
 80019d8:	42470e40 	.word	0x42470e40
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80019e6:	6093      	str	r3, [r2, #8]
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	4944      	ldr	r1, [pc, #272]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001a0e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4937      	ldr	r1, [pc, #220]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	492e      	ldr	r1, [pc, #184]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d011      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a66:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	4926      	ldr	r1, [pc, #152]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00a      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	491a      	ldr	r1, [pc, #104]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d011      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac0:	4911      	ldr	r1, [pc, #68]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ae4:	f040 80ff 	bne.w	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aee:	f7ff f9f9 	bl	8000ee4 <HAL_GetTick>
 8001af2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001af4:	e00e      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001af6:	f7ff f9f5 	bl	8000ee4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d907      	bls.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e188      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	424711e0 	.word	0x424711e0
 8001b10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b14:	4b7e      	ldr	r3, [pc, #504]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ea      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d028      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d124      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b48:	4b71      	ldr	r3, [pc, #452]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	3301      	adds	r3, #1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b60:	0e1b      	lsrs	r3, r3, #24
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	431a      	orrs	r2, r3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	071b      	lsls	r3, r3, #28
 8001b8a:	4961      	ldr	r1, [pc, #388]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ba6:	d00a      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d035      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bbc:	d130      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bbe:	4b54      	ldr	r3, [pc, #336]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd6:	0f1b      	lsrs	r3, r3, #28
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	019b      	lsls	r3, r3, #6
 8001be8:	431a      	orrs	r2, r3
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	071b      	lsls	r3, r3, #28
 8001c00:	4943      	ldr	r1, [pc, #268]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c0e:	f023 021f 	bic.w	r2, r3, #31
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	3b01      	subs	r3, #1
 8001c18:	493d      	ldr	r1, [pc, #244]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d029      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c34:	d124      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c3c:	0c1b      	lsrs	r3, r3, #16
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	3301      	adds	r3, #1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c48:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c4e:	0f1b      	lsrs	r3, r3, #28
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	019b      	lsls	r3, r3, #6
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	431a      	orrs	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	071b      	lsls	r3, r3, #28
 8001c78:	4925      	ldr	r1, [pc, #148]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d016      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	019b      	lsls	r3, r3, #6
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	071b      	lsls	r3, r3, #28
 8001cb2:	4917      	ldr	r1, [pc, #92]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc0:	f7ff f910 	bl	8000ee4 <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cc8:	f7ff f90c 	bl	8000ee4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e09f      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	f040 8095 	bne.w	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f8f6 	bl	8000ee4 <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cfc:	f7ff f8f2 	bl	8000ee4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d908      	bls.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e085      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470068 	.word	0x42470068
 8001d18:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d28:	d0e8      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d02b      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d127      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	061b      	lsls	r3, r3, #24
 8001d80:	4928      	ldr	r1, [pc, #160]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	3b01      	subs	r3, #1
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01d      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001db6:	d118      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	0e1b      	lsrs	r3, r3, #24
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	061b      	lsls	r3, r3, #24
 8001de2:	4910      	ldr	r1, [pc, #64]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff f878 	bl	8000ee4 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001df8:	f7ff f874 	bl	8000ee4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e007      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e16:	d1ef      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3730      	adds	r7, #48	; 0x30
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470070 	.word	0x42470070

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e30:	b0ae      	sub	sp, #184	; 0xb8
 8001e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e52:	4bcb      	ldr	r3, [pc, #812]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	f200 8206 	bhi.w	800226c <HAL_RCC_GetSysClockFreq+0x440>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e9d 	.word	0x08001e9d
 8001e6c:	0800226d 	.word	0x0800226d
 8001e70:	0800226d 	.word	0x0800226d
 8001e74:	0800226d 	.word	0x0800226d
 8001e78:	08001ea5 	.word	0x08001ea5
 8001e7c:	0800226d 	.word	0x0800226d
 8001e80:	0800226d 	.word	0x0800226d
 8001e84:	0800226d 	.word	0x0800226d
 8001e88:	08001ead 	.word	0x08001ead
 8001e8c:	0800226d 	.word	0x0800226d
 8001e90:	0800226d 	.word	0x0800226d
 8001e94:	0800226d 	.word	0x0800226d
 8001e98:	0800209d 	.word	0x0800209d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4bb9      	ldr	r3, [pc, #740]	; (8002184 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ea2:	e1e7      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ea4:	4bb8      	ldr	r3, [pc, #736]	; (8002188 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eaa:	e1e3      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eac:	4bb4      	ldr	r3, [pc, #720]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb8:	4bb1      	ldr	r3, [pc, #708]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d071      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec4:	4bae      	ldr	r3, [pc, #696]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ed0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001edc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001eea:	4622      	mov	r2, r4
 8001eec:	462b      	mov	r3, r5
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0159      	lsls	r1, r3, #5
 8001ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efc:	0150      	lsls	r0, r2, #5
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4621      	mov	r1, r4
 8001f04:	1a51      	subs	r1, r2, r1
 8001f06:	6439      	str	r1, [r7, #64]	; 0x40
 8001f08:	4629      	mov	r1, r5
 8001f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	018b      	lsls	r3, r1, #6
 8001f20:	4641      	mov	r1, r8
 8001f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f26:	4641      	mov	r1, r8
 8001f28:	018a      	lsls	r2, r1, #6
 8001f2a:	4641      	mov	r1, r8
 8001f2c:	1a51      	subs	r1, r2, r1
 8001f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f30:	4649      	mov	r1, r9
 8001f32:	eb63 0301 	sbc.w	r3, r3, r1
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f44:	4649      	mov	r1, r9
 8001f46:	00cb      	lsls	r3, r1, #3
 8001f48:	4641      	mov	r1, r8
 8001f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f4e:	4641      	mov	r1, r8
 8001f50:	00ca      	lsls	r2, r1, #3
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	4622      	mov	r2, r4
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5e:	462b      	mov	r3, r5
 8001f60:	460a      	mov	r2, r1
 8001f62:	eb42 0303 	adc.w	r3, r2, r3
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f74:	4629      	mov	r1, r5
 8001f76:	024b      	lsls	r3, r1, #9
 8001f78:	4621      	mov	r1, r4
 8001f7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f7e:	4621      	mov	r1, r4
 8001f80:	024a      	lsls	r2, r1, #9
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f98:	f7fe f93a 	bl	8000210 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fa6:	e067      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fca:	4622      	mov	r2, r4
 8001fcc:	462b      	mov	r3, r5
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	1a51      	subs	r1, r2, r1
 8001fe6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb63 0301 	sbc.w	r3, r3, r1
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	018b      	lsls	r3, r1, #6
 8002000:	4641      	mov	r1, r8
 8002002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002006:	4641      	mov	r1, r8
 8002008:	018a      	lsls	r2, r1, #6
 800200a:	4641      	mov	r1, r8
 800200c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002010:	4649      	mov	r1, r9
 8002012:	eb63 0b01 	sbc.w	fp, r3, r1
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002022:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800202a:	4692      	mov	sl, r2
 800202c:	469b      	mov	fp, r3
 800202e:	4623      	mov	r3, r4
 8002030:	eb1a 0303 	adds.w	r3, sl, r3
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	462b      	mov	r3, r5
 8002038:	eb4b 0303 	adc.w	r3, fp, r3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800204a:	4629      	mov	r1, r5
 800204c:	028b      	lsls	r3, r1, #10
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002054:	4621      	mov	r1, r4
 8002056:	028a      	lsls	r2, r1, #10
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002060:	2200      	movs	r2, #0
 8002062:	673b      	str	r3, [r7, #112]	; 0x70
 8002064:	677a      	str	r2, [r7, #116]	; 0x74
 8002066:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800206a:	f7fe f8d1 	bl	8000210 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4613      	mov	r3, r2
 8002074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800208a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800208e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800209a:	e0eb      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800209c:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d06b      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	2200      	movs	r2, #0
 80020bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80020be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c6:	663b      	str	r3, [r7, #96]	; 0x60
 80020c8:	2300      	movs	r3, #0
 80020ca:	667b      	str	r3, [r7, #100]	; 0x64
 80020cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020d0:	4622      	mov	r2, r4
 80020d2:	462b      	mov	r3, r5
 80020d4:	f04f 0000 	mov.w	r0, #0
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	0159      	lsls	r1, r3, #5
 80020de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e2:	0150      	lsls	r0, r2, #5
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4621      	mov	r1, r4
 80020ea:	1a51      	subs	r1, r2, r1
 80020ec:	61b9      	str	r1, [r7, #24]
 80020ee:	4629      	mov	r1, r5
 80020f0:	eb63 0301 	sbc.w	r3, r3, r1
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002102:	4659      	mov	r1, fp
 8002104:	018b      	lsls	r3, r1, #6
 8002106:	4651      	mov	r1, sl
 8002108:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800210c:	4651      	mov	r1, sl
 800210e:	018a      	lsls	r2, r1, #6
 8002110:	4651      	mov	r1, sl
 8002112:	ebb2 0801 	subs.w	r8, r2, r1
 8002116:	4659      	mov	r1, fp
 8002118:	eb63 0901 	sbc.w	r9, r3, r1
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002128:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800212c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002130:	4690      	mov	r8, r2
 8002132:	4699      	mov	r9, r3
 8002134:	4623      	mov	r3, r4
 8002136:	eb18 0303 	adds.w	r3, r8, r3
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	462b      	mov	r3, r5
 800213e:	eb49 0303 	adc.w	r3, r9, r3
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002150:	4629      	mov	r1, r5
 8002152:	024b      	lsls	r3, r1, #9
 8002154:	4621      	mov	r1, r4
 8002156:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800215a:	4621      	mov	r1, r4
 800215c:	024a      	lsls	r2, r1, #9
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002166:	2200      	movs	r2, #0
 8002168:	65bb      	str	r3, [r7, #88]	; 0x58
 800216a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800216c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002170:	f7fe f84e 	bl	8000210 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4613      	mov	r3, r2
 800217a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800217e:	e065      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x420>
 8002180:	40023800 	.word	0x40023800
 8002184:	00f42400 	.word	0x00f42400
 8002188:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_GetSysClockFreq+0x458>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	2200      	movs	r2, #0
 8002194:	4618      	mov	r0, r3
 8002196:	4611      	mov	r1, r2
 8002198:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800219c:	653b      	str	r3, [r7, #80]	; 0x50
 800219e:	2300      	movs	r3, #0
 80021a0:	657b      	str	r3, [r7, #84]	; 0x54
 80021a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80021a6:	4642      	mov	r2, r8
 80021a8:	464b      	mov	r3, r9
 80021aa:	f04f 0000 	mov.w	r0, #0
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	0159      	lsls	r1, r3, #5
 80021b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b8:	0150      	lsls	r0, r2, #5
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4641      	mov	r1, r8
 80021c0:	1a51      	subs	r1, r2, r1
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	4649      	mov	r1, r9
 80021c6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021d8:	4659      	mov	r1, fp
 80021da:	018b      	lsls	r3, r1, #6
 80021dc:	4651      	mov	r1, sl
 80021de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021e2:	4651      	mov	r1, sl
 80021e4:	018a      	lsls	r2, r1, #6
 80021e6:	4651      	mov	r1, sl
 80021e8:	1a54      	subs	r4, r2, r1
 80021ea:	4659      	mov	r1, fp
 80021ec:	eb63 0501 	sbc.w	r5, r3, r1
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	00eb      	lsls	r3, r5, #3
 80021fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021fe:	00e2      	lsls	r2, r4, #3
 8002200:	4614      	mov	r4, r2
 8002202:	461d      	mov	r5, r3
 8002204:	4643      	mov	r3, r8
 8002206:	18e3      	adds	r3, r4, r3
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	464b      	mov	r3, r9
 800220c:	eb45 0303 	adc.w	r3, r5, r3
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800221e:	4629      	mov	r1, r5
 8002220:	028b      	lsls	r3, r1, #10
 8002222:	4621      	mov	r1, r4
 8002224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002228:	4621      	mov	r1, r4
 800222a:	028a      	lsls	r2, r1, #10
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002234:	2200      	movs	r2, #0
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
 8002238:	64fa      	str	r2, [r7, #76]	; 0x4c
 800223a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800223e:	f7fd ffe7 	bl	8000210 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4613      	mov	r3, r2
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_GetSysClockFreq+0x458>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	0f1b      	lsrs	r3, r3, #28
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800225a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800225e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800226a:	e003      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_GetSysClockFreq+0x45c>)
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002272:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002278:	4618      	mov	r0, r3
 800227a:	37b8      	adds	r7, #184	; 0xb8
 800227c:	46bd      	mov	sp, r7
 800227e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	00f42400 	.word	0x00f42400

0800228c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e28d      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8083 	beq.w	80023b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ac:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d019      	beq.n	80022ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022b8:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c4:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d0:	d00c      	beq.n	80022ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d112      	bne.n	8002304 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ea:	d10b      	bne.n	8002304 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05b      	beq.n	80023b0 <HAL_RCC_OscConfig+0x124>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d157      	bne.n	80023b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e25a      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d106      	bne.n	800231c <HAL_RCC_OscConfig+0x90>
 800230e:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7b      	ldr	r2, [pc, #492]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0xcc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0xb4>
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a72      	ldr	r2, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0xcc>
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6b      	ldr	r2, [pc, #428]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fdc0 	bl	8000ee4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe fdbc 	bl	8000ee4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e21f      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xdc>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fdac 	bl	8000ee4 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002390:	f7fe fda8 	bl	8000ee4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e20b      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x104>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06f      	beq.n	800249e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ca:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d105      	bne.n	80023e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x186>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1d3      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4937      	ldr	r1, [pc, #220]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x278>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe fd55 	bl	8000ee4 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fd51 	bl	8000ee4 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1b4      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4925      	ldr	r1, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_OscConfig+0x278>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fd34 	bl	8000ee4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7fe fd30 	bl	8000ee4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e193      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d036      	beq.n	8002518 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fd14 	bl	8000ee4 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fd10 	bl	8000ee4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e173      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x234>
 80024de:	e01b      	b.n	8002518 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_OscConfig+0x27c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fcfd 	bl	8000ee4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e00e      	b.n	800250c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fcf9 	bl	8000ee4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d907      	bls.n	800250c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e15c      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	4b8a      	ldr	r3, [pc, #552]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ea      	bne.n	80024ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8097 	beq.w	8002654 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b83      	ldr	r3, [pc, #524]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a7e      	ldr	r2, [pc, #504]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b79      	ldr	r3, [pc, #484]	; (800273c <HAL_RCC_OscConfig+0x4b0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x4b0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a75      	ldr	r2, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4b0>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe fcb9 	bl	8000ee4 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe fcb5 	bl	8000ee4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e118      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b6c      	ldr	r3, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x4b0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x31e>
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a65      	ldr	r2, [pc, #404]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x358>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x340>
 80025b2:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a60      	ldr	r2, [pc, #384]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a5d      	ldr	r2, [pc, #372]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x358>
 80025cc:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a59      	ldr	r2, [pc, #356]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fc7a 	bl	8000ee4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe fc76 	bl	8000ee4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0d7      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <HAL_RCC_OscConfig+0x368>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fc64 	bl	8000ee4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe fc60 	bl	8000ee4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0c1      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ee      	bne.n	8002620 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80ad 	beq.w	80027b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d060      	beq.n	800272c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d145      	bne.n	80026fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4b4>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fc34 	bl	8000ee4 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fc30 	bl	8000ee4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e093      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	071b      	lsls	r3, r3, #28
 80026ca:	491b      	ldr	r1, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x4b4>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fc05 	bl	8000ee4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fc01 	bl	8000ee4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e064      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x452>
 80026fc:	e05c      	b.n	80027b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_OscConfig+0x4b4>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fbee 	bl	8000ee4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fbea 	bl	8000ee4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04d      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x480>
 800272a:	e045      	b.n	80027b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e040      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000
 8002740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <HAL_RCC_OscConfig+0x538>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d030      	beq.n	80027b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d129      	bne.n	80027b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d122      	bne.n	80027b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	4293      	cmp	r3, r2
 800277e:	d119      	bne.n	80027b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d10f      	bne.n	80027b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e066      	b.n	80028ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7f5b      	ldrb	r3, [r3, #29]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f944 	bl	8000a7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	22ca      	movs	r2, #202	; 0xca
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2253      	movs	r2, #83	; 0x53
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f87a 	bl	8002904 <RTC_EnterInitMode>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d12c      	bne.n	8002874 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800282c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68d2      	ldr	r2, [r2, #12]
 8002854:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f881 	bl	8002972 <RTC_ExitInitMode>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d113      	bne.n	80028a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d0:	f7fe fb08 	bl	8000ee4 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028d6:	e009      	b.n	80028ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028d8:	f7fe fb04 	bl	8000ee4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e6:	d901      	bls.n	80028ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e007      	b.n	80028fc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d122      	bne.n	8002968 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002930:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002932:	f7fe fad7 	bl	8000ee4 <HAL_GetTick>
 8002936:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002938:	e00c      	b.n	8002954 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800293a:	f7fe fad3 	bl	8000ee4 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002948:	d904      	bls.n	8002954 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2204      	movs	r2, #4
 800294e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <RTC_EnterInitMode+0x64>
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d1e8      	bne.n	800293a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff89 	bl	80028b4 <HAL_RTC_WaitForSynchro>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2204      	movs	r2, #4
 80029ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f839 	bl	8002a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 f9d8 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04e      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a23      	ldr	r2, [pc, #140]	; (8002b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d01d      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d111      	bne.n	8002b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d010      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	e007      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40010400 	.word	0x40010400
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40001800 	.word	0x40001800

08002b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0202 	mvn.w	r2, #2
 8002b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8ee 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8e0 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8f1 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0204 	mvn.w	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8c4 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8b6 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8c7 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0208 	mvn.w	r2, #8
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f89a 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f88c 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f89d 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f870 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f862 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f873 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0201 	mvn.w	r2, #1
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fe94 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f902 	bl	8002f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f838 	bl	8002d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0220 	mvn.w	r2, #32
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8cc 	bl	8002ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a40      	ldr	r2, [pc, #256]	; (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d00f      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3d      	ldr	r2, [pc, #244]	; (8002ec8 <TIM_Base_SetConfig+0x118>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <TIM_Base_SetConfig+0x11c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <TIM_Base_SetConfig+0x120>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d027      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <TIM_Base_SetConfig+0x118>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d023      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <TIM_Base_SetConfig+0x11c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <TIM_Base_SetConfig+0x120>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01b      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d017      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <TIM_Base_SetConfig+0x128>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <TIM_Base_SetConfig+0x12c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00f      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <TIM_Base_SetConfig+0x130>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <TIM_Base_SetConfig+0x134>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a24      	ldr	r2, [pc, #144]	; (8002ee8 <TIM_Base_SetConfig+0x138>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <TIM_Base_SetConfig+0x13c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0xf8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	40001800 	.word	0x40001800
 8002ee8:	40001c00 	.word	0x40001c00
 8002eec:	40002000 	.word	0x40002000

08002ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e03f      	b.n	8002faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fdc6 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fcdf 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d11d      	bne.n	8003008 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_UART_Receive_IT+0x26>
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e016      	b.n	800300a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Receive_IT+0x38>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e00f      	b.n	800300a <HAL_UART_Receive_IT+0x58>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fab6 	bl	8003570 <UART_Start_Receive_IT>
 8003004:	4603      	mov	r3, r0
 8003006:	e000      	b.n	800300a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0ba      	sub	sp, #232	; 0xe8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10f      	bne.n	800307a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_UART_IRQHandler+0x66>
 8003066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fb99 	bl	80037aa <UART_Receive_IT>
      return;
 8003078:	e256      	b.n	8003528 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800307a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80de 	beq.w	8003240 <HAL_UART_IRQHandler+0x22c>
 8003084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80d1 	beq.w	8003240 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_UART_IRQHandler+0xae>
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xd2>
 80030ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0202 	orr.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_UART_IRQHandler+0xf6>
 80030f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800310a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d011      	beq.n	800313a <HAL_UART_IRQHandler+0x126>
 8003116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f043 0208 	orr.w	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 81ed 	beq.w	800351e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_UART_IRQHandler+0x14e>
 8003150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb24 	bl	80037aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <HAL_UART_IRQHandler+0x17a>
 8003186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04f      	beq.n	800322e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa2c 	bl	80035ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d141      	bne.n	8003226 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3314      	adds	r3, #20
 80031a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1d9      	bne.n	80031a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	4a7d      	ldr	r2, [pc, #500]	; (80033f0 <HAL_UART_IRQHandler+0x3dc>)
 80031fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd ffcc 	bl	80011a0 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	e00e      	b.n	800323c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f990 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00a      	b.n	800323c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f98c 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e006      	b.n	800323c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f988 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800323a:	e170      	b.n	800351e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	bf00      	nop
    return;
 800323e:	e16e      	b.n	800351e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	2b01      	cmp	r3, #1
 8003246:	f040 814a 	bne.w	80034de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8143 	beq.w	80034de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 813c 	beq.w	80034de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	f040 80b4 	bne.w	80033f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003298:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8140 	beq.w	8003522 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f080 8139 	bcs.w	8003522 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	f000 8088 	beq.w	80033d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800330a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1d9      	bne.n	80032c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3314      	adds	r3, #20
 8003332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003336:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800333a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800333e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e1      	bne.n	8003312 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e3      	bne.n	800334e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	f023 0310 	bic.w	r3, r3, #16
 80033aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e3      	bne.n	8003394 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fe75 	bl	80010c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8b6 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033ec:	e099      	b.n	8003522 <HAL_UART_IRQHandler+0x50e>
 80033ee:	bf00      	nop
 80033f0:	080036b3 	.word	0x080036b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 808b 	beq.w	8003526 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8086 	beq.w	8003526 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800343e:	647a      	str	r2, [r7, #68]	; 0x44
 8003440:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e3      	bne.n	800341a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	623b      	str	r3, [r7, #32]
   return(result);
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003476:	633a      	str	r2, [r7, #48]	; 0x30
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800347c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e3      	bne.n	8003452 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e3      	bne.n	8003498 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f83e 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034dc:	e023      	b.n	8003526 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_UART_IRQHandler+0x4ea>
 80034ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8ef 	bl	80036da <UART_Transmit_IT>
    return;
 80034fc:	e014      	b.n	8003528 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <HAL_UART_IRQHandler+0x514>
 800350a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f92f 	bl	800377a <UART_EndTransmit_IT>
    return;
 800351c:	e004      	b.n	8003528 <HAL_UART_IRQHandler+0x514>
    return;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <HAL_UART_IRQHandler+0x514>
      return;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <HAL_UART_IRQHandler+0x514>
      return;
 8003526:	bf00      	nop
  }
}
 8003528:	37e8      	adds	r7, #232	; 0xe8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop

08003530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2222      	movs	r2, #34	; 0x22
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0220 	orr.w	r2, r2, #32
 80035dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b095      	sub	sp, #84	; 0x54
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003614:	643a      	str	r2, [r7, #64]	; 0x40
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800361a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	61fb      	str	r3, [r7, #28]
   return(result);
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	2b01      	cmp	r3, #1
 8003662:	d119      	bne.n	8003698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	60bb      	str	r3, [r7, #8]
   return(result);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f023 0310 	bic.w	r3, r3, #16
 800367a:	647b      	str	r3, [r7, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003684:	61ba      	str	r2, [r7, #24]
 8003686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6979      	ldr	r1, [r7, #20]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036a6:	bf00      	nop
 80036a8:	3754      	adds	r7, #84	; 0x54
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff ff39 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b21      	cmp	r3, #33	; 0x21
 80036ec:	d13e      	bne.n	800376c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	d114      	bne.n	8003722 <UART_Transmit_IT+0x48>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d110      	bne.n	8003722 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	1c9a      	adds	r2, r3, #2
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]
 8003720:	e008      	b.n	8003734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6211      	str	r1, [r2, #32]
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4619      	mov	r1, r3
 8003742:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fec8 	bl	8003530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08c      	sub	sp, #48	; 0x30
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b22      	cmp	r3, #34	; 0x22
 80037bc:	f040 80ab 	bne.w	8003916 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d117      	bne.n	80037fa <UART_Receive_IT+0x50>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d113      	bne.n	80037fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
 80037f8:	e026      	b.n	8003848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	d007      	beq.n	800381e <UART_Receive_IT+0x74>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <UART_Receive_IT+0x82>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e008      	b.n	800383e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003838:	b2da      	uxtb	r2, r3
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4619      	mov	r1, r3
 8003856:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003858:	2b00      	cmp	r3, #0
 800385a:	d15a      	bne.n	8003912 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0220 	bic.w	r2, r2, #32
 800386a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2b01      	cmp	r3, #1
 800389a:	d135      	bne.n	8003908 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	613b      	str	r3, [r7, #16]
   return(result);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f023 0310 	bic.w	r3, r3, #16
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c2:	623a      	str	r2, [r7, #32]
 80038c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	69f9      	ldr	r1, [r7, #28]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d10a      	bne.n	80038fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe29 	bl	8003558 <HAL_UARTEx_RxEventCallback>
 8003906:	e002      	b.n	800390e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd f82d 	bl	8000968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e002      	b.n	8003918 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3730      	adds	r7, #48	; 0x30
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b0c0      	sub	sp, #256	; 0x100
 8003926:	af00      	add	r7, sp, #0
 8003928:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	68d9      	ldr	r1, [r3, #12]
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	ea40 0301 	orr.w	r3, r0, r1
 8003948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	431a      	orrs	r2, r3
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003978:	f021 010c 	bic.w	r1, r1, #12
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003986:	430b      	orrs	r3, r1
 8003988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	6999      	ldr	r1, [r3, #24]
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	ea40 0301 	orr.w	r3, r0, r1
 80039a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b8f      	ldr	r3, [pc, #572]	; (8003bec <UART_SetConfig+0x2cc>)
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d005      	beq.n	80039c0 <UART_SetConfig+0xa0>
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <UART_SetConfig+0x2d0>)
 80039bc:	429a      	cmp	r2, r3
 80039be:	d104      	bne.n	80039ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7fd fec4 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 80039c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039c8:	e003      	b.n	80039d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ca:	f7fd feab 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 80039ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039dc:	f040 810c 	bne.w	8003bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	1891      	adds	r1, r2, r2
 80039f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80039fa:	415b      	adcs	r3, r3
 80039fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a02:	4621      	mov	r1, r4
 8003a04:	eb12 0801 	adds.w	r8, r2, r1
 8003a08:	4629      	mov	r1, r5
 8003a0a:	eb43 0901 	adc.w	r9, r3, r1
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a22:	4690      	mov	r8, r2
 8003a24:	4699      	mov	r9, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	eb18 0303 	adds.w	r3, r8, r3
 8003a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a30:	462b      	mov	r3, r5
 8003a32:	eb49 0303 	adc.w	r3, r9, r3
 8003a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a4e:	460b      	mov	r3, r1
 8003a50:	18db      	adds	r3, r3, r3
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
 8003a54:	4613      	mov	r3, r2
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a64:	f7fc fbd4 	bl	8000210 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	011c      	lsls	r4, r3, #4
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a90:	415b      	adcs	r3, r3
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a98:	4641      	mov	r1, r8
 8003a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab8:	4692      	mov	sl, r2
 8003aba:	469b      	mov	fp, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	eb1a 0303 	adds.w	r3, sl, r3
 8003ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8003acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003adc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	18db      	adds	r3, r3, r3
 8003ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8003aea:	4613      	mov	r3, r2
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
 8003af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003afa:	f7fc fb89 	bl	8000210 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2301 	umull	r2, r3, r3, r1
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2264      	movs	r2, #100	; 0x64
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	1acb      	subs	r3, r1, r3
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b28:	441c      	add	r4, r3
 8003b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b44:	415b      	adcs	r3, r3
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	1851      	adds	r1, r2, r1
 8003b50:	6339      	str	r1, [r7, #48]	; 0x30
 8003b52:	4649      	mov	r1, r9
 8003b54:	414b      	adcs	r3, r1
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b64:	4659      	mov	r1, fp
 8003b66:	00cb      	lsls	r3, r1, #3
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	4651      	mov	r1, sl
 8003b70:	00ca      	lsls	r2, r1, #3
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	4642      	mov	r2, r8
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b80:	464b      	mov	r3, r9
 8003b82:	460a      	mov	r2, r1
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	18db      	adds	r3, r3, r3
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bb6:	f7fc fb2b 	bl	8000210 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	; 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4422      	add	r2, r4
 8003be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be8:	e106      	b.n	8003df8 <UART_SetConfig+0x4d8>
 8003bea:	bf00      	nop
 8003bec:	40011000 	.word	0x40011000
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c0a:	4642      	mov	r2, r8
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	1891      	adds	r1, r2, r2
 8003c10:	6239      	str	r1, [r7, #32]
 8003c12:	415b      	adcs	r3, r3
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	1854      	adds	r4, r2, r1
 8003c1e:	4649      	mov	r1, r9
 8003c20:	eb43 0501 	adc.w	r5, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	18e3      	adds	r3, r4, r3
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c40:	464b      	mov	r3, r9
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c66:	4629      	mov	r1, r5
 8003c68:	008b      	lsls	r3, r1, #2
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c70:	4621      	mov	r1, r4
 8003c72:	008a      	lsls	r2, r1, #2
 8003c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c78:	f7fc faca 	bl	8000210 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011c      	lsls	r4, r3, #4
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	61b9      	str	r1, [r7, #24]
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	4641      	mov	r1, r8
 8003cae:	1851      	adds	r1, r2, r1
 8003cb0:	6139      	str	r1, [r7, #16]
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	414b      	adcs	r3, r1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	00cb      	lsls	r3, r1, #3
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cce:	4651      	mov	r1, sl
 8003cd0:	00ca      	lsls	r2, r1, #3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d04:	4649      	mov	r1, r9
 8003d06:	008b      	lsls	r3, r1, #2
 8003d08:	4641      	mov	r1, r8
 8003d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0e:	4641      	mov	r1, r8
 8003d10:	008a      	lsls	r2, r1, #2
 8003d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d16:	f7fc fa7b 	bl	8000210 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003d22:	fba3 2301 	umull	r2, r3, r3, r1
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	1acb      	subs	r3, r1, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	; 0x32
 8003d34:	4a33      	ldr	r2, [pc, #204]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d40:	441c      	add	r4, r3
 8003d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d46:	2200      	movs	r2, #0
 8003d48:	673b      	str	r3, [r7, #112]	; 0x70
 8003d4a:	677a      	str	r2, [r7, #116]	; 0x74
 8003d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d60:	4641      	mov	r1, r8
 8003d62:	1851      	adds	r1, r2, r1
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	4649      	mov	r1, r9
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d78:	4659      	mov	r1, fp
 8003d7a:	00cb      	lsls	r3, r1, #3
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d82:	4651      	mov	r1, sl
 8003d84:	00ca      	lsls	r2, r1, #3
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d92:	464b      	mov	r3, r9
 8003d94:	460a      	mov	r2, r1
 8003d96:	eb42 0303 	adc.w	r3, r2, r3
 8003d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
 8003da6:	667a      	str	r2, [r7, #100]	; 0x64
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003db4:	4649      	mov	r1, r9
 8003db6:	008b      	lsls	r3, r1, #2
 8003db8:	4641      	mov	r1, r8
 8003dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	008a      	lsls	r2, r1, #2
 8003dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dc6:	f7fc fa23 	bl	8000210 <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	2164      	movs	r1, #100	; 0x64
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	3332      	adds	r3, #50	; 0x32
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	f003 020f 	and.w	r2, r3, #15
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4422      	add	r2, r4
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e04:	51eb851f 	.word	0x51eb851f

08003e08 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f103 0208 	add.w	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e20:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f103 0208 	add.w	r2, r3, #8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f103 0208 	add.w	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec0:	d103      	bne.n	8003eca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e00c      	b.n	8003ee4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e002      	b.n	8003ed8 <vListInsert+0x2e>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d2f6      	bcs.n	8003ed2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6892      	ldr	r2, [r2, #8]
 8003f32:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6852      	ldr	r2, [r2, #4]
 8003f3c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d103      	bne.n	8003f50 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericReset+0x2e>
        __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
    }
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05d      	beq.n	8004060 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d059      	beq.n	8004060 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d000      	beq.n	8003fc0 <xQueueGenericReset+0x50>
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d14c      	bne.n	8004060 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003fc6:	f002 fb57 	bl	8006678 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	441a      	add	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6939      	ldr	r1, [r7, #16]
 8003ffa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	441a      	add	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	22ff      	movs	r2, #255	; 0xff
 8004012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d114      	bne.n	8004046 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3310      	adds	r3, #16
 8004028:	4618      	mov	r0, r3
 800402a:	f001 f949 	bl	80052c0 <xTaskRemoveFromEventList>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <xQueueGenericReset+0x11c>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	e009      	b.n	800405a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3310      	adds	r3, #16
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fedc 	bl	8003e08 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3324      	adds	r3, #36	; 0x24
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fed7 	bl	8003e08 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800405a:	f002 fb3d 	bl	80066d8 <vPortExitCritical>
 800405e:	e001      	b.n	8004064 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <xQueueGenericReset+0x110>
        __asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
    }
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004080:	697b      	ldr	r3, [r7, #20]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02e      	beq.n	8004106 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040a8:	2100      	movs	r1, #0
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	fba3 2302 	umull	r2, r3, r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d000      	beq.n	80040b8 <xQueueGenericCreate+0x28>
 80040b6:	2101      	movs	r1, #1
 80040b8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d123      	bne.n	8004106 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040c6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80040ca:	d81c      	bhi.n	8004106 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	3350      	adds	r3, #80	; 0x50
 80040da:	4618      	mov	r0, r3
 80040dc:	f002 fbee 	bl	80068bc <pvPortMalloc>
 80040e0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01c      	beq.n	8004122 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3350      	adds	r3, #80	; 0x50
 80040f0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f2:	79fa      	ldrb	r2, [r7, #7]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f814 	bl	800412c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004104:	e00d      	b.n	8004122 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <xQueueGenericCreate+0x92>
        __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	613b      	str	r3, [r7, #16]
    }
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004122:	69fb      	ldr	r3, [r7, #28]
    }
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e002      	b.n	800414e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800415a:	2101      	movs	r1, #1
 800415c:	69b8      	ldr	r0, [r7, #24]
 800415e:	f7ff ff07 	bl	8003f70 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b092      	sub	sp, #72	; 0x48
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8004184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <xQueueGenericSendFromISR+0x3c>
 80041a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <xQueueGenericSendFromISR+0x40>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <xQueueGenericSendFromISR+0x42>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d103      	bne.n	80041dc <xQueueGenericSendFromISR+0x6a>
 80041d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <xQueueGenericSendFromISR+0x6e>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <xQueueGenericSendFromISR+0x70>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041fc:	f002 fb1e 	bl	800683c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004200:	f3ef 8211 	mrs	r2, BASEPRI
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	623a      	str	r2, [r7, #32]
 8004216:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004218:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800421c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <xQueueGenericSendFromISR+0xbc>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d146      	bne.n	80042bc <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004234:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004244:	f000 f9dd 	bl	8004602 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004248:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004250:	d112      	bne.n	8004278 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02d      	beq.n	80042b6 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f82e 	bl	80052c0 <xTaskRemoveFromEventList>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d025      	beq.n	80042b6 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d022      	beq.n	80042b6 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e01e      	b.n	80042b6 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004278:	f000 fe3a 	bl	8004ef0 <uxTaskGetNumberOfTasks>
 800427c:	6338      	str	r0, [r7, #48]	; 0x30
 800427e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004284:	429a      	cmp	r2, r3
 8004286:	d916      	bls.n	80042b6 <xQueueGenericSendFromISR+0x144>
 8004288:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800428c:	2b7f      	cmp	r3, #127	; 0x7f
 800428e:	d10a      	bne.n	80042a6 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61bb      	str	r3, [r7, #24]
    }
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xQueueGenericSendFromISR+0x132>
 80042a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	b25a      	sxtb	r2, r3
 80042b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80042b6:	2301      	movs	r3, #1
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80042ba:	e001      	b.n	80042c0 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	647b      	str	r3, [r7, #68]	; 0x44
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80042ca:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3748      	adds	r7, #72	; 0x48
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xQueueReceive+0x30>
        __asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	623b      	str	r3, [r7, #32]
    }
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <xQueueReceive+0x3e>
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <xQueueReceive+0x42>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <xQueueReceive+0x44>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueReceive+0x5e>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	61fb      	str	r3, [r7, #28]
    }
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004336:	f001 f9d3 	bl	80056e0 <xTaskGetSchedulerState>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <xQueueReceive+0x6e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <xQueueReceive+0x72>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <xQueueReceive+0x74>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xQueueReceive+0x8e>
        __asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	61bb      	str	r3, [r7, #24]
    }
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004366:	f002 f987 	bl	8006678 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01f      	beq.n	80043b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437a:	f000 f9ac 	bl	80046d6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	1e5a      	subs	r2, r3, #1
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00f      	beq.n	80043ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	3310      	adds	r3, #16
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ff94 	bl	80052c0 <xTaskRemoveFromEventList>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800439e:	4b3d      	ldr	r3, [pc, #244]	; (8004494 <xQueueReceive+0x1bc>)
 80043a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80043ae:	f002 f993 	bl	80066d8 <vPortExitCritical>
                return pdPASS;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e069      	b.n	800448a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80043bc:	f002 f98c 	bl	80066d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e062      	b.n	800448a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80043ca:	f107 0310 	add.w	r3, r7, #16
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f84c 	bl	800546c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80043d8:	f002 f97e 	bl	80066d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80043dc:	f000 fc6e 	bl	8004cbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043e0:	f002 f94a 	bl	8006678 <vPortEnterCritical>
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f0:	d103      	bne.n	80043fa <xQueueReceive+0x122>
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004400:	b25b      	sxtb	r3, r3
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004406:	d103      	bne.n	8004410 <xQueueReceive+0x138>
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004410:	f002 f962 	bl	80066d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004414:	1d3a      	adds	r2, r7, #4
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f83b 	bl	8005498 <xTaskCheckForTimeOut>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d123      	bne.n	8004470 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442a:	f000 f9cc 	bl	80047c6 <prvIsQueueEmpty>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d017      	beq.n	8004464 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fed5 	bl	80051ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004444:	f000 f96d 	bl	8004722 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004448:	f000 fc46 	bl	8004cd8 <xTaskResumeAll>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d189      	bne.n	8004366 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <xQueueReceive+0x1bc>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	e780      	b.n	8004366 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	f000 f95c 	bl	8004722 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800446a:	f000 fc35 	bl	8004cd8 <xTaskResumeAll>
 800446e:	e77a      	b.n	8004366 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004472:	f000 f956 	bl	8004722 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004476:	f000 fc2f 	bl	8004cd8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800447a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447c:	f000 f9a3 	bl	80047c6 <prvIsQueueEmpty>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	f43f af6f 	beq.w	8004366 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004488:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800448a:	4618      	mov	r0, r3
 800448c:	3730      	adds	r7, #48	; 0x30
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b090      	sub	sp, #64	; 0x40
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <xQueueReceiveFromISR+0x3a>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <xQueueReceiveFromISR+0x3e>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <xQueueReceiveFromISR+0x40>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	623b      	str	r3, [r7, #32]
    }
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044f2:	f002 f9a3 	bl	800683c <vPortValidateInterruptPriority>
        __asm volatile
 80044f6:	f3ef 8211 	mrs	r2, BASEPRI
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800450e:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	2b00      	cmp	r3, #0
 800451c:	d046      	beq.n	80045ac <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452c:	f000 f8d3 	bl	80046d6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004538:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004540:	d112      	bne.n	8004568 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d02d      	beq.n	80045a6 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	3310      	adds	r3, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f000 feb6 	bl	80052c0 <xTaskRemoveFromEventList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d025      	beq.n	80045a6 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e01e      	b.n	80045a6 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004568:	f000 fcc2 	bl	8004ef0 <uxTaskGetNumberOfTasks>
 800456c:	62b8      	str	r0, [r7, #40]	; 0x28
 800456e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004574:	429a      	cmp	r2, r3
 8004576:	d916      	bls.n	80045a6 <xQueueReceiveFromISR+0x10e>
 8004578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800457c:	2b7f      	cmp	r3, #127	; 0x7f
 800457e:	d10a      	bne.n	8004596 <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	617b      	str	r3, [r7, #20]
    }
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xQueueReceiveFromISR+0xfc>
 8004596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800459a:	3301      	adds	r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	b25a      	sxtb	r2, r3
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80045a6:	2301      	movs	r3, #1
 80045a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045aa:	e001      	b.n	80045b0 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	613b      	str	r3, [r7, #16]
        __asm volatile
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f383 8811 	msr	BASEPRI, r3
    }
 80045ba:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3740      	adds	r7, #64	; 0x40
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60bb      	str	r3, [r7, #8]
    }
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80045ea:	f002 f845 	bl	8006678 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80045f4:	f002 f870 	bl	80066d8 <vPortExitCritical>

    return uxReturn;
 80045f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d14d      	bne.n	80046c4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f875 	bl	800571c <xTaskPriorityDisinherit>
 8004632:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	e043      	b.n	80046c4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d119      	bne.n	8004676 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6858      	ldr	r0, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	461a      	mov	r2, r3
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	f002 fb2d 	bl	8006cac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	441a      	add	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	d32b      	bcc.n	80046c4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	e026      	b.n	80046c4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68d8      	ldr	r0, [r3, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	461a      	mov	r2, r3
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	f002 fb13 	bl	8006cac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	425b      	negs	r3, r3
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d207      	bcs.n	80046b2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	425b      	negs	r3, r3
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d105      	bne.n	80046c4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80046cc:	697b      	ldr	r3, [r7, #20]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d018      	beq.n	800471a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d303      	bcc.n	800470a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68d9      	ldr	r1, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	461a      	mov	r2, r3
 8004714:	6838      	ldr	r0, [r7, #0]
 8004716:	f002 fac9 	bl	8006cac <memcpy>
    }
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800472a:	f001 ffa5 	bl	8006678 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004734:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004736:	e011      	b.n	800475c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fdbb 	bl	80052c0 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004750:	f000 ff08 	bl	8005564 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	3b01      	subs	r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800475c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	dce9      	bgt.n	8004738 <prvUnlockQueue+0x16>
 8004764:	e000      	b.n	8004768 <prvUnlockQueue+0x46>
                    break;
 8004766:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	22ff      	movs	r2, #255	; 0xff
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004770:	f001 ffb2 	bl	80066d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004774:	f001 ff80 	bl	8006678 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800477e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004780:	e011      	b.n	80047a6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d012      	beq.n	80047b0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3310      	adds	r3, #16
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fd96 	bl	80052c0 <xTaskRemoveFromEventList>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800479a:	f000 fee3 	bl	8005564 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800479e:	7bbb      	ldrb	r3, [r7, #14]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80047a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dce9      	bgt.n	8004782 <prvUnlockQueue+0x60>
 80047ae:	e000      	b.n	80047b2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80047b0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80047ba:	f001 ff8d 	bl	80066d8 <vPortExitCritical>
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80047ce:	f001 ff53 	bl	8006678 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80047da:	2301      	movs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e001      	b.n	80047e4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80047e4:	f001 ff78 	bl	80066d8 <vPortExitCritical>

    return xReturn;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
    }
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	429a      	cmp	r2, r3
 8004824:	d102      	bne.n	800482c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e001      	b.n	8004830 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004830:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60fb      	str	r3, [r7, #12]
    }
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d024      	beq.n	80048ba <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e01e      	b.n	80048b4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <vQueueAddToRegistry+0x98>)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d105      	bne.n	8004892 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <vQueueAddToRegistry+0x98>)
 800488c:	4413      	add	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
                    break;
 8004890:	e013      	b.n	80048ba <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <vQueueAddToRegistry+0x6e>
 8004898:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <vQueueAddToRegistry+0x98>)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <vQueueAddToRegistry+0x98>)
 80048aa:	4413      	add	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	3301      	adds	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b07      	cmp	r3, #7
 80048b8:	d9dd      	bls.n	8004876 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	20000100 	.word	0x20000100

080048dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80048ec:	f001 fec4 	bl	8006678 <vPortEnterCritical>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048fc:	d103      	bne.n	8004906 <vQueueWaitForMessageRestricted+0x2a>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004912:	d103      	bne.n	800491c <vQueueWaitForMessageRestricted+0x40>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800491c:	f001 fedc 	bl	80066d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	3324      	adds	r3, #36	; 0x24
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fc7f 	bl	8005234 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f7ff fef3 	bl	8004722 <prvUnlockQueue>
    }
 800493c:	bf00      	nop
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004944:	b580      	push	{r7, lr}
 8004946:	b08c      	sub	sp, #48	; 0x30
 8004948:	af04      	add	r7, sp, #16
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f001 ffaf 	bl	80068bc <pvPortMalloc>
 800495e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004966:	2058      	movs	r0, #88	; 0x58
 8004968:	f001 ffa8 	bl	80068bc <pvPortMalloc>
 800496c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004974:	2258      	movs	r2, #88	; 0x58
 8004976:	2100      	movs	r1, #0
 8004978:	69f8      	ldr	r0, [r7, #28]
 800497a:	f002 f96b 	bl	8006c54 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
 8004984:	e005      	b.n	8004992 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f002 f852 	bl	8006a30 <vPortFree>
 800498c:	e001      	b.n	8004992 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	2300      	movs	r3, #0
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f80e 	bl	80049d0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80049b4:	69f8      	ldr	r0, [r7, #28]
 80049b6:	f000 f899 	bl	8004aec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80049ba:	2301      	movs	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e002      	b.n	80049c6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80049c6:	69bb      	ldr	r3, [r7, #24]
    }
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	461a      	mov	r2, r3
 80049e8:	21a5      	movs	r1, #165	; 0xa5
 80049ea:	f002 f933 	bl	8006c54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049f8:	3b01      	subs	r3, #1
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f023 0307 	bic.w	r3, r3, #7
 8004a06:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	617b      	str	r3, [r7, #20]
    }
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01e      	beq.n	8004a6c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	e012      	b.n	8004a5a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	7819      	ldrb	r1, [r3, #0]
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	3334      	adds	r3, #52	; 0x34
 8004a44:	460a      	mov	r2, r1
 8004a46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d9e9      	bls.n	8004a34 <prvInitialiseNewTask+0x64>
 8004a60:	e000      	b.n	8004a64 <prvInitialiseNewTask+0x94>
            {
                break;
 8004a62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d90a      	bls.n	8004a88 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	613b      	str	r3, [r7, #16]
    }
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d901      	bls.n	8004a92 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff f9d0 	bl	8003e48 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	3318      	adds	r3, #24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f9cb 	bl	8003e48 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	f1c3 0205 	rsb	r2, r3, #5
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	69b8      	ldr	r0, [r7, #24]
 8004ace:	f001 fca1 	bl	8006414 <pxPortInitialiseStack>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ae4:	bf00      	nop
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004af4:	f001 fdc0 	bl	8006678 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004af8:	4b40      	ldr	r3, [pc, #256]	; (8004bfc <prvAddNewTaskToReadyList+0x110>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <prvAddNewTaskToReadyList+0x110>)
 8004b00:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004b02:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <prvAddNewTaskToReadyList+0x114>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004b0a:	4a3d      	ldr	r2, [pc, #244]	; (8004c00 <prvAddNewTaskToReadyList+0x114>)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b10:	4b3a      	ldr	r3, [pc, #232]	; (8004bfc <prvAddNewTaskToReadyList+0x110>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d110      	bne.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004b18:	f000 fd48 	bl	80055ac <prvInitialiseTaskLists>
 8004b1c:	e00d      	b.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004b1e:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <prvAddNewTaskToReadyList+0x118>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <prvAddNewTaskToReadyList+0x114>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d802      	bhi.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004b34:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <prvAddNewTaskToReadyList+0x114>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <prvAddNewTaskToReadyList+0x11c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4a31      	ldr	r2, [pc, #196]	; (8004c08 <prvAddNewTaskToReadyList+0x11c>)
 8004b42:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b44:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <prvAddNewTaskToReadyList+0x11c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <prvAddNewTaskToReadyList+0x120>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	; (8004c0c <prvAddNewTaskToReadyList+0x120>)
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	492b      	ldr	r1, [pc, #172]	; (8004c10 <prvAddNewTaskToReadyList+0x124>)
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3304      	adds	r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	3204      	adds	r2, #4
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <prvAddNewTaskToReadyList+0x124>)
 8004ba2:	441a      	add	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	615a      	str	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	4918      	ldr	r1, [pc, #96]	; (8004c10 <prvAddNewTaskToReadyList+0x124>)
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	4814      	ldr	r0, [pc, #80]	; (8004c10 <prvAddNewTaskToReadyList+0x124>)
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4403      	add	r3, r0
 8004bc8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004bca:	f001 fd85 	bl	80066d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <prvAddNewTaskToReadyList+0x118>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <prvAddNewTaskToReadyList+0x114>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d207      	bcs.n	8004bf4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <prvAddNewTaskToReadyList+0x128>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000218 	.word	0x20000218
 8004c00:	20000140 	.word	0x20000140
 8004c04:	20000224 	.word	0x20000224
 8004c08:	20000234 	.word	0x20000234
 8004c0c:	20000220 	.word	0x20000220
 8004c10:	20000144 	.word	0x20000144
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <vTaskStartScheduler+0x88>)
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	2282      	movs	r2, #130	; 0x82
 8004c2a:	491e      	ldr	r1, [pc, #120]	; (8004ca4 <vTaskStartScheduler+0x8c>)
 8004c2c:	481e      	ldr	r0, [pc, #120]	; (8004ca8 <vTaskStartScheduler+0x90>)
 8004c2e:	f7ff fe89 	bl	8004944 <xTaskCreate>
 8004c32:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d102      	bne.n	8004c40 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004c3a:	f001 f967 	bl	8005f0c <xTimerCreateTimerTask>
 8004c3e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d116      	bne.n	8004c74 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	60bb      	str	r3, [r7, #8]
    }
 8004c58:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <vTaskStartScheduler+0x94>)
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c60:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <vTaskStartScheduler+0x98>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <vTaskStartScheduler+0x9c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004c6e:	f001 fc61 	bl	8006534 <xPortStartScheduler>
 8004c72:	e00e      	b.n	8004c92 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	d10a      	bne.n	8004c92 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	607b      	str	r3, [r7, #4]
    }
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <vTaskStartScheduler+0xa0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000023c 	.word	0x2000023c
 8004ca4:	08006d1c 	.word	0x08006d1c
 8004ca8:	0800557d 	.word	0x0800557d
 8004cac:	20000238 	.word	0x20000238
 8004cb0:	20000224 	.word	0x20000224
 8004cb4:	2000021c 	.word	0x2000021c
 8004cb8:	2000000c 	.word	0x2000000c

08004cbc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <vTaskSuspendAll+0x18>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a03      	ldr	r2, [pc, #12]	; (8004cd4 <vTaskSuspendAll+0x18>)
 8004cc8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004cca:	bf00      	nop
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	20000240 	.word	0x20000240

08004cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004ce6:	4b71      	ldr	r3, [pc, #452]	; (8004eac <xTaskResumeAll+0x1d4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xTaskResumeAll+0x2c>
        __asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
    }
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004d04:	f001 fcb8 	bl	8006678 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004d08:	4b68      	ldr	r3, [pc, #416]	; (8004eac <xTaskResumeAll+0x1d4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	4a67      	ldr	r2, [pc, #412]	; (8004eac <xTaskResumeAll+0x1d4>)
 8004d10:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d12:	4b66      	ldr	r3, [pc, #408]	; (8004eac <xTaskResumeAll+0x1d4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 80c0 	bne.w	8004e9c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d1c:	4b64      	ldr	r3, [pc, #400]	; (8004eb0 <xTaskResumeAll+0x1d8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80bb 	beq.w	8004e9c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d26:	e08a      	b.n	8004e3e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d28:	4b62      	ldr	r3, [pc, #392]	; (8004eb4 <xTaskResumeAll+0x1dc>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	6a12      	ldr	r2, [r2, #32]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	69d2      	ldr	r2, [r2, #28]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3318      	adds	r3, #24
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d103      	bne.n	8004d5e <xTaskResumeAll+0x86>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2200      	movs	r2, #0
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	1e5a      	subs	r2, r3, #1
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	68d2      	ldr	r2, [r2, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d103      	bne.n	8004d9c <xTaskResumeAll+0xc4>
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	615a      	str	r2, [r3, #20]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <xTaskResumeAll+0x1e0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <xTaskResumeAll+0x1e0>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	493e      	ldr	r1, [pc, #248]	; (8004ebc <xTaskResumeAll+0x1e4>)
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3304      	adds	r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	3204      	adds	r2, #4
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4a2e      	ldr	r2, [pc, #184]	; (8004ebc <xTaskResumeAll+0x1e4>)
 8004e02:	441a      	add	r2, r3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	615a      	str	r2, [r3, #20]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	492b      	ldr	r1, [pc, #172]	; (8004ebc <xTaskResumeAll+0x1e4>)
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	4827      	ldr	r0, [pc, #156]	; (8004ebc <xTaskResumeAll+0x1e4>)
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4403      	add	r3, r0
 8004e28:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <xTaskResumeAll+0x1e8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <xTaskResumeAll+0x1ec>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <xTaskResumeAll+0x1dc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f47f af70 	bne.w	8004d28 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004e4e:	f000 fc2b 	bl	80056a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <xTaskResumeAll+0x1f0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004e5e:	f000 f853 	bl	8004f08 <xTaskIncrementTick>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8004e68:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <xTaskResumeAll+0x1ec>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f1      	bne.n	8004e5e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <xTaskResumeAll+0x1f0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004e80:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <xTaskResumeAll+0x1ec>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <xTaskResumeAll+0x1f4>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004e9c:	f001 fc1c 	bl	80066d8 <vPortExitCritical>

    return xAlreadyYielded;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000240 	.word	0x20000240
 8004eb0:	20000218 	.word	0x20000218
 8004eb4:	200001d8 	.word	0x200001d8
 8004eb8:	20000220 	.word	0x20000220
 8004ebc:	20000144 	.word	0x20000144
 8004ec0:	20000140 	.word	0x20000140
 8004ec4:	2000022c 	.word	0x2000022c
 8004ec8:	20000228 	.word	0x20000228
 8004ecc:	e000ed04 	.word	0xe000ed04

08004ed0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <xTaskGetTickCount+0x1c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004edc:	687b      	ldr	r3, [r7, #4]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000021c 	.word	0x2000021c

08004ef0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <uxTaskGetNumberOfTasks+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000218 	.word	0x20000218

08004f08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f12:	4b7d      	ldr	r3, [pc, #500]	; (8005108 <xTaskIncrementTick+0x200>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 80ec 	bne.w	80050f4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f1c:	4b7b      	ldr	r3, [pc, #492]	; (800510c <xTaskIncrementTick+0x204>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004f24:	4a79      	ldr	r2, [pc, #484]	; (800510c <xTaskIncrementTick+0x204>)
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d120      	bne.n	8004f72 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004f30:	4b77      	ldr	r3, [pc, #476]	; (8005110 <xTaskIncrementTick+0x208>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <xTaskIncrementTick+0x48>
        __asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	607b      	str	r3, [r7, #4]
    }
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xTaskIncrementTick+0x46>
 8004f50:	4b6f      	ldr	r3, [pc, #444]	; (8005110 <xTaskIncrementTick+0x208>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	4b6f      	ldr	r3, [pc, #444]	; (8005114 <xTaskIncrementTick+0x20c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a6d      	ldr	r2, [pc, #436]	; (8005110 <xTaskIncrementTick+0x208>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	4a6d      	ldr	r2, [pc, #436]	; (8005114 <xTaskIncrementTick+0x20c>)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	4b6c      	ldr	r3, [pc, #432]	; (8005118 <xTaskIncrementTick+0x210>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	4a6b      	ldr	r2, [pc, #428]	; (8005118 <xTaskIncrementTick+0x210>)
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	f000 fb9b 	bl	80056a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f72:	4b6a      	ldr	r3, [pc, #424]	; (800511c <xTaskIncrementTick+0x214>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	f0c0 80a6 	bcc.w	80050ca <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f7e:	4b64      	ldr	r3, [pc, #400]	; (8005110 <xTaskIncrementTick+0x208>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f88:	4b64      	ldr	r3, [pc, #400]	; (800511c <xTaskIncrementTick+0x214>)
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f8e:	601a      	str	r2, [r3, #0]
                    break;
 8004f90:	e09b      	b.n	80050ca <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f92:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <xTaskIncrementTick+0x208>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d203      	bcs.n	8004fb2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004faa:	4a5c      	ldr	r2, [pc, #368]	; (800511c <xTaskIncrementTick+0x214>)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004fb0:	e08b      	b.n	80050ca <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	68d2      	ldr	r2, [r2, #12]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d103      	bne.n	8004fe0 <xTaskIncrementTick+0xd8>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	615a      	str	r2, [r3, #20]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1e5a      	subs	r2, r3, #1
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01e      	beq.n	8005036 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	6a12      	ldr	r2, [r2, #32]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	69d2      	ldr	r2, [r2, #28]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	3318      	adds	r3, #24
 800501a:	429a      	cmp	r2, r3
 800501c:	d103      	bne.n	8005026 <xTaskIncrementTick+0x11e>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2200      	movs	r2, #0
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1e5a      	subs	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	2201      	movs	r2, #1
 800503c:	409a      	lsls	r2, r3
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <xTaskIncrementTick+0x218>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	4a36      	ldr	r2, [pc, #216]	; (8005120 <xTaskIncrementTick+0x218>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4935      	ldr	r1, [pc, #212]	; (8005124 <xTaskIncrementTick+0x21c>)
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	3304      	adds	r3, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	60da      	str	r2, [r3, #12]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	3204      	adds	r2, #4
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	1d1a      	adds	r2, r3, #4
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a26      	ldr	r2, [pc, #152]	; (8005124 <xTaskIncrementTick+0x21c>)
 800508c:	441a      	add	r2, r3
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	615a      	str	r2, [r3, #20]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005096:	4923      	ldr	r1, [pc, #140]	; (8005124 <xTaskIncrementTick+0x21c>)
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1c59      	adds	r1, r3, #1
 80050a6:	481f      	ldr	r0, [pc, #124]	; (8005124 <xTaskIncrementTick+0x21c>)
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4403      	add	r3, r0
 80050b2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <xTaskIncrementTick+0x220>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	429a      	cmp	r2, r3
 80050c0:	f67f af5d 	bls.w	8004f7e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c8:	e759      	b.n	8004f7e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <xTaskIncrementTick+0x220>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4914      	ldr	r1, [pc, #80]	; (8005124 <xTaskIncrementTick+0x21c>)
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d901      	bls.n	80050e6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <xTaskIncrementTick+0x224>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	e004      	b.n	80050fe <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <xTaskIncrementTick+0x228>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <xTaskIncrementTick+0x228>)
 80050fc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005100:	4618      	mov	r0, r3
 8005102:	3728      	adds	r7, #40	; 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000240 	.word	0x20000240
 800510c:	2000021c 	.word	0x2000021c
 8005110:	200001d0 	.word	0x200001d0
 8005114:	200001d4 	.word	0x200001d4
 8005118:	20000230 	.word	0x20000230
 800511c:	20000238 	.word	0x20000238
 8005120:	20000220 	.word	0x20000220
 8005124:	20000144 	.word	0x20000144
 8005128:	20000140 	.word	0x20000140
 800512c:	2000022c 	.word	0x2000022c
 8005130:	20000228 	.word	0x20000228

08005134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800513a:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <vTaskSwitchContext+0xa4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005142:	4b26      	ldr	r3, [pc, #152]	; (80051dc <vTaskSwitchContext+0xa8>)
 8005144:	2201      	movs	r2, #1
 8005146:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005148:	e03f      	b.n	80051ca <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <vTaskSwitchContext+0xa8>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005150:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <vTaskSwitchContext+0xac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	f1c3 031f 	rsb	r3, r3, #31
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	491f      	ldr	r1, [pc, #124]	; (80051e4 <vTaskSwitchContext+0xb0>)
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <vTaskSwitchContext+0x5c>
        __asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
    }
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vTaskSwitchContext+0x5a>
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <vTaskSwitchContext+0xb0>)
 800519c:	4413      	add	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3308      	adds	r3, #8
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d104      	bne.n	80051c0 <vTaskSwitchContext+0x8c>
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <vTaskSwitchContext+0xb4>)
 80051c8:	6013      	str	r3, [r2, #0]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000240 	.word	0x20000240
 80051dc:	2000022c 	.word	0x2000022c
 80051e0:	20000220 	.word	0x20000220
 80051e4:	20000144 	.word	0x20000144
 80051e8:	20000140 	.word	0x20000140

080051ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
    }
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <vTaskPlaceOnEventList+0x44>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3318      	adds	r3, #24
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fe fe45 	bl	8003eaa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005220:	2101      	movs	r1, #1
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f000 fdf2 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000140 	.word	0x20000140

08005234 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	613b      	str	r3, [r7, #16]
    }
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	4b16      	ldr	r3, [pc, #88]	; (80052bc <vTaskPlaceOnEventListRestricted+0x88>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	61da      	str	r2, [r3, #28]
 800526a:	4b14      	ldr	r3, [pc, #80]	; (80052bc <vTaskPlaceOnEventListRestricted+0x88>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	621a      	str	r2, [r3, #32]
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <vTaskPlaceOnEventListRestricted+0x88>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	3218      	adds	r2, #24
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	4b0e      	ldr	r3, [pc, #56]	; (80052bc <vTaskPlaceOnEventListRestricted+0x88>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f103 0218 	add.w	r2, r3, #24
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <vTaskPlaceOnEventListRestricted+0x88>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	f000 fdad 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
    }
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000140 	.word	0x20000140

080052c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b08b      	sub	sp, #44	; 0x2c
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
    }
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	6a12      	ldr	r2, [r2, #32]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	69d2      	ldr	r2, [r2, #28]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	3318      	adds	r3, #24
 800530e:	429a      	cmp	r2, r3
 8005310:	d103      	bne.n	800531a <xTaskRemoveFromEventList+0x5a>
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2200      	movs	r2, #0
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	1e5a      	subs	r2, r3, #1
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532a:	4b4a      	ldr	r3, [pc, #296]	; (8005454 <xTaskRemoveFromEventList+0x194>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d15e      	bne.n	80053f0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	68d2      	ldr	r2, [r2, #12]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	6a3a      	ldr	r2, [r7, #32]
 8005348:	6892      	ldr	r2, [r2, #8]
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	3304      	adds	r3, #4
 8005354:	429a      	cmp	r2, r3
 8005356:	d103      	bne.n	8005360 <xTaskRemoveFromEventList+0xa0>
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2200      	movs	r2, #0
 8005364:	615a      	str	r2, [r3, #20]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	2201      	movs	r2, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	4b37      	ldr	r3, [pc, #220]	; (8005458 <xTaskRemoveFromEventList+0x198>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4313      	orrs	r3, r2
 800537e:	4a36      	ldr	r2, [pc, #216]	; (8005458 <xTaskRemoveFromEventList+0x198>)
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	4935      	ldr	r1, [pc, #212]	; (800545c <xTaskRemoveFromEventList+0x19c>)
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3304      	adds	r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	609a      	str	r2, [r3, #8]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	3204      	adds	r2, #4
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	1d1a      	adds	r2, r3, #4
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4a25      	ldr	r2, [pc, #148]	; (800545c <xTaskRemoveFromEventList+0x19c>)
 80053c6:	441a      	add	r2, r3
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	615a      	str	r2, [r3, #20]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4922      	ldr	r1, [pc, #136]	; (800545c <xTaskRemoveFromEventList+0x19c>)
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	1c59      	adds	r1, r3, #1
 80053e0:	481e      	ldr	r0, [pc, #120]	; (800545c <xTaskRemoveFromEventList+0x19c>)
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4403      	add	r3, r0
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	e01b      	b.n	8005428 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <xTaskRemoveFromEventList+0x1a0>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	61da      	str	r2, [r3, #28]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	621a      	str	r2, [r3, #32]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	6a3a      	ldr	r2, [r7, #32]
 800540a:	3218      	adds	r2, #24
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f103 0218 	add.w	r2, r3, #24
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	4a11      	ldr	r2, [pc, #68]	; (8005460 <xTaskRemoveFromEventList+0x1a0>)
 800541c:	629a      	str	r2, [r3, #40]	; 0x28
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <xTaskRemoveFromEventList+0x1a0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	4a0e      	ldr	r2, [pc, #56]	; (8005460 <xTaskRemoveFromEventList+0x1a0>)
 8005426:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <xTaskRemoveFromEventList+0x1a4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	429a      	cmp	r2, r3
 8005434:	d905      	bls.n	8005442 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005436:	2301      	movs	r3, #1
 8005438:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <xTaskRemoveFromEventList+0x1a8>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e001      	b.n	8005446 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005448:	4618      	mov	r0, r3
 800544a:	372c      	adds	r7, #44	; 0x2c
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	20000240 	.word	0x20000240
 8005458:	20000220 	.word	0x20000220
 800545c:	20000144 	.word	0x20000144
 8005460:	200001d8 	.word	0x200001d8
 8005464:	20000140 	.word	0x20000140
 8005468:	2000022c 	.word	0x2000022c

0800546c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <vTaskInternalSetTimeOutState+0x24>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <vTaskInternalSetTimeOutState+0x28>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	605a      	str	r2, [r3, #4]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000230 	.word	0x20000230
 8005494:	2000021c 	.word	0x2000021c

08005498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	613b      	str	r3, [r7, #16]
    }
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
    }
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80054da:	f001 f8cd 	bl	8006678 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80054de:	4b1f      	ldr	r3, [pc, #124]	; (800555c <xTaskCheckForTimeOut+0xc4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f6:	d102      	bne.n	80054fe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e026      	b.n	800554c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b17      	ldr	r3, [pc, #92]	; (8005560 <xTaskCheckForTimeOut+0xc8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00a      	beq.n	8005520 <xTaskCheckForTimeOut+0x88>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	d305      	bcc.n	8005520 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e015      	b.n	800554c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	429a      	cmp	r2, r3
 8005528:	d20b      	bcs.n	8005542 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	1ad2      	subs	r2, r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff98 	bl	800546c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	e004      	b.n	800554c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005548:	2301      	movs	r3, #1
 800554a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800554c:	f001 f8c4 	bl	80066d8 <vPortExitCritical>

    return xReturn;
 8005550:	69fb      	ldr	r3, [r7, #28]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	2000021c 	.word	0x2000021c
 8005560:	20000230 	.word	0x20000230

08005564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005568:	4b03      	ldr	r3, [pc, #12]	; (8005578 <vTaskMissedYield+0x14>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	2000022c 	.word	0x2000022c

0800557c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005584:	f000 f852 	bl	800562c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <prvIdleTask+0x28>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d9f9      	bls.n	8005584 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <prvIdleTask+0x2c>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80055a0:	e7f0      	b.n	8005584 <prvIdleTask+0x8>
 80055a2:	bf00      	nop
 80055a4:	20000144 	.word	0x20000144
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	e00c      	b.n	80055d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4a12      	ldr	r2, [pc, #72]	; (800560c <prvInitialiseTaskLists+0x60>)
 80055c4:	4413      	add	r3, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fc1e 	bl	8003e08 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3301      	adds	r3, #1
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d9ef      	bls.n	80055b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80055d8:	480d      	ldr	r0, [pc, #52]	; (8005610 <prvInitialiseTaskLists+0x64>)
 80055da:	f7fe fc15 	bl	8003e08 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80055de:	480d      	ldr	r0, [pc, #52]	; (8005614 <prvInitialiseTaskLists+0x68>)
 80055e0:	f7fe fc12 	bl	8003e08 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80055e4:	480c      	ldr	r0, [pc, #48]	; (8005618 <prvInitialiseTaskLists+0x6c>)
 80055e6:	f7fe fc0f 	bl	8003e08 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80055ea:	480c      	ldr	r0, [pc, #48]	; (800561c <prvInitialiseTaskLists+0x70>)
 80055ec:	f7fe fc0c 	bl	8003e08 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80055f0:	480b      	ldr	r0, [pc, #44]	; (8005620 <prvInitialiseTaskLists+0x74>)
 80055f2:	f7fe fc09 	bl	8003e08 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <prvInitialiseTaskLists+0x78>)
 80055f8:	4a05      	ldr	r2, [pc, #20]	; (8005610 <prvInitialiseTaskLists+0x64>)
 80055fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <prvInitialiseTaskLists+0x7c>)
 80055fe:	4a05      	ldr	r2, [pc, #20]	; (8005614 <prvInitialiseTaskLists+0x68>)
 8005600:	601a      	str	r2, [r3, #0]
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000144 	.word	0x20000144
 8005610:	200001a8 	.word	0x200001a8
 8005614:	200001bc 	.word	0x200001bc
 8005618:	200001d8 	.word	0x200001d8
 800561c:	200001ec 	.word	0x200001ec
 8005620:	20000204 	.word	0x20000204
 8005624:	200001d0 	.word	0x200001d0
 8005628:	200001d4 	.word	0x200001d4

0800562c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005632:	e019      	b.n	8005668 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005634:	f001 f820 	bl	8006678 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005638:	4b10      	ldr	r3, [pc, #64]	; (800567c <prvCheckTasksWaitingTermination+0x50>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fc69 	bl	8003f1c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <prvCheckTasksWaitingTermination+0x54>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3b01      	subs	r3, #1
 8005650:	4a0b      	ldr	r2, [pc, #44]	; (8005680 <prvCheckTasksWaitingTermination+0x54>)
 8005652:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <prvCheckTasksWaitingTermination+0x58>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <prvCheckTasksWaitingTermination+0x58>)
 800565c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800565e:	f001 f83b 	bl	80066d8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f810 	bl	8005688 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <prvCheckTasksWaitingTermination+0x58>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e1      	bne.n	8005634 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	200001ec 	.word	0x200001ec
 8005680:	20000218 	.word	0x20000218
 8005684:	20000200 	.word	0x20000200

08005688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f9cb 	bl	8006a30 <vPortFree>
            vPortFree( pxTCB );
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 f9c8 	bl	8006a30 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <prvResetNextTaskUnblockTime+0x30>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <prvResetNextTaskUnblockTime+0x34>)
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80056be:	e005      	b.n	80056cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <prvResetNextTaskUnblockTime+0x30>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <prvResetNextTaskUnblockTime+0x34>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	200001d0 	.word	0x200001d0
 80056dc:	20000238 	.word	0x20000238

080056e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <xTaskGetSchedulerState+0x34>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80056ee:	2301      	movs	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	e008      	b.n	8005706 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <xTaskGetSchedulerState+0x38>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80056fc:	2302      	movs	r3, #2
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e001      	b.n	8005706 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005706:	687b      	ldr	r3, [r7, #4]
    }
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	20000224 	.word	0x20000224
 8005718:	20000240 	.word	0x20000240

0800571c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d063      	beq.n	80057fa <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005732:	4b34      	ldr	r3, [pc, #208]	; (8005804 <xTaskPriorityDisinherit+0xe8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d00a      	beq.n	8005752 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60fb      	str	r3, [r7, #12]
    }
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60bb      	str	r3, [r7, #8]
    }
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005782:	429a      	cmp	r2, r3
 8005784:	d039      	beq.n	80057fa <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d135      	bne.n	80057fa <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fbc2 	bl	8003f1c <uxListRemove>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43da      	mvns	r2, r3
 80057aa:	4b17      	ldr	r3, [pc, #92]	; (8005808 <xTaskPriorityDisinherit+0xec>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4013      	ands	r3, r2
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <xTaskPriorityDisinherit+0xec>)
 80057b2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	f1c3 0205 	rsb	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	2201      	movs	r2, #1
 80057ce:	409a      	lsls	r2, r3
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <xTaskPriorityDisinherit+0xec>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <xTaskPriorityDisinherit+0xec>)
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <xTaskPriorityDisinherit+0xf0>)
 80057e8:	441a      	add	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7fe fb36 	bl	8003e62 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80057fa:	697b      	ldr	r3, [r7, #20]
    }
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000140 	.word	0x20000140
 8005808:	20000220 	.word	0x20000220
 800580c:	20000144 	.word	0x20000144

08005810 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	613b      	str	r3, [r7, #16]
    }
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800583a:	f000 ff1d 	bl	8006678 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800583e:	4b32      	ldr	r3, [pc, #200]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	3354      	adds	r3, #84	; 0x54
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d022      	beq.n	8005896 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005850:	4b2d      	ldr	r3, [pc, #180]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	3214      	adds	r2, #20
 8005858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	43d2      	mvns	r2, r2
 8005860:	4011      	ands	r1, r2
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	3214      	adds	r2, #20
 8005866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	3354      	adds	r3, #84	; 0x54
 8005874:	2201      	movs	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800587e:	2101      	movs	r1, #1
 8005880:	6a38      	ldr	r0, [r7, #32]
 8005882:	f000 fac3 	bl	8005e0c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <xTaskGenericNotifyWait+0xfc>)
 8005888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005896:	f000 ff1f 	bl	80066d8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800589a:	f000 feed 	bl	8006678 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80058a4:	4b18      	ldr	r3, [pc, #96]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	3214      	adds	r2, #20
 80058ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	3354      	adds	r3, #84	; 0x54
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d002      	beq.n	80058cc <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e00e      	b.n	80058ea <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	3214      	adds	r2, #20
 80058d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	43d2      	mvns	r2, r2
 80058dc:	4011      	ands	r1, r2
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	3214      	adds	r2, #20
 80058e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <xTaskGenericNotifyWait+0xf8>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	3354      	adds	r3, #84	; 0x54
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80058f8:	f000 feee 	bl	80066d8 <vPortExitCritical>

        return xReturn;
 80058fc:	697b      	ldr	r3, [r7, #20]
    }
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000140 	.word	0x20000140
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800591e:	2301      	movs	r3, #1
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <xTaskGenericNotify+0x2e>
        __asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	623b      	str	r3, [r7, #32]
    }
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xTaskGenericNotify+0x4a>
        __asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61fb      	str	r3, [r7, #28]
    }
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800595e:	f000 fe8b 	bl	8006678 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	3214      	adds	r2, #20
 800596e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005974:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4413      	add	r3, r2
 800597c:	3354      	adds	r3, #84	; 0x54
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4413      	add	r3, r2
 800598a:	3354      	adds	r3, #84	; 0x54
 800598c:	2202      	movs	r2, #2
 800598e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d83b      	bhi.n	8005a0e <xTaskGenericNotify+0xfe>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <xTaskGenericNotify+0x8c>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	08005a2d 	.word	0x08005a2d
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059e5 	.word	0x080059e5
 80059ac:	080059f3 	.word	0x080059f3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	3214      	adds	r2, #20
 80059b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	ea42 0103 	orr.w	r1, r2, r3
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	3214      	adds	r2, #20
 80059c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059ca:	e032      	b.n	8005a32 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	3214      	adds	r2, #20
 80059d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	3214      	adds	r2, #20
 80059de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059e2:	e026      	b.n	8005a32 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	3214      	adds	r2, #20
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059f0:	e01f      	b.n	8005a32 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d006      	beq.n	8005a08 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	3214      	adds	r2, #20
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a06:	e014      	b.n	8005a32 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8005a0c:	e011      	b.n	8005a32 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a0e:	4b4c      	ldr	r3, [pc, #304]	; (8005b40 <xTaskGenericNotify+0x230>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <xTaskGenericNotify+0x120>
        __asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	61bb      	str	r3, [r7, #24]
    }
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xTaskGenericNotify+0x11a>
                    break;
 8005a2c:	bf00      	nop
 8005a2e:	e000      	b.n	8005a32 <xTaskGenericNotify+0x122>

                    break;
 8005a30:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d17b      	bne.n	8005b32 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	68d2      	ldr	r2, [r2, #12]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a50:	6892      	ldr	r2, [r2, #8]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d103      	bne.n	8005a68 <xTaskGenericNotify+0x158>
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1e5a      	subs	r2, r3, #1
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	4b30      	ldr	r3, [pc, #192]	; (8005b44 <xTaskGenericNotify+0x234>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <xTaskGenericNotify+0x234>)
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	492e      	ldr	r1, [pc, #184]	; (8005b48 <xTaskGenericNotify+0x238>)
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	609a      	str	r2, [r3, #8]
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	60da      	str	r2, [r3, #12]
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab4:	3204      	adds	r2, #4
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	1d1a      	adds	r2, r3, #4
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <xTaskGenericNotify+0x238>)
 8005ace:	441a      	add	r2, r3
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	615a      	str	r2, [r3, #20]
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	491b      	ldr	r1, [pc, #108]	; (8005b48 <xTaskGenericNotify+0x238>)
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	4817      	ldr	r0, [pc, #92]	; (8005b48 <xTaskGenericNotify+0x238>)
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4403      	add	r3, r0
 8005af4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <xTaskGenericNotify+0x204>
        __asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	617b      	str	r3, [r7, #20]
    }
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <xTaskGenericNotify+0x23c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d907      	bls.n	8005b32 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <xTaskGenericNotify+0x240>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005b32:	f000 fdd1 	bl	80066d8 <vPortExitCritical>

        return xReturn;
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3738      	adds	r7, #56	; 0x38
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2000021c 	.word	0x2000021c
 8005b44:	20000220 	.word	0x20000220
 8005b48:	20000144 	.word	0x20000144
 8005b4c:	20000140 	.word	0x20000140
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b092      	sub	sp, #72	; 0x48
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005b62:	2301      	movs	r3, #1
 8005b64:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005b9a:	bf00      	nop
 8005b9c:	e7fe      	b.n	8005b9c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b9e:	f000 fe4d 	bl	800683c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8005ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	623a      	str	r2, [r7, #32]
 8005bbc:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005bbe:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8005bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	3214      	adds	r2, #20
 8005bce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3354      	adds	r3, #84	; 0x54
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005be4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	3354      	adds	r3, #84	; 0x54
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d83b      	bhi.n	8005c6e <xTaskGenericNotifyFromISR+0x11a>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <xTaskGenericNotifyFromISR+0xa8>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c8d 	.word	0x08005c8d
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c45 	.word	0x08005c45
 8005c0c:	08005c53 	.word	0x08005c53
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	3214      	adds	r2, #20
 8005c16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	ea42 0103 	orr.w	r1, r2, r3
 8005c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	3214      	adds	r2, #20
 8005c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005c2a:	e032      	b.n	8005c92 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	3214      	adds	r2, #20
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	3214      	adds	r2, #20
 8005c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005c42:	e026      	b.n	8005c92 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	3214      	adds	r2, #20
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005c50:	e01f      	b.n	8005c92 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005c52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d006      	beq.n	8005c68 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	3214      	adds	r2, #20
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005c66:	e014      	b.n	8005c92 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8005c6c:	e011      	b.n	8005c92 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005c6e:	4b60      	ldr	r3, [pc, #384]	; (8005df0 <xTaskGenericNotifyFromISR+0x29c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	61bb      	str	r3, [r7, #24]
    }
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005c90:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005c92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	f040 809e 	bne.w	8005dd8 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	617b      	str	r3, [r7, #20]
    }
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cba:	4b4e      	ldr	r3, [pc, #312]	; (8005df4 <xTaskGenericNotifyFromISR+0x2a0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d15e      	bne.n	8005d80 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cce:	68d2      	ldr	r2, [r2, #12]
 8005cd0:	609a      	str	r2, [r3, #8]
 8005cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cd8:	6892      	ldr	r2, [r2, #8]
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d103      	bne.n	8005cf0 <xTaskGenericNotifyFromISR+0x19c>
 8005ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	615a      	str	r2, [r3, #20]
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	2201      	movs	r2, #1
 8005d06:	409a      	lsls	r2, r3
 8005d08:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <xTaskGenericNotifyFromISR+0x2a4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	4a3a      	ldr	r2, [pc, #232]	; (8005df8 <xTaskGenericNotifyFromISR+0x2a4>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	4939      	ldr	r1, [pc, #228]	; (8005dfc <xTaskGenericNotifyFromISR+0x2a8>)
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	3304      	adds	r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d3c:	3204      	adds	r2, #4
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4a29      	ldr	r2, [pc, #164]	; (8005dfc <xTaskGenericNotifyFromISR+0x2a8>)
 8005d56:	441a      	add	r2, r3
 8005d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5a:	615a      	str	r2, [r3, #20]
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4926      	ldr	r1, [pc, #152]	; (8005dfc <xTaskGenericNotifyFromISR+0x2a8>)
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	4822      	ldr	r0, [pc, #136]	; (8005dfc <xTaskGenericNotifyFromISR+0x2a8>)
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4403      	add	r3, r0
 8005d7c:	6019      	str	r1, [r3, #0]
 8005d7e:	e01b      	b.n	8005db8 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005d80:	4b1f      	ldr	r3, [pc, #124]	; (8005e00 <xTaskGenericNotifyFromISR+0x2ac>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
 8005d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8a:	61da      	str	r2, [r3, #28]
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d92:	621a      	str	r2, [r3, #32]
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d9a:	3218      	adds	r2, #24
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da0:	f103 0218 	add.w	r2, r3, #24
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <xTaskGenericNotifyFromISR+0x2ac>)
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
 8005dae:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <xTaskGenericNotifyFromISR+0x2ac>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <xTaskGenericNotifyFromISR+0x2ac>)
 8005db6:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xTaskGenericNotifyFromISR+0x2b0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d908      	bls.n	8005dd8 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <xTaskGenericNotifyFromISR+0x2b4>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dda:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f383 8811 	msr	BASEPRI, r3
    }
 8005de2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3748      	adds	r7, #72	; 0x48
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	2000021c 	.word	0x2000021c
 8005df4:	20000240 	.word	0x20000240
 8005df8:	20000220 	.word	0x20000220
 8005dfc:	20000144 	.word	0x20000144
 8005e00:	200001d8 	.word	0x200001d8
 8005e04:	20000140 	.word	0x20000140
 8005e08:	2000022c 	.word	0x2000022c

08005e0c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe f87a 	bl	8003f1c <uxListRemove>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	2201      	movs	r2, #1
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43da      	mvns	r2, r3
 8005e3c:	4b2e      	ldr	r3, [pc, #184]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0xec>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4013      	ands	r3, r2
 8005e42:	4a2d      	ldr	r2, [pc, #180]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0xec>)
 8005e44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4c:	d124      	bne.n	8005e98 <prvAddCurrentTaskToDelayedList+0x8c>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d021      	beq.n	8005e98 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e54:	4b29      	ldr	r3, [pc, #164]	; (8005efc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	6892      	ldr	r2, [r2, #8]
 8005e6a:	60da      	str	r2, [r3, #12]
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	3204      	adds	r2, #4
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	1d1a      	adds	r2, r3, #4
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005e88:	615a      	str	r2, [r3, #20]
 8005e8a:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005e96:	e026      	b.n	8005ee6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ea0:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d209      	bcs.n	8005ec4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fd fff4 	bl	8003eaa <vListInsert>
}
 8005ec2:	e010      	b.n	8005ee6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fd ffea 	bl	8003eaa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d202      	bcs.n	8005ee6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	2000021c 	.word	0x2000021c
 8005ef4:	20000140 	.word	0x20000140
 8005ef8:	20000220 	.word	0x20000220
 8005efc:	20000204 	.word	0x20000204
 8005f00:	200001d4 	.word	0x200001d4
 8005f04:	200001d0 	.word	0x200001d0
 8005f08:	20000238 	.word	0x20000238

08005f0c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005f16:	f000 fa47 	bl	80063a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <xTimerCreateTimerTask+0x54>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005f22:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <xTimerCreateTimerTask+0x58>)
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	2302      	movs	r3, #2
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f30:	490d      	ldr	r1, [pc, #52]	; (8005f68 <xTimerCreateTimerTask+0x5c>)
 8005f32:	480e      	ldr	r0, [pc, #56]	; (8005f6c <xTimerCreateTimerTask+0x60>)
 8005f34:	f7fe fd06 	bl	8004944 <xTaskCreate>
 8005f38:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	603b      	str	r3, [r7, #0]
    }
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005f56:	687b      	ldr	r3, [r7, #4]
    }
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000274 	.word	0x20000274
 8005f64:	20000278 	.word	0x20000278
 8005f68:	08006d24 	.word	0x08006d24
 8005f6c:	08006015 	.word	0x08006015

08005f70 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005f7c:	e008      	b.n	8005f90 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	4413      	add	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	18d1      	adds	r1, r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f8dd 	bl	800615c <prvInsertTimerInActiveList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1ea      	bne.n	8005f7e <prvReloadTimer+0xe>
        }
    }
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <prvProcessExpiredTimer+0x5c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fd ffa5 	bl	8003f1c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff ffc3 	bl	8005f70 <prvReloadTimer>
 8005fea:	e008      	b.n	8005ffe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	4798      	blx	r3
    }
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	2000026c 	.word	0x2000026c

08006014 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800601c:	f107 0308 	add.w	r3, r7, #8
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f857 	bl	80060d4 <prvGetNextExpireTime>
 8006026:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4619      	mov	r1, r3
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f803 	bl	8006038 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006032:	f000 f8d5 	bl	80061e0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006036:	e7f1      	b.n	800601c <prvTimerTask+0x8>

08006038 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006042:	f7fe fe3b 	bl	8004cbc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006046:	f107 0308 	add.w	r3, r7, #8
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f866 	bl	800611c <prvSampleTimeNow>
 8006050:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d130      	bne.n	80060ba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <prvProcessTimerOrBlockTask+0x3c>
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	429a      	cmp	r2, r3
 8006064:	d806      	bhi.n	8006074 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006066:	f7fe fe37 	bl	8004cd8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ffa1 	bl	8005fb4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006072:	e024      	b.n	80060be <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <prvProcessTimerOrBlockTask+0x90>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <prvProcessTimerOrBlockTask+0x50>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <prvProcessTimerOrBlockTask+0x52>
 8006088:	2300      	movs	r3, #0
 800608a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <prvProcessTimerOrBlockTask+0x94>)
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	4619      	mov	r1, r3
 800609a:	f7fe fc1f 	bl	80048dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800609e:	f7fe fe1b 	bl	8004cd8 <xTaskResumeAll>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <prvProcessTimerOrBlockTask+0x98>)
 80060aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	f3bf 8f6f 	isb	sy
    }
 80060b8:	e001      	b.n	80060be <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80060ba:	f7fe fe0d 	bl	8004cd8 <xTaskResumeAll>
    }
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000270 	.word	0x20000270
 80060cc:	20000274 	.word	0x20000274
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <prvGetNextExpireTime+0x44>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <prvGetNextExpireTime+0x16>
 80060e6:	2201      	movs	r2, #1
 80060e8:	e000      	b.n	80060ec <prvGetNextExpireTime+0x18>
 80060ea:	2200      	movs	r2, #0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <prvGetNextExpireTime+0x44>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e001      	b.n	8006108 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006108:	68fb      	ldr	r3, [r7, #12]
    }
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	2000026c 	.word	0x2000026c

0800611c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006124:	f7fe fed4 	bl	8004ed0 <xTaskGetTickCount>
 8006128:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <prvSampleTimeNow+0x3c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d205      	bcs.n	8006140 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006134:	f000 f912 	bl	800635c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e002      	b.n	8006146 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <prvSampleTimeNow+0x3c>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800614c:	68fb      	ldr	r3, [r7, #12]
    }
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	2000027c 	.word	0x2000027c

0800615c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d812      	bhi.n	80061a8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	429a      	cmp	r2, r3
 800618e:	d302      	bcc.n	8006196 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	e01b      	b.n	80061ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <prvInsertTimerInActiveList+0x7c>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3304      	adds	r3, #4
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f7fd fe82 	bl	8003eaa <vListInsert>
 80061a6:	e012      	b.n	80061ce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d206      	bcs.n	80061be <prvInsertTimerInActiveList+0x62>
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e007      	b.n	80061ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061be:	4b07      	ldr	r3, [pc, #28]	; (80061dc <prvInsertTimerInActiveList+0x80>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f7fd fe6e 	bl	8003eaa <vListInsert>
            }
        }

        return xProcessTimerNow;
 80061ce:	697b      	ldr	r3, [r7, #20]
    }
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000270 	.word	0x20000270
 80061dc:	2000026c 	.word	0x2000026c

080061e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061e6:	e0a6      	b.n	8006336 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f2c0 80a3 	blt.w	8006336 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fd fe8b 	bl	8003f1c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff ff87 	bl	800611c <prvSampleTimeNow>
 800620e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3b01      	subs	r3, #1
 8006214:	2b08      	cmp	r3, #8
 8006216:	f200 808d 	bhi.w	8006334 <prvProcessReceivedCommands+0x154>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <prvProcessReceivedCommands+0x40>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006245 	.word	0x08006245
 8006224:	08006245 	.word	0x08006245
 8006228:	080062ad 	.word	0x080062ad
 800622c:	080062c1 	.word	0x080062c1
 8006230:	0800630b 	.word	0x0800630b
 8006234:	08006245 	.word	0x08006245
 8006238:	08006245 	.word	0x08006245
 800623c:	080062ad 	.word	0x080062ad
 8006240:	080062c1 	.word	0x080062c1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	18d1      	adds	r1, r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	69f8      	ldr	r0, [r7, #28]
 8006264:	f7ff ff7a 	bl	800615c <prvInsertTimerInActiveList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d063      	beq.n	8006336 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	4413      	add	r3, r2
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4619      	mov	r1, r3
 8006288:	69f8      	ldr	r0, [r7, #28]
 800628a:	f7ff fe71 	bl	8005f70 <prvReloadTimer>
 800628e:	e008      	b.n	80062a2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	69f8      	ldr	r0, [r7, #28]
 80062a8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80062aa:	e044      	b.n	8006336 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80062be:	e03a      	b.n	8006336 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	617b      	str	r3, [r7, #20]
    }
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	18d1      	adds	r1, r2, r3
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	69f8      	ldr	r0, [r7, #28]
 8006304:	f7ff ff2a 	bl	800615c <prvInsertTimerInActiveList>
                        break;
 8006308:	e015      	b.n	8006336 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8006318:	69f8      	ldr	r0, [r7, #28]
 800631a:	f000 fb89 	bl	8006a30 <vPortFree>
 800631e:	e00a      	b.n	8006336 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	b2da      	uxtb	r2, r3
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006332:	e000      	b.n	8006336 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006334:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <prvProcessReceivedCommands+0x178>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f107 0108 	add.w	r1, r7, #8
 800633e:	2200      	movs	r2, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f7fd ffc9 	bl	80042d8 <xQueueReceive>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	f47f af4d 	bne.w	80061e8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000274 	.word	0x20000274

0800635c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006362:	e009      	b.n	8006378 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <prvSwitchTimerLists+0x44>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800636e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006372:	6838      	ldr	r0, [r7, #0]
 8006374:	f7ff fe1e 	bl	8005fb4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <prvSwitchTimerLists+0x44>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <prvSwitchTimerLists+0x44>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <prvSwitchTimerLists+0x48>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a04      	ldr	r2, [pc, #16]	; (80063a0 <prvSwitchTimerLists+0x44>)
 800638e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006390:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <prvSwitchTimerLists+0x48>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6013      	str	r3, [r2, #0]
    }
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	2000026c 	.word	0x2000026c
 80063a4:	20000270 	.word	0x20000270

080063a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80063ac:	f000 f964 	bl	8006678 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80063b0:	4b12      	ldr	r3, [pc, #72]	; (80063fc <prvCheckForValidListAndQueue+0x54>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11d      	bne.n	80063f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80063b8:	4811      	ldr	r0, [pc, #68]	; (8006400 <prvCheckForValidListAndQueue+0x58>)
 80063ba:	f7fd fd25 	bl	8003e08 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80063be:	4811      	ldr	r0, [pc, #68]	; (8006404 <prvCheckForValidListAndQueue+0x5c>)
 80063c0:	f7fd fd22 	bl	8003e08 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <prvCheckForValidListAndQueue+0x60>)
 80063c6:	4a0e      	ldr	r2, [pc, #56]	; (8006400 <prvCheckForValidListAndQueue+0x58>)
 80063c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <prvCheckForValidListAndQueue+0x64>)
 80063cc:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <prvCheckForValidListAndQueue+0x5c>)
 80063ce:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80063d0:	2200      	movs	r2, #0
 80063d2:	210c      	movs	r1, #12
 80063d4:	200a      	movs	r0, #10
 80063d6:	f7fd fe5b 	bl	8004090 <xQueueGenericCreate>
 80063da:	4603      	mov	r3, r0
 80063dc:	4a07      	ldr	r2, [pc, #28]	; (80063fc <prvCheckForValidListAndQueue+0x54>)
 80063de:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <prvCheckForValidListAndQueue+0x54>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <prvCheckForValidListAndQueue+0x54>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4908      	ldr	r1, [pc, #32]	; (8006410 <prvCheckForValidListAndQueue+0x68>)
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fa26 	bl	8004840 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80063f4:	f000 f970 	bl	80066d8 <vPortExitCritical>
    }
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000274 	.word	0x20000274
 8006400:	20000244 	.word	0x20000244
 8006404:	20000258 	.word	0x20000258
 8006408:	2000026c 	.word	0x2000026c
 800640c:	20000270 	.word	0x20000270
 8006410:	08006d2c 	.word	0x08006d2c

08006414 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b04      	subs	r3, #4
 8006424:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800642c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3b04      	subs	r3, #4
 8006432:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3b04      	subs	r3, #4
 8006442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006444:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <pxPortInitialiseStack+0x64>)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3b14      	subs	r3, #20
 800644e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3b04      	subs	r3, #4
 800645a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f06f 0202 	mvn.w	r2, #2
 8006462:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3b20      	subs	r3, #32
 8006468:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800646a:	68fb      	ldr	r3, [r7, #12]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	0800647d 	.word	0x0800647d

0800647c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <prvTaskExitError+0x54>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800648e:	d00a      	beq.n	80064a6 <prvTaskExitError+0x2a>
        __asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60fb      	str	r3, [r7, #12]
    }
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <prvTaskExitError+0x28>
        __asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
    }
 80064b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80064ba:	bf00      	nop
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0fc      	beq.n	80064bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	20000010 	.word	0x20000010
	...

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	4770      	bx	lr
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst2>:
 8006500:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <prvPortStartFirstTask+0x24>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8814 	msr	CONTROL, r0
 800651a:	b662      	cpsie	i
 800651c:	b661      	cpsie	f
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	df00      	svc	0
 8006528:	bf00      	nop
 800652a:	0000      	.short	0x0000
 800652c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop

08006534 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800653a:	4b46      	ldr	r3, [pc, #280]	; (8006654 <xPortStartScheduler+0x120>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a46      	ldr	r2, [pc, #280]	; (8006658 <xPortStartScheduler+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d10a      	bne.n	800655a <xPortStartScheduler+0x26>
        __asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	613b      	str	r3, [r7, #16]
    }
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800655a:	4b3e      	ldr	r3, [pc, #248]	; (8006654 <xPortStartScheduler+0x120>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a3f      	ldr	r2, [pc, #252]	; (800665c <xPortStartScheduler+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d10a      	bne.n	800657a <xPortStartScheduler+0x46>
        __asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	60fb      	str	r3, [r7, #12]
    }
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800657a:	4b39      	ldr	r3, [pc, #228]	; (8006660 <xPortStartScheduler+0x12c>)
 800657c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	22ff      	movs	r2, #255	; 0xff
 800658a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800659c:	b2da      	uxtb	r2, r3
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <xPortStartScheduler+0x130>)
 80065a0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065a2:	4b31      	ldr	r3, [pc, #196]	; (8006668 <xPortStartScheduler+0x134>)
 80065a4:	2207      	movs	r2, #7
 80065a6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065a8:	e009      	b.n	80065be <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80065aa:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <xPortStartScheduler+0x134>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	4a2d      	ldr	r2, [pc, #180]	; (8006668 <xPortStartScheduler+0x134>)
 80065b2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b80      	cmp	r3, #128	; 0x80
 80065c8:	d0ef      	beq.n	80065aa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065ca:	4b27      	ldr	r3, [pc, #156]	; (8006668 <xPortStartScheduler+0x134>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1c3 0307 	rsb	r3, r3, #7
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00a      	beq.n	80065ec <xPortStartScheduler+0xb8>
        __asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60bb      	str	r3, [r7, #8]
    }
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065ec:	4b1e      	ldr	r3, [pc, #120]	; (8006668 <xPortStartScheduler+0x134>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <xPortStartScheduler+0x134>)
 80065f4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065f6:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <xPortStartScheduler+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065fe:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <xPortStartScheduler+0x134>)
 8006600:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800660a:	4b18      	ldr	r3, [pc, #96]	; (800666c <xPortStartScheduler+0x138>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a17      	ldr	r2, [pc, #92]	; (800666c <xPortStartScheduler+0x138>)
 8006610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006614:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006616:	4b15      	ldr	r3, [pc, #84]	; (800666c <xPortStartScheduler+0x138>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a14      	ldr	r2, [pc, #80]	; (800666c <xPortStartScheduler+0x138>)
 800661c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006620:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006622:	f000 f8db 	bl	80067dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <xPortStartScheduler+0x13c>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800662c:	f000 f8fa 	bl	8006824 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006630:	4b10      	ldr	r3, [pc, #64]	; (8006674 <xPortStartScheduler+0x140>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0f      	ldr	r2, [pc, #60]	; (8006674 <xPortStartScheduler+0x140>)
 8006636:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800663a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800663c:	f7ff ff64 	bl	8006508 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006640:	f7fe fd78 	bl	8005134 <vTaskSwitchContext>
    prvTaskExitError();
 8006644:	f7ff ff1a 	bl	800647c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	e000ed00 	.word	0xe000ed00
 8006658:	410fc271 	.word	0x410fc271
 800665c:	410fc270 	.word	0x410fc270
 8006660:	e000e400 	.word	0xe000e400
 8006664:	20000280 	.word	0x20000280
 8006668:	20000284 	.word	0x20000284
 800666c:	e000ed20 	.word	0xe000ed20
 8006670:	20000010 	.word	0x20000010
 8006674:	e000ef34 	.word	0xe000ef34

08006678 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
        __asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
    }
 8006690:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <vPortEnterCritical+0x58>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3301      	adds	r3, #1
 8006698:	4a0d      	ldr	r2, [pc, #52]	; (80066d0 <vPortEnterCritical+0x58>)
 800669a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <vPortEnterCritical+0x58>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10f      	bne.n	80066c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <vPortEnterCritical+0x5c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	603b      	str	r3, [r7, #0]
    }
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <vPortEnterCritical+0x4a>
    }
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20000010 	.word	0x20000010
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <vPortExitCritical+0x50>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <vPortExitCritical+0x24>
        __asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	607b      	str	r3, [r7, #4]
    }
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <vPortExitCritical+0x50>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	4a09      	ldr	r2, [pc, #36]	; (8006728 <vPortExitCritical+0x50>)
 8006704:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006706:	4b08      	ldr	r3, [pc, #32]	; (8006728 <vPortExitCritical+0x50>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <vPortExitCritical+0x42>
 800670e:	2300      	movs	r3, #0
 8006710:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	f383 8811 	msr	BASEPRI, r3
    }
 8006718:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000010 	.word	0x20000010
 800672c:	00000000 	.word	0x00000000

08006730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006730:	f3ef 8009 	mrs	r0, PSP
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <pxCurrentTCBConst>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f01e 0f10 	tst.w	lr, #16
 8006740:	bf08      	it	eq
 8006742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006754:	f380 8811 	msr	BASEPRI, r0
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f7fe fce8 	bl	8005134 <vTaskSwitchContext>
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f380 8811 	msr	BASEPRI, r0
 800676c:	bc09      	pop	{r0, r3}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	f01e 0f10 	tst.w	lr, #16
 800677a:	bf08      	it	eq
 800677c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006780:	f380 8809 	msr	PSP, r0
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst>:
 8006790:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
        __asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
    }
 80067b0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80067b2:	f7fe fba9 	bl	8004f08 <xTaskIncrementTick>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <SysTick_Handler+0x40>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	2300      	movs	r3, #0
 80067c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f383 8811 	msr	BASEPRI, r3
    }
 80067ce:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <vPortSetupTimerInterrupt+0x38>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <vPortSetupTimerInterrupt+0x3c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <vPortSetupTimerInterrupt+0x40>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <vPortSetupTimerInterrupt+0x44>)
 80067fa:	3b01      	subs	r3, #1
 80067fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <vPortSetupTimerInterrupt+0x34>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e000e010 	.word	0xe000e010
 8006814:	e000e018 	.word	0xe000e018
 8006818:	20000000 	.word	0x20000000
 800681c:	10624dd3 	.word	0x10624dd3
 8006820:	e000e014 	.word	0xe000e014

08006824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006834 <vPortEnableVFP+0x10>
 8006828:	6801      	ldr	r1, [r0, #0]
 800682a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800682e:	6001      	str	r1, [r0, #0]
 8006830:	4770      	bx	lr
 8006832:	0000      	.short	0x0000
 8006834:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop

0800683c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006842:	f3ef 8305 	mrs	r3, IPSR
 8006846:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b0f      	cmp	r3, #15
 800684c:	d914      	bls.n	8006878 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800684e:	4a17      	ldr	r2, [pc, #92]	; (80068ac <vPortValidateInterruptPriority+0x70>)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <vPortValidateInterruptPriority+0x74>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	7afa      	ldrb	r2, [r7, #11]
 800685e:	429a      	cmp	r2, r3
 8006860:	d20a      	bcs.n	8006878 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	607b      	str	r3, [r7, #4]
    }
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <vPortValidateInterruptPriority+0x78>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <vPortValidateInterruptPriority+0x7c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d90a      	bls.n	800689e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	603b      	str	r3, [r7, #0]
    }
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <vPortValidateInterruptPriority+0x60>
    }
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	e000e3f0 	.word	0xe000e3f0
 80068b0:	20000280 	.word	0x20000280
 80068b4:	e000ed0c 	.word	0xe000ed0c
 80068b8:	20000284 	.word	0x20000284

080068bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80068c8:	f7fe f9f8 	bl	8004cbc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80068cc:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <pvPortMalloc+0x160>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80068d4:	f000 f908 	bl	8006ae8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d012      	beq.n	8006904 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80068de:	2208      	movs	r2, #8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	3308      	adds	r3, #8
 80068ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	43db      	mvns	r3, r3
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d804      	bhi.n	8006900 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4413      	add	r3, r2
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	e001      	b.n	8006904 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	db70      	blt.n	80069ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d06d      	beq.n	80069ec <pvPortMalloc+0x130>
 8006910:	4b43      	ldr	r3, [pc, #268]	; (8006a20 <pvPortMalloc+0x164>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d868      	bhi.n	80069ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800691a:	4b42      	ldr	r3, [pc, #264]	; (8006a24 <pvPortMalloc+0x168>)
 800691c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800691e:	4b41      	ldr	r3, [pc, #260]	; (8006a24 <pvPortMalloc+0x168>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006924:	e004      	b.n	8006930 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d903      	bls.n	8006942 <pvPortMalloc+0x86>
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f1      	bne.n	8006926 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006942:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <pvPortMalloc+0x160>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	429a      	cmp	r2, r3
 800694a:	d04f      	beq.n	80069ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2208      	movs	r2, #8
 8006952:	4413      	add	r3, r2
 8006954:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	2308      	movs	r3, #8
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	429a      	cmp	r2, r3
 800696c:	d91f      	bls.n	80069ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <pvPortMalloc+0xda>
        __asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	613b      	str	r3, [r7, #16]
    }
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	1ad2      	subs	r2, r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069a8:	6978      	ldr	r0, [r7, #20]
 80069aa:	f000 f8f9 	bl	8006ba0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069ae:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <pvPortMalloc+0x164>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <pvPortMalloc+0x164>)
 80069ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069bc:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <pvPortMalloc+0x164>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <pvPortMalloc+0x16c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d203      	bcs.n	80069d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <pvPortMalloc+0x164>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <pvPortMalloc+0x16c>)
 80069ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80069e2:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <pvPortMalloc+0x170>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <pvPortMalloc+0x170>)
 80069ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80069ec:	f7fe f974 	bl	8004cd8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <pvPortMalloc+0x154>
        __asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60fb      	str	r3, [r7, #12]
    }
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <pvPortMalloc+0x152>
    return pvReturn;
 8006a10:	69fb      	ldr	r3, [r7, #28]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20012e90 	.word	0x20012e90
 8006a20:	20012e94 	.word	0x20012e94
 8006a24:	20012e88 	.word	0x20012e88
 8006a28:	20012e98 	.word	0x20012e98
 8006a2c:	20012e9c 	.word	0x20012e9c

08006a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d049      	beq.n	8006ad6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006a42:	2308      	movs	r3, #8
 8006a44:	425b      	negs	r3, r3
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	db0a      	blt.n	8006a6e <vPortFree+0x3e>
        __asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60fb      	str	r3, [r7, #12]
    }
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <vPortFree+0x5c>
        __asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	60bb      	str	r3, [r7, #8]
    }
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	0fdb      	lsrs	r3, r3, #31
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01c      	beq.n	8006ad6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d118      	bne.n	8006ad6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006ab0:	f7fe f904 	bl	8004cbc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <vPortFree+0xb0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4413      	add	r3, r2
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <vPortFree+0xb0>)
 8006ac0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ac2:	6938      	ldr	r0, [r7, #16]
 8006ac4:	f000 f86c 	bl	8006ba0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <vPortFree+0xb4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a05      	ldr	r2, [pc, #20]	; (8006ae4 <vPortFree+0xb4>)
 8006ad0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006ad2:	f7fe f901 	bl	8004cd8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006ad6:	bf00      	nop
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20012e94 	.word	0x20012e94
 8006ae4:	20012ea0 	.word	0x20012ea0

08006ae8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006af2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <prvHeapInit+0xa4>)
 8006af6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3307      	adds	r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0307 	bic.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <prvHeapInit+0xa4>)
 8006b18:	4413      	add	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b20:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <prvHeapInit+0xa8>)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006b26:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <prvHeapInit+0xa8>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4413      	add	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006b34:	2208      	movs	r2, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0307 	bic.w	r3, r3, #7
 8006b42:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <prvHeapInit+0xac>)
 8006b48:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006b4a:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <prvHeapInit+0xac>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <prvHeapInit+0xac>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b68:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <prvHeapInit+0xac>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4a08      	ldr	r2, [pc, #32]	; (8006b98 <prvHeapInit+0xb0>)
 8006b76:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4a07      	ldr	r2, [pc, #28]	; (8006b9c <prvHeapInit+0xb4>)
 8006b7e:	6013      	str	r3, [r2, #0]
}
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000288 	.word	0x20000288
 8006b90:	20012e88 	.word	0x20012e88
 8006b94:	20012e90 	.word	0x20012e90
 8006b98:	20012e98 	.word	0x20012e98
 8006b9c:	20012e94 	.word	0x20012e94

08006ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ba8:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <prvInsertBlockIntoFreeList+0xac>)
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e002      	b.n	8006bb4 <prvInsertBlockIntoFreeList+0x14>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d8f7      	bhi.n	8006bae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	4413      	add	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d108      	bne.n	8006be2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	441a      	add	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	441a      	add	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d118      	bne.n	8006c28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <prvInsertBlockIntoFreeList+0xb0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d00d      	beq.n	8006c1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	441a      	add	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e008      	b.n	8006c30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <prvInsertBlockIntoFreeList+0xb0>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	e003      	b.n	8006c30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d002      	beq.n	8006c3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20012e88 	.word	0x20012e88
 8006c50:	20012e90 	.word	0x20012e90

08006c54 <memset>:
 8006c54:	4402      	add	r2, r0
 8006c56:	4603      	mov	r3, r0
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d100      	bne.n	8006c5e <memset+0xa>
 8006c5c:	4770      	bx	lr
 8006c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c62:	e7f9      	b.n	8006c58 <memset+0x4>

08006c64 <__libc_init_array>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4d0d      	ldr	r5, [pc, #52]	; (8006c9c <__libc_init_array+0x38>)
 8006c68:	4c0d      	ldr	r4, [pc, #52]	; (8006ca0 <__libc_init_array+0x3c>)
 8006c6a:	1b64      	subs	r4, r4, r5
 8006c6c:	10a4      	asrs	r4, r4, #2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	42a6      	cmp	r6, r4
 8006c72:	d109      	bne.n	8006c88 <__libc_init_array+0x24>
 8006c74:	4d0b      	ldr	r5, [pc, #44]	; (8006ca4 <__libc_init_array+0x40>)
 8006c76:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <__libc_init_array+0x44>)
 8006c78:	f000 f826 	bl	8006cc8 <_init>
 8006c7c:	1b64      	subs	r4, r4, r5
 8006c7e:	10a4      	asrs	r4, r4, #2
 8006c80:	2600      	movs	r6, #0
 8006c82:	42a6      	cmp	r6, r4
 8006c84:	d105      	bne.n	8006c92 <__libc_init_array+0x2e>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8c:	4798      	blx	r3
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7ee      	b.n	8006c70 <__libc_init_array+0xc>
 8006c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c96:	4798      	blx	r3
 8006c98:	3601      	adds	r6, #1
 8006c9a:	e7f2      	b.n	8006c82 <__libc_init_array+0x1e>
 8006c9c:	08006d54 	.word	0x08006d54
 8006ca0:	08006d54 	.word	0x08006d54
 8006ca4:	08006d54 	.word	0x08006d54
 8006ca8:	08006d58 	.word	0x08006d58

08006cac <memcpy>:
 8006cac:	440a      	add	r2, r1
 8006cae:	4291      	cmp	r1, r2
 8006cb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cb4:	d100      	bne.n	8006cb8 <memcpy+0xc>
 8006cb6:	4770      	bx	lr
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	d1f9      	bne.n	8006cba <memcpy+0xe>
 8006cc6:	bd10      	pop	{r4, pc}

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
