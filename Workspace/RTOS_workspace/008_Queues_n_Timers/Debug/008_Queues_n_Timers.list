
008_Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba4  08009ba4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bac  08009bac  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013050  20000084  08009c38  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200130d4  08009c38  000230d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017094  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a4c  00000000  00000000  0003718b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0003abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001003  00000000  00000000  0003c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f58  00000000  00000000  0003d08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195c4  00000000  00000000  00062fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2062  00000000  00000000  0007c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eac  00000000  00000000  0015e60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001644b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009784 	.word	0x08009784

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08009784 	.word	0x08009784

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <led_effect_stop>:
 */

#include "main.h"


void led_effect_stop(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8

	for(int i=0; i<4; i++){
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	e00e      	b.n	8000606 <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i], portMAX_DELAY);
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <led_effect_stop+0x3c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2200      	movs	r2, #0
 80005fa:	2103      	movs	r1, #3
 80005fc:	f007 f8ac 	bl	8007758 <xTimerGenericCommand>
	for(int i=0; i<4; i++){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b03      	cmp	r3, #3
 800060a:	dded      	ble.n	80005e8 <led_effect_stop+0xc>
	}

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000128 	.word	0x20000128

0800061c <led_effect>:


void led_effect(int n){
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]

	led_effect_stop();
 8000624:	f7ff ffda 	bl	80005dc <led_effect_stop>
	xTimerStart(led_timer_handle[n-1], portMAX_DELAY);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <led_effect+0x34>)
 800062e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000632:	f005 ffe7 	bl	8006604 <xTaskGetTickCount>
 8000636:	4602      	mov	r2, r0
 8000638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4620      	mov	r0, r4
 8000644:	f007 f888 	bl	8007758 <xTimerGenericCommand>

}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	20000128 	.word	0x20000128

08000654 <turn_off_all_leds>:


void turn_off_all_leds(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <turn_off_all_leds+0x38>)
 8000660:	f001 fed4 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <turn_off_all_leds+0x38>)
 800066c:	f001 fece 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <turn_off_all_leds+0x3c>)
 8000678:	f001 fec8 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2110      	movs	r1, #16
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <turn_off_all_leds+0x3c>)
 8000682:	f001 fec3 	bl	800240c <HAL_GPIO_WritePin>

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000
 8000690:	40020400 	.word	0x40020400

08000694 <turn_on_all_leds>:


void turn_on_all_leds(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_all_leds+0x38>)
 80006a0:	f001 feb4 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_all_leds+0x38>)
 80006ac:	f001 feae 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <turn_on_all_leds+0x3c>)
 80006b8:	f001 fea8 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <turn_on_all_leds+0x3c>)
 80006c2:	f001 fea3 	bl	800240c <HAL_GPIO_WritePin>

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400

080006d4 <turn_on_even_leds>:


void turn_on_even_leds(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <turn_on_even_leds+0x38>)
 80006e0:	f001 fe94 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <turn_on_even_leds+0x38>)
 80006ec:	f001 fe8e 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <turn_on_even_leds+0x3c>)
 80006f8:	f001 fe88 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2110      	movs	r1, #16
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <turn_on_even_leds+0x3c>)
 8000702:	f001 fe83 	bl	800240c <HAL_GPIO_WritePin>

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40020000 	.word	0x40020000
 8000710:	40020400 	.word	0x40020400

08000714 <turn_on_odd_leds>:


void turn_on_odd_leds(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <turn_on_odd_leds+0x38>)
 8000720:	f001 fe74 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <turn_on_odd_leds+0x38>)
 800072c:	f001 fe6e 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <turn_on_odd_leds+0x3c>)
 8000738:	f001 fe68 	bl	800240c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2110      	movs	r1, #16
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <turn_on_odd_leds+0x3c>)
 8000742:	f001 fe63 	bl	800240c <HAL_GPIO_WritePin>

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400

08000754 <LED_control>:


void LED_control(int val){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	// 2
	for(int i=0; i<4; i++){
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e038      	b.n	80007d4 <LED_control+0x80>
		GPIO_PinState pinstate = ((val >> i)& 0x1);
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	fa42 f303 	asr.w	r3, r2, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	72fb      	strb	r3, [r7, #11]
		switch (i){
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d82a      	bhi.n	80007ce <LED_control+0x7a>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <LED_control+0x2c>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a1 	.word	0x080007a1
 8000788:	080007b1 	.word	0x080007b1
 800078c:	080007c1 	.word	0x080007c1
		case 0:
			HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, pinstate);
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	461a      	mov	r2, r3
 8000794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <LED_control+0x90>)
 800079a:	f001 fe37 	bl	800240c <HAL_GPIO_WritePin>
			break;
 800079e:	e016      	b.n	80007ce <LED_control+0x7a>
		case 1:
			HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, pinstate);
 80007a0:	7afb      	ldrb	r3, [r7, #11]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <LED_control+0x90>)
 80007aa:	f001 fe2f 	bl	800240c <HAL_GPIO_WritePin>
			break;
 80007ae:	e00e      	b.n	80007ce <LED_control+0x7a>
		case 2:
			HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, pinstate);
 80007b0:	7afb      	ldrb	r3, [r7, #11]
 80007b2:	461a      	mov	r2, r3
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LED_control+0x94>)
 80007ba:	f001 fe27 	bl	800240c <HAL_GPIO_WritePin>
			break;
 80007be:	e006      	b.n	80007ce <LED_control+0x7a>
		case 3:
			HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, pinstate);
 80007c0:	7afb      	ldrb	r3, [r7, #11]
 80007c2:	461a      	mov	r2, r3
 80007c4:	2110      	movs	r1, #16
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <LED_control+0x94>)
 80007c8:	f001 fe20 	bl	800240c <HAL_GPIO_WritePin>
			break;
 80007cc:	bf00      	nop
	for(int i=0; i<4; i++){
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	ddc3      	ble.n	8000762 <LED_control+0xe>

		}

	}

}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020400 	.word	0x40020400

080007ec <LED_effect1>:


// Toggle all LEDs
void LED_effect1(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LED_effect1+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <LED_effect1+0x28>)
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <LED_effect1+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <LED_effect1+0x1e>
 8000804:	f7ff ff26 	bl	8000654 <turn_off_all_leds>

}
 8000808:	e001      	b.n	800080e <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800080a:	f7ff ff43 	bl	8000694 <turn_on_all_leds>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000

08000818 <LED_effect2>:


// Toggle even and odd LEDs
void LED_effect2(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <LED_effect2+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f083 0301 	eor.w	r3, r3, #1
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <LED_effect2+0x28>)
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <LED_effect2+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <LED_effect2+0x1e>
 8000830:	f7ff ff50 	bl	80006d4 <turn_on_even_leds>

}
 8000834:	e001      	b.n	800083a <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000836:	f7ff ff6d 	bl	8000714 <turn_on_odd_leds>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000004 	.word	0x20000004

08000844 <LED_effect3>:


// Count up LEDs
void LED_effect3(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	static int i = 0;
	LED_control( 0x1 << (i++ % 4));
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <LED_effect3+0x2c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <LED_effect3+0x2c>)
 8000850:	600a      	str	r2, [r1, #0]
 8000852:	425a      	negs	r2, r3
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	f002 0203 	and.w	r2, r2, #3
 800085c:	bf58      	it	pl
 800085e:	4253      	negpl	r3, r2
 8000860:	2201      	movs	r2, #1
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff74 	bl	8000754 <LED_control>

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000a0 	.word	0x200000a0

08000874 <LED_effect4>:


// Count down LEDs
void LED_effect4(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

	static int i = 0;
	LED_control( 0x08 >> (i++ % 4));
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <LED_effect4+0x2c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <LED_effect4+0x2c>)
 8000880:	600a      	str	r2, [r1, #0]
 8000882:	425a      	negs	r2, r3
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	f002 0203 	and.w	r2, r2, #3
 800088c:	bf58      	it	pl
 800088e:	4253      	negpl	r3, r2
 8000890:	2208      	movs	r2, #8
 8000892:	fa42 f303 	asr.w	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff5c 	bl	8000754 <LED_control>

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000a4 	.word	0x200000a4

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f001 fa65 	bl	8001d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f911 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f9cf 	bl	8000c54 <MX_GPIO_Init>
  MX_RTC_Init();
 80008b6:	f000 f97d 	bl	8000bb4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80008ba:	f000 f9a1 	bl	8000c00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(menu_task_handler, "menu_task", 250, NULL, 2, &menu_task_handle);
 80008be:	4b6c      	ldr	r3, [pc, #432]	; (8000a70 <main+0x1cc>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2302      	movs	r3, #2
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	22fa      	movs	r2, #250	; 0xfa
 80008ca:	496a      	ldr	r1, [pc, #424]	; (8000a74 <main+0x1d0>)
 80008cc:	486a      	ldr	r0, [pc, #424]	; (8000a78 <main+0x1d4>)
 80008ce:	f005 fbd3 	bl	8006078 <xTaskCreate>
 80008d2:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d00a      	beq.n	80008f0 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008de:	f383 8811 	msr	BASEPRI, r3
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	f3bf 8f4f 	dsb	sy
 80008ea:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008ec:	bf00      	nop
 80008ee:	e7fe      	b.n	80008ee <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 250, NULL, 2, &cmd_task_handle);
 80008f0:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <main+0x1d8>)
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	2302      	movs	r3, #2
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	22fa      	movs	r2, #250	; 0xfa
 80008fc:	4960      	ldr	r1, [pc, #384]	; (8000a80 <main+0x1dc>)
 80008fe:	4861      	ldr	r0, [pc, #388]	; (8000a84 <main+0x1e0>)
 8000900:	f005 fbba 	bl	8006078 <xTaskCreate>
 8000904:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d00a      	beq.n	8000922 <main+0x7e>
        __asm volatile
 800090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000910:	f383 8811 	msr	BASEPRI, r3
 8000914:	f3bf 8f6f 	isb	sy
 8000918:	f3bf 8f4f 	dsb	sy
 800091c:	61bb      	str	r3, [r7, #24]
    }
 800091e:	bf00      	nop
 8000920:	e7fe      	b.n	8000920 <main+0x7c>

  status = xTaskCreate(print_task_handler, "print_task", 250, NULL, 2, &print_task_handle);
 8000922:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <main+0x1e4>)
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2302      	movs	r3, #2
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2300      	movs	r3, #0
 800092c:	22fa      	movs	r2, #250	; 0xfa
 800092e:	4957      	ldr	r1, [pc, #348]	; (8000a8c <main+0x1e8>)
 8000930:	4857      	ldr	r0, [pc, #348]	; (8000a90 <main+0x1ec>)
 8000932:	f005 fba1 	bl	8006078 <xTaskCreate>
 8000936:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00a      	beq.n	8000954 <main+0xb0>
        __asm volatile
 800093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000942:	f383 8811 	msr	BASEPRI, r3
 8000946:	f3bf 8f6f 	isb	sy
 800094a:	f3bf 8f4f 	dsb	sy
 800094e:	617b      	str	r3, [r7, #20]
    }
 8000950:	bf00      	nop
 8000952:	e7fe      	b.n	8000952 <main+0xae>

  status = xTaskCreate(led_task_handler, "led_task", 250, NULL, 2, &led_task_handle);
 8000954:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <main+0x1f0>)
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	2302      	movs	r3, #2
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	22fa      	movs	r2, #250	; 0xfa
 8000960:	494d      	ldr	r1, [pc, #308]	; (8000a98 <main+0x1f4>)
 8000962:	484e      	ldr	r0, [pc, #312]	; (8000a9c <main+0x1f8>)
 8000964:	f005 fb88 	bl	8006078 <xTaskCreate>
 8000968:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d00a      	beq.n	8000986 <main+0xe2>
        __asm volatile
 8000970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000974:	f383 8811 	msr	BASEPRI, r3
 8000978:	f3bf 8f6f 	isb	sy
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	613b      	str	r3, [r7, #16]
    }
 8000982:	bf00      	nop
 8000984:	e7fe      	b.n	8000984 <main+0xe0>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 250, NULL, 2, &rtc_task_handle);
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <main+0x1fc>)
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	2302      	movs	r3, #2
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2300      	movs	r3, #0
 8000990:	22fa      	movs	r2, #250	; 0xfa
 8000992:	4944      	ldr	r1, [pc, #272]	; (8000aa4 <main+0x200>)
 8000994:	4844      	ldr	r0, [pc, #272]	; (8000aa8 <main+0x204>)
 8000996:	f005 fb6f 	bl	8006078 <xTaskCreate>
 800099a:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d00a      	beq.n	80009b8 <main+0x114>
        __asm volatile
 80009a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a6:	f383 8811 	msr	BASEPRI, r3
 80009aa:	f3bf 8f6f 	isb	sy
 80009ae:	f3bf 8f4f 	dsb	sy
 80009b2:	60fb      	str	r3, [r7, #12]
    }
 80009b4:	bf00      	nop
 80009b6:	e7fe      	b.n	80009b6 <main+0x112>

  q_data_handle = xQueueCreate(10, sizeof(char));
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	200a      	movs	r0, #10
 80009be:	f004 fdeb 	bl	8005598 <xQueueGenericCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a39      	ldr	r2, [pc, #228]	; (8000aac <main+0x208>)
 80009c6:	6013      	str	r3, [r2, #0]

  configASSERT(q_data_handle != NULL);
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <main+0x208>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10a      	bne.n	80009e6 <main+0x142>
        __asm volatile
 80009d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	60bb      	str	r3, [r7, #8]
    }
 80009e2:	bf00      	nop
 80009e4:	e7fe      	b.n	80009e4 <main+0x140>

  q_print_handle = xQueueCreate(10, sizeof(size_t));
 80009e6:	2200      	movs	r2, #0
 80009e8:	2104      	movs	r1, #4
 80009ea:	200a      	movs	r0, #10
 80009ec:	f004 fdd4 	bl	8005598 <xQueueGenericCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <main+0x20c>)
 80009f4:	6013      	str	r3, [r2, #0]

  configASSERT(q_print_handle != NULL);
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <main+0x20c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10a      	bne.n	8000a14 <main+0x170>
        __asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	607b      	str	r3, [r7, #4]
    }
 8000a10:	bf00      	nop
 8000a12:	e7fe      	b.n	8000a12 <main+0x16e>

  // Create software timers for LED effects
  for(int i=0; i<4; i++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
 8000a18:	e013      	b.n	8000a42 <main+0x19e>
	  led_timer_handle[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <main+0x210>)
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <main+0x214>)
 8000a2e:	f006 fe39 	bl	80076a4 <xTimerCreate>
 8000a32:	4602      	mov	r2, r0
 8000a34:	4921      	ldr	r1, [pc, #132]	; (8000abc <main+0x218>)
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<4; i++){
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	3301      	adds	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	dde8      	ble.n	8000a1a <main+0x176>

  }

  rtc_timer = xTimerCreate("rtc_report_timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, rtc_report_callback);
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <main+0x21c>)
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <main+0x220>)
 8000a56:	f006 fe25 	bl	80076a4 <xTimerCreate>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <main+0x224>)
 8000a5e:	6013      	str	r3, [r2, #0]


  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	491a      	ldr	r1, [pc, #104]	; (8000acc <main+0x228>)
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <main+0x22c>)
 8000a66:	f003 fcba 	bl	80043de <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000a6a:	f005 fc6f 	bl	800634c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <main+0x1ca>
 8000a70:	2000010c 	.word	0x2000010c
 8000a74:	0800979c 	.word	0x0800979c
 8000a78:	080014fd 	.word	0x080014fd
 8000a7c:	20000110 	.word	0x20000110
 8000a80:	080097a8 	.word	0x080097a8
 8000a84:	080015e5 	.word	0x080015e5
 8000a88:	20000114 	.word	0x20000114
 8000a8c:	080097b4 	.word	0x080097b4
 8000a90:	08001701 	.word	0x08001701
 8000a94:	20000118 	.word	0x20000118
 8000a98:	080097c0 	.word	0x080097c0
 8000a9c:	08001741 	.word	0x08001741
 8000aa0:	2000011c 	.word	0x2000011c
 8000aa4:	080097cc 	.word	0x080097cc
 8000aa8:	080018b1 	.word	0x080018b1
 8000aac:	20000120 	.word	0x20000120
 8000ab0:	20000124 	.word	0x20000124
 8000ab4:	08000d79 	.word	0x08000d79
 8000ab8:	080097d8 	.word	0x080097d8
 8000abc:	20000128 	.word	0x20000128
 8000ac0:	08000d65 	.word	0x08000d65
 8000ac4:	080097e4 	.word	0x080097e4
 8000ac8:	20000138 	.word	0x20000138
 8000acc:	2000013c 	.word	0x2000013c
 8000ad0:	200000c8 	.word	0x200000c8

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2234      	movs	r2, #52	; 0x34
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f007 fe75 	bl	80087d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <SystemClock_Config+0xd8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <SystemClock_Config+0xd8>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <SystemClock_Config+0xd8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <SystemClock_Config+0xdc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <SystemClock_Config+0xdc>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <SystemClock_Config+0xdc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b30:	230a      	movs	r3, #10
 8000b32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b50:	23a8      	movs	r3, #168	; 0xa8
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 fb11 	bl	800318c <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b70:	f000 f990 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2105      	movs	r1, #5
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fc54 	bl	8002440 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b9e:	f000 f979 	bl	8000e94 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3750      	adds	r7, #80	; 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <MX_RTC_Init+0x48>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bc6:	227f      	movs	r2, #127	; 0x7f
 8000bc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bcc:	22ff      	movs	r2, #255	; 0xff
 8000bce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_RTC_Init+0x44>)
 8000be4:	f002 fd70 	bl	80036c8 <HAL_RTC_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000bee:	f000 f951 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a8 	.word	0x200000a8
 8000bfc:	40002800 	.word	0x40002800

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f003 faf2 	bl	8004220 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f927 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000c8 	.word	0x200000c8
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a38      	ldr	r2, [pc, #224]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000ce2:	f001 fb93 	bl	800240c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000cec:	481b      	ldr	r0, [pc, #108]	; (8000d5c <MX_GPIO_Init+0x108>)
 8000cee:	f001 fb8d 	bl	800240c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4815      	ldr	r0, [pc, #84]	; (8000d60 <MX_GPIO_Init+0x10c>)
 8000d0a:	f001 f9eb 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin|LD3_Pin;
 8000d0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000d28:	f001 f9dc 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin;
 8000d2c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_GPIO_Init+0x108>)
 8000d46:	f001 f9cd 	bl	80020e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40020800 	.word	0x40020800

08000d64 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback(TimerHandle_t xTimer){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	show_time_date_itm();
 8000d6c:	f000 f898 	bl	8000ea0 <show_time_date_itm>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f006 ffb2 	bl	8007cea <pvTimerGetTimerID>
 8000d86:	4603      	mov	r3, r0
 8000d88:	60fb      	str	r3, [r7, #12]

	switch(id){
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d816      	bhi.n	8000dc0 <led_effect_callback+0x48>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <led_effect_callback+0x20>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000daf 	.word	0x08000daf
 8000da0:	08000db5 	.word	0x08000db5
 8000da4:	08000dbb 	.word	0x08000dbb
	case 1:
		LED_effect1();
 8000da8:	f7ff fd20 	bl	80007ec <LED_effect1>
		break;
 8000dac:	e008      	b.n	8000dc0 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000dae:	f7ff fd33 	bl	8000818 <LED_effect2>
		break;
 8000db2:	e005      	b.n	8000dc0 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000db4:	f7ff fd46 	bl	8000844 <LED_effect3>
		break;
 8000db8:	e002      	b.n	8000dc0 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000dba:	f7ff fd5b 	bl	8000874 <LED_effect4>
		break;
 8000dbe:	bf00      	nop
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_UART_RxCpltCallback>:

// This function is called from the UART interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i=0; i<4000; i++);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e002      	b.n	8000ddc <HAL_UART_RxCpltCallback+0x14>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000de2:	d3f8      	bcc.n	8000dd6 <HAL_UART_RxCpltCallback+0xe>

	if(!xQueueIsQueueFullFromISR(q_data_handle)){
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_UART_RxCpltCallback+0x98>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 f89c 	bl	8005f26 <xQueueIsQueueFullFromISR>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d107      	bne.n	8000e04 <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue Data
		xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_UART_RxCpltCallback+0x98>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4919      	ldr	r1, [pc, #100]	; (8000e64 <HAL_UART_RxCpltCallback+0x9c>)
 8000dfe:	f004 fd3b 	bl	8005878 <xQueueGenericSendFromISR>
 8000e02:	e013      	b.n	8000e2c <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\r'){
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_UART_RxCpltCallback+0x9c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b0d      	cmp	r3, #13
 8000e0c:	d10e      	bne.n	8000e2c <HAL_UART_RxCpltCallback+0x64>
			// Remove the last item in the Queue
			xQueueReceiveFromISR(q_data_handle, (void*)&dummy, NULL);
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_UART_RxCpltCallback+0x98>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f107 010b 	add.w	r1, r7, #11
 8000e16:	2200      	movs	r2, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 febf 	bl	8005b9c <xQueueReceiveFromISR>
			// Enqueue the \n
			xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_UART_RxCpltCallback+0x98>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	490f      	ldr	r1, [pc, #60]	; (8000e64 <HAL_UART_RxCpltCallback+0x9c>)
 8000e28:	f004 fd26 	bl	8005878 <xQueueGenericSendFromISR>
		}
	}

	// If data is \n then notify the cmd_task
	if(user_data == '\r'){
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_UART_RxCpltCallback+0x9c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b0d      	cmp	r3, #13
 8000e34:	d10a      	bne.n	8000e4c <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_UART_RxCpltCallback+0xa0>)
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	f006 fa1e 	bl	8007288 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4905      	ldr	r1, [pc, #20]	; (8000e64 <HAL_UART_RxCpltCallback+0x9c>)
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_UART_RxCpltCallback+0xa4>)
 8000e52:	f003 fac4 	bl	80043de <HAL_UART_Receive_IT>


}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000120 	.word	0x20000120
 8000e64:	2000013c 	.word	0x2000013c
 8000e68:	20000110 	.word	0x20000110
 8000e6c:	200000c8 	.word	0x200000c8

08000e70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d101      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e82:	f000 ff9b 	bl	8001dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40001000 	.word	0x40001000

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <show_time_date_itm>:
 */

#include "main.h"


void show_time_date_itm(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af02      	add	r7, sp, #8

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2204      	movs	r2, #4
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f007 fc8f 	bl	80087d2 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2214      	movs	r2, #20
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fc89 	bl	80087d2 <memset>

	// Get the RTC Current Date and Time
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <show_time_date_itm+0x7c>)
 8000eca:	f002 fdef 	bl	8003aac <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4811      	ldr	r0, [pc, #68]	; (8000f1c <show_time_date_itm+0x7c>)
 8000ed6:	f002 fd07 	bl	80038e8 <HAL_RTC_GetTime>

	char* format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <show_time_date_itm+0x44>
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <show_time_date_itm+0x80>)
 8000ee2:	e000      	b.n	8000ee6 <show_time_date_itm+0x46>
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <show_time_date_itm+0x84>)
 8000ee6:	61fb      	str	r3, [r7, #28]

	// Display time Format : hh:mm:ss [AM/PM]
	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	4619      	mov	r1, r3
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4603      	mov	r3, r0
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <show_time_date_itm+0x88>)
 8000efc:	f007 fbf4 	bl	80086e8 <iprintf>

	//Display Date Format : date-month-year
	printf("\t%02d-%02d-%02d\n", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000f00:	7e7b      	ldrb	r3, [r7, #25]
 8000f02:	4619      	mov	r1, r3
 8000f04:	7ebb      	ldrb	r3, [r7, #26]
 8000f06:	461a      	mov	r2, r3
 8000f08:	7efb      	ldrb	r3, [r7, #27]
 8000f0a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <show_time_date_itm+0x8c>)
 8000f10:	f007 fbea 	bl	80086e8 <iprintf>

}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000a8 	.word	0x200000a8
 8000f20:	080097f8 	.word	0x080097f8
 8000f24:	080097fc 	.word	0x080097fc
 8000f28:	08009800 	.word	0x08009800
 8000f2c:	08009814 	.word	0x08009814

08000f30 <show_time_date>:


void show_time_date(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char* date = showdate;
	static char* time = showtime;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f007 fc47 	bl	80087d2 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2214      	movs	r2, #20
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fc41 	bl	80087d2 <memset>

	// Get the RTC Current Date and Time
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4820      	ldr	r0, [pc, #128]	; (8000fdc <show_time_date+0xac>)
 8000f5a:	f002 fda7 	bl	8003aac <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	481d      	ldr	r0, [pc, #116]	; (8000fdc <show_time_date+0xac>)
 8000f66:	f002 fcbf 	bl	80038e8 <HAL_RTC_GetTime>

	char* format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <show_time_date+0x44>
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <show_time_date+0xb0>)
 8000f72:	e000      	b.n	8000f76 <show_time_date+0x46>
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <show_time_date+0xb4>)
 8000f76:	61fb      	str	r3, [r7, #28]

	// Display time Format : hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s: \t%02d:%02d:%02d [%s]", "\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000f78:	793b      	ldrb	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	797b      	ldrb	r3, [r7, #5]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	4619      	mov	r1, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	9101      	str	r1, [sp, #4]
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <show_time_date+0xb8>)
 8000f90:	4916      	ldr	r1, [pc, #88]	; (8000fec <show_time_date+0xbc>)
 8000f92:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <show_time_date+0xc0>)
 8000f94:	f007 fbba 	bl	800870c <siprintf>
	xQueueSend(q_print_handle, &time, portMAX_DELAY);
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <show_time_date+0xc4>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa2:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <show_time_date+0xc8>)
 8000fa4:	f004 fb6a 	bl	800567c <xQueueGenericSend>

	//Display Date Format : date-month-year
	sprintf((char*)showdate, "\t%02d-%02d-%02d\n", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000fa8:	7e7b      	ldrb	r3, [r7, #25]
 8000faa:	461a      	mov	r2, r3
 8000fac:	7ebb      	ldrb	r3, [r7, #26]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	7efb      	ldrb	r3, [r7, #27]
 8000fb2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4910      	ldr	r1, [pc, #64]	; (8000ffc <show_time_date+0xcc>)
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <show_time_date+0xd0>)
 8000fbe:	f007 fba5 	bl	800870c <siprintf>
	xQueueSend(q_print_handle, &date, portMAX_DELAY);
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <show_time_date+0xc4>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	490d      	ldr	r1, [pc, #52]	; (8001004 <show_time_date+0xd4>)
 8000fce:	f004 fb55 	bl	800567c <xQueueGenericSend>



}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000a8 	.word	0x200000a8
 8000fe0:	080097f8 	.word	0x080097f8
 8000fe4:	080097fc 	.word	0x080097fc
 8000fe8:	08009828 	.word	0x08009828
 8000fec:	0800983c 	.word	0x0800983c
 8000ff0:	20000140 	.word	0x20000140
 8000ff4:	20000124 	.word	0x20000124
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	08009814 	.word	0x08009814
 8001000:	20000168 	.word	0x20000168
 8001004:	2000000c 	.word	0x2000000c

08001008 <rtc_configure_time>:



void rtc_configure_time(RTC_TimeTypeDef* time){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001016:	2200      	movs	r2, #0
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <rtc_configure_time+0x20>)
 800101c:	f002 fbca 	bl	80037b4 <HAL_RTC_SetTime>

}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000a8 	.word	0x200000a8

0800102c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef* date){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <rtc_configure_date+0x1c>)
 800103a:	f002 fcb3 	bl	80039a4 <HAL_RTC_SetDate>

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000a8 	.word	0x200000a8

0800104c <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef* time, RTC_DateTypeDef* date){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
		if(time){
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00d      	beq.n	8001078 <validate_rtc_information+0x2c>
			if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59)){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d807      	bhi.n	8001074 <validate_rtc_information+0x28>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	2b3b      	cmp	r3, #59	; 0x3b
 800106a:	d803      	bhi.n	8001074 <validate_rtc_information+0x28>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	789b      	ldrb	r3, [r3, #2]
 8001070:	2b3b      	cmp	r3, #59	; 0x3b
 8001072:	d901      	bls.n	8001078 <validate_rtc_information+0x2c>
				return 0;
 8001074:	2300      	movs	r3, #0
 8001076:	e015      	b.n	80010a4 <validate_rtc_information+0x58>
			}
		}

		if(date){
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d011      	beq.n	80010a2 <validate_rtc_information+0x56>
			if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12)){
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	2b1f      	cmp	r3, #31
 8001084:	d80b      	bhi.n	800109e <validate_rtc_information+0x52>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b07      	cmp	r3, #7
 800108c:	d807      	bhi.n	800109e <validate_rtc_information+0x52>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	2b63      	cmp	r3, #99	; 0x63
 8001094:	d803      	bhi.n	800109e <validate_rtc_information+0x52>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	2b0c      	cmp	r3, #12
 800109c:	d901      	bls.n	80010a2 <validate_rtc_information+0x56>
				return 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <validate_rtc_information+0x58>
			}
		}

		return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b09a      	sub	sp, #104	; 0x68
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	225c      	movs	r2, #92	; 0x5c
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f007 fb5e 	bl	80087d2 <memset>
  if(hrtc->Instance==RTC)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_RTC_MspInit+0x4c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d111      	bne.n	8001144 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001120:	2320      	movs	r3, #32
 8001122:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fad2 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800113a:	f7ff feab 	bl	8000e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_RTC_MspInit+0x50>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3768      	adds	r7, #104	; 0x68
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40002800 	.word	0x40002800
 8001150:	42470e3c 	.word	0x42470e3c

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_UART_MspInit+0x94>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d133      	bne.n	80011de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_UART_MspInit+0x98>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_UART_MspInit+0x98>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x98>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_UART_MspInit+0x98>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_UART_MspInit+0x98>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_UART_MspInit+0x98>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ae:	230c      	movs	r3, #12
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011be:	2307      	movs	r3, #7
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_UART_MspInit+0x9c>)
 80011ca:	f000 ff8b 	bl	80020e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2106      	movs	r1, #6
 80011d2:	2026      	movs	r0, #38	; 0x26
 80011d4:	f000 feca 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d8:	2026      	movs	r0, #38	; 0x26
 80011da:	f000 fee3 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40004400 	.word	0x40004400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_InitTick+0xe4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <HAL_InitTick+0xe4>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_InitTick+0xe4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fa22 	bl	8002674 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123a:	f001 f9f3 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 800123e:	6378      	str	r0, [r7, #52]	; 0x34
 8001240:	e004      	b.n	800124c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001242:	f001 f9ef 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8001246:	4603      	mov	r3, r0
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_InitTick+0xe8>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9b      	lsrs	r3, r3, #18
 8001256:	3b01      	subs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_InitTick+0xec>)
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_InitTick+0xf0>)
 800125e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_InitTick+0xec>)
 8001262:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001266:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_InitTick+0xec>)
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_InitTick+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_InitTick+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_InitTick+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <HAL_InitTick+0xec>)
 8001282:	f002 fd1f 	bl	8003cc4 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800128c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11b      	bne.n	80012cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <HAL_InitTick+0xec>)
 8001296:	f002 fd6f 	bl	8003d78 <HAL_TIM_Base_Start_IT>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f000 fe7b 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d808      	bhi.n	80012c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	2036      	movs	r0, #54	; 0x36
 80012ba:	f000 fe57 	bl	8001f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_InitTick+0xf4>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e002      	b.n	80012cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	20000190 	.word	0x20000190
 80012e4:	40001000 	.word	0x40001000
 80012e8:	20000018 	.word	0x20000018

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <USART2_IRQHandler+0x10>)
 800131e:	f003 f88f 	bl	8004440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000c8 	.word	0x200000c8

0800132c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <TIM6_DAC_IRQHandler+0x10>)
 8001332:	f002 fd91 	bl	8003e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000190 	.word	0x20000190

08001340 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <ITM_SendChar+0x48>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <ITM_SendChar+0x48>)
 8001350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001354:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <ITM_SendChar+0x4c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <ITM_SendChar+0x4c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001362:	bf00      	nop
 8001364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f8      	beq.n	8001364 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001372:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	6013      	str	r3, [r2, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000edfc 	.word	0xe000edfc
 800138c:	e0000e00 	.word	0xe0000e00

08001390 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
  }

  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffab 	bl	8001340 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
  }
  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_close>:

int _close(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142a:	605a      	str	r2, [r3, #4]
  return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_isatty>:

int _isatty(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f007 f9e8 	bl	8008870 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20020000 	.word	0x20020000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	200001d8 	.word	0x200001d8
 80014d4:	200130d8 	.word	0x200130d8

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <menu_task_handler>:
void process_command(command_t* cmd);

const char* msg_inv = "//////Invalid Option//////\n";


void menu_task_handler(void* param){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	int option;
	const char* msg_menu =  "  ==================  \n"
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <menu_task_handler+0xd0>)
 8001506:	60bb      	str	r3, [r7, #8]
							"Exit          ----> 2\n"
							"Enter your choice here: ";

	while(1){
		// Send message to the menu
		xQueueSend(q_print_handle, &msg_menu, portMAX_DELAY);
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <menu_task_handler+0xd4>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	2300      	movs	r3, #0
 8001512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001516:	f004 f8b1 	bl	800567c <xQueueGenericSend>

		// Wait for a response and put it into the cmd_addr
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2000      	movs	r0, #0
 800152a:	f005 fd0b 	bl	8006f44 <xTaskGenericNotifyWait>

		// Cast it to a command_t pointer and assign the address to cmd
		cmd = (command_t*)cmd_addr;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	617b      	str	r3, [r7, #20]

		// Ensure the cmd is a valid entry of length 1. Valid Commands: 0, 1, or 2
		if(cmd->len == 1){
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	7a9b      	ldrb	r3, [r3, #10]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d133      	bne.n	80015a2 <menu_task_handler+0xa6>

			// Convert the ASCI to number by subtracting 48
			option = cmd->payload[0] - 48;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3b30      	subs	r3, #48	; 0x30
 8001540:	613b      	str	r3, [r7, #16]

			switch(option){
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d035      	beq.n	80015b4 <menu_task_handler+0xb8>
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b02      	cmp	r3, #2
 800154c:	dc20      	bgt.n	8001590 <menu_task_handler+0x94>
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <menu_task_handler+0x60>
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d00d      	beq.n	8001576 <menu_task_handler+0x7a>
 800155a:	e019      	b.n	8001590 <menu_task_handler+0x94>
				case 0:
					// Led Effects
					curr_state = sLedEffect;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <menu_task_handler+0xd8>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_task_handle, 0, eNoAction);
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <menu_task_handler+0xdc>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	f005 fd68 	bl	8007044 <xTaskGenericNotify>
					break;
 8001574:	e01f      	b.n	80015b6 <menu_task_handler+0xba>
				case 1:
					// RTC Menu
					curr_state = sRtcMenu;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <menu_task_handler+0xd8>)
 8001578:	2202      	movs	r2, #2
 800157a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_task_handle, 0, eNoAction);
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <menu_task_handler+0xe0>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	f005 fd5b 	bl	8007044 <xTaskGenericNotify>
					break;
 800158e:	e012      	b.n	80015b6 <menu_task_handler+0xba>
				case 2:
					// TODO: Exit

					break;
				default:
					xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <menu_task_handler+0xd4>)
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159a:	4911      	ldr	r1, [pc, #68]	; (80015e0 <menu_task_handler+0xe4>)
 800159c:	f004 f86e 	bl	800567c <xQueueGenericSend>
					continue;
 80015a0:	e012      	b.n	80015c8 <menu_task_handler+0xcc>
			}

		}else{

			// Invalid Entry
			xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <menu_task_handler+0xd4>)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <menu_task_handler+0xe4>)
 80015ae:	f004 f865 	bl	800567c <xQueueGenericSend>
			continue;
 80015b2:	e009      	b.n	80015c8 <menu_task_handler+0xcc>
					break;
 80015b4:	bf00      	nop

		}

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2000      	movs	r0, #0
 80015c4:	f005 fcbe 	bl	8006f44 <xTaskGenericNotifyWait>
		xQueueSend(q_print_handle, &msg_menu, portMAX_DELAY);
 80015c8:	e79e      	b.n	8001508 <menu_task_handler+0xc>
 80015ca:	bf00      	nop
 80015cc:	08009874 	.word	0x08009874
 80015d0:	20000124 	.word	0x20000124
 80015d4:	2000013d 	.word	0x2000013d
 80015d8:	20000118 	.word	0x20000118
 80015dc:	2000011c 	.word	0x2000011c
 80015e0:	20000014 	.word	0x20000014

080015e4 <cmd_task_handler>:

	}
}


void cmd_task_handler(void* param){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
	command_t command;

	while(1){

		// Notify wait until notification
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2000      	movs	r0, #0
 80015fa:	f005 fca3 	bl	8006f44 <xTaskGenericNotifyWait>
 80015fe:	6178      	str	r0, [r7, #20]
		// Process the user data(command) stored in input data queue
		if(returnedVal == pdTRUE){
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d1f2      	bne.n	80015ec <cmd_task_handler+0x8>
			process_command(&command);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f802 	bl	8001614 <process_command>
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001610:	e7ec      	b.n	80015ec <cmd_task_handler+0x8>
	...

08001614 <process_command>:
		// Notify the command to relevant task
	}
}

// Helper function for Command
void process_command(command_t* cmd){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f835 	bl	800168c <extract_command>

	switch(curr_state){
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <process_command+0x68>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b05      	cmp	r3, #5
 8001628:	dc24      	bgt.n	8001674 <process_command+0x60>
 800162a:	2b02      	cmp	r3, #2
 800162c:	da18      	bge.n	8001660 <process_command+0x4c>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <process_command+0x24>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d00a      	beq.n	800164c <process_command+0x38>
		case sRtcDateConfig:
		case sRtcReport:
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 8001636:	e01d      	b.n	8001674 <process_command+0x60>
			xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <process_command+0x6c>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	2300      	movs	r3, #0
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2303      	movs	r3, #3
 8001644:	2100      	movs	r1, #0
 8001646:	f005 fcfd 	bl	8007044 <xTaskGenericNotify>
			break;
 800164a:	e013      	b.n	8001674 <process_command+0x60>
			xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <process_command+0x70>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2303      	movs	r3, #3
 8001658:	2100      	movs	r1, #0
 800165a:	f005 fcf3 	bl	8007044 <xTaskGenericNotify>
			break;
 800165e:	e009      	b.n	8001674 <process_command+0x60>
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <process_command+0x74>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2303      	movs	r3, #3
 800166c:	2100      	movs	r1, #0
 800166e:	f005 fce9 	bl	8007044 <xTaskGenericNotify>
			break;
 8001672:	bf00      	nop
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000013d 	.word	0x2000013d
 8001680:	2000010c 	.word	0x2000010c
 8001684:	20000118 	.word	0x20000118
 8001688:	2000011c 	.word	0x2000011c

0800168c <extract_command>:

// Helper Function for Process_Command
int extract_command(command_t* cmd){
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data_handle);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <extract_command+0x70>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fb16 	bl	8005cca <uxQueueMessagesWaiting>
 800169e:	4603      	mov	r3, r0
 80016a0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <extract_command+0x22>
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ac:	e022      	b.n	80016f4 <extract_command+0x68>
	uint8_t i = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data_handle, &item, 0);
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <extract_command+0x70>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f107 010f 	add.w	r1, r7, #15
 80016ba:	2200      	movs	r2, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 f98d 	bl	80059dc <xQueueReceive>
 80016c2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <extract_command+0x4c>
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	75fa      	strb	r2, [r7, #23]
 80016d0:	461a      	mov	r2, r3
 80016d2:	7bf9      	ldrb	r1, [r7, #15]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	5499      	strb	r1, [r3, r2]
	}while(item != '\r');
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b0d      	cmp	r3, #13
 80016dc:	d1e9      	bne.n	80016b2 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	2100      	movs	r1, #0
 80016e6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	729a      	strb	r2, [r3, #10]

	return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000120 	.word	0x20000120

08001700 <print_task_handler>:


void print_task_handler(void* param){
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

	uint32_t* msg;
	while(1){
		xQueueReceive(q_print_handle, &msg, portMAX_DELAY);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <print_task_handler+0x38>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f107 010c 	add.w	r1, r7, #12
 8001710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001714:	4618      	mov	r0, r3
 8001716:	f004 f961 	bl	80059dc <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800171a:	68fc      	ldr	r4, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fd80 	bl	8000224 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172c:	4621      	mov	r1, r4
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <print_task_handler+0x3c>)
 8001730:	f002 fdc3 	bl	80042ba <HAL_UART_Transmit>
		xQueueReceive(q_print_handle, &msg, portMAX_DELAY);
 8001734:	e7e8      	b.n	8001708 <print_task_handler+0x8>
 8001736:	bf00      	nop
 8001738:	20000124 	.word	0x20000124
 800173c:	200000c8 	.word	0x200000c8

08001740 <led_task_handler>:

	}
}

void led_task_handler(void* param){
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	const char* msg_led = "  =================== \n"
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <led_task_handler+0x104>)
 800174a:	60fb      	str	r3, [r7, #12]
							"Enter your choice here: ";

	while(1){

		// TODO: Wait for notification (Notify Wait)
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800174c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f005 fbf3 	bl	8006f44 <xTaskGenericNotifyWait>

		// TODO: Print LED menu
		xQueueSend(q_print_handle, &msg_led, portMAX_DELAY);
 800175e:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <led_task_handler+0x108>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	f107 010c 	add.w	r1, r7, #12
 8001766:	2300      	movs	r3, #0
 8001768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176c:	f003 ff86 	bl	800567c <xQueueGenericSend>

		// TODO: wait for LED commands (Notify Wait)
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2000      	movs	r0, #0
 8001780:	f005 fbe0 	bl	8006f44 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4){
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	7a9b      	ldrb	r3, [r3, #10]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d843      	bhi.n	8001818 <led_task_handler+0xd8>
			if(! strcmp((char*)cmd->payload, "none")){
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	492e      	ldr	r1, [pc, #184]	; (800184c <led_task_handler+0x10c>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fd3b 	bl	8000210 <strcmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <led_task_handler+0x66>
				led_effect_stop();
 80017a0:	f7fe ff1c 	bl	80005dc <led_effect_stop>
 80017a4:	e040      	b.n	8001828 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e1")){
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4929      	ldr	r1, [pc, #164]	; (8001850 <led_task_handler+0x110>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd30 	bl	8000210 <strcmp>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <led_task_handler+0x7e>
				led_effect(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7fe ff30 	bl	800061c <led_effect>
 80017bc:	e034      	b.n	8001828 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e2")){
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4924      	ldr	r1, [pc, #144]	; (8001854 <led_task_handler+0x114>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fd24 	bl	8000210 <strcmp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <led_task_handler+0x96>
				led_effect(2);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7fe ff24 	bl	800061c <led_effect>
 80017d4:	e028      	b.n	8001828 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e3")){
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	491f      	ldr	r1, [pc, #124]	; (8001858 <led_task_handler+0x118>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fd18 	bl	8000210 <strcmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <led_task_handler+0xae>
				led_effect(3);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f7fe ff18 	bl	800061c <led_effect>
 80017ec:	e01c      	b.n	8001828 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e4")){
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	491a      	ldr	r1, [pc, #104]	; (800185c <led_task_handler+0x11c>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fd0c 	bl	8000210 <strcmp>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <led_task_handler+0xc6>
				led_effect(4);
 80017fe:	2004      	movs	r0, #4
 8001800:	f7fe ff0c 	bl	800061c <led_effect>
 8001804:	e010      	b.n	8001828 <led_task_handler+0xe8>
			}else{
				xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <led_task_handler+0x108>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <led_task_handler+0x120>)
 8001812:	f003 ff33 	bl	800567c <xQueueGenericSend>
 8001816:	e007      	b.n	8001828 <led_task_handler+0xe8>
			}
		}else{
			// TODO: print Invalid Message
			xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <led_task_handler+0x108>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	2300      	movs	r3, #0
 800181e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001822:	490f      	ldr	r1, [pc, #60]	; (8001860 <led_task_handler+0x120>)
 8001824:	f003 ff2a 	bl	800567c <xQueueGenericSend>
		}

		// TODO: update state variable
		curr_state = sMainMenu;
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <led_task_handler+0x124>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]

		// TODO: Notify menu task
		xTaskNotify(menu_task_handle, 0, eNoAction);
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <led_task_handler+0x128>)
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	f005 fc02 	bl	8007044 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001840:	e784      	b.n	800174c <led_task_handler+0xc>
 8001842:	bf00      	nop
 8001844:	08009914 	.word	0x08009914
 8001848:	20000124 	.word	0x20000124
 800184c:	08009988 	.word	0x08009988
 8001850:	08009990 	.word	0x08009990
 8001854:	08009994 	.word	0x08009994
 8001858:	08009998 	.word	0x08009998
 800185c:	0800999c 	.word	0x0800999c
 8001860:	20000014 	.word	0x20000014
 8001864:	2000013d 	.word	0x2000013d
 8001868:	2000010c 	.word	0x2000010c

0800186c <getnumber>:
	}
}


// Helper function
uint8_t getnumber(uint8_t* p, int len){
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	uint8_t value;

	if(len > 1){
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	dd0e      	ble.n	800189a <getnumber+0x2e>
		value = ( ((p[0]-48) * 10) + (p[1] - 48));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3301      	adds	r3, #1
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4413      	add	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3b10      	subs	r3, #16
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e003      	b.n	80018a2 <getnumber+0x36>
	}else{
		value = p[0] - 48;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3b30      	subs	r3, #48	; 0x30
 80018a0:	73fb      	strb	r3, [r7, #15]
	}

	return value;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <rtc_task_handler>:

void rtc_task_handler(void* param){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b09b      	sub	sp, #108	; 0x6c
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	6078      	str	r0, [r7, #4]

	const char* msg_rtc_banner =
 80018b8:	4bb3      	ldr	r3, [pc, #716]	; (8001b88 <rtc_task_handler+0x2d8>)
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
			"  ==================  \n"
			"||        RTC       ||\n"
			"  ==================  \n";
	const char* msg_rtc_choices =
 80018bc:	4bb3      	ldr	r3, [pc, #716]	; (8001b8c <rtc_task_handler+0x2dc>)
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
			"Configure Date  ---> 1\n"
			"Enable Reporting---> 2\n"
			"Exit            ---> 3\n"
			"Enter your choice here: ";

	const char* msg_rtc_hh = "Enter Hour (1-12): ";
 80018c0:	4bb3      	ldr	r3, [pc, #716]	; (8001b90 <rtc_task_handler+0x2e0>)
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
	const char* msg_rtc_mm = "Enter Minutes (0-59): ";
 80018c4:	4bb3      	ldr	r3, [pc, #716]	; (8001b94 <rtc_task_handler+0x2e4>)
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
	const char* msg_rtc_ss = "Enter Seconds (0-59): ";
 80018c8:	4bb3      	ldr	r3, [pc, #716]	; (8001b98 <rtc_task_handler+0x2e8>)
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char* msg_rtc_dd = "Enter Date (1-31): ";
 80018cc:	4bb3      	ldr	r3, [pc, #716]	; (8001b9c <rtc_task_handler+0x2ec>)
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
	const char* msg_rtc_mo = "Enter Month (1-12): ";
 80018d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ba0 <rtc_task_handler+0x2f0>)
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
	const char* msg_rtc_dow = "Enter Day (1-7 Sun:1): ";
 80018d4:	4bb3      	ldr	r3, [pc, #716]	; (8001ba4 <rtc_task_handler+0x2f4>)
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
	const char* msg_rtc_yr = "Enter Year (0-99): ";
 80018d8:	4bb3      	ldr	r3, [pc, #716]	; (8001ba8 <rtc_task_handler+0x2f8>)
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char* msg_conf = "Configuration Successful\n";
 80018dc:	4bb3      	ldr	r3, [pc, #716]	; (8001bac <rtc_task_handler+0x2fc>)
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
	const char* msg_rtc_report = "Enable Time & Date Reporting (y/n)?: ";
 80018e0:	4bb3      	ldr	r3, [pc, #716]	; (8001bb0 <rtc_task_handler+0x300>)
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
	RTC_DateTypeDef date;

	while(1){

		//TODO: Notify Wait until Task is notified
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2000      	movs	r0, #0
 80018f2:	f005 fb27 	bl	8006f44 <xTaskGenericNotifyWait>

		//TODO: Print the RTC menu and show current date and time information
		xQueueSend(q_print_handle, &msg_rtc_banner, portMAX_DELAY);
 80018f6:	4baf      	ldr	r3, [pc, #700]	; (8001bb4 <rtc_task_handler+0x304>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80018fe:	2300      	movs	r3, #0
 8001900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001904:	f003 feba 	bl	800567c <xQueueGenericSend>
		show_time_date();
 8001908:	f7ff fb12 	bl	8000f30 <show_time_date>
		xQueueSend(q_print_handle, &msg_rtc_choices, portMAX_DELAY);
 800190c:	4ba9      	ldr	r3, [pc, #676]	; (8001bb4 <rtc_task_handler+0x304>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001914:	2300      	movs	r3, #0
 8001916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800191a:	f003 feaf 	bl	800567c <xQueueGenericSend>


		while(curr_state != sMainMenu){
 800191e:	e1e6      	b.n	8001cee <rtc_task_handler+0x43e>

			//TODO: Notify Wait
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f005 fb08 	bl	8006f44 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	65fb      	str	r3, [r7, #92]	; 0x5c


			switch(curr_state){
 8001938:	4b9f      	ldr	r3, [pc, #636]	; (8001bb8 <rtc_task_handler+0x308>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	3b02      	subs	r3, #2
 800193e:	2b03      	cmp	r3, #3
 8001940:	f200 81d4 	bhi.w	8001cec <rtc_task_handler+0x43c>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <rtc_task_handler+0x9c>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	0800195d 	.word	0x0800195d
 8001950:	08001a11 	.word	0x08001a11
 8001954:	08001aff 	.word	0x08001aff
 8001958:	08001c69 	.word	0x08001c69
				case sRtcMenu:{
					//TODO: process RTC menu commands
					if(cmd->len == 1){
 800195c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195e:	7a9b      	ldrb	r3, [r3, #10]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d148      	bne.n	80019f6 <rtc_task_handler+0x146>
						// Convert ASCI to Number
						option = cmd->payload[0] - 48;
 8001964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3b30      	subs	r3, #48	; 0x30
 800196a:	653b      	str	r3, [r7, #80]	; 0x50
 800196c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800196e:	2b03      	cmp	r3, #3
 8001970:	d835      	bhi.n	80019de <rtc_task_handler+0x12e>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <rtc_task_handler+0xc8>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001989 	.word	0x08001989
 800197c:	080019a3 	.word	0x080019a3
 8001980:	080019bd 	.word	0x080019bd
 8001984:	080019d7 	.word	0x080019d7
						switch(option){
							case 0:{
								// Configure Time
								curr_state = sRtcTimeConfig;
 8001988:	4b8b      	ldr	r3, [pc, #556]	; (8001bb8 <rtc_task_handler+0x308>)
 800198a:	2203      	movs	r2, #3
 800198c:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print_handle, &msg_rtc_hh, portMAX_DELAY);
 800198e:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <rtc_task_handler+0x304>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001996:	2300      	movs	r3, #0
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800199c:	f003 fe6e 	bl	800567c <xQueueGenericSend>
								break;
 80019a0:	e035      	b.n	8001a0e <rtc_task_handler+0x15e>
							}
							case 1:{
								// Configure Date
								curr_state = sRtcDateConfig;
 80019a2:	4b85      	ldr	r3, [pc, #532]	; (8001bb8 <rtc_task_handler+0x308>)
 80019a4:	2204      	movs	r2, #4
 80019a6:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print_handle, &msg_rtc_dd, portMAX_DELAY);
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <rtc_task_handler+0x304>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80019b0:	2300      	movs	r3, #0
 80019b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b6:	f003 fe61 	bl	800567c <xQueueGenericSend>
								break;
 80019ba:	e028      	b.n	8001a0e <rtc_task_handler+0x15e>
							}
							case 2:{
								// Enable Reporting
								curr_state = sRtcReport;
 80019bc:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <rtc_task_handler+0x308>)
 80019be:	2205      	movs	r2, #5
 80019c0:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print_handle, &msg_rtc_report, portMAX_DELAY);
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <rtc_task_handler+0x304>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019ca:	2300      	movs	r3, #0
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019d0:	f003 fe54 	bl	800567c <xQueueGenericSend>
								break;
 80019d4:	e01b      	b.n	8001a0e <rtc_task_handler+0x15e>
							}
							case 3:{
								// TODO: Exit
								curr_state = sMainMenu;
 80019d6:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <rtc_task_handler+0x308>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
								break;
 80019dc:	e017      	b.n	8001a0e <rtc_task_handler+0x15e>
							}
							default:
								curr_state = sMainMenu;
 80019de:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <rtc_task_handler+0x308>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 80019e4:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <rtc_task_handler+0x304>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ee:	4973      	ldr	r1, [pc, #460]	; (8001bbc <rtc_task_handler+0x30c>)
 80019f0:	f003 fe44 	bl	800567c <xQueueGenericSend>
 80019f4:	e17b      	b.n	8001cee <rtc_task_handler+0x43e>
						}

					}else{
						// Invalid entry
						curr_state = sMainMenu;
 80019f6:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <rtc_task_handler+0x308>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <rtc_task_handler+0x304>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a06:	496d      	ldr	r1, [pc, #436]	; (8001bbc <rtc_task_handler+0x30c>)
 8001a08:	f003 fe38 	bl	800567c <xQueueGenericSend>
						continue;
 8001a0c:	e16f      	b.n	8001cee <rtc_task_handler+0x43e>

					}

					break;
 8001a0e:	e16e      	b.n	8001cee <rtc_task_handler+0x43e>
				}
				case sRtcTimeConfig:{
					//TODO: get hh, mm , ss information and configure RTC
					switch(rtc_config_state){
 8001a10:	4b6b      	ldr	r3, [pc, #428]	; (8001bc0 <rtc_task_handler+0x310>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d03b      	beq.n	8001a90 <rtc_task_handler+0x1e0>
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f300 8168 	bgt.w	8001cee <rtc_task_handler+0x43e>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <rtc_task_handler+0x178>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d01a      	beq.n	8001a5c <rtc_task_handler+0x1ac>
 8001a26:	e162      	b.n	8001cee <rtc_task_handler+0x43e>
						case HH_CONFIG:{
							uint8_t hour = getnumber(cmd->payload, cmd->len);
 8001a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2c:	7a9b      	ldrb	r3, [r3, #10]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	f7ff ff1b 	bl	800186c <getnumber>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							time.Hours = hour;
 8001a3c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a40:	733b      	strb	r3, [r7, #12]
							rtc_config_state = MM_CONFIG;
 8001a42:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <rtc_task_handler+0x310>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print_handle, &msg_rtc_mm, portMAX_DELAY);
 8001a48:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <rtc_task_handler+0x304>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a50:	2300      	movs	r3, #0
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a56:	f003 fe11 	bl	800567c <xQueueGenericSend>
							break;}
 8001a5a:	e04f      	b.n	8001afc <rtc_task_handler+0x24c>
						case MM_CONFIG:{
							uint8_t minute = getnumber(cmd->payload, cmd->len);
 8001a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a60:	7a9b      	ldrb	r3, [r3, #10]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4610      	mov	r0, r2
 8001a66:	f7ff ff01 	bl	800186c <getnumber>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							time.Minutes = minute;
 8001a70:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001a74:	737b      	strb	r3, [r7, #13]
							rtc_config_state = SS_CONFIG;
 8001a76:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <rtc_task_handler+0x310>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print_handle, &msg_rtc_ss, portMAX_DELAY);
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <rtc_task_handler+0x304>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001a84:	2300      	movs	r3, #0
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a8a:	f003 fdf7 	bl	800567c <xQueueGenericSend>
							break;}
 8001a8e:	e035      	b.n	8001afc <rtc_task_handler+0x24c>
						case SS_CONFIG:{
							uint8_t second = getnumber(cmd->payload, cmd->len);
 8001a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	7a9b      	ldrb	r3, [r3, #10]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7ff fee7 	bl	800186c <getnumber>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							time.Seconds = second;
 8001aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001aa8:	73bb      	strb	r3, [r7, #14]
							if(validate_rtc_information(&time, NULL) == 1){
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff facb 	bl	800104c <validate_rtc_information>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d110      	bne.n	8001ade <rtc_task_handler+0x22e>
								rtc_configure_time(&time);
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff faa1 	bl	8001008 <rtc_configure_time>
								xQueueSend(q_print_handle, &msg_conf, portMAX_DELAY);
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <rtc_task_handler+0x304>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad4:	f003 fdd2 	bl	800567c <xQueueGenericSend>
								show_time_date();
 8001ad8:	f7ff fa2a 	bl	8000f30 <show_time_date>
 8001adc:	e007      	b.n	8001aee <rtc_task_handler+0x23e>
							}else{
								xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <rtc_task_handler+0x304>)
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	4934      	ldr	r1, [pc, #208]	; (8001bbc <rtc_task_handler+0x30c>)
 8001aea:	f003 fdc7 	bl	800567c <xQueueGenericSend>
							}
							curr_state = sMainMenu;
 8001aee:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <rtc_task_handler+0x308>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
							rtc_config_state = 0;
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <rtc_task_handler+0x310>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
							break;}
 8001afa:	bf00      	nop
					}

					break;
 8001afc:	e0f7      	b.n	8001cee <rtc_task_handler+0x43e>
				}
				case sRtcDateConfig:{
					//TODO: get date, month, day, year information and configure RTC
					switch(rtc_config_state){
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <rtc_task_handler+0x310>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f200 80f3 	bhi.w	8001cee <rtc_task_handler+0x43e>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <rtc_task_handler+0x260>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b55 	.word	0x08001b55
 8001b18:	08001bf9 	.word	0x08001bf9
 8001b1c:	08001bc5 	.word	0x08001bc5
						case DATE_CONFIG:{
							uint8_t dateTemp = getnumber(cmd->payload, cmd->len);
 8001b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b24:	7a9b      	ldrb	r3, [r3, #10]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f7ff fe9f 	bl	800186c <getnumber>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
							date.Date = dateTemp;
 8001b34:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001b38:	72bb      	strb	r3, [r7, #10]
							rtc_config_state = MONTH_CONFIG;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <rtc_task_handler+0x310>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print_handle, &msg_rtc_mo, portMAX_DELAY);
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <rtc_task_handler+0x304>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4e:	f003 fd95 	bl	800567c <xQueueGenericSend>
							break;
 8001b52:	e088      	b.n	8001c66 <rtc_task_handler+0x3b6>
						}
						case MONTH_CONFIG:{
							uint8_t month = getnumber(cmd->payload, cmd->len);
 8001b54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	7a9b      	ldrb	r3, [r3, #10]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff fe85 	bl	800186c <getnumber>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
							date.Month = month;
 8001b68:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001b6c:	727b      	strb	r3, [r7, #9]
							rtc_config_state = DAY_CONFIG;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <rtc_task_handler+0x310>)
 8001b70:	2203      	movs	r2, #3
 8001b72:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print_handle, &msg_rtc_dow, portMAX_DELAY);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <rtc_task_handler+0x304>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b82:	f003 fd7b 	bl	800567c <xQueueGenericSend>
							break;
 8001b86:	e06e      	b.n	8001c66 <rtc_task_handler+0x3b6>
 8001b88:	080099a0 	.word	0x080099a0
 8001b8c:	080099e8 	.word	0x080099e8
 8001b90:	08009a60 	.word	0x08009a60
 8001b94:	08009a74 	.word	0x08009a74
 8001b98:	08009a8c 	.word	0x08009a8c
 8001b9c:	08009aa4 	.word	0x08009aa4
 8001ba0:	08009ab8 	.word	0x08009ab8
 8001ba4:	08009ad0 	.word	0x08009ad0
 8001ba8:	08009ae8 	.word	0x08009ae8
 8001bac:	08009afc 	.word	0x08009afc
 8001bb0:	08009b18 	.word	0x08009b18
 8001bb4:	20000124 	.word	0x20000124
 8001bb8:	2000013d 	.word	0x2000013d
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	200001dc 	.word	0x200001dc
						}
						case DAY_CONFIG:{
							uint8_t day = getnumber(cmd->payload, cmd->len);
 8001bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	7a9b      	ldrb	r3, [r3, #10]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f7ff fe4d 	bl	800186c <getnumber>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
							date.WeekDay = day;
 8001bd8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001bdc:	723b      	strb	r3, [r7, #8]
							rtc_config_state = YEAR_CONFIG;
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <rtc_task_handler+0x45c>)
 8001be0:	2202      	movs	r2, #2
 8001be2:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print_handle, &msg_rtc_yr, portMAX_DELAY);
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <rtc_task_handler+0x460>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001bec:	2300      	movs	r3, #0
 8001bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf2:	f003 fd43 	bl	800567c <xQueueGenericSend>
							break;
 8001bf6:	e036      	b.n	8001c66 <rtc_task_handler+0x3b6>
						}
						case YEAR_CONFIG:{
							uint8_t year = getnumber(cmd->payload, cmd->len);
 8001bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfc:	7a9b      	ldrb	r3, [r3, #10]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f7ff fe33 	bl	800186c <getnumber>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
							date.Year = year;
 8001c0c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001c10:	72fb      	strb	r3, [r7, #11]
							if(validate_rtc_information(NULL, &date) == 1){
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fa17 	bl	800104c <validate_rtc_information>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d110      	bne.n	8001c46 <rtc_task_handler+0x396>
								rtc_configure_date(&date);
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f9ff 	bl	800102c <rtc_configure_date>
								xQueueSend(q_print_handle, &msg_conf, portMAX_DELAY);
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <rtc_task_handler+0x460>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c36:	2300      	movs	r3, #0
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c3c:	f003 fd1e 	bl	800567c <xQueueGenericSend>
								show_time_date();
 8001c40:	f7ff f976 	bl	8000f30 <show_time_date>
 8001c44:	e007      	b.n	8001c56 <rtc_task_handler+0x3a6>
							}else{
								xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <rtc_task_handler+0x460>)
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c50:	4930      	ldr	r1, [pc, #192]	; (8001d14 <rtc_task_handler+0x464>)
 8001c52:	f003 fd13 	bl	800567c <xQueueGenericSend>
							}
							curr_state = sMainMenu;
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <rtc_task_handler+0x468>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
							rtc_config_state = 0;
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <rtc_task_handler+0x45c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
							break;
 8001c62:	bf00      	nop
 8001c64:	e043      	b.n	8001cee <rtc_task_handler+0x43e>
						}
					}

					break;
 8001c66:	e042      	b.n	8001cee <rtc_task_handler+0x43e>
				}
				case sRtcReport:{
					//enable or disable RTC current time reporting over ITM printf
					if(cmd->len == 1){
 8001c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6a:	7a9b      	ldrb	r3, [r3, #10]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d131      	bne.n	8001cd4 <rtc_task_handler+0x424>
						if(cmd->payload[0] == 'y'){
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b79      	cmp	r3, #121	; 0x79
 8001c76:	d115      	bne.n	8001ca4 <rtc_task_handler+0x3f4>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <rtc_task_handler+0x46c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f006 f80b 	bl	8007c98 <xTimerIsTimerActive>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d12d      	bne.n	8001ce4 <rtc_task_handler+0x434>
								xTimerStart(rtc_timer, portMAX_DELAY);
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <rtc_task_handler+0x46c>)
 8001c8a:	681c      	ldr	r4, [r3, #0]
 8001c8c:	f004 fcba 	bl	8006604 <xTaskGetTickCount>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f005 fd5b 	bl	8007758 <xTimerGenericCommand>
 8001ca2:	e01f      	b.n	8001ce4 <rtc_task_handler+0x434>
						}else if (cmd->payload[0] == 'n'){
 8001ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8001caa:	d10a      	bne.n	8001cc2 <rtc_task_handler+0x412>
							xTimerStop(rtc_timer, portMAX_DELAY);
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <rtc_task_handler+0x46c>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2103      	movs	r1, #3
 8001cbc:	f005 fd4c 	bl	8007758 <xTimerGenericCommand>
 8001cc0:	e010      	b.n	8001ce4 <rtc_task_handler+0x434>
						}else{
							xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <rtc_task_handler+0x460>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ccc:	4911      	ldr	r1, [pc, #68]	; (8001d14 <rtc_task_handler+0x464>)
 8001cce:	f003 fcd5 	bl	800567c <xQueueGenericSend>
 8001cd2:	e007      	b.n	8001ce4 <rtc_task_handler+0x434>
						}
					}else{
						xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <rtc_task_handler+0x460>)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <rtc_task_handler+0x464>)
 8001ce0:	f003 fccc 	bl	800567c <xQueueGenericSend>
					}

					curr_state = sMainMenu;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <rtc_task_handler+0x468>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
					break;
 8001cea:	e000      	b.n	8001cee <rtc_task_handler+0x43e>
				}
				default:{
					continue;
 8001cec:	bf00      	nop
		while(curr_state != sMainMenu){
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <rtc_task_handler+0x468>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f ae14 	bne.w	8001920 <rtc_task_handler+0x70>

			} // Curr_state Switch End
		} // While End

		//TODO: Notify menu task
		xTaskNotify(menu_task_handle, 0, eNoAction);
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <rtc_task_handler+0x470>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	f005 f99d 	bl	8007044 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001d0a:	e5eb      	b.n	80018e4 <rtc_task_handler+0x34>
 8001d0c:	200001dc 	.word	0x200001dc
 8001d10:	20000124 	.word	0x20000124
 8001d14:	20000014 	.word	0x20000014
 8001d18:	2000013d 	.word	0x2000013d
 8001d1c:	20000138 	.word	0x20000138
 8001d20:	2000010c 	.word	0x2000010c

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d40:	4c0b      	ldr	r4, [pc, #44]	; (8001d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff fbc3 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f006 fd93 	bl	800887c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7fe fda5 	bl	80008a4 <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001d68:	08009bb4 	.word	0x08009bb4
  ldr r2, =_sbss
 8001d6c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001d70:	200130d4 	.word	0x200130d4

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>
	...

08001d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_Init+0x40>)
 8001d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_Init+0x40>)
 8001d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x40>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f8d8 	bl	8001f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f7ff fa24 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff f980 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	2000001c 	.word	0x2000001c
 8001de0:	200001e0 	.word	0x200001e0

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200001e0 	.word	0x200001e0

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff4c 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7e:	f7ff ff61 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f7ff ffb1 	bl	8001ef0 <NVIC_EncodePriority>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff80 	bl	8001e9c <__NVIC_SetPriority>
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff54 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fce:	f7ff ff09 	bl	8001de4 <HAL_GetTick>
 8001fd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e052      	b.n	8002098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0216 	bic.w	r2, r2, #22
 8002000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_DMA_Abort+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002042:	e013      	b.n	800206c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002044:	f7ff fece 	bl	8001de4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b05      	cmp	r3, #5
 8002050:	d90c      	bls.n	800206c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e015      	b.n	8002098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e4      	bne.n	8002044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	223f      	movs	r2, #63	; 0x3f
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d004      	beq.n	80020be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00c      	b.n	80020d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2205      	movs	r2, #5
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e165      	b.n	80023cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8154 	bne.w	80023c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80ae 	beq.w	80023c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_GPIO_Init+0x300>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <HAL_GPIO_Init+0x300>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_GPIO_Init+0x300>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_GPIO_Init+0x308>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x21a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4e      	ldr	r2, [pc, #312]	; (80023f0 <HAL_GPIO_Init+0x30c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x216>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <HAL_GPIO_Init+0x310>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x212>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4c      	ldr	r2, [pc, #304]	; (80023f8 <HAL_GPIO_Init+0x314>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x20e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_GPIO_Init+0x318>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x20a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_GPIO_Init+0x31c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x206>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_GPIO_Init+0x320>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x202>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x21c>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_GPIO_Init+0x324>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a26      	ldr	r2, [pc, #152]	; (8002408 <HAL_GPIO_Init+0x324>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_GPIO_Init+0x324>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a11      	ldr	r2, [pc, #68]	; (8002408 <HAL_GPIO_Init+0x324>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f ae96 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40021400 	.word	0x40021400
 8002404:	40021800 	.word	0x40021800
 8002408:	40013c00 	.word	0x40013c00

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002428:	e003      	b.n	8002432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	041a      	lsls	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0cc      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d90c      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d044      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e067      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4934      	ldr	r1, [pc, #208]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff fc58 	bl	8001de4 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff fc54 	bl	8001de4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d20c      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 fbb1 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fe04 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	40023800 	.word	0x40023800
 8002600:	08009b58 	.word	0x08009b58
 8002604:	20000010 	.word	0x20000010
 8002608:	20000018 	.word	0x20000018

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_RCC_GetHCLKFreq+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000010 	.word	0x20000010

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002628:	f7ff fff0 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	08009b68 	.word	0x08009b68

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002650:	f7ff ffdc 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0b5b      	lsrs	r3, r3, #13
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	08009b68 	.word	0x08009b68

08002674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	220f      	movs	r2, #15
 8002682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RCC_GetClockConfig+0x5c>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_GetClockConfig+0x5c>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	08db      	lsrs	r3, r3, #3
 80026ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_RCC_GetClockConfig+0x60>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 020f 	and.w	r2, r3, #15
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	601a      	str	r2, [r3, #0]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002716:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	496c      	ldr	r1, [pc, #432]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800272e:	2301      	movs	r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d010      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002744:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	4960      	ldr	r1, [pc, #384]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800275c:	2301      	movs	r3, #1
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800276c:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800276e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4955      	ldr	r1, [pc, #340]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278a:	d101      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002798:	2301      	movs	r3, #1
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d017      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a8:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	4946      	ldr	r1, [pc, #280]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c6:	d101      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80027c8:	2301      	movs	r3, #1
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 808a 	beq.w	80028fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a33      	ldr	r2, [pc, #204]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800280e:	f7ff fae9 	bl	8001de4 <HAL_GetTick>
 8002812:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7ff fae5 	bl	8001de4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e278      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02f      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	429a      	cmp	r2, r3
 8002850:	d028      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d114      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff fab3 	bl	8001de4 <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7ff faaf 	bl	8001de4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e240      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b0:	d114      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c6:	4902      	ldr	r1, [pc, #8]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
 80028cc:	e00c      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42470e40 	.word	0x42470e40
 80028dc:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028e6:	6093      	str	r3, [r2, #8]
 80028e8:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	4944      	ldr	r1, [pc, #272]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800290c:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800290e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002922:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4937      	ldr	r1, [pc, #220]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800293e:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	492e      	ldr	r1, [pc, #184]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d011      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	4926      	ldr	r1, [pc, #152]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297e:	d101      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002980:	2301      	movs	r3, #1
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002996:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	491a      	ldr	r1, [pc, #104]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d011      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c0:	4911      	ldr	r1, [pc, #68]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d0:	d101      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80029d2:	2301      	movs	r3, #1
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d005      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e4:	f040 80ff 	bne.w	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029ee:	f7ff f9f9 	bl	8001de4 <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f4:	e00e      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029f6:	f7ff f9f5 	bl	8001de4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d907      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e188      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	424711e0 	.word	0x424711e0
 8002a10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a14:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ea      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d028      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d124      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a48:	4b71      	ldr	r3, [pc, #452]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	3301      	adds	r3, #1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a60:	0e1b      	lsrs	r3, r3, #24
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	071b      	lsls	r3, r3, #28
 8002a8a:	4961      	ldr	r1, [pc, #388]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d035      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d130      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002abe:	4b54      	ldr	r3, [pc, #336]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	0f1b      	lsrs	r3, r3, #28
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	019b      	lsls	r3, r3, #6
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	3b01      	subs	r3, #1
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	431a      	orrs	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	071b      	lsls	r3, r3, #28
 8002b00:	4943      	ldr	r1, [pc, #268]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0e:	f023 021f 	bic.w	r2, r3, #31
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	493d      	ldr	r1, [pc, #244]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d029      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b34:	d124      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4e:	0f1b      	lsrs	r3, r3, #28
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	019b      	lsls	r3, r3, #6
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	071b      	lsls	r3, r3, #28
 8002b78:	4925      	ldr	r1, [pc, #148]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d016      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	071b      	lsls	r3, r3, #28
 8002bb2:	4917      	ldr	r1, [pc, #92]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff f910 	bl	8001de4 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bc8:	f7ff f90c 	bl	8001de4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e09f      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 8095 	bne.w	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bf4:	f7ff f8f6 	bl	8001de4 <HAL_GetTick>
 8002bf8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bfc:	f7ff f8f2 	bl	8001de4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d908      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e085      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470068 	.word	0x42470068
 8002c18:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c28:	d0e8      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d02b      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d127      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	061b      	lsls	r3, r3, #24
 8002c80:	4928      	ldr	r1, [pc, #160]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	3b01      	subs	r3, #1
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01d      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb6:	d118      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	0e1b      	lsrs	r3, r3, #24
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	019b      	lsls	r3, r3, #6
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4910      	ldr	r1, [pc, #64]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7ff f878 	bl	8001de4 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cf8:	f7ff f874 	bl	8001de4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e007      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d16:	d1ef      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3730      	adds	r7, #48	; 0x30
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470070 	.word	0x42470070

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b0ae      	sub	sp, #184	; 0xb8
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d52:	4bcb      	ldr	r3, [pc, #812]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	f200 8206 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x440>
 8002d60:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	0800316d 	.word	0x0800316d
 8002d70:	0800316d 	.word	0x0800316d
 8002d74:	0800316d 	.word	0x0800316d
 8002d78:	08002da5 	.word	0x08002da5
 8002d7c:	0800316d 	.word	0x0800316d
 8002d80:	0800316d 	.word	0x0800316d
 8002d84:	0800316d 	.word	0x0800316d
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	0800316d 	.word	0x0800316d
 8002d90:	0800316d 	.word	0x0800316d
 8002d94:	0800316d 	.word	0x0800316d
 8002d98:	08002f9d 	.word	0x08002f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4bb9      	ldr	r3, [pc, #740]	; (8003084 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002da2:	e1e7      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da4:	4bb8      	ldr	r3, [pc, #736]	; (8003088 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002daa:	e1e3      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dac:	4bb4      	ldr	r3, [pc, #720]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db8:	4bb1      	ldr	r3, [pc, #708]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d071      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4bae      	ldr	r3, [pc, #696]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dea:	4622      	mov	r2, r4
 8002dec:	462b      	mov	r3, r5
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4621      	mov	r1, r4
 8002e04:	1a51      	subs	r1, r2, r1
 8002e06:	6439      	str	r1, [r7, #64]	; 0x40
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	018b      	lsls	r3, r1, #6
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e26:	4641      	mov	r1, r8
 8002e28:	018a      	lsls	r2, r1, #6
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e30:	4649      	mov	r1, r9
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e44:	4649      	mov	r1, r9
 8002e46:	00cb      	lsls	r3, r1, #3
 8002e48:	4641      	mov	r1, r8
 8002e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4e:	4641      	mov	r1, r8
 8002e50:	00ca      	lsls	r2, r1, #3
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	4622      	mov	r2, r4
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5e:	462b      	mov	r3, r5
 8002e60:	460a      	mov	r2, r1
 8002e62:	eb42 0303 	adc.w	r3, r2, r3
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e74:	4629      	mov	r1, r5
 8002e76:	024b      	lsls	r3, r1, #9
 8002e78:	4621      	mov	r1, r4
 8002e7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7e:	4621      	mov	r1, r4
 8002e80:	024a      	lsls	r2, r1, #9
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e98:	f7fd fa22 	bl	80002e0 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea6:	e067      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b75      	ldr	r3, [pc, #468]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ec6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0159      	lsls	r1, r3, #5
 8002ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002edc:	0150      	lsls	r0, r2, #5
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	1a51      	subs	r1, r2, r1
 8002ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb63 0301 	sbc.w	r3, r3, r1
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002efc:	4649      	mov	r1, r9
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	4641      	mov	r1, r8
 8002f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f06:	4641      	mov	r1, r8
 8002f08:	018a      	lsls	r2, r1, #6
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f10:	4649      	mov	r1, r9
 8002f12:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f2a:	4692      	mov	sl, r2
 8002f2c:	469b      	mov	fp, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb1a 0303 	adds.w	r3, sl, r3
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	462b      	mov	r3, r5
 8002f38:	eb4b 0303 	adc.w	r3, fp, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	028b      	lsls	r3, r1, #10
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f54:	4621      	mov	r1, r4
 8002f56:	028a      	lsls	r2, r1, #10
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f60:	2200      	movs	r2, #0
 8002f62:	673b      	str	r3, [r7, #112]	; 0x70
 8002f64:	677a      	str	r2, [r7, #116]	; 0x74
 8002f66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f6a:	f7fd f9b9 	bl	80002e0 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f9a:	e0eb      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b38      	ldr	r3, [pc, #224]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d06b      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	2200      	movs	r2, #0
 8002fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc8:	2300      	movs	r3, #0
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
 8002fcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	0159      	lsls	r1, r3, #5
 8002fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe2:	0150      	lsls	r0, r2, #5
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4621      	mov	r1, r4
 8002fea:	1a51      	subs	r1, r2, r1
 8002fec:	61b9      	str	r1, [r7, #24]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003002:	4659      	mov	r1, fp
 8003004:	018b      	lsls	r3, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300c:	4651      	mov	r1, sl
 800300e:	018a      	lsls	r2, r1, #6
 8003010:	4651      	mov	r1, sl
 8003012:	ebb2 0801 	subs.w	r8, r2, r1
 8003016:	4659      	mov	r1, fp
 8003018:	eb63 0901 	sbc.w	r9, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003030:	4690      	mov	r8, r2
 8003032:	4699      	mov	r9, r3
 8003034:	4623      	mov	r3, r4
 8003036:	eb18 0303 	adds.w	r3, r8, r3
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	462b      	mov	r3, r5
 800303e:	eb49 0303 	adc.w	r3, r9, r3
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003050:	4629      	mov	r1, r5
 8003052:	024b      	lsls	r3, r1, #9
 8003054:	4621      	mov	r1, r4
 8003056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800305a:	4621      	mov	r1, r4
 800305c:	024a      	lsls	r2, r1, #9
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003066:	2200      	movs	r2, #0
 8003068:	65bb      	str	r3, [r7, #88]	; 0x58
 800306a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800306c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003070:	f7fd f936 	bl	80002e0 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800307e:	e065      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x420>
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCC_GetSysClockFreq+0x458>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	4618      	mov	r0, r3
 8003096:	4611      	mov	r1, r2
 8003098:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800309c:	653b      	str	r3, [r7, #80]	; 0x50
 800309e:	2300      	movs	r3, #0
 80030a0:	657b      	str	r3, [r7, #84]	; 0x54
 80030a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030a6:	4642      	mov	r2, r8
 80030a8:	464b      	mov	r3, r9
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4641      	mov	r1, r8
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	4649      	mov	r1, r9
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030d8:	4659      	mov	r1, fp
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e2:	4651      	mov	r1, sl
 80030e4:	018a      	lsls	r2, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	1a54      	subs	r4, r2, r1
 80030ea:	4659      	mov	r1, fp
 80030ec:	eb63 0501 	sbc.w	r5, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	464b      	mov	r3, r9
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003134:	2200      	movs	r2, #0
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
 8003138:	64fa      	str	r2, [r7, #76]	; 0x4c
 800313a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800313e:	f7fd f8cf 	bl	80002e0 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4613      	mov	r3, r2
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_RCC_GetSysClockFreq+0x458>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0f1b      	lsrs	r3, r3, #28
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800316a:	e003      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_GetSysClockFreq+0x45c>)
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003178:	4618      	mov	r0, r3
 800317a:	37b8      	adds	r7, #184	; 0xb8
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400

0800318c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e28d      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8083 	beq.w	80032b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ac:	4b94      	ldr	r3, [pc, #592]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d019      	beq.n	80031ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b8:	4b91      	ldr	r3, [pc, #580]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c4:	4b8e      	ldr	r3, [pc, #568]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b84      	ldr	r3, [pc, #528]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x124>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e25a      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x90>
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7b      	ldr	r2, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xcc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0xb4>
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a75      	ldr	r2, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a72      	ldr	r2, [pc, #456]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xcc>
 8003240:	4b6f      	ldr	r3, [pc, #444]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6e      	ldr	r2, [pc, #440]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6b      	ldr	r2, [pc, #428]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fdc0 	bl	8001de4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe fdbc 	bl	8001de4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e21f      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xdc>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe fdac 	bl	8001de4 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fda8 	bl	8001de4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e20b      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x104>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06f      	beq.n	800339e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032be:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ca:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x186>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1d3      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x278>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fd55 	bl	8001de4 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe fd51 	bl	8001de4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1b4      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4925      	ldr	r1, [pc, #148]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x278>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fd34 	bl	8001de4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe fd30 	bl	8001de4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e193      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d036      	beq.n	8003418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe fd14 	bl	8001de4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fd10 	bl	8001de4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e173      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x234>
 80033de:	e01b      	b.n	8003418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fe fcfd 	bl	8001de4 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	e00e      	b.n	800340c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fe fcf9 	bl	8001de4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d907      	bls.n	800340c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e15c      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
 8003400:	40023800 	.word	0x40023800
 8003404:	42470000 	.word	0x42470000
 8003408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b8a      	ldr	r3, [pc, #552]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ea      	bne.n	80033ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8097 	beq.w	8003554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	4b7f      	ldr	r3, [pc, #508]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a7e      	ldr	r2, [pc, #504]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b7c      	ldr	r3, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b79      	ldr	r3, [pc, #484]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a75      	ldr	r2, [pc, #468]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe fcb9 	bl	8001de4 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe fcb5 	bl	8001de4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e118      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b6c      	ldr	r3, [pc, #432]	; (800363c <HAL_RCC_OscConfig+0x4b0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x31e>
 800349c:	4b66      	ldr	r3, [pc, #408]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	4a65      	ldr	r2, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	; 0x70
 80034a8:	e01c      	b.n	80034e4 <HAL_RCC_OscConfig+0x358>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x340>
 80034b2:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a60      	ldr	r2, [pc, #384]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	4b5e      	ldr	r3, [pc, #376]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5d      	ldr	r2, [pc, #372]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x358>
 80034cc:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a59      	ldr	r2, [pc, #356]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
 80034d8:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe fc7a 	bl	8001de4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe fc76 	bl	8001de4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0d7      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ee      	beq.n	80034f4 <HAL_RCC_OscConfig+0x368>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7fe fc64 	bl	8001de4 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe fc60 	bl	8001de4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0c1      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ee      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80ad 	beq.w	80036b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d060      	beq.n	800362c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d145      	bne.n	80035fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_RCC_OscConfig+0x4b4>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe fc34 	bl	8001de4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe fc30 	bl	8001de4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e093      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	3b01      	subs	r3, #1
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	071b      	lsls	r3, r3, #28
 80035ca:	491b      	ldr	r1, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4b4>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fe fc05 	bl	8001de4 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe fc01 	bl	8001de4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e064      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x452>
 80035fc:	e05c      	b.n	80036b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x4b4>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe fbee 	bl	8001de4 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe fbea 	bl	8001de4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04d      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x480>
 800362a:	e045      	b.n	80036b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e040      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000
 8003640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <HAL_RCC_OscConfig+0x538>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d030      	beq.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d129      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d122      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800367c:	4293      	cmp	r3, r2
 800367e:	d119      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	3b01      	subs	r3, #1
 800368e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d10f      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e066      	b.n	80037ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7f5b      	ldrb	r3, [r3, #29]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fd06 	bl	8001100 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	22ca      	movs	r2, #202	; 0xca
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2253      	movs	r2, #83	; 0x53
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa45 	bl	8003b9a <RTC_EnterInitMode>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d12c      	bne.n	8003774 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6899      	ldr	r1, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68d2      	ldr	r2, [r2, #12]
 8003754:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6919      	ldr	r1, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	041a      	lsls	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa4c 	bl	8003c08 <RTC_ExitInitMode>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d113      	bne.n	80037a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	22ff      	movs	r2, #255	; 0xff
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	7f1b      	ldrb	r3, [r3, #28]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_RTC_SetTime+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e087      	b.n	80038e0 <HAL_RTC_SetTime+0x12c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2202      	movs	r2, #2
 80037da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d126      	bne.n	8003830 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa29 	bl	8003c52 <RTC_ByteToBcd2>
 8003800:	4603      	mov	r3, r0
 8003802:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fa22 	bl	8003c52 <RTC_ByteToBcd2>
 800380e:	4603      	mov	r3, r0
 8003810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003812:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	789b      	ldrb	r3, [r3, #2]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fa1a 	bl	8003c52 <RTC_ByteToBcd2>
 800381e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003820:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	78db      	ldrb	r3, [r3, #3]
 8003828:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e018      	b.n	8003862 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003850:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003856:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	22ca      	movs	r2, #202	; 0xca
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2253      	movs	r2, #83	; 0x53
 8003870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f991 	bl	8003b9a <RTC_EnterInitMode>
 8003878:	4603      	mov	r3, r0
 800387a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d120      	bne.n	80038c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800388c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003890:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6899      	ldr	r1, [r3, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f9a4 	bl	8003c08 <RTC_ExitInitMode>
 80038c0:	4603      	mov	r3, r0
 80038c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	771a      	strb	r2, [r3, #28]

  return status;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800391a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800391e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	0d9b      	lsrs	r3, r3, #22
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11a      	bne.n	800399a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f98f 	bl	8003c8c <RTC_Bcd2ToByte>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f986 	bl	8003c8c <RTC_Bcd2ToByte>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	789b      	ldrb	r3, [r3, #2]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f97d 	bl	8003c8c <RTC_Bcd2ToByte>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	7f1b      	ldrb	r3, [r3, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_RTC_SetDate+0x1c>
 80039bc:	2302      	movs	r3, #2
 80039be:	e071      	b.n	8003aa4 <HAL_RTC_SetDate+0x100>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2202      	movs	r2, #2
 80039ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10e      	bne.n	80039f0 <HAL_RTC_SetDate+0x4c>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	f023 0310 	bic.w	r3, r3, #16
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	330a      	adds	r3, #10
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11c      	bne.n	8003a30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	78db      	ldrb	r3, [r3, #3]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f929 	bl	8003c52 <RTC_ByteToBcd2>
 8003a00:	4603      	mov	r3, r0
 8003a02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f922 	bl	8003c52 <RTC_ByteToBcd2>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	789b      	ldrb	r3, [r3, #2]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f91a 	bl	8003c52 <RTC_ByteToBcd2>
 8003a1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e00e      	b.n	8003a4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	78db      	ldrb	r3, [r3, #3]
 8003a34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	22ca      	movs	r2, #202	; 0xca
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2253      	movs	r2, #83	; 0x53
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f89b 	bl	8003b9a <RTC_EnterInitMode>
 8003a64:	4603      	mov	r3, r0
 8003a66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8c2 	bl	8003c08 <RTC_ExitInitMode>
 8003a84:	4603      	mov	r3, r0
 8003a86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	22ff      	movs	r2, #255	; 0xff
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	771a      	strb	r2, [r3, #28]

  return status;
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}

08003aac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ac6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003aca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11a      	bne.n	8003b40 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	78db      	ldrb	r3, [r3, #3]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f8bc 	bl	8003c8c <RTC_Bcd2ToByte>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f8b3 	bl	8003c8c <RTC_Bcd2ToByte>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	789b      	ldrb	r3, [r3, #2]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f8aa 	bl	8003c8c <RTC_Bcd2ToByte>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b64:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b66:	f7fe f93d 	bl	8001de4 <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b6c:	e009      	b.n	8003b82 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b6e:	f7fe f939 	bl	8001de4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7c:	d901      	bls.n	8003b82 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e007      	b.n	8003b92 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ee      	beq.n	8003b6e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d122      	bne.n	8003bfe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7fe f90c 	bl	8001de4 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bce:	e00c      	b.n	8003bea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bd0:	f7fe f908 	bl	8001de4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bde:	d904      	bls.n	8003bea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2204      	movs	r2, #4
 8003be4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <RTC_EnterInitMode+0x64>
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d1e8      	bne.n	8003bd0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c22:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ff89 	bl	8003b4a <HAL_RTC_WaitForSynchro>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003c60:	e005      	b.n	8003c6e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3301      	adds	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	3b0a      	subs	r3, #10
 8003c6c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d8f6      	bhi.n	8003c62 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b2db      	uxtb	r3, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	0092      	lsls	r2, r2, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b2db      	uxtb	r3, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e041      	b.n	8003d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f839 	bl	8003d62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f000 f9d8 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04e      	b.n	8003e2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d01d      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d111      	bne.n	8003e1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d010      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1a:	e007      	b.n	8003e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40000c00 	.word	0x40000c00
 8003e4c:	40010400 	.word	0x40010400
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40001800 	.word	0x40001800

08003e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d122      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0202 	mvn.w	r2, #2
 8003e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8ee 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003ea0:	e005      	b.n	8003eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8e0 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f8f1 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d122      	bne.n	8003f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d11b      	bne.n	8003f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0204 	mvn.w	r2, #4
 8003ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8c4 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003ef4:	e005      	b.n	8003f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8b6 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f8c7 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d122      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d11b      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0208 	mvn.w	r2, #8
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2204      	movs	r2, #4
 8003f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f89a 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f88c 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f89d 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0210 	mvn.w	r2, #16
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2208      	movs	r2, #8
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f870 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f862 	bl	8004068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f873 	bl	8004090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0201 	mvn.w	r2, #1
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc ff4a 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d10e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b80      	cmp	r3, #128	; 0x80
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f902 	bl	800420c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d10e      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d107      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f838 	bl	80040a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0220 	mvn.w	r2, #32
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8cc 	bl	80041f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a40      	ldr	r2, [pc, #256]	; (80041cc <TIM_Base_SetConfig+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d6:	d00f      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <TIM_Base_SetConfig+0x118>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <TIM_Base_SetConfig+0x11c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <TIM_Base_SetConfig+0x120>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a3a      	ldr	r2, [pc, #232]	; (80041dc <TIM_Base_SetConfig+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <TIM_Base_SetConfig+0x114>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d02b      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d027      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <TIM_Base_SetConfig+0x118>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d023      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <TIM_Base_SetConfig+0x11c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01f      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <TIM_Base_SetConfig+0x120>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01b      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <TIM_Base_SetConfig+0x124>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d017      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <TIM_Base_SetConfig+0x128>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <TIM_Base_SetConfig+0x12c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00f      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <TIM_Base_SetConfig+0x130>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00b      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a25      	ldr	r2, [pc, #148]	; (80041ec <TIM_Base_SetConfig+0x134>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <TIM_Base_SetConfig+0x138>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <TIM_Base_SetConfig+0x13c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <TIM_Base_SetConfig+0x114>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0xf8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0c      	ldr	r2, [pc, #48]	; (80041dc <TIM_Base_SetConfig+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	615a      	str	r2, [r3, #20]
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40010400 	.word	0x40010400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	40001800 	.word	0x40001800
 80041f0:	40001c00 	.word	0x40001c00
 80041f4:	40002000 	.word	0x40002000

080041f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e03f      	b.n	80042b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc ff84 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fddf 	bl	8004e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08a      	sub	sp, #40	; 0x28
 80042be:	af02      	add	r7, sp, #8
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d17c      	bne.n	80043d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_UART_Transmit+0x2c>
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e075      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_Transmit+0x3e>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e06e      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	; 0x21
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430e:	f7fd fd69 	bl	8001de4 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d108      	bne.n	800433c <HAL_UART_Transmit+0x82>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800434c:	e02a      	b.n	80043a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fb1f 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e036      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3302      	adds	r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e007      	b.n	8004396 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1cf      	bne.n	800434e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	; 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 faef 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e006      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d11d      	bne.n	8004434 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Receive_IT+0x26>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e016      	b.n	8004436 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Receive_IT+0x38>
 8004412:	2302      	movs	r3, #2
 8004414:	e00f      	b.n	8004436 <HAL_UART_Receive_IT+0x58>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	461a      	mov	r2, r3
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fb24 	bl	8004a78 <UART_Start_Receive_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	e000      	b.n	8004436 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b0ba      	sub	sp, #232	; 0xe8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800447e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_UART_IRQHandler+0x66>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fc07 	bl	8004cb2 <UART_Receive_IT>
      return;
 80044a4:	e256      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80de 	beq.w	800466c <HAL_UART_IRQHandler+0x22c>
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80d1 	beq.w	800466c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_UART_IRQHandler+0xae>
 80044d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_UART_IRQHandler+0xd2>
 80044fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xf6>
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <HAL_UART_IRQHandler+0x126>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f043 0208 	orr.w	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 81ed 	beq.w	800494a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_UART_IRQHandler+0x14e>
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb92 	bl	8004cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_UART_IRQHandler+0x17a>
 80045b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04f      	beq.n	800465a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa9a 	bl	8004af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d141      	bne.n	8004652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1d9      	bne.n	80045ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d013      	beq.n	800464a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	4a7d      	ldr	r2, [pc, #500]	; (800481c <HAL_UART_IRQHandler+0x3dc>)
 8004628:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	4618      	mov	r0, r3
 8004630:	f7fd fd36 	bl	80020a0 <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00e      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f990 	bl	8004970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00a      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f98c 	bl	8004970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e006      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f988 	bl	8004970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004666:	e170      	b.n	800494a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	bf00      	nop
    return;
 800466a:	e16e      	b.n	800494a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 814a 	bne.w	800490a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8143 	beq.w	800490a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 813c 	beq.w	800490a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	f040 80b4 	bne.w	8004820 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8140 	beq.w	800494e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f080 8139 	bcs.w	800494e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	f000 8088 	beq.w	8004802 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800472a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1d9      	bne.n	80046f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800474e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004762:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004766:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800476a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e1      	bne.n	800473e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800478a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3314      	adds	r3, #20
 800479a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800479e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e3      	bne.n	800477a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d2:	f023 0310 	bic.w	r3, r3, #16
 80047d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80047e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e3      	bne.n	80047c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd fbdf 	bl	8001fc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800480a:	b29b      	uxth	r3, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	b29b      	uxth	r3, r3
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8b6 	bl	8004984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004818:	e099      	b.n	800494e <HAL_UART_IRQHandler+0x50e>
 800481a:	bf00      	nop
 800481c:	08004bbb 	.word	0x08004bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004828:	b29b      	uxth	r3, r3
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 808b 	beq.w	8004952 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800483c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8086 	beq.w	8004952 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800485c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800486a:	647a      	str	r2, [r7, #68]	; 0x44
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e3      	bne.n	8004846 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3314      	adds	r3, #20
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	623b      	str	r3, [r7, #32]
   return(result);
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048a2:	633a      	str	r2, [r7, #48]	; 0x30
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e3      	bne.n	800487e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0310 	bic.w	r3, r3, #16
 80048da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048e8:	61fa      	str	r2, [r7, #28]
 80048ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	69b9      	ldr	r1, [r7, #24]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	617b      	str	r3, [r7, #20]
   return(result);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e3      	bne.n	80048c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f83e 	bl	8004984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004908:	e023      	b.n	8004952 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_UART_IRQHandler+0x4ea>
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f95d 	bl	8004be2 <UART_Transmit_IT>
    return;
 8004928:	e014      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00e      	beq.n	8004954 <HAL_UART_IRQHandler+0x514>
 8004936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f99d 	bl	8004c82 <UART_EndTransmit_IT>
    return;
 8004948:	e004      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
    return;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
      return;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
      return;
 8004952:	bf00      	nop
  }
}
 8004954:	37e8      	adds	r7, #232	; 0xe8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop

0800495c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b090      	sub	sp, #64	; 0x40
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ac:	e050      	b.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b4:	d04c      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
 80049bc:	f7fd fa12 	bl	8001de4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d241      	bcs.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049ec:	637a      	str	r2, [r7, #52]	; 0x34
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a20:	623a      	str	r2, [r7, #32]
 8004a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e00f      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d09f      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3740      	adds	r7, #64	; 0x40
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2222      	movs	r2, #34	; 0x22
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b095      	sub	sp, #84	; 0x54
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3314      	adds	r3, #20
 8004b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d119      	bne.n	8004ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f023 0310 	bic.w	r3, r3, #16
 8004b82:	647b      	str	r3, [r7, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8c:	61ba      	str	r2, [r7, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e5      	bne.n	8004b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bae:	bf00      	nop
 8004bb0:	3754      	adds	r7, #84	; 0x54
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff fecb 	bl	8004970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b21      	cmp	r3, #33	; 0x21
 8004bf4:	d13e      	bne.n	8004c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d114      	bne.n	8004c2a <UART_Transmit_IT+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d110      	bne.n	8004c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	621a      	str	r2, [r3, #32]
 8004c28:	e008      	b.n	8004c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6211      	str	r1, [r2, #32]
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10f      	bne.n	8004c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe5a 	bl	800495c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b08c      	sub	sp, #48	; 0x30
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b22      	cmp	r3, #34	; 0x22
 8004cc4:	f040 80ab 	bne.w	8004e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d117      	bne.n	8004d02 <UART_Receive_IT+0x50>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d113      	bne.n	8004d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004d00:	e026      	b.n	8004d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d007      	beq.n	8004d26 <UART_Receive_IT+0x74>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <UART_Receive_IT+0x82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e008      	b.n	8004d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d15a      	bne.n	8004e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0220 	bic.w	r2, r2, #32
 8004d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d135      	bne.n	8004e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	623a      	str	r2, [r7, #32]
 8004dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	69f9      	ldr	r1, [r7, #28]
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d10a      	bne.n	8004e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fdbb 	bl	8004984 <HAL_UARTEx_RxEventCallback>
 8004e0e:	e002      	b.n	8004e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fb ffd9 	bl	8000dc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e002      	b.n	8004e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3730      	adds	r7, #48	; 0x30
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e2c:	b0c0      	sub	sp, #256	; 0x100
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	68d9      	ldr	r1, [r3, #12]
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	ea40 0301 	orr.w	r3, r0, r1
 8004e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e80:	f021 010c 	bic.w	r1, r1, #12
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	6999      	ldr	r1, [r3, #24]
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	ea40 0301 	orr.w	r3, r0, r1
 8004eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8f      	ldr	r3, [pc, #572]	; (80050f4 <UART_SetConfig+0x2cc>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d005      	beq.n	8004ec8 <UART_SetConfig+0xa0>
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d104      	bne.n	8004ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7fd fbc0 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 8004ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ed0:	e003      	b.n	8004eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ed2:	f7fd fba7 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8004ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	f040 810c 	bne.w	8005100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f02:	415b      	adcs	r3, r3
 8004f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	eb12 0801 	adds.w	r8, r2, r1
 8004f10:	4629      	mov	r1, r5
 8004f12:	eb43 0901 	adc.w	r9, r3, r1
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	eb18 0303 	adds.w	r3, r8, r3
 8004f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f38:	462b      	mov	r3, r5
 8004f3a:	eb49 0303 	adc.w	r3, r9, r3
 8004f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f56:	460b      	mov	r3, r1
 8004f58:	18db      	adds	r3, r3, r3
 8004f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	eb42 0303 	adc.w	r3, r2, r3
 8004f62:	657b      	str	r3, [r7, #84]	; 0x54
 8004f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f6c:	f7fb f9b8 	bl	80002e0 <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <UART_SetConfig+0x2d4>)
 8004f76:	fba3 2302 	umull	r2, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	011c      	lsls	r4, r3, #4
 8004f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f98:	415b      	adcs	r3, r3
 8004f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc0:	4692      	mov	sl, r2
 8004fc2:	469b      	mov	fp, r3
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fec:	460b      	mov	r3, r1
 8004fee:	18db      	adds	r3, r3, r3
 8004ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005002:	f7fb f96d 	bl	80002e0 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4611      	mov	r1, r2
 800500c:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <UART_SetConfig+0x2d4>)
 800500e:	fba3 2301 	umull	r2, r3, r3, r1
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2264      	movs	r2, #100	; 0x64
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	1acb      	subs	r3, r1, r3
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005022:	4b36      	ldr	r3, [pc, #216]	; (80050fc <UART_SetConfig+0x2d4>)
 8005024:	fba3 2302 	umull	r2, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005030:	441c      	add	r4, r3
 8005032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800503c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	1891      	adds	r1, r2, r2
 800504a:	63b9      	str	r1, [r7, #56]	; 0x38
 800504c:	415b      	adcs	r3, r3
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005054:	4641      	mov	r1, r8
 8005056:	1851      	adds	r1, r2, r1
 8005058:	6339      	str	r1, [r7, #48]	; 0x30
 800505a:	4649      	mov	r1, r9
 800505c:	414b      	adcs	r3, r1
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800506c:	4659      	mov	r1, fp
 800506e:	00cb      	lsls	r3, r1, #3
 8005070:	4651      	mov	r1, sl
 8005072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005076:	4651      	mov	r1, sl
 8005078:	00ca      	lsls	r2, r1, #3
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	4603      	mov	r3, r0
 8005080:	4642      	mov	r2, r8
 8005082:	189b      	adds	r3, r3, r2
 8005084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005088:	464b      	mov	r3, r9
 800508a:	460a      	mov	r2, r1
 800508c:	eb42 0303 	adc.w	r3, r2, r3
 8005090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050a8:	460b      	mov	r3, r1
 80050aa:	18db      	adds	r3, r3, r3
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ae:	4613      	mov	r3, r2
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050be:	f7fb f90f 	bl	80002e0 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <UART_SetConfig+0x2d4>)
 80050c8:	fba3 1302 	umull	r1, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	2164      	movs	r1, #100	; 0x64
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	3332      	adds	r3, #50	; 0x32
 80050da:	4a08      	ldr	r2, [pc, #32]	; (80050fc <UART_SetConfig+0x2d4>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	f003 0207 	and.w	r2, r3, #7
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4422      	add	r2, r4
 80050ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050f0:	e106      	b.n	8005300 <UART_SetConfig+0x4d8>
 80050f2:	bf00      	nop
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40011400 	.word	0x40011400
 80050fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800510a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800510e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005112:	4642      	mov	r2, r8
 8005114:	464b      	mov	r3, r9
 8005116:	1891      	adds	r1, r2, r2
 8005118:	6239      	str	r1, [r7, #32]
 800511a:	415b      	adcs	r3, r3
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005122:	4641      	mov	r1, r8
 8005124:	1854      	adds	r4, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb43 0501 	adc.w	r5, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	00eb      	lsls	r3, r5, #3
 8005136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513a:	00e2      	lsls	r2, r4, #3
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	4643      	mov	r3, r8
 8005142:	18e3      	adds	r3, r4, r3
 8005144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005148:	464b      	mov	r3, r9
 800514a:	eb45 0303 	adc.w	r3, r5, r3
 800514e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800515e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800516e:	4629      	mov	r1, r5
 8005170:	008b      	lsls	r3, r1, #2
 8005172:	4621      	mov	r1, r4
 8005174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005178:	4621      	mov	r1, r4
 800517a:	008a      	lsls	r2, r1, #2
 800517c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005180:	f7fb f8ae 	bl	80002e0 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4b60      	ldr	r3, [pc, #384]	; (800530c <UART_SetConfig+0x4e4>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	011c      	lsls	r4, r3, #4
 8005192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800519c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	1891      	adds	r1, r2, r2
 80051aa:	61b9      	str	r1, [r7, #24]
 80051ac:	415b      	adcs	r3, r3
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b4:	4641      	mov	r1, r8
 80051b6:	1851      	adds	r1, r2, r1
 80051b8:	6139      	str	r1, [r7, #16]
 80051ba:	4649      	mov	r1, r9
 80051bc:	414b      	adcs	r3, r1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051cc:	4659      	mov	r1, fp
 80051ce:	00cb      	lsls	r3, r1, #3
 80051d0:	4651      	mov	r1, sl
 80051d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d6:	4651      	mov	r1, sl
 80051d8:	00ca      	lsls	r2, r1, #3
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	4642      	mov	r2, r8
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e8:	464b      	mov	r3, r9
 80051ea:	460a      	mov	r2, r1
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800520c:	4649      	mov	r1, r9
 800520e:	008b      	lsls	r3, r1, #2
 8005210:	4641      	mov	r1, r8
 8005212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005216:	4641      	mov	r1, r8
 8005218:	008a      	lsls	r2, r1, #2
 800521a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800521e:	f7fb f85f 	bl	80002e0 <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4611      	mov	r1, r2
 8005228:	4b38      	ldr	r3, [pc, #224]	; (800530c <UART_SetConfig+0x4e4>)
 800522a:	fba3 2301 	umull	r2, r3, r3, r1
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2264      	movs	r2, #100	; 0x64
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	1acb      	subs	r3, r1, r3
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	3332      	adds	r3, #50	; 0x32
 800523c:	4a33      	ldr	r2, [pc, #204]	; (800530c <UART_SetConfig+0x4e4>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005248:	441c      	add	r4, r3
 800524a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524e:	2200      	movs	r2, #0
 8005250:	673b      	str	r3, [r7, #112]	; 0x70
 8005252:	677a      	str	r2, [r7, #116]	; 0x74
 8005254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	1891      	adds	r1, r2, r2
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	415b      	adcs	r3, r3
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005268:	4641      	mov	r1, r8
 800526a:	1851      	adds	r1, r2, r1
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	4649      	mov	r1, r9
 8005270:	414b      	adcs	r3, r1
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005280:	4659      	mov	r1, fp
 8005282:	00cb      	lsls	r3, r1, #3
 8005284:	4651      	mov	r1, sl
 8005286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528a:	4651      	mov	r1, sl
 800528c:	00ca      	lsls	r2, r1, #3
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	4603      	mov	r3, r0
 8005294:	4642      	mov	r2, r8
 8005296:	189b      	adds	r3, r3, r2
 8005298:	66bb      	str	r3, [r7, #104]	; 0x68
 800529a:	464b      	mov	r3, r9
 800529c:	460a      	mov	r2, r1
 800529e:	eb42 0303 	adc.w	r3, r2, r3
 80052a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	663b      	str	r3, [r7, #96]	; 0x60
 80052ae:	667a      	str	r2, [r7, #100]	; 0x64
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052bc:	4649      	mov	r1, r9
 80052be:	008b      	lsls	r3, r1, #2
 80052c0:	4641      	mov	r1, r8
 80052c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c6:	4641      	mov	r1, r8
 80052c8:	008a      	lsls	r2, r1, #2
 80052ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052ce:	f7fb f807 	bl	80002e0 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <UART_SetConfig+0x4e4>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	3332      	adds	r3, #50	; 0x32
 80052ea:	4a08      	ldr	r2, [pc, #32]	; (800530c <UART_SetConfig+0x4e4>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f003 020f 	and.w	r2, r3, #15
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4422      	add	r2, r4
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005306:	46bd      	mov	sp, r7
 8005308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530c:	51eb851f 	.word	0x51eb851f

08005310 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f103 0208 	add.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005328:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f103 0208 	add.w	r2, r3, #8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f103 0208 	add.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c8:	d103      	bne.n	80053d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e00c      	b.n	80053ec <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3308      	adds	r3, #8
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e002      	b.n	80053e0 <vListInsert+0x2e>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d2f6      	bcs.n	80053da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6892      	ldr	r2, [r2, #8]
 800543a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6852      	ldr	r2, [r2, #4]
 8005444:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d103      	bne.n	8005458 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005482:	2301      	movs	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueGenericReset+0x2e>
        __asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60fb      	str	r3, [r7, #12]
    }
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05d      	beq.n	8005568 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d059      	beq.n	8005568 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	2100      	movs	r1, #0
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d000      	beq.n	80054c8 <xQueueGenericReset+0x50>
 80054c6:	2101      	movs	r1, #1
 80054c8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d14c      	bne.n	8005568 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80054ce:	f002 fd5b 	bl	8007f88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	6939      	ldr	r1, [r7, #16]
 80054dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	441a      	add	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2200      	movs	r2, #0
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	3b01      	subs	r3, #1
 8005500:	6939      	ldr	r1, [r7, #16]
 8005502:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	441a      	add	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	22ff      	movs	r2, #255	; 0xff
 8005512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	22ff      	movs	r2, #255	; 0xff
 800551a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d114      	bne.n	800554e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01a      	beq.n	8005562 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3310      	adds	r3, #16
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fa5f 	bl	80069f4 <xTaskRemoveFromEventList>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d012      	beq.n	8005562 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <xQueueGenericReset+0x11c>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	e009      	b.n	8005562 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	3310      	adds	r3, #16
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fedc 	bl	8005310 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	3324      	adds	r3, #36	; 0x24
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fed7 	bl	8005310 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005562:	f002 fd41 	bl	8007fe8 <vPortExitCritical>
 8005566:	e001      	b.n	800556c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xQueueGenericReset+0x110>
        __asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60bb      	str	r3, [r7, #8]
    }
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005588:	697b      	ldr	r3, [r7, #20]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02e      	beq.n	800560e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80055b0:	2100      	movs	r1, #0
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d000      	beq.n	80055c0 <xQueueGenericCreate+0x28>
 80055be:	2101      	movs	r1, #1
 80055c0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d123      	bne.n	800560e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80055ce:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80055d2:	d81c      	bhi.n	800560e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	fb02 f303 	mul.w	r3, r2, r3
 80055dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	3350      	adds	r3, #80	; 0x50
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 fdf2 	bl	80081cc <pvPortMalloc>
 80055e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01c      	beq.n	800562a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3350      	adds	r3, #80	; 0x50
 80055f8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055fa:	79fa      	ldrb	r2, [r7, #7]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f814 	bl	8005634 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800560c:	e00d      	b.n	800562a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueGenericCreate+0x92>
        __asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	613b      	str	r3, [r7, #16]
    }
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800562a:	69fb      	ldr	r3, [r7, #28]
    }
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e002      	b.n	8005656 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005662:	2101      	movs	r1, #1
 8005664:	69b8      	ldr	r0, [r7, #24]
 8005666:	f7ff ff07 	bl	8005478 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	; 0x38
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueGenericSend+0x32>
        __asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <xQueueGenericSend+0x40>
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSend+0x44>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueGenericSend+0x46>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <xQueueGenericSend+0x60>
        __asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d103      	bne.n	80056ea <xQueueGenericSend+0x6e>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <xQueueGenericSend+0x72>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <xQueueGenericSend+0x74>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xQueueGenericSend+0x8e>
        __asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	623b      	str	r3, [r7, #32]
    }
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800570a:	f001 fb83 	bl	8006e14 <xTaskGetSchedulerState>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <xQueueGenericSend+0x9e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <xQueueGenericSend+0xa2>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <xQueueGenericSend+0xa4>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <xQueueGenericSend+0xbe>
        __asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	61fb      	str	r3, [r7, #28]
    }
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800573a:	f002 fc25 	bl	8007f88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <xQueueGenericSend+0xd4>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d129      	bne.n	80057a4 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005756:	f000 fad6 	bl	8005d06 <prvCopyDataToQueue>
 800575a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	3324      	adds	r3, #36	; 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f001 f943 	bl	80069f4 <xTaskRemoveFromEventList>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d013      	beq.n	800579c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005774:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <xQueueGenericSend+0x1f8>)
 8005776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	e00a      	b.n	800579c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <xQueueGenericSend+0x1f8>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800579c:	f002 fc24 	bl	8007fe8 <vPortExitCritical>
                return pdPASS;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e063      	b.n	800586c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80057aa:	f002 fc1d 	bl	8007fe8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e05c      	b.n	800586c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f9ef 	bl	8006ba0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80057c6:	f002 fc0f 	bl	8007fe8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80057ca:	f000 fe11 	bl	80063f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80057ce:	f002 fbdb 	bl	8007f88 <vPortEnterCritical>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057de:	d103      	bne.n	80057e8 <xQueueGenericSend+0x16c>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f4:	d103      	bne.n	80057fe <xQueueGenericSend+0x182>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057fe:	f002 fbf3 	bl	8007fe8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005802:	1d3a      	adds	r2, r7, #4
 8005804:	f107 0314 	add.w	r3, r7, #20
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f9de 	bl	8006bcc <xTaskCheckForTimeOut>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d124      	bne.n	8005860 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005818:	f000 fb6d 	bl	8005ef6 <prvIsQueueFull>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d018      	beq.n	8005854 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	3310      	adds	r3, #16
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f001 f878 	bl	8006920 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005832:	f000 faf8 	bl	8005e26 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005836:	f000 fde9 	bl	800640c <xTaskResumeAll>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f47f af7c 	bne.w	800573a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <xQueueGenericSend+0x1f8>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	e772      	b.n	800573a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005856:	f000 fae6 	bl	8005e26 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800585a:	f000 fdd7 	bl	800640c <xTaskResumeAll>
 800585e:	e76c      	b.n	800573a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005862:	f000 fae0 	bl	8005e26 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005866:	f000 fdd1 	bl	800640c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800586a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800586c:	4618      	mov	r0, r3
 800586e:	3738      	adds	r7, #56	; 0x38
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b092      	sub	sp, #72	; 0x48
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800588a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <xQueueGenericSendFromISR+0x3c>
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <xQueueGenericSendFromISR+0x40>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <xQueueGenericSendFromISR+0x42>
 80058b8:	2300      	movs	r3, #0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d103      	bne.n	80058e2 <xQueueGenericSendFromISR+0x6a>
 80058da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <xQueueGenericSendFromISR+0x6e>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <xQueueGenericSendFromISR+0x70>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005902:	f002 fc23 	bl	800814c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005906:	f3ef 8211 	mrs	r2, BASEPRI
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	623a      	str	r2, [r7, #32]
 800591c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800591e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <xQueueGenericSendFromISR+0xbc>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d146      	bne.n	80059c2 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800593a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800594a:	f000 f9dc 	bl	8005d06 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800594e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005956:	d112      	bne.n	800597e <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02d      	beq.n	80059bc <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005962:	3324      	adds	r3, #36	; 0x24
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f845 	bl	80069f4 <xTaskRemoveFromEventList>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d025      	beq.n	80059bc <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d022      	beq.n	80059bc <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e01e      	b.n	80059bc <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800597e:	f000 fe51 	bl	8006624 <uxTaskGetNumberOfTasks>
 8005982:	6338      	str	r0, [r7, #48]	; 0x30
 8005984:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	429a      	cmp	r2, r3
 800598c:	d916      	bls.n	80059bc <xQueueGenericSendFromISR+0x144>
 800598e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005992:	2b7f      	cmp	r3, #127	; 0x7f
 8005994:	d10a      	bne.n	80059ac <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	61bb      	str	r3, [r7, #24]
    }
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xQueueGenericSendFromISR+0x132>
 80059ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80059b0:	3301      	adds	r3, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	b25a      	sxtb	r2, r3
 80059b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80059bc:	2301      	movs	r3, #1
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80059c0:	e001      	b.n	80059c6 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
 80059c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c8:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80059d0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80059d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3748      	adds	r7, #72	; 0x48
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <xQueueReceive+0x30>
        __asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	623b      	str	r3, [r7, #32]
    }
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <xQueueReceive+0x3e>
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <xQueueReceive+0x42>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueReceive+0x44>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueReceive+0x5e>
        __asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
    }
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3a:	f001 f9eb 	bl	8006e14 <xTaskGetSchedulerState>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <xQueueReceive+0x6e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xQueueReceive+0x72>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueReceive+0x74>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueReceive+0x8e>
        __asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61bb      	str	r3, [r7, #24]
    }
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005a6a:	f002 fa8d 	bl	8007f88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01f      	beq.n	8005aba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7e:	f000 f9ac 	bl	8005dda <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1e5a      	subs	r2, r3, #1
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	3310      	adds	r3, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 ffac 	bl	80069f4 <xTaskRemoveFromEventList>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <xQueueReceive+0x1bc>)
 8005aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005ab2:	f002 fa99 	bl	8007fe8 <vPortExitCritical>
                return pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e069      	b.n	8005b8e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005ac0:	f002 fa92 	bl	8007fe8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e062      	b.n	8005b8e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005ace:	f107 0310 	add.w	r3, r7, #16
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 f864 	bl	8006ba0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005adc:	f002 fa84 	bl	8007fe8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005ae0:	f000 fc86 	bl	80063f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005ae4:	f002 fa50 	bl	8007f88 <vPortEnterCritical>
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af4:	d103      	bne.n	8005afe <xQueueReceive+0x122>
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b04:	b25b      	sxtb	r3, r3
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0a:	d103      	bne.n	8005b14 <xQueueReceive+0x138>
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b14:	f002 fa68 	bl	8007fe8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b18:	1d3a      	adds	r2, r7, #4
 8005b1a:	f107 0310 	add.w	r3, r7, #16
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f853 	bl	8006bcc <xTaskCheckForTimeOut>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d123      	bne.n	8005b74 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2e:	f000 f9cc 	bl	8005eca <prvIsQueueEmpty>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d017      	beq.n	8005b68 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	3324      	adds	r3, #36	; 0x24
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 feed 	bl	8006920 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b48:	f000 f96d 	bl	8005e26 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005b4c:	f000 fc5e 	bl	800640c <xTaskResumeAll>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d189      	bne.n	8005a6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <xQueueReceive+0x1bc>)
 8005b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	e780      	b.n	8005a6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6a:	f000 f95c 	bl	8005e26 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005b6e:	f000 fc4d 	bl	800640c <xTaskResumeAll>
 8005b72:	e77a      	b.n	8005a6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b76:	f000 f956 	bl	8005e26 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005b7a:	f000 fc47 	bl	800640c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b80:	f000 f9a3 	bl	8005eca <prvIsQueueEmpty>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f af6f 	beq.w	8005a6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005b8c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b090      	sub	sp, #64	; 0x40
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <xQueueReceiveFromISR+0x3a>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <xQueueReceiveFromISR+0x3e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <xQueueReceiveFromISR+0x40>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	623b      	str	r3, [r7, #32]
    }
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf6:	f002 faa9 	bl	800814c <vPortValidateInterruptPriority>
        __asm volatile
 8005bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005c12:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d046      	beq.n	8005cb0 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c30:	f000 f8d3 	bl	8005dda <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005c3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c44:	d112      	bne.n	8005c6c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d02d      	beq.n	8005caa <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	3310      	adds	r3, #16
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fece 	bl	80069f4 <xTaskRemoveFromEventList>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d025      	beq.n	8005caa <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d022      	beq.n	8005caa <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e01e      	b.n	8005caa <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005c6c:	f000 fcda 	bl	8006624 <uxTaskGetNumberOfTasks>
 8005c70:	62b8      	str	r0, [r7, #40]	; 0x28
 8005c72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d916      	bls.n	8005caa <xQueueReceiveFromISR+0x10e>
 8005c7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c80:	2b7f      	cmp	r3, #127	; 0x7f
 8005c82:	d10a      	bne.n	8005c9a <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	617b      	str	r3, [r7, #20]
    }
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueReceiveFromISR+0xfc>
 8005c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	b25a      	sxtb	r2, r3
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005caa:	2301      	movs	r3, #1
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cae:	e001      	b.n	8005cb4 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f383 8811 	msr	BASEPRI, r3
    }
 8005cbe:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3740      	adds	r7, #64	; 0x40
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60bb      	str	r3, [r7, #8]
    }
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005cee:	f002 f94b 	bl	8007f88 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005cf8:	f002 f976 	bl	8007fe8 <vPortExitCritical>

    return uxReturn;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10d      	bne.n	8005d40 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d14d      	bne.n	8005dc8 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f88d 	bl	8006e50 <xTaskPriorityDisinherit>
 8005d36:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]
 8005d3e:	e043      	b.n	8005dc8 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d119      	bne.n	8005d7a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6858      	ldr	r0, [r3, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	f002 fdba 	bl	80088ca <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	441a      	add	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d32b      	bcc.n	8005dc8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	e026      	b.n	8005dc8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68d8      	ldr	r0, [r3, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	461a      	mov	r2, r3
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	f002 fda0 	bl	80088ca <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	425b      	negs	r3, r3
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d207      	bcs.n	8005db6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	425b      	negs	r3, r3
 8005db0:	441a      	add	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d105      	bne.n	8005dc8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005dd0:	697b      	ldr	r3, [r7, #20]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d018      	beq.n	8005e1e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	441a      	add	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d303      	bcc.n	8005e0e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68d9      	ldr	r1, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	461a      	mov	r2, r3
 8005e18:	6838      	ldr	r0, [r7, #0]
 8005e1a:	f002 fd56 	bl	80088ca <memcpy>
    }
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005e2e:	f002 f8ab 	bl	8007f88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e38:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e3a:	e011      	b.n	8005e60 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3324      	adds	r3, #36	; 0x24
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fdd3 	bl	80069f4 <xTaskRemoveFromEventList>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005e54:	f000 ff20 	bl	8006c98 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dce9      	bgt.n	8005e3c <prvUnlockQueue+0x16>
 8005e68:	e000      	b.n	8005e6c <prvUnlockQueue+0x46>
                    break;
 8005e6a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22ff      	movs	r2, #255	; 0xff
 8005e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005e74:	f002 f8b8 	bl	8007fe8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005e78:	f002 f886 	bl	8007f88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e82:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e84:	e011      	b.n	8005eaa <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d012      	beq.n	8005eb4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3310      	adds	r3, #16
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fdae 	bl	80069f4 <xTaskRemoveFromEventList>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005e9e:	f000 fefb 	bl	8006c98 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dce9      	bgt.n	8005e86 <prvUnlockQueue+0x60>
 8005eb2:	e000      	b.n	8005eb6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005eb4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	22ff      	movs	r2, #255	; 0xff
 8005eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005ebe:	f002 f893 	bl	8007fe8 <vPortExitCritical>
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005ed2:	f002 f859 	bl	8007f88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e001      	b.n	8005ee8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005ee8:	f002 f87e 	bl	8007fe8 <vPortExitCritical>

    return xReturn;
 8005eec:	68fb      	ldr	r3, [r7, #12]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005efe:	f002 f843 	bl	8007f88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d102      	bne.n	8005f14 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e001      	b.n	8005f18 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005f18:	f002 f866 	bl	8007fe8 <vPortExitCritical>

    return xReturn;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005f26:	b480      	push	{r7}
 8005f28:	b087      	sub	sp, #28
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
    }
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d102      	bne.n	8005f60 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e001      	b.n	8005f64 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005f64:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
	...

08005f74 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	60fb      	str	r3, [r7, #12]
    }
 8005f9a:	bf00      	nop
 8005f9c:	e7fe      	b.n	8005f9c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d024      	beq.n	8005fee <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e01e      	b.n	8005fe8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <vQueueAddToRegistry+0x98>)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d105      	bne.n	8005fc6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4a13      	ldr	r2, [pc, #76]	; (800600c <vQueueAddToRegistry+0x98>)
 8005fc0:	4413      	add	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
                    break;
 8005fc4:	e013      	b.n	8005fee <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <vQueueAddToRegistry+0x6e>
 8005fcc:	4a0f      	ldr	r2, [pc, #60]	; (800600c <vQueueAddToRegistry+0x98>)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4a0b      	ldr	r2, [pc, #44]	; (800600c <vQueueAddToRegistry+0x98>)
 8005fde:	4413      	add	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b07      	cmp	r3, #7
 8005fec:	d9dd      	bls.n	8005faa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	200001e4 	.word	0x200001e4

08006010 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006020:	f001 ffb2 	bl	8007f88 <vPortEnterCritical>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602a:	b25b      	sxtb	r3, r3
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006030:	d103      	bne.n	800603a <vQueueWaitForMessageRestricted+0x2a>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006040:	b25b      	sxtb	r3, r3
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006046:	d103      	bne.n	8006050 <vQueueWaitForMessageRestricted+0x40>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006050:	f001 ffca 	bl	8007fe8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	3324      	adds	r3, #36	; 0x24
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fc7f 	bl	8006968 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f7ff fedb 	bl	8005e26 <prvUnlockQueue>
    }
 8006070:	bf00      	nop
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006078:	b580      	push	{r7, lr}
 800607a:	b08c      	sub	sp, #48	; 0x30
 800607c:	af04      	add	r7, sp, #16
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4618      	mov	r0, r3
 800608e:	f002 f89d 	bl	80081cc <pvPortMalloc>
 8006092:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d013      	beq.n	80060c2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800609a:	2058      	movs	r0, #88	; 0x58
 800609c:	f002 f896 	bl	80081cc <pvPortMalloc>
 80060a0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80060a8:	2258      	movs	r2, #88	; 0x58
 80060aa:	2100      	movs	r1, #0
 80060ac:	69f8      	ldr	r0, [r7, #28]
 80060ae:	f002 fb90 	bl	80087d2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
 80060b8:	e005      	b.n	80060c6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f002 f940 	bl	8008340 <vPortFree>
 80060c0:	e001      	b.n	80060c6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d013      	beq.n	80060f4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060cc:	88fa      	ldrh	r2, [r7, #6]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f80e 	bl	8006104 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80060e8:	69f8      	ldr	r0, [r7, #28]
 80060ea:	f000 f899 	bl	8006220 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80060ee:	2301      	movs	r3, #1
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e002      	b.n	80060fa <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80060fa:	69bb      	ldr	r3, [r7, #24]
    }
 80060fc:	4618      	mov	r0, r3
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	461a      	mov	r2, r3
 800611c:	21a5      	movs	r1, #165	; 0xa5
 800611e:	f002 fb58 	bl	80087d2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800612c:	3b01      	subs	r3, #1
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f023 0307 	bic.w	r3, r3, #7
 800613a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <prvInitialiseNewTask+0x58>
        __asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	617b      	str	r3, [r7, #20]
    }
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01e      	beq.n	80061a0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	e012      	b.n	800618e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	7819      	ldrb	r1, [r3, #0]
 8006170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	3334      	adds	r3, #52	; 0x34
 8006178:	460a      	mov	r2, r1
 800617a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b09      	cmp	r3, #9
 8006192:	d9e9      	bls.n	8006168 <prvInitialiseNewTask+0x64>
 8006194:	e000      	b.n	8006198 <prvInitialiseNewTask+0x94>
            {
                break;
 8006196:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d90a      	bls.n	80061bc <prvInitialiseNewTask+0xb8>
        __asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	613b      	str	r3, [r7, #16]
    }
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d901      	bls.n	80061c6 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061c2:	2304      	movs	r3, #4
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	3304      	adds	r3, #4
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f8ba 	bl	8005350 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	3318      	adds	r3, #24
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff f8b5 	bl	8005350 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f1c3 0205 	rsb	r2, r3, #5
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	69b8      	ldr	r0, [r7, #24]
 8006202:	f001 fd93 	bl	8007d2c <pxPortInitialiseStack>
 8006206:	4602      	mov	r2, r0
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006218:	bf00      	nop
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006228:	f001 feae 	bl	8007f88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800622c:	4b40      	ldr	r3, [pc, #256]	; (8006330 <prvAddNewTaskToReadyList+0x110>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	4a3f      	ldr	r2, [pc, #252]	; (8006330 <prvAddNewTaskToReadyList+0x110>)
 8006234:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006236:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <prvAddNewTaskToReadyList+0x114>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800623e:	4a3d      	ldr	r2, [pc, #244]	; (8006334 <prvAddNewTaskToReadyList+0x114>)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006244:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <prvAddNewTaskToReadyList+0x110>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d110      	bne.n	800626e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800624c:	f000 fd48 	bl	8006ce0 <prvInitialiseTaskLists>
 8006250:	e00d      	b.n	800626e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006252:	4b39      	ldr	r3, [pc, #228]	; (8006338 <prvAddNewTaskToReadyList+0x118>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800625a:	4b36      	ldr	r3, [pc, #216]	; (8006334 <prvAddNewTaskToReadyList+0x114>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	429a      	cmp	r2, r3
 8006266:	d802      	bhi.n	800626e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006268:	4a32      	ldr	r2, [pc, #200]	; (8006334 <prvAddNewTaskToReadyList+0x114>)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800626e:	4b33      	ldr	r3, [pc, #204]	; (800633c <prvAddNewTaskToReadyList+0x11c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3301      	adds	r3, #1
 8006274:	4a31      	ldr	r2, [pc, #196]	; (800633c <prvAddNewTaskToReadyList+0x11c>)
 8006276:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006278:	4b30      	ldr	r3, [pc, #192]	; (800633c <prvAddNewTaskToReadyList+0x11c>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	2201      	movs	r2, #1
 8006286:	409a      	lsls	r2, r3
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <prvAddNewTaskToReadyList+0x120>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4313      	orrs	r3, r2
 800628e:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <prvAddNewTaskToReadyList+0x120>)
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006296:	492b      	ldr	r1, [pc, #172]	; (8006344 <prvAddNewTaskToReadyList+0x124>)
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3304      	adds	r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	609a      	str	r2, [r3, #8]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	3204      	adds	r2, #4
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <prvAddNewTaskToReadyList+0x124>)
 80062d6:	441a      	add	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	615a      	str	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4918      	ldr	r1, [pc, #96]	; (8006344 <prvAddNewTaskToReadyList+0x124>)
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	4814      	ldr	r0, [pc, #80]	; (8006344 <prvAddNewTaskToReadyList+0x124>)
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4403      	add	r3, r0
 80062fc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80062fe:	f001 fe73 	bl	8007fe8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <prvAddNewTaskToReadyList+0x118>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <prvAddNewTaskToReadyList+0x114>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	429a      	cmp	r2, r3
 8006316:	d207      	bcs.n	8006328 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <prvAddNewTaskToReadyList+0x128>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	200002fc 	.word	0x200002fc
 8006334:	20000224 	.word	0x20000224
 8006338:	20000308 	.word	0x20000308
 800633c:	20000318 	.word	0x20000318
 8006340:	20000304 	.word	0x20000304
 8006344:	20000228 	.word	0x20000228
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006352:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <vTaskStartScheduler+0x88>)
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	2300      	movs	r3, #0
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	2300      	movs	r3, #0
 800635c:	2282      	movs	r2, #130	; 0x82
 800635e:	491e      	ldr	r1, [pc, #120]	; (80063d8 <vTaskStartScheduler+0x8c>)
 8006360:	481e      	ldr	r0, [pc, #120]	; (80063dc <vTaskStartScheduler+0x90>)
 8006362:	f7ff fe89 	bl	8006078 <xTaskCreate>
 8006366:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d102      	bne.n	8006374 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800636e:	f001 f967 	bl	8007640 <xTimerCreateTimerTask>
 8006372:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d116      	bne.n	80063a8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60bb      	str	r3, [r7, #8]
    }
 800638c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <vTaskStartScheduler+0x94>)
 8006390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006394:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <vTaskStartScheduler+0x98>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800639c:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <vTaskStartScheduler+0x9c>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80063a2:	f001 fd4f 	bl	8007e44 <xPortStartScheduler>
 80063a6:	e00e      	b.n	80063c6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ae:	d10a      	bne.n	80063c6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	607b      	str	r3, [r7, #4]
    }
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <vTaskStartScheduler+0xa0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000320 	.word	0x20000320
 80063d8:	08009b40 	.word	0x08009b40
 80063dc:	08006cb1 	.word	0x08006cb1
 80063e0:	2000031c 	.word	0x2000031c
 80063e4:	20000308 	.word	0x20000308
 80063e8:	20000300 	.word	0x20000300
 80063ec:	20000020 	.word	0x20000020

080063f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <vTaskSuspendAll+0x18>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a03      	ldr	r2, [pc, #12]	; (8006408 <vTaskSuspendAll+0x18>)
 80063fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	20000324 	.word	0x20000324

0800640c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800641a:	4b71      	ldr	r3, [pc, #452]	; (80065e0 <xTaskResumeAll+0x1d4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <xTaskResumeAll+0x2c>
        __asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	607b      	str	r3, [r7, #4]
    }
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006438:	f001 fda6 	bl	8007f88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800643c:	4b68      	ldr	r3, [pc, #416]	; (80065e0 <xTaskResumeAll+0x1d4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3b01      	subs	r3, #1
 8006442:	4a67      	ldr	r2, [pc, #412]	; (80065e0 <xTaskResumeAll+0x1d4>)
 8006444:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006446:	4b66      	ldr	r3, [pc, #408]	; (80065e0 <xTaskResumeAll+0x1d4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 80c0 	bne.w	80065d0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006450:	4b64      	ldr	r3, [pc, #400]	; (80065e4 <xTaskResumeAll+0x1d8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80bb 	beq.w	80065d0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645a:	e08a      	b.n	8006572 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800645c:	4b62      	ldr	r3, [pc, #392]	; (80065e8 <xTaskResumeAll+0x1dc>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	6a12      	ldr	r2, [r2, #32]
 8006472:	609a      	str	r2, [r3, #8]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	69d2      	ldr	r2, [r2, #28]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3318      	adds	r3, #24
 8006486:	429a      	cmp	r2, r3
 8006488:	d103      	bne.n	8006492 <xTaskResumeAll+0x86>
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	2200      	movs	r2, #0
 8006496:	629a      	str	r2, [r3, #40]	; 0x28
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	1e5a      	subs	r2, r3, #1
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	68d2      	ldr	r2, [r2, #12]
 80064b0:	609a      	str	r2, [r3, #8]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	6892      	ldr	r2, [r2, #8]
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3304      	adds	r3, #4
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d103      	bne.n	80064d0 <xTaskResumeAll+0xc4>
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2200      	movs	r2, #0
 80064d4:	615a      	str	r2, [r3, #20]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	1e5a      	subs	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	2201      	movs	r2, #1
 80064e6:	409a      	lsls	r2, r3
 80064e8:	4b40      	ldr	r3, [pc, #256]	; (80065ec <xTaskResumeAll+0x1e0>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	4a3f      	ldr	r2, [pc, #252]	; (80065ec <xTaskResumeAll+0x1e0>)
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f6:	493e      	ldr	r1, [pc, #248]	; (80065f0 <xTaskResumeAll+0x1e4>)
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	3304      	adds	r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	609a      	str	r2, [r3, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	3204      	adds	r2, #4
 800651e:	605a      	str	r2, [r3, #4]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a2e      	ldr	r2, [pc, #184]	; (80065f0 <xTaskResumeAll+0x1e4>)
 8006536:	441a      	add	r2, r3
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	615a      	str	r2, [r3, #20]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	492b      	ldr	r1, [pc, #172]	; (80065f0 <xTaskResumeAll+0x1e4>)
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	4827      	ldr	r0, [pc, #156]	; (80065f0 <xTaskResumeAll+0x1e4>)
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4403      	add	r3, r0
 800655c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <xTaskResumeAll+0x1e8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <xTaskResumeAll+0x1ec>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <xTaskResumeAll+0x1dc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f47f af70 	bne.w	800645c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006582:	f000 fc2b 	bl	8006ddc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <xTaskResumeAll+0x1f0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006592:	f000 f853 	bl	800663c <xTaskIncrementTick>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800659c:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <xTaskResumeAll+0x1ec>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f1      	bne.n	8006592 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <xTaskResumeAll+0x1f0>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <xTaskResumeAll+0x1ec>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <xTaskResumeAll+0x1f4>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80065d0:	f001 fd0a 	bl	8007fe8 <vPortExitCritical>

    return xAlreadyYielded;
 80065d4:	69bb      	ldr	r3, [r7, #24]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000324 	.word	0x20000324
 80065e4:	200002fc 	.word	0x200002fc
 80065e8:	200002bc 	.word	0x200002bc
 80065ec:	20000304 	.word	0x20000304
 80065f0:	20000228 	.word	0x20000228
 80065f4:	20000224 	.word	0x20000224
 80065f8:	20000310 	.word	0x20000310
 80065fc:	2000030c 	.word	0x2000030c
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <xTaskGetTickCount+0x1c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006610:	687b      	ldr	r3, [r7, #4]
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000300 	.word	0x20000300

08006624 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006628:	4b03      	ldr	r3, [pc, #12]	; (8006638 <uxTaskGetNumberOfTasks+0x14>)
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200002fc 	.word	0x200002fc

0800663c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006646:	4b7d      	ldr	r3, [pc, #500]	; (800683c <xTaskIncrementTick+0x200>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 80ec 	bne.w	8006828 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006650:	4b7b      	ldr	r3, [pc, #492]	; (8006840 <xTaskIncrementTick+0x204>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006658:	4a79      	ldr	r2, [pc, #484]	; (8006840 <xTaskIncrementTick+0x204>)
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d120      	bne.n	80066a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006664:	4b77      	ldr	r3, [pc, #476]	; (8006844 <xTaskIncrementTick+0x208>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <xTaskIncrementTick+0x48>
        __asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
    }
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <xTaskIncrementTick+0x46>
 8006684:	4b6f      	ldr	r3, [pc, #444]	; (8006844 <xTaskIncrementTick+0x208>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	4b6f      	ldr	r3, [pc, #444]	; (8006848 <xTaskIncrementTick+0x20c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a6d      	ldr	r2, [pc, #436]	; (8006844 <xTaskIncrementTick+0x208>)
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	4a6d      	ldr	r2, [pc, #436]	; (8006848 <xTaskIncrementTick+0x20c>)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4b6c      	ldr	r3, [pc, #432]	; (800684c <xTaskIncrementTick+0x210>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	4a6b      	ldr	r2, [pc, #428]	; (800684c <xTaskIncrementTick+0x210>)
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	f000 fb9b 	bl	8006ddc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80066a6:	4b6a      	ldr	r3, [pc, #424]	; (8006850 <xTaskIncrementTick+0x214>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	f0c0 80a6 	bcc.w	80067fe <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b2:	4b64      	ldr	r3, [pc, #400]	; (8006844 <xTaskIncrementTick+0x208>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	4b64      	ldr	r3, [pc, #400]	; (8006850 <xTaskIncrementTick+0x214>)
 80066be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c2:	601a      	str	r2, [r3, #0]
                    break;
 80066c4:	e09b      	b.n	80067fe <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c6:	4b5f      	ldr	r3, [pc, #380]	; (8006844 <xTaskIncrementTick+0x208>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d203      	bcs.n	80066e6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80066de:	4a5c      	ldr	r2, [pc, #368]	; (8006850 <xTaskIncrementTick+0x214>)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80066e4:	e08b      	b.n	80067fe <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	68d2      	ldr	r2, [r2, #12]
 80066f4:	609a      	str	r2, [r3, #8]
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	6892      	ldr	r2, [r2, #8]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	3304      	adds	r3, #4
 8006708:	429a      	cmp	r2, r3
 800670a:	d103      	bne.n	8006714 <xTaskIncrementTick+0xd8>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2200      	movs	r2, #0
 8006718:	615a      	str	r2, [r3, #20]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1e5a      	subs	r2, r3, #1
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01e      	beq.n	800676a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	6a12      	ldr	r2, [r2, #32]
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	69d2      	ldr	r2, [r2, #28]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	3318      	adds	r3, #24
 800674e:	429a      	cmp	r2, r3
 8006750:	d103      	bne.n	800675a <xTaskIncrementTick+0x11e>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	6a1a      	ldr	r2, [r3, #32]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2200      	movs	r2, #0
 800675e:	629a      	str	r2, [r3, #40]	; 0x28
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2201      	movs	r2, #1
 8006770:	409a      	lsls	r2, r3
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <xTaskIncrementTick+0x218>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	4a36      	ldr	r2, [pc, #216]	; (8006854 <xTaskIncrementTick+0x218>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4935      	ldr	r1, [pc, #212]	; (8006858 <xTaskIncrementTick+0x21c>)
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3304      	adds	r3, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	3204      	adds	r2, #4
 80067a8:	605a      	str	r2, [r3, #4]
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	609a      	str	r2, [r3, #8]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a26      	ldr	r2, [pc, #152]	; (8006858 <xTaskIncrementTick+0x21c>)
 80067c0:	441a      	add	r2, r3
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	615a      	str	r2, [r3, #20]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ca:	4923      	ldr	r1, [pc, #140]	; (8006858 <xTaskIncrementTick+0x21c>)
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	481f      	ldr	r0, [pc, #124]	; (8006858 <xTaskIncrementTick+0x21c>)
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4403      	add	r3, r0
 80067e6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <xTaskIncrementTick+0x220>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	429a      	cmp	r2, r3
 80067f4:	f67f af5d 	bls.w	80066b2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fc:	e759      	b.n	80066b2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067fe:	4b17      	ldr	r3, [pc, #92]	; (800685c <xTaskIncrementTick+0x220>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4914      	ldr	r1, [pc, #80]	; (8006858 <xTaskIncrementTick+0x21c>)
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d901      	bls.n	800681a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800681a:	4b11      	ldr	r3, [pc, #68]	; (8006860 <xTaskIncrementTick+0x224>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
 8006826:	e004      	b.n	8006832 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006828:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <xTaskIncrementTick+0x228>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3301      	adds	r3, #1
 800682e:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <xTaskIncrementTick+0x228>)
 8006830:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006834:	4618      	mov	r0, r3
 8006836:	3728      	adds	r7, #40	; 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000324 	.word	0x20000324
 8006840:	20000300 	.word	0x20000300
 8006844:	200002b4 	.word	0x200002b4
 8006848:	200002b8 	.word	0x200002b8
 800684c:	20000314 	.word	0x20000314
 8006850:	2000031c 	.word	0x2000031c
 8006854:	20000304 	.word	0x20000304
 8006858:	20000228 	.word	0x20000228
 800685c:	20000224 	.word	0x20000224
 8006860:	20000310 	.word	0x20000310
 8006864:	2000030c 	.word	0x2000030c

08006868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800686e:	4b27      	ldr	r3, [pc, #156]	; (800690c <vTaskSwitchContext+0xa4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006876:	4b26      	ldr	r3, [pc, #152]	; (8006910 <vTaskSwitchContext+0xa8>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800687c:	e03f      	b.n	80068fe <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <vTaskSwitchContext+0xa8>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <vTaskSwitchContext+0xac>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	fab3 f383 	clz	r3, r3
 8006890:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	f1c3 031f 	rsb	r3, r3, #31
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	491f      	ldr	r1, [pc, #124]	; (8006918 <vTaskSwitchContext+0xb0>)
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
    }
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <vTaskSwitchContext+0x5a>
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4a12      	ldr	r2, [pc, #72]	; (8006918 <vTaskSwitchContext+0xb0>)
 80068d0:	4413      	add	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3308      	adds	r3, #8
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d104      	bne.n	80068f4 <vTaskSwitchContext+0x8c>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	4a08      	ldr	r2, [pc, #32]	; (800691c <vTaskSwitchContext+0xb4>)
 80068fc:	6013      	str	r3, [r2, #0]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000324 	.word	0x20000324
 8006910:	20000310 	.word	0x20000310
 8006914:	20000304 	.word	0x20000304
 8006918:	20000228 	.word	0x20000228
 800691c:	20000224 	.word	0x20000224

08006920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
    }
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <vTaskPlaceOnEventList+0x44>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3318      	adds	r3, #24
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fe fd2f 	bl	80053b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006954:	2101      	movs	r1, #1
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f000 fdf2 	bl	8007540 <prvAddCurrentTaskToDelayedList>
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000224 	.word	0x20000224

08006968 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	613b      	str	r3, [r7, #16]
    }
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	61da      	str	r2, [r3, #28]
 800699e:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	6892      	ldr	r2, [r2, #8]
 80069a6:	621a      	str	r2, [r3, #32]
 80069a8:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	3218      	adds	r2, #24
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f103 0218 	add.w	r2, r3, #24
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069dc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	68b8      	ldr	r0, [r7, #8]
 80069e2:	f000 fdad 	bl	8007540 <prvAddCurrentTaskToDelayedList>
    }
 80069e6:	bf00      	nop
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000224 	.word	0x20000224

080069f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b08b      	sub	sp, #44	; 0x2c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60fb      	str	r3, [r7, #12]
    }
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	6a3a      	ldr	r2, [r7, #32]
 8006a2c:	6a12      	ldr	r2, [r2, #32]
 8006a2e:	609a      	str	r2, [r3, #8]
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	6a3a      	ldr	r2, [r7, #32]
 8006a36:	69d2      	ldr	r2, [r2, #28]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	3318      	adds	r3, #24
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d103      	bne.n	8006a4e <xTaskRemoveFromEventList+0x5a>
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2200      	movs	r2, #0
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	1e5a      	subs	r2, r3, #1
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5e:	4b4a      	ldr	r3, [pc, #296]	; (8006b88 <xTaskRemoveFromEventList+0x194>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d15e      	bne.n	8006b24 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	68d2      	ldr	r2, [r2, #12]
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	6a3a      	ldr	r2, [r7, #32]
 8006a7c:	6892      	ldr	r2, [r2, #8]
 8006a7e:	605a      	str	r2, [r3, #4]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	3304      	adds	r3, #4
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d103      	bne.n	8006a94 <xTaskRemoveFromEventList+0xa0>
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	605a      	str	r2, [r3, #4]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2200      	movs	r2, #0
 8006a98:	615a      	str	r2, [r3, #20]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	1e5a      	subs	r2, r3, #1
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	409a      	lsls	r2, r3
 8006aac:	4b37      	ldr	r3, [pc, #220]	; (8006b8c <xTaskRemoveFromEventList+0x198>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	4a36      	ldr	r2, [pc, #216]	; (8006b8c <xTaskRemoveFromEventList+0x198>)
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	4935      	ldr	r1, [pc, #212]	; (8006b90 <xTaskRemoveFromEventList+0x19c>)
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	609a      	str	r2, [r3, #8]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	3204      	adds	r2, #4
 8006ae2:	605a      	str	r2, [r3, #4]
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	609a      	str	r2, [r3, #8]
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <xTaskRemoveFromEventList+0x19c>)
 8006afa:	441a      	add	r2, r3
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	615a      	str	r2, [r3, #20]
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	4922      	ldr	r1, [pc, #136]	; (8006b90 <xTaskRemoveFromEventList+0x19c>)
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	481e      	ldr	r0, [pc, #120]	; (8006b90 <xTaskRemoveFromEventList+0x19c>)
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4403      	add	r3, r0
 8006b20:	6019      	str	r1, [r3, #0]
 8006b22:	e01b      	b.n	8006b5c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <xTaskRemoveFromEventList+0x1a0>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	61da      	str	r2, [r3, #28]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	621a      	str	r2, [r3, #32]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	3218      	adds	r2, #24
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f103 0218 	add.w	r2, r3, #24
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <xTaskRemoveFromEventList+0x1a0>)
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <xTaskRemoveFromEventList+0x1a0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a0e      	ldr	r2, [pc, #56]	; (8006b94 <xTaskRemoveFromEventList+0x1a0>)
 8006b5a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b60:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <xTaskRemoveFromEventList+0x1a4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d905      	bls.n	8006b76 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <xTaskRemoveFromEventList+0x1a8>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	e001      	b.n	8006b7a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	372c      	adds	r7, #44	; 0x2c
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	20000324 	.word	0x20000324
 8006b8c:	20000304 	.word	0x20000304
 8006b90:	20000228 	.word	0x20000228
 8006b94:	200002bc 	.word	0x200002bc
 8006b98:	20000224 	.word	0x20000224
 8006b9c:	20000310 	.word	0x20000310

08006ba0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <vTaskInternalSetTimeOutState+0x24>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <vTaskInternalSetTimeOutState+0x28>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	605a      	str	r2, [r3, #4]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	20000314 	.word	0x20000314
 8006bc8:	20000300 	.word	0x20000300

08006bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	613b      	str	r3, [r7, #16]
    }
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60fb      	str	r3, [r7, #12]
    }
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006c0e:	f001 f9bb 	bl	8007f88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006c12:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <xTaskCheckForTimeOut+0xc4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c2a:	d102      	bne.n	8006c32 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	e026      	b.n	8006c80 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <xTaskCheckForTimeOut+0xc8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d00a      	beq.n	8006c54 <xTaskCheckForTimeOut+0x88>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d305      	bcc.n	8006c54 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e015      	b.n	8006c80 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d20b      	bcs.n	8006c76 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff ff98 	bl	8006ba0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]
 8006c74:	e004      	b.n	8006c80 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006c80:	f001 f9b2 	bl	8007fe8 <vPortExitCritical>

    return xReturn;
 8006c84:	69fb      	ldr	r3, [r7, #28]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000300 	.word	0x20000300
 8006c94:	20000314 	.word	0x20000314

08006c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006c9c:	4b03      	ldr	r3, [pc, #12]	; (8006cac <vTaskMissedYield+0x14>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20000310 	.word	0x20000310

08006cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006cb8:	f000 f852 	bl	8006d60 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <prvIdleTask+0x28>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d9f9      	bls.n	8006cb8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <prvIdleTask+0x2c>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006cd4:	e7f0      	b.n	8006cb8 <prvIdleTask+0x8>
 8006cd6:	bf00      	nop
 8006cd8:	20000228 	.word	0x20000228
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	e00c      	b.n	8006d06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <prvInitialiseTaskLists+0x60>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fb08 	bl	8005310 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d9ef      	bls.n	8006cec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006d0c:	480d      	ldr	r0, [pc, #52]	; (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d0e:	f7fe faff 	bl	8005310 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006d12:	480d      	ldr	r0, [pc, #52]	; (8006d48 <prvInitialiseTaskLists+0x68>)
 8006d14:	f7fe fafc 	bl	8005310 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006d18:	480c      	ldr	r0, [pc, #48]	; (8006d4c <prvInitialiseTaskLists+0x6c>)
 8006d1a:	f7fe faf9 	bl	8005310 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006d1e:	480c      	ldr	r0, [pc, #48]	; (8006d50 <prvInitialiseTaskLists+0x70>)
 8006d20:	f7fe faf6 	bl	8005310 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006d24:	480b      	ldr	r0, [pc, #44]	; (8006d54 <prvInitialiseTaskLists+0x74>)
 8006d26:	f7fe faf3 	bl	8005310 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <prvInitialiseTaskLists+0x78>)
 8006d2c:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <prvInitialiseTaskLists+0x7c>)
 8006d32:	4a05      	ldr	r2, [pc, #20]	; (8006d48 <prvInitialiseTaskLists+0x68>)
 8006d34:	601a      	str	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000228 	.word	0x20000228
 8006d44:	2000028c 	.word	0x2000028c
 8006d48:	200002a0 	.word	0x200002a0
 8006d4c:	200002bc 	.word	0x200002bc
 8006d50:	200002d0 	.word	0x200002d0
 8006d54:	200002e8 	.word	0x200002e8
 8006d58:	200002b4 	.word	0x200002b4
 8006d5c:	200002b8 	.word	0x200002b8

08006d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d66:	e019      	b.n	8006d9c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006d68:	f001 f90e 	bl	8007f88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <prvCheckTasksWaitingTermination+0x50>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fb53 	bl	8005424 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <prvCheckTasksWaitingTermination+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	4a0b      	ldr	r2, [pc, #44]	; (8006db4 <prvCheckTasksWaitingTermination+0x54>)
 8006d86:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006d88:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d90:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006d92:	f001 f929 	bl	8007fe8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f810 	bl	8006dbc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e1      	bne.n	8006d68 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	200002d0 	.word	0x200002d0
 8006db4:	200002fc 	.word	0x200002fc
 8006db8:	200002e4 	.word	0x200002e4

08006dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 fab9 	bl	8008340 <vPortFree>
            vPortFree( pxTCB );
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fab6 	bl	8008340 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvResetNextTaskUnblockTime+0x30>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <prvResetNextTaskUnblockTime+0x34>)
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006df0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006df2:	e005      	b.n	8006e00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <prvResetNextTaskUnblockTime+0x30>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <prvResetNextTaskUnblockTime+0x34>)
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	200002b4 	.word	0x200002b4
 8006e10:	2000031c 	.word	0x2000031c

08006e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <xTaskGetSchedulerState+0x34>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006e22:	2301      	movs	r3, #1
 8006e24:	607b      	str	r3, [r7, #4]
 8006e26:	e008      	b.n	8006e3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <xTaskGetSchedulerState+0x38>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006e30:	2302      	movs	r3, #2
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	e001      	b.n	8006e3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006e3a:	687b      	ldr	r3, [r7, #4]
    }
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20000308 	.word	0x20000308
 8006e4c:	20000324 	.word	0x20000324

08006e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d063      	beq.n	8006f2e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006e66:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <xTaskPriorityDisinherit+0xe8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d00a      	beq.n	8006e86 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
    }
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
    }
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d039      	beq.n	8006f2e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d135      	bne.n	8006f2e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe faac 	bl	8005424 <uxListRemove>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	43da      	mvns	r2, r3
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <xTaskPriorityDisinherit+0xec>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <xTaskPriorityDisinherit+0xec>)
 8006ee6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	f1c3 0205 	rsb	r2, r3, #5
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	2201      	movs	r2, #1
 8006f02:	409a      	lsls	r2, r3
 8006f04:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <xTaskPriorityDisinherit+0xec>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	4a0c      	ldr	r2, [pc, #48]	; (8006f3c <xTaskPriorityDisinherit+0xec>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <xTaskPriorityDisinherit+0xf0>)
 8006f1c:	441a      	add	r2, r3
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f7fe fa20 	bl	800536a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006f2e:	697b      	ldr	r3, [r7, #20]
    }
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000224 	.word	0x20000224
 8006f3c:	20000304 	.word	0x20000304
 8006f40:	20000228 	.word	0x20000228

08006f44 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	613b      	str	r3, [r7, #16]
    }
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006f6e:	f001 f80b 	bl	8007f88 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006f72:	4b32      	ldr	r3, [pc, #200]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	3354      	adds	r3, #84	; 0x54
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d022      	beq.n	8006fca <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006f84:	4b2d      	ldr	r3, [pc, #180]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	3214      	adds	r2, #20
 8006f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	43d2      	mvns	r2, r2
 8006f94:	4011      	ands	r1, r2
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	3214      	adds	r2, #20
 8006f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3354      	adds	r3, #84	; 0x54
 8006fa8:	2201      	movs	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00b      	beq.n	8006fca <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	6a38      	ldr	r0, [r7, #32]
 8006fb6:	f000 fac3 	bl	8007540 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006fba:	4b21      	ldr	r3, [pc, #132]	; (8007040 <xTaskGenericNotifyWait+0xfc>)
 8006fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006fca:	f001 f80d 	bl	8007fe8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006fce:	f000 ffdb 	bl	8007f88 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006fd8:	4b18      	ldr	r3, [pc, #96]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	3214      	adds	r2, #20
 8006fe0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	3354      	adds	r3, #84	; 0x54
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d002      	beq.n	8007000 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e00e      	b.n	800701e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8007000:	4b0e      	ldr	r3, [pc, #56]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	3214      	adds	r2, #20
 8007008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	43d2      	mvns	r2, r2
 8007010:	4011      	ands	r1, r2
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	3214      	adds	r2, #20
 8007016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <xTaskGenericNotifyWait+0xf8>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	3354      	adds	r3, #84	; 0x54
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800702c:	f000 ffdc 	bl	8007fe8 <vPortExitCritical>

        return xReturn;
 8007030:	697b      	ldr	r3, [r7, #20]
    }
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000224 	.word	0x20000224
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007044:	b580      	push	{r7, lr}
 8007046:	b08e      	sub	sp, #56	; 0x38
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8007052:	2301      	movs	r3, #1
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <xTaskGenericNotify+0x2e>
        __asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
    }
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTaskGenericNotify+0x4a>
        __asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	61fb      	str	r3, [r7, #28]
    }
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8007092:	f000 ff79 	bl	8007f88 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d006      	beq.n	80070aa <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	3214      	adds	r2, #20
 80070a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80070aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4413      	add	r3, r2
 80070b0:	3354      	adds	r3, #84	; 0x54
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80070b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	3354      	adds	r3, #84	; 0x54
 80070c0:	2202      	movs	r2, #2
 80070c2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d83b      	bhi.n	8007142 <xTaskGenericNotify+0xfe>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <xTaskGenericNotify+0x8c>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	08007161 	.word	0x08007161
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007119 	.word	0x08007119
 80070e0:	08007127 	.word	0x08007127
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	3214      	adds	r2, #20
 80070ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	ea42 0103 	orr.w	r1, r2, r3
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	3214      	adds	r2, #20
 80070fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070fe:	e032      	b.n	8007166 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	3214      	adds	r2, #20
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	1c59      	adds	r1, r3, #1
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	3214      	adds	r2, #20
 8007112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007116:	e026      	b.n	8007166 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	3214      	adds	r2, #20
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007124:	e01f      	b.n	8007166 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800712a:	2b02      	cmp	r3, #2
 800712c:	d006      	beq.n	800713c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	3214      	adds	r2, #20
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800713a:	e014      	b.n	8007166 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800713c:	2300      	movs	r3, #0
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8007140:	e011      	b.n	8007166 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007142:	4b4c      	ldr	r3, [pc, #304]	; (8007274 <xTaskGenericNotify+0x230>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00c      	beq.n	8007164 <xTaskGenericNotify+0x120>
        __asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	61bb      	str	r3, [r7, #24]
    }
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <xTaskGenericNotify+0x11a>
                    break;
 8007160:	bf00      	nop
 8007162:	e000      	b.n	8007166 <xTaskGenericNotify+0x122>

                    break;
 8007164:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800716a:	2b01      	cmp	r3, #1
 800716c:	d17b      	bne.n	8007266 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717a:	68d2      	ldr	r2, [r2, #12]
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007184:	6892      	ldr	r2, [r2, #8]
 8007186:	605a      	str	r2, [r3, #4]
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	3304      	adds	r3, #4
 8007190:	429a      	cmp	r2, r3
 8007192:	d103      	bne.n	800719c <xTaskGenericNotify+0x158>
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	2200      	movs	r2, #0
 80071a0:	615a      	str	r2, [r3, #20]
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	2201      	movs	r2, #1
 80071b2:	409a      	lsls	r2, r3
 80071b4:	4b30      	ldr	r3, [pc, #192]	; (8007278 <xTaskGenericNotify+0x234>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	4a2f      	ldr	r2, [pc, #188]	; (8007278 <xTaskGenericNotify+0x234>)
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	492e      	ldr	r1, [pc, #184]	; (800727c <xTaskGenericNotify+0x238>)
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	3304      	adds	r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	609a      	str	r2, [r3, #8]
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e8:	3204      	adds	r2, #4
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	609a      	str	r2, [r3, #8]
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <xTaskGenericNotify+0x238>)
 8007202:	441a      	add	r2, r3
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	615a      	str	r2, [r3, #20]
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	491b      	ldr	r1, [pc, #108]	; (800727c <xTaskGenericNotify+0x238>)
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	1c59      	adds	r1, r3, #1
 800721c:	4817      	ldr	r0, [pc, #92]	; (800727c <xTaskGenericNotify+0x238>)
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4403      	add	r3, r0
 8007228:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <xTaskGenericNotify+0x204>
        __asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	617b      	str	r3, [r7, #20]
    }
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <xTaskGenericNotify+0x23c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	429a      	cmp	r2, r3
 8007254:	d907      	bls.n	8007266 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <xTaskGenericNotify+0x240>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007266:	f000 febf 	bl	8007fe8 <vPortExitCritical>

        return xReturn;
 800726a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800726c:	4618      	mov	r0, r3
 800726e:	3738      	adds	r7, #56	; 0x38
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000300 	.word	0x20000300
 8007278:	20000304 	.word	0x20000304
 800727c:	20000228 	.word	0x20000228
 8007280:	20000224 	.word	0x20000224
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007288:	b580      	push	{r7, lr}
 800728a:	b092      	sub	sp, #72	; 0x48
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007296:	2301      	movs	r3, #1
 8007298:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072d2:	f000 ff3b 	bl	800814c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 80072da:	f3ef 8211 	mrs	r2, BASEPRI
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	623a      	str	r2, [r7, #32]
 80072f0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80072f2:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80072f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d006      	beq.n	800730a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80072fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	3214      	adds	r2, #20
 8007302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007308:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800730a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4413      	add	r3, r2
 8007310:	3354      	adds	r3, #84	; 0x54
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4413      	add	r3, r2
 800731e:	3354      	adds	r3, #84	; 0x54
 8007320:	2202      	movs	r2, #2
 8007322:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d83b      	bhi.n	80073a2 <xTaskGenericNotifyFromISR+0x11a>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <xTaskGenericNotifyFromISR+0xa8>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	080073c1 	.word	0x080073c1
 8007334:	08007345 	.word	0x08007345
 8007338:	08007361 	.word	0x08007361
 800733c:	08007379 	.word	0x08007379
 8007340:	08007387 	.word	0x08007387
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	3214      	adds	r2, #20
 800734a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	ea42 0103 	orr.w	r1, r2, r3
 8007354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	3214      	adds	r2, #20
 800735a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800735e:	e032      	b.n	80073c6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	3214      	adds	r2, #20
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	1c59      	adds	r1, r3, #1
 800736c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	3214      	adds	r2, #20
 8007372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007376:	e026      	b.n	80073c6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	3214      	adds	r2, #20
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007384:	e01f      	b.n	80073c6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007386:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800738a:	2b02      	cmp	r3, #2
 800738c:	d006      	beq.n	800739c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800738e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	3214      	adds	r2, #20
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800739a:	e014      	b.n	80073c6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800739c:	2300      	movs	r3, #0
 800739e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80073a0:	e011      	b.n	80073c6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80073a2:	4b60      	ldr	r3, [pc, #384]	; (8007524 <xTaskGenericNotifyFromISR+0x29c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00c      	beq.n	80073c4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	61bb      	str	r3, [r7, #24]
    }
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xTaskGenericNotifyFromISR+0x136>
                    break;
 80073c0:	bf00      	nop
 80073c2:	e000      	b.n	80073c6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80073c4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	f040 809e 	bne.w	800750c <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	617b      	str	r3, [r7, #20]
    }
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ee:	4b4e      	ldr	r3, [pc, #312]	; (8007528 <xTaskGenericNotifyFromISR+0x2a0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d15e      	bne.n	80074b4 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80073f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30
 80073fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007402:	68d2      	ldr	r2, [r2, #12]
 8007404:	609a      	str	r2, [r3, #8]
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800740c:	6892      	ldr	r2, [r2, #8]
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007416:	3304      	adds	r3, #4
 8007418:	429a      	cmp	r2, r3
 800741a:	d103      	bne.n	8007424 <xTaskGenericNotifyFromISR+0x19c>
 800741c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	605a      	str	r2, [r3, #4]
 8007424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007426:	2200      	movs	r2, #0
 8007428:	615a      	str	r2, [r3, #20]
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	1e5a      	subs	r2, r3, #1
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	2201      	movs	r2, #1
 800743a:	409a      	lsls	r2, r3
 800743c:	4b3b      	ldr	r3, [pc, #236]	; (800752c <xTaskGenericNotifyFromISR+0x2a4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4313      	orrs	r3, r2
 8007442:	4a3a      	ldr	r2, [pc, #232]	; (800752c <xTaskGenericNotifyFromISR+0x2a4>)
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744a:	4939      	ldr	r1, [pc, #228]	; (8007530 <xTaskGenericNotifyFromISR+0x2a8>)
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	3304      	adds	r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800745c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007460:	609a      	str	r2, [r3, #8]
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007470:	3204      	adds	r2, #4
 8007472:	605a      	str	r2, [r3, #4]
 8007474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007476:	1d1a      	adds	r2, r3, #4
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a29      	ldr	r2, [pc, #164]	; (8007530 <xTaskGenericNotifyFromISR+0x2a8>)
 800748a:	441a      	add	r2, r3
 800748c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748e:	615a      	str	r2, [r3, #20]
 8007490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	4926      	ldr	r1, [pc, #152]	; (8007530 <xTaskGenericNotifyFromISR+0x2a8>)
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	1c59      	adds	r1, r3, #1
 80074a4:	4822      	ldr	r0, [pc, #136]	; (8007530 <xTaskGenericNotifyFromISR+0x2a8>)
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4403      	add	r3, r0
 80074b0:	6019      	str	r1, [r3, #0]
 80074b2:	e01b      	b.n	80074ec <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80074b4:	4b1f      	ldr	r3, [pc, #124]	; (8007534 <xTaskGenericNotifyFromISR+0x2ac>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074be:	61da      	str	r2, [r3, #28]
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c6:	621a      	str	r2, [r3, #32]
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ce:	3218      	adds	r2, #24
 80074d0:	605a      	str	r2, [r3, #4]
 80074d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d4:	f103 0218 	add.w	r2, r3, #24
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	609a      	str	r2, [r3, #8]
 80074dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074de:	4a15      	ldr	r2, [pc, #84]	; (8007534 <xTaskGenericNotifyFromISR+0x2ac>)
 80074e0:	629a      	str	r2, [r3, #40]	; 0x28
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <xTaskGenericNotifyFromISR+0x2ac>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3301      	adds	r3, #1
 80074e8:	4a12      	ldr	r2, [pc, #72]	; (8007534 <xTaskGenericNotifyFromISR+0x2ac>)
 80074ea:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	4b11      	ldr	r3, [pc, #68]	; (8007538 <xTaskGenericNotifyFromISR+0x2b0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d908      	bls.n	800750c <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80074fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007502:	2201      	movs	r2, #1
 8007504:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <xTaskGenericNotifyFromISR+0x2b4>)
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f383 8811 	msr	BASEPRI, r3
    }
 8007516:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800751a:	4618      	mov	r0, r3
 800751c:	3748      	adds	r7, #72	; 0x48
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000300 	.word	0x20000300
 8007528:	20000324 	.word	0x20000324
 800752c:	20000304 	.word	0x20000304
 8007530:	20000228 	.word	0x20000228
 8007534:	200002bc 	.word	0x200002bc
 8007538:	20000224 	.word	0x20000224
 800753c:	20000310 	.word	0x20000310

08007540 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800754a:	4b36      	ldr	r3, [pc, #216]	; (8007624 <prvAddCurrentTaskToDelayedList+0xe4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3304      	adds	r3, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd ff64 	bl	8005424 <uxListRemove>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007562:	4b31      	ldr	r3, [pc, #196]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	2201      	movs	r2, #1
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43da      	mvns	r2, r3
 8007570:	4b2e      	ldr	r3, [pc, #184]	; (800762c <prvAddCurrentTaskToDelayedList+0xec>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4013      	ands	r3, r2
 8007576:	4a2d      	ldr	r2, [pc, #180]	; (800762c <prvAddCurrentTaskToDelayedList+0xec>)
 8007578:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007580:	d124      	bne.n	80075cc <prvAddCurrentTaskToDelayedList+0x8c>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d021      	beq.n	80075cc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007588:	4b29      	ldr	r3, [pc, #164]	; (8007630 <prvAddCurrentTaskToDelayedList+0xf0>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	4b26      	ldr	r3, [pc, #152]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	609a      	str	r2, [r3, #8]
 8007596:	4b24      	ldr	r3, [pc, #144]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	6892      	ldr	r2, [r2, #8]
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	4b21      	ldr	r3, [pc, #132]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	3204      	adds	r2, #4
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	4b1e      	ldr	r3, [pc, #120]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	1d1a      	adds	r2, r3, #4
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	4b1c      	ldr	r3, [pc, #112]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1d      	ldr	r2, [pc, #116]	; (8007630 <prvAddCurrentTaskToDelayedList+0xf0>)
 80075bc:	615a      	str	r2, [r3, #20]
 80075be:	4b1c      	ldr	r3, [pc, #112]	; (8007630 <prvAddCurrentTaskToDelayedList+0xf0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <prvAddCurrentTaskToDelayedList+0xf0>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80075ca:	e026      	b.n	800761a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075d4:	4b14      	ldr	r3, [pc, #80]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d209      	bcs.n	80075f8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075e4:	4b13      	ldr	r3, [pc, #76]	; (8007634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f7fd fede 	bl	80053b2 <vListInsert>
}
 80075f6:	e010      	b.n	800761a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <prvAddCurrentTaskToDelayedList+0xf8>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3304      	adds	r3, #4
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f7fd fed4 	bl	80053b2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <prvAddCurrentTaskToDelayedList+0xfc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	429a      	cmp	r2, r3
 8007612:	d202      	bcs.n	800761a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007614:	4a09      	ldr	r2, [pc, #36]	; (800763c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6013      	str	r3, [r2, #0]
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000300 	.word	0x20000300
 8007628:	20000224 	.word	0x20000224
 800762c:	20000304 	.word	0x20000304
 8007630:	200002e8 	.word	0x200002e8
 8007634:	200002b8 	.word	0x200002b8
 8007638:	200002b4 	.word	0x200002b4
 800763c:	2000031c 	.word	0x2000031c

08007640 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007646:	2300      	movs	r3, #0
 8007648:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800764a:	f000 faef 	bl	8007c2c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <xTimerCreateTimerTask+0x54>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007656:	4b10      	ldr	r3, [pc, #64]	; (8007698 <xTimerCreateTimerTask+0x58>)
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	2302      	movs	r3, #2
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2300      	movs	r3, #0
 8007660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007664:	490d      	ldr	r1, [pc, #52]	; (800769c <xTimerCreateTimerTask+0x5c>)
 8007666:	480e      	ldr	r0, [pc, #56]	; (80076a0 <xTimerCreateTimerTask+0x60>)
 8007668:	f7fe fd06 	bl	8006078 <xTaskCreate>
 800766c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	603b      	str	r3, [r7, #0]
    }
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800768a:	687b      	ldr	r3, [r7, #4]
    }
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000358 	.word	0x20000358
 8007698:	2000035c 	.word	0x2000035c
 800769c:	08009b48 	.word	0x08009b48
 80076a0:	08007899 	.word	0x08007899

080076a4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80076b2:	202c      	movs	r0, #44	; 0x2c
 80076b4:	f000 fd8a 	bl	80081cc <pvPortMalloc>
 80076b8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00d      	beq.n	80076dc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f805 	bl	80076e6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80076dc:	697b      	ldr	r3, [r7, #20]
        }
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	617b      	str	r3, [r7, #20]
    }
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8007710:	f000 fa8c 	bl	8007c2c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	6a3a      	ldr	r2, [r7, #32]
 800772a:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	3304      	adds	r3, #4
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd fe0d 	bl	8005350 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007742:	f043 0304 	orr.w	r3, r3, #4
 8007746:	b2da      	uxtb	r2, r3
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007766:	2300      	movs	r3, #0
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	623b      	str	r3, [r7, #32]
    }
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <xTimerGenericCommand+0x98>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d02a      	beq.n	80077e4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b05      	cmp	r3, #5
 800779e:	dc18      	bgt.n	80077d2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077a0:	f7ff fb38 	bl	8006e14 <xTaskGetSchedulerState>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d109      	bne.n	80077be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077aa:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	f107 0114 	add.w	r1, r7, #20
 80077b2:	2300      	movs	r3, #0
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	f7fd ff61 	bl	800567c <xQueueGenericSend>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24
 80077bc:	e012      	b.n	80077e4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	f107 0114 	add.w	r1, r7, #20
 80077c6:	2300      	movs	r3, #0
 80077c8:	2200      	movs	r2, #0
 80077ca:	f7fd ff57 	bl	800567c <xQueueGenericSend>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24
 80077d0:	e008      	b.n	80077e4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <xTimerGenericCommand+0x98>)
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f107 0114 	add.w	r1, r7, #20
 80077da:	2300      	movs	r3, #0
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	f7fe f84b 	bl	8005878 <xQueueGenericSendFromISR>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80077e6:	4618      	mov	r0, r3
 80077e8:	3728      	adds	r7, #40	; 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000358 	.word	0x20000358

080077f4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007800:	e008      	b.n	8007814 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	4413      	add	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	18d1      	adds	r1, r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f8dd 	bl	80079e0 <prvInsertTimerInActiveList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1ea      	bne.n	8007802 <prvReloadTimer+0xe>
        }
    }
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007842:	4b14      	ldr	r3, [pc, #80]	; (8007894 <prvProcessExpiredTimer+0x5c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fde7 	bl	8005424 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ffc3 	bl	80077f4 <prvReloadTimer>
 800786e:	e008      	b.n	8007882 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	4798      	blx	r3
    }
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000350 	.word	0x20000350

08007898 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078a0:	f107 0308 	add.w	r3, r7, #8
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 f857 	bl	8007958 <prvGetNextExpireTime>
 80078aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4619      	mov	r1, r3
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f803 	bl	80078bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80078b6:	f000 f8d5 	bl	8007a64 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ba:	e7f1      	b.n	80078a0 <prvTimerTask+0x8>

080078bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80078c6:	f7fe fd93 	bl	80063f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078ca:	f107 0308 	add.w	r3, r7, #8
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f866 	bl	80079a0 <prvSampleTimeNow>
 80078d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d130      	bne.n	800793e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <prvProcessTimerOrBlockTask+0x3c>
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d806      	bhi.n	80078f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80078ea:	f7fe fd8f 	bl	800640c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ffa1 	bl	8007838 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80078f6:	e024      	b.n	8007942 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <prvProcessTimerOrBlockTask+0x90>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <prvProcessTimerOrBlockTask+0x50>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <prvProcessTimerOrBlockTask+0x52>
 800790c:	2300      	movs	r3, #0
 800790e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <prvProcessTimerOrBlockTask+0x94>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	4619      	mov	r1, r3
 800791e:	f7fe fb77 	bl	8006010 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007922:	f7fe fd73 	bl	800640c <xTaskResumeAll>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <prvProcessTimerOrBlockTask+0x98>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	f3bf 8f6f 	isb	sy
    }
 800793c:	e001      	b.n	8007942 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800793e:	f7fe fd65 	bl	800640c <xTaskResumeAll>
    }
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000354 	.word	0x20000354
 8007950:	20000358 	.word	0x20000358
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007960:	4b0e      	ldr	r3, [pc, #56]	; (800799c <prvGetNextExpireTime+0x44>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <prvGetNextExpireTime+0x16>
 800796a:	2201      	movs	r2, #1
 800796c:	e000      	b.n	8007970 <prvGetNextExpireTime+0x18>
 800796e:	2200      	movs	r2, #0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <prvGetNextExpireTime+0x44>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	e001      	b.n	800798c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800798c:	68fb      	ldr	r3, [r7, #12]
    }
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000350 	.word	0x20000350

080079a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80079a8:	f7fe fe2c 	bl	8006604 <xTaskGetTickCount>
 80079ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80079ae:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <prvSampleTimeNow+0x3c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d205      	bcs.n	80079c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80079b8:	f000 f912 	bl	8007be0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e002      	b.n	80079ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80079ca:	4a04      	ldr	r2, [pc, #16]	; (80079dc <prvSampleTimeNow+0x3c>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80079d0:	68fb      	ldr	r3, [r7, #12]
    }
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000360 	.word	0x20000360

080079e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d812      	bhi.n	8007a2c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d302      	bcc.n	8007a1a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e01b      	b.n	8007a52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a1a:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <prvInsertTimerInActiveList+0x7c>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fd fcc4 	bl	80053b2 <vListInsert>
 8007a2a:	e012      	b.n	8007a52 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d206      	bcs.n	8007a42 <prvInsertTimerInActiveList+0x62>
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d302      	bcc.n	8007a42 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e007      	b.n	8007a52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <prvInsertTimerInActiveList+0x80>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	f7fd fcb0 	bl	80053b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007a52:	697b      	ldr	r3, [r7, #20]
    }
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000354 	.word	0x20000354
 8007a60:	20000350 	.word	0x20000350

08007a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a6a:	e0a6      	b.n	8007bba <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f2c0 80a3 	blt.w	8007bba <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fd fccd 	bl	8005424 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a8a:	1d3b      	adds	r3, r7, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff ff87 	bl	80079a0 <prvSampleTimeNow>
 8007a92:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	f200 808d 	bhi.w	8007bb8 <prvProcessReceivedCommands+0x154>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <prvProcessReceivedCommands+0x40>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ac9 	.word	0x08007ac9
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b45 	.word	0x08007b45
 8007ab4:	08007b8f 	.word	0x08007b8f
 8007ab8:	08007ac9 	.word	0x08007ac9
 8007abc:	08007ac9 	.word	0x08007ac9
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b45 	.word	0x08007b45
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	18d1      	adds	r1, r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	69f8      	ldr	r0, [r7, #28]
 8007ae8:	f7ff ff7a 	bl	80079e0 <prvInsertTimerInActiveList>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d063      	beq.n	8007bba <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	4413      	add	r3, r2
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	69f8      	ldr	r0, [r7, #28]
 8007b0e:	f7ff fe71 	bl	80077f4 <prvReloadTimer>
 8007b12:	e008      	b.n	8007b26 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	69f8      	ldr	r0, [r7, #28]
 8007b2c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007b2e:	e044      	b.n	8007bba <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007b42:	e03a      	b.n	8007bba <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	617b      	str	r3, [r7, #20]
    }
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	18d1      	adds	r1, r2, r3
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	69f8      	ldr	r0, [r7, #28]
 8007b88:	f7ff ff2a 	bl	80079e0 <prvInsertTimerInActiveList>
                        break;
 8007b8c:	e015      	b.n	8007bba <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007b9c:	69f8      	ldr	r0, [r7, #28]
 8007b9e:	f000 fbcf 	bl	8008340 <vPortFree>
 8007ba2:	e00a      	b.n	8007bba <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007baa:	f023 0301 	bic.w	r3, r3, #1
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007bb6:	e000      	b.n	8007bba <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007bb8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <prvProcessReceivedCommands+0x178>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f107 0108 	add.w	r1, r7, #8
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd ff09 	bl	80059dc <xQueueReceive>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f af4d 	bne.w	8007a6c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20000358 	.word	0x20000358

08007be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007be6:	e009      	b.n	8007bfc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <prvSwitchTimerLists+0x44>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007bf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007bf6:	6838      	ldr	r0, [r7, #0]
 8007bf8:	f7ff fe1e 	bl	8007838 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <prvSwitchTimerLists+0x44>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f0      	bne.n	8007be8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <prvSwitchTimerLists+0x44>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <prvSwitchTimerLists+0x48>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <prvSwitchTimerLists+0x44>)
 8007c12:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007c14:	4a04      	ldr	r2, [pc, #16]	; (8007c28 <prvSwitchTimerLists+0x48>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6013      	str	r3, [r2, #0]
    }
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000350 	.word	0x20000350
 8007c28:	20000354 	.word	0x20000354

08007c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007c30:	f000 f9aa 	bl	8007f88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007c34:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <prvCheckForValidListAndQueue+0x54>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d11d      	bne.n	8007c78 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007c3c:	4811      	ldr	r0, [pc, #68]	; (8007c84 <prvCheckForValidListAndQueue+0x58>)
 8007c3e:	f7fd fb67 	bl	8005310 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007c42:	4811      	ldr	r0, [pc, #68]	; (8007c88 <prvCheckForValidListAndQueue+0x5c>)
 8007c44:	f7fd fb64 	bl	8005310 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007c48:	4b10      	ldr	r3, [pc, #64]	; (8007c8c <prvCheckForValidListAndQueue+0x60>)
 8007c4a:	4a0e      	ldr	r2, [pc, #56]	; (8007c84 <prvCheckForValidListAndQueue+0x58>)
 8007c4c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <prvCheckForValidListAndQueue+0x64>)
 8007c50:	4a0d      	ldr	r2, [pc, #52]	; (8007c88 <prvCheckForValidListAndQueue+0x5c>)
 8007c52:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007c54:	2200      	movs	r2, #0
 8007c56:	210c      	movs	r1, #12
 8007c58:	200a      	movs	r0, #10
 8007c5a:	f7fd fc9d 	bl	8005598 <xQueueGenericCreate>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4a07      	ldr	r2, [pc, #28]	; (8007c80 <prvCheckForValidListAndQueue+0x54>)
 8007c62:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007c64:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <prvCheckForValidListAndQueue+0x54>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c6c:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <prvCheckForValidListAndQueue+0x54>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4908      	ldr	r1, [pc, #32]	; (8007c94 <prvCheckForValidListAndQueue+0x68>)
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe f97e 	bl	8005f74 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007c78:	f000 f9b6 	bl	8007fe8 <vPortExitCritical>
    }
 8007c7c:	bf00      	nop
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000358 	.word	0x20000358
 8007c84:	20000328 	.word	0x20000328
 8007c88:	2000033c 	.word	0x2000033c
 8007c8c:	20000350 	.word	0x20000350
 8007c90:	20000354 	.word	0x20000354
 8007c94:	08009b50 	.word	0x08009b50

08007c98 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <xTimerIsTimerActive+0x28>
        __asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	60fb      	str	r3, [r7, #12]
    }
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007cc0:	f000 f962 	bl	8007f88 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e001      	b.n	8007cdc <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007cdc:	f000 f984 	bl	8007fe8 <vPortExitCritical>

        return xReturn;
 8007ce0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <pvTimerGetTimerID+0x28>
        __asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
    }
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007d12:	f000 f939 	bl	8007f88 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007d1c:	f000 f964 	bl	8007fe8 <vPortExitCritical>

        return pvReturn;
 8007d20:	693b      	ldr	r3, [r7, #16]
    }
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3b04      	subs	r3, #4
 8007d3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3b04      	subs	r3, #4
 8007d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f023 0201 	bic.w	r2, r3, #1
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007d5c:	4a0c      	ldr	r2, [pc, #48]	; (8007d90 <pxPortInitialiseStack+0x64>)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3b14      	subs	r3, #20
 8007d66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3b04      	subs	r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f06f 0202 	mvn.w	r2, #2
 8007d7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3b20      	subs	r3, #32
 8007d80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	08007d95 	.word	0x08007d95

08007d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007d9e:	4b12      	ldr	r3, [pc, #72]	; (8007de8 <prvTaskExitError+0x54>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da6:	d00a      	beq.n	8007dbe <prvTaskExitError+0x2a>
        __asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	60fb      	str	r3, [r7, #12]
    }
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <prvTaskExitError+0x28>
        __asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60bb      	str	r3, [r7, #8]
    }
 8007dd0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007dd2:	bf00      	nop
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0fc      	beq.n	8007dd4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	20000024 	.word	0x20000024
 8007dec:	00000000 	.word	0x00000000

08007df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <pxCurrentTCBConst2>)
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	6808      	ldr	r0, [r1, #0]
 8007df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	f380 8809 	msr	PSP, r0
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8811 	msr	BASEPRI, r0
 8007e0a:	4770      	bx	lr
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst2>:
 8007e10:	20000224 	.word	0x20000224
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007e18:	4808      	ldr	r0, [pc, #32]	; (8007e3c <prvPortStartFirstTask+0x24>)
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	6800      	ldr	r0, [r0, #0]
 8007e1e:	f380 8808 	msr	MSP, r0
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8814 	msr	CONTROL, r0
 8007e2a:	b662      	cpsie	i
 8007e2c:	b661      	cpsie	f
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	df00      	svc	0
 8007e38:	bf00      	nop
 8007e3a:	0000      	.short	0x0000
 8007e3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop

08007e44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e4a:	4b46      	ldr	r3, [pc, #280]	; (8007f64 <xPortStartScheduler+0x120>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a46      	ldr	r2, [pc, #280]	; (8007f68 <xPortStartScheduler+0x124>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d10a      	bne.n	8007e6a <xPortStartScheduler+0x26>
        __asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	613b      	str	r3, [r7, #16]
    }
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e6a:	4b3e      	ldr	r3, [pc, #248]	; (8007f64 <xPortStartScheduler+0x120>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a3f      	ldr	r2, [pc, #252]	; (8007f6c <xPortStartScheduler+0x128>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d10a      	bne.n	8007e8a <xPortStartScheduler+0x46>
        __asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60fb      	str	r3, [r7, #12]
    }
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e8a:	4b39      	ldr	r3, [pc, #228]	; (8007f70 <xPortStartScheduler+0x12c>)
 8007e8c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	22ff      	movs	r2, #255	; 0xff
 8007e9a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <xPortStartScheduler+0x130>)
 8007eb0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eb2:	4b31      	ldr	r3, [pc, #196]	; (8007f78 <xPortStartScheduler+0x134>)
 8007eb4:	2207      	movs	r2, #7
 8007eb6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eb8:	e009      	b.n	8007ece <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8007eba:	4b2f      	ldr	r3, [pc, #188]	; (8007f78 <xPortStartScheduler+0x134>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	4a2d      	ldr	r2, [pc, #180]	; (8007f78 <xPortStartScheduler+0x134>)
 8007ec2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed6:	2b80      	cmp	r3, #128	; 0x80
 8007ed8:	d0ef      	beq.n	8007eba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eda:	4b27      	ldr	r3, [pc, #156]	; (8007f78 <xPortStartScheduler+0x134>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1c3 0307 	rsb	r3, r3, #7
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d00a      	beq.n	8007efc <xPortStartScheduler+0xb8>
        __asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60bb      	str	r3, [r7, #8]
    }
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007efc:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <xPortStartScheduler+0x134>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <xPortStartScheduler+0x134>)
 8007f04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f06:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <xPortStartScheduler+0x134>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f0e:	4a1a      	ldr	r2, [pc, #104]	; (8007f78 <xPortStartScheduler+0x134>)
 8007f10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <xPortStartScheduler+0x138>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <xPortStartScheduler+0x138>)
 8007f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <xPortStartScheduler+0x138>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a14      	ldr	r2, [pc, #80]	; (8007f7c <xPortStartScheduler+0x138>)
 8007f2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007f32:	f000 f8db 	bl	80080ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007f36:	4b12      	ldr	r3, [pc, #72]	; (8007f80 <xPortStartScheduler+0x13c>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007f3c:	f000 f8fa 	bl	8008134 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f40:	4b10      	ldr	r3, [pc, #64]	; (8007f84 <xPortStartScheduler+0x140>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a0f      	ldr	r2, [pc, #60]	; (8007f84 <xPortStartScheduler+0x140>)
 8007f46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007f4c:	f7ff ff64 	bl	8007e18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007f50:	f7fe fc8a 	bl	8006868 <vTaskSwitchContext>
    prvTaskExitError();
 8007f54:	f7ff ff1e 	bl	8007d94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	e000ed00 	.word	0xe000ed00
 8007f68:	410fc271 	.word	0x410fc271
 8007f6c:	410fc270 	.word	0x410fc270
 8007f70:	e000e400 	.word	0xe000e400
 8007f74:	20000364 	.word	0x20000364
 8007f78:	20000368 	.word	0x20000368
 8007f7c:	e000ed20 	.word	0xe000ed20
 8007f80:	20000024 	.word	0x20000024
 8007f84:	e000ef34 	.word	0xe000ef34

08007f88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
        __asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	607b      	str	r3, [r7, #4]
    }
 8007fa0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <vPortEnterCritical+0x58>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <vPortEnterCritical+0x58>)
 8007faa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007fac:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <vPortEnterCritical+0x58>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d10f      	bne.n	8007fd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <vPortEnterCritical+0x5c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <vPortEnterCritical+0x4c>
        __asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	603b      	str	r3, [r7, #0]
    }
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <vPortEnterCritical+0x4a>
    }
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	20000024 	.word	0x20000024
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007fee:	4b12      	ldr	r3, [pc, #72]	; (8008038 <vPortExitCritical+0x50>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <vPortExitCritical+0x24>
        __asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	607b      	str	r3, [r7, #4]
    }
 8008008:	bf00      	nop
 800800a:	e7fe      	b.n	800800a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <vPortExitCritical+0x50>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3b01      	subs	r3, #1
 8008012:	4a09      	ldr	r2, [pc, #36]	; (8008038 <vPortExitCritical+0x50>)
 8008014:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008016:	4b08      	ldr	r3, [pc, #32]	; (8008038 <vPortExitCritical+0x50>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <vPortExitCritical+0x42>
 800801e:	2300      	movs	r3, #0
 8008020:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	f383 8811 	msr	BASEPRI, r3
    }
 8008028:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000024 	.word	0x20000024
 800803c:	00000000 	.word	0x00000000

08008040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008040:	f3ef 8009 	mrs	r0, PSP
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <pxCurrentTCBConst>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	f01e 0f10 	tst.w	lr, #16
 8008050:	bf08      	it	eq
 8008052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805a:	6010      	str	r0, [r2, #0]
 800805c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008064:	f380 8811 	msr	BASEPRI, r0
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f7fe fbfa 	bl	8006868 <vTaskSwitchContext>
 8008074:	f04f 0000 	mov.w	r0, #0
 8008078:	f380 8811 	msr	BASEPRI, r0
 800807c:	bc09      	pop	{r0, r3}
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	6808      	ldr	r0, [r1, #0]
 8008082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008086:	f01e 0f10 	tst.w	lr, #16
 800808a:	bf08      	it	eq
 800808c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008090:	f380 8809 	msr	PSP, r0
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	f3af 8000 	nop.w

080080a0 <pxCurrentTCBConst>:
 80080a0:	20000224 	.word	0x20000224
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop

080080a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
        __asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
    }
 80080c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80080c2:	f7fe fabb 	bl	800663c <xTaskIncrementTick>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <SysTick_Handler+0x40>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f383 8811 	msr	BASEPRI, r3
    }
 80080de:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <vPortSetupTimerInterrupt+0x34>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <vPortSetupTimerInterrupt+0x38>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <vPortSetupTimerInterrupt+0x3c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0a      	ldr	r2, [pc, #40]	; (800812c <vPortSetupTimerInterrupt+0x40>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	099b      	lsrs	r3, r3, #6
 8008108:	4a09      	ldr	r2, [pc, #36]	; (8008130 <vPortSetupTimerInterrupt+0x44>)
 800810a:	3b01      	subs	r3, #1
 800810c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800810e:	4b04      	ldr	r3, [pc, #16]	; (8008120 <vPortSetupTimerInterrupt+0x34>)
 8008110:	2207      	movs	r2, #7
 8008112:	601a      	str	r2, [r3, #0]
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	e000e010 	.word	0xe000e010
 8008124:	e000e018 	.word	0xe000e018
 8008128:	20000010 	.word	0x20000010
 800812c:	10624dd3 	.word	0x10624dd3
 8008130:	e000e014 	.word	0xe000e014

08008134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008144 <vPortEnableVFP+0x10>
 8008138:	6801      	ldr	r1, [r0, #0]
 800813a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800813e:	6001      	str	r1, [r0, #0]
 8008140:	4770      	bx	lr
 8008142:	0000      	.short	0x0000
 8008144:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop

0800814c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008152:	f3ef 8305 	mrs	r3, IPSR
 8008156:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	d914      	bls.n	8008188 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800815e:	4a17      	ldr	r2, [pc, #92]	; (80081bc <vPortValidateInterruptPriority+0x70>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <vPortValidateInterruptPriority+0x74>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	7afa      	ldrb	r2, [r7, #11]
 800816e:	429a      	cmp	r2, r3
 8008170:	d20a      	bcs.n	8008188 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	607b      	str	r3, [r7, #4]
    }
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008188:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <vPortValidateInterruptPriority+0x78>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008190:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <vPortValidateInterruptPriority+0x7c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d90a      	bls.n	80081ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	603b      	str	r3, [r7, #0]
    }
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <vPortValidateInterruptPriority+0x60>
    }
 80081ae:	bf00      	nop
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	e000e3f0 	.word	0xe000e3f0
 80081c0:	20000364 	.word	0x20000364
 80081c4:	e000ed0c 	.word	0xe000ed0c
 80081c8:	20000368 	.word	0x20000368

080081cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	; 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80081d8:	f7fe f90a 	bl	80063f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80081dc:	4b53      	ldr	r3, [pc, #332]	; (800832c <pvPortMalloc+0x160>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80081e4:	f000 f908 	bl	80083f8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d012      	beq.n	8008214 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80081ee:	2208      	movs	r2, #8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	3308      	adds	r3, #8
 80081fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	43db      	mvns	r3, r3
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	429a      	cmp	r2, r3
 8008204:	d804      	bhi.n	8008210 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	4413      	add	r3, r2
 800820c:	607b      	str	r3, [r7, #4]
 800820e:	e001      	b.n	8008214 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	db70      	blt.n	80082fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d06d      	beq.n	80082fc <pvPortMalloc+0x130>
 8008220:	4b43      	ldr	r3, [pc, #268]	; (8008330 <pvPortMalloc+0x164>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d868      	bhi.n	80082fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800822a:	4b42      	ldr	r3, [pc, #264]	; (8008334 <pvPortMalloc+0x168>)
 800822c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800822e:	4b41      	ldr	r3, [pc, #260]	; (8008334 <pvPortMalloc+0x168>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008234:	e004      	b.n	8008240 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	429a      	cmp	r2, r3
 8008248:	d903      	bls.n	8008252 <pvPortMalloc+0x86>
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1f1      	bne.n	8008236 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008252:	4b36      	ldr	r3, [pc, #216]	; (800832c <pvPortMalloc+0x160>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008258:	429a      	cmp	r2, r3
 800825a:	d04f      	beq.n	80082fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2208      	movs	r2, #8
 8008262:	4413      	add	r3, r2
 8008264:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	1ad2      	subs	r2, r2, r3
 8008276:	2308      	movs	r3, #8
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	429a      	cmp	r2, r3
 800827c:	d91f      	bls.n	80082be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800827e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4413      	add	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <pvPortMalloc+0xda>
        __asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	613b      	str	r3, [r7, #16]
    }
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	1ad2      	subs	r2, r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f000 f8f9 	bl	80084b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082be:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <pvPortMalloc+0x164>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <pvPortMalloc+0x164>)
 80082ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082cc:	4b18      	ldr	r3, [pc, #96]	; (8008330 <pvPortMalloc+0x164>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b19      	ldr	r3, [pc, #100]	; (8008338 <pvPortMalloc+0x16c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d203      	bcs.n	80082e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082d8:	4b15      	ldr	r3, [pc, #84]	; (8008330 <pvPortMalloc+0x164>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a16      	ldr	r2, [pc, #88]	; (8008338 <pvPortMalloc+0x16c>)
 80082de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <pvPortMalloc+0x170>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3301      	adds	r3, #1
 80082f8:	4a10      	ldr	r2, [pc, #64]	; (800833c <pvPortMalloc+0x170>)
 80082fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80082fc:	f7fe f886 	bl	800640c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <pvPortMalloc+0x154>
        __asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	60fb      	str	r3, [r7, #12]
    }
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <pvPortMalloc+0x152>
    return pvReturn;
 8008320:	69fb      	ldr	r3, [r7, #28]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3728      	adds	r7, #40	; 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20012f74 	.word	0x20012f74
 8008330:	20012f78 	.word	0x20012f78
 8008334:	20012f6c 	.word	0x20012f6c
 8008338:	20012f7c 	.word	0x20012f7c
 800833c:	20012f80 	.word	0x20012f80

08008340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d049      	beq.n	80083e6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008352:	2308      	movs	r3, #8
 8008354:	425b      	negs	r3, r3
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	db0a      	blt.n	800837e <vPortFree+0x3e>
        __asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
    }
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <vPortFree+0x5c>
        __asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60bb      	str	r3, [r7, #8]
    }
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	0fdb      	lsrs	r3, r3, #31
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01c      	beq.n	80083e6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d118      	bne.n	80083e6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80083c0:	f7fe f816 	bl	80063f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <vPortFree+0xb0>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4413      	add	r3, r2
 80083ce:	4a08      	ldr	r2, [pc, #32]	; (80083f0 <vPortFree+0xb0>)
 80083d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083d2:	6938      	ldr	r0, [r7, #16]
 80083d4:	f000 f86c 	bl	80084b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80083d8:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <vPortFree+0xb4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	4a05      	ldr	r2, [pc, #20]	; (80083f4 <vPortFree+0xb4>)
 80083e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80083e2:	f7fe f813 	bl	800640c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20012f78 	.word	0x20012f78
 80083f4:	20012f84 	.word	0x20012f84

080083f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083fe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008402:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008404:	4b25      	ldr	r3, [pc, #148]	; (800849c <prvHeapInit+0xa4>)
 8008406:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3307      	adds	r3, #7
 8008416:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0307 	bic.w	r3, r3, #7
 800841e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	4a1d      	ldr	r2, [pc, #116]	; (800849c <prvHeapInit+0xa4>)
 8008428:	4413      	add	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008430:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <prvHeapInit+0xa8>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008436:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <prvHeapInit+0xa8>)
 8008438:	2200      	movs	r2, #0
 800843a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	4413      	add	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008444:	2208      	movs	r2, #8
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0307 	bic.w	r3, r3, #7
 8008452:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4a13      	ldr	r2, [pc, #76]	; (80084a4 <prvHeapInit+0xac>)
 8008458:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800845a:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <prvHeapInit+0xac>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008462:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <prvHeapInit+0xac>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <prvHeapInit+0xac>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4a08      	ldr	r2, [pc, #32]	; (80084a8 <prvHeapInit+0xb0>)
 8008486:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	4a07      	ldr	r2, [pc, #28]	; (80084ac <prvHeapInit+0xb4>)
 800848e:	6013      	str	r3, [r2, #0]
}
 8008490:	bf00      	nop
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	2000036c 	.word	0x2000036c
 80084a0:	20012f6c 	.word	0x20012f6c
 80084a4:	20012f74 	.word	0x20012f74
 80084a8:	20012f7c 	.word	0x20012f7c
 80084ac:	20012f78 	.word	0x20012f78

080084b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084b8:	4b28      	ldr	r3, [pc, #160]	; (800855c <prvInsertBlockIntoFreeList+0xac>)
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e002      	b.n	80084c4 <prvInsertBlockIntoFreeList+0x14>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d8f7      	bhi.n	80084be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4413      	add	r3, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d108      	bne.n	80084f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	441a      	add	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	441a      	add	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d118      	bne.n	8008538 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <prvInsertBlockIntoFreeList+0xb0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d00d      	beq.n	800852e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	441a      	add	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	e008      	b.n	8008540 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800852e:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <prvInsertBlockIntoFreeList+0xb0>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e003      	b.n	8008540 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	429a      	cmp	r2, r3
 8008546:	d002      	beq.n	800854e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20012f6c 	.word	0x20012f6c
 8008560:	20012f74 	.word	0x20012f74

08008564 <std>:
 8008564:	2300      	movs	r3, #0
 8008566:	b510      	push	{r4, lr}
 8008568:	4604      	mov	r4, r0
 800856a:	e9c0 3300 	strd	r3, r3, [r0]
 800856e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008572:	6083      	str	r3, [r0, #8]
 8008574:	8181      	strh	r1, [r0, #12]
 8008576:	6643      	str	r3, [r0, #100]	; 0x64
 8008578:	81c2      	strh	r2, [r0, #14]
 800857a:	6183      	str	r3, [r0, #24]
 800857c:	4619      	mov	r1, r3
 800857e:	2208      	movs	r2, #8
 8008580:	305c      	adds	r0, #92	; 0x5c
 8008582:	f000 f926 	bl	80087d2 <memset>
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <std+0x58>)
 8008588:	6263      	str	r3, [r4, #36]	; 0x24
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <std+0x5c>)
 800858c:	62a3      	str	r3, [r4, #40]	; 0x28
 800858e:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <std+0x60>)
 8008590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008592:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <std+0x64>)
 8008594:	6323      	str	r3, [r4, #48]	; 0x30
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <std+0x68>)
 8008598:	6224      	str	r4, [r4, #32]
 800859a:	429c      	cmp	r4, r3
 800859c:	d006      	beq.n	80085ac <std+0x48>
 800859e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80085a2:	4294      	cmp	r4, r2
 80085a4:	d002      	beq.n	80085ac <std+0x48>
 80085a6:	33d0      	adds	r3, #208	; 0xd0
 80085a8:	429c      	cmp	r4, r3
 80085aa:	d105      	bne.n	80085b8 <std+0x54>
 80085ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b4:	f000 b986 	b.w	80088c4 <__retarget_lock_init_recursive>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	bf00      	nop
 80085bc:	0800874d 	.word	0x0800874d
 80085c0:	0800876f 	.word	0x0800876f
 80085c4:	080087a7 	.word	0x080087a7
 80085c8:	080087cb 	.word	0x080087cb
 80085cc:	20012f88 	.word	0x20012f88

080085d0 <stdio_exit_handler>:
 80085d0:	4a02      	ldr	r2, [pc, #8]	; (80085dc <stdio_exit_handler+0xc>)
 80085d2:	4903      	ldr	r1, [pc, #12]	; (80085e0 <stdio_exit_handler+0x10>)
 80085d4:	4803      	ldr	r0, [pc, #12]	; (80085e4 <stdio_exit_handler+0x14>)
 80085d6:	f000 b869 	b.w	80086ac <_fwalk_sglue>
 80085da:	bf00      	nop
 80085dc:	20000028 	.word	0x20000028
 80085e0:	0800943d 	.word	0x0800943d
 80085e4:	20000034 	.word	0x20000034

080085e8 <cleanup_stdio>:
 80085e8:	6841      	ldr	r1, [r0, #4]
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <cleanup_stdio+0x34>)
 80085ec:	4299      	cmp	r1, r3
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	d001      	beq.n	80085f8 <cleanup_stdio+0x10>
 80085f4:	f000 ff22 	bl	800943c <_fflush_r>
 80085f8:	68a1      	ldr	r1, [r4, #8]
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <cleanup_stdio+0x38>)
 80085fc:	4299      	cmp	r1, r3
 80085fe:	d002      	beq.n	8008606 <cleanup_stdio+0x1e>
 8008600:	4620      	mov	r0, r4
 8008602:	f000 ff1b 	bl	800943c <_fflush_r>
 8008606:	68e1      	ldr	r1, [r4, #12]
 8008608:	4b06      	ldr	r3, [pc, #24]	; (8008624 <cleanup_stdio+0x3c>)
 800860a:	4299      	cmp	r1, r3
 800860c:	d004      	beq.n	8008618 <cleanup_stdio+0x30>
 800860e:	4620      	mov	r0, r4
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f000 bf12 	b.w	800943c <_fflush_r>
 8008618:	bd10      	pop	{r4, pc}
 800861a:	bf00      	nop
 800861c:	20012f88 	.word	0x20012f88
 8008620:	20012ff0 	.word	0x20012ff0
 8008624:	20013058 	.word	0x20013058

08008628 <global_stdio_init.part.0>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <global_stdio_init.part.0+0x30>)
 800862c:	4c0b      	ldr	r4, [pc, #44]	; (800865c <global_stdio_init.part.0+0x34>)
 800862e:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <global_stdio_init.part.0+0x38>)
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	4620      	mov	r0, r4
 8008634:	2200      	movs	r2, #0
 8008636:	2104      	movs	r1, #4
 8008638:	f7ff ff94 	bl	8008564 <std>
 800863c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008640:	2201      	movs	r2, #1
 8008642:	2109      	movs	r1, #9
 8008644:	f7ff ff8e 	bl	8008564 <std>
 8008648:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800864c:	2202      	movs	r2, #2
 800864e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008652:	2112      	movs	r1, #18
 8008654:	f7ff bf86 	b.w	8008564 <std>
 8008658:	200130c0 	.word	0x200130c0
 800865c:	20012f88 	.word	0x20012f88
 8008660:	080085d1 	.word	0x080085d1

08008664 <__sfp_lock_acquire>:
 8008664:	4801      	ldr	r0, [pc, #4]	; (800866c <__sfp_lock_acquire+0x8>)
 8008666:	f000 b92e 	b.w	80088c6 <__retarget_lock_acquire_recursive>
 800866a:	bf00      	nop
 800866c:	200130c9 	.word	0x200130c9

08008670 <__sfp_lock_release>:
 8008670:	4801      	ldr	r0, [pc, #4]	; (8008678 <__sfp_lock_release+0x8>)
 8008672:	f000 b929 	b.w	80088c8 <__retarget_lock_release_recursive>
 8008676:	bf00      	nop
 8008678:	200130c9 	.word	0x200130c9

0800867c <__sinit>:
 800867c:	b510      	push	{r4, lr}
 800867e:	4604      	mov	r4, r0
 8008680:	f7ff fff0 	bl	8008664 <__sfp_lock_acquire>
 8008684:	6a23      	ldr	r3, [r4, #32]
 8008686:	b11b      	cbz	r3, 8008690 <__sinit+0x14>
 8008688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868c:	f7ff bff0 	b.w	8008670 <__sfp_lock_release>
 8008690:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <__sinit+0x28>)
 8008692:	6223      	str	r3, [r4, #32]
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <__sinit+0x2c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f5      	bne.n	8008688 <__sinit+0xc>
 800869c:	f7ff ffc4 	bl	8008628 <global_stdio_init.part.0>
 80086a0:	e7f2      	b.n	8008688 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	080085e9 	.word	0x080085e9
 80086a8:	200130c0 	.word	0x200130c0

080086ac <_fwalk_sglue>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	4607      	mov	r7, r0
 80086b2:	4688      	mov	r8, r1
 80086b4:	4614      	mov	r4, r2
 80086b6:	2600      	movs	r6, #0
 80086b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086bc:	f1b9 0901 	subs.w	r9, r9, #1
 80086c0:	d505      	bpl.n	80086ce <_fwalk_sglue+0x22>
 80086c2:	6824      	ldr	r4, [r4, #0]
 80086c4:	2c00      	cmp	r4, #0
 80086c6:	d1f7      	bne.n	80086b8 <_fwalk_sglue+0xc>
 80086c8:	4630      	mov	r0, r6
 80086ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d907      	bls.n	80086e4 <_fwalk_sglue+0x38>
 80086d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d8:	3301      	adds	r3, #1
 80086da:	d003      	beq.n	80086e4 <_fwalk_sglue+0x38>
 80086dc:	4629      	mov	r1, r5
 80086de:	4638      	mov	r0, r7
 80086e0:	47c0      	blx	r8
 80086e2:	4306      	orrs	r6, r0
 80086e4:	3568      	adds	r5, #104	; 0x68
 80086e6:	e7e9      	b.n	80086bc <_fwalk_sglue+0x10>

080086e8 <iprintf>:
 80086e8:	b40f      	push	{r0, r1, r2, r3}
 80086ea:	b507      	push	{r0, r1, r2, lr}
 80086ec:	4906      	ldr	r1, [pc, #24]	; (8008708 <iprintf+0x20>)
 80086ee:	ab04      	add	r3, sp, #16
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f6:	6881      	ldr	r1, [r0, #8]
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f000 fb6f 	bl	8008ddc <_vfiprintf_r>
 80086fe:	b003      	add	sp, #12
 8008700:	f85d eb04 	ldr.w	lr, [sp], #4
 8008704:	b004      	add	sp, #16
 8008706:	4770      	bx	lr
 8008708:	20000080 	.word	0x20000080

0800870c <siprintf>:
 800870c:	b40e      	push	{r1, r2, r3}
 800870e:	b500      	push	{lr}
 8008710:	b09c      	sub	sp, #112	; 0x70
 8008712:	ab1d      	add	r3, sp, #116	; 0x74
 8008714:	9002      	str	r0, [sp, #8]
 8008716:	9006      	str	r0, [sp, #24]
 8008718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800871c:	4809      	ldr	r0, [pc, #36]	; (8008744 <siprintf+0x38>)
 800871e:	9107      	str	r1, [sp, #28]
 8008720:	9104      	str	r1, [sp, #16]
 8008722:	4909      	ldr	r1, [pc, #36]	; (8008748 <siprintf+0x3c>)
 8008724:	f853 2b04 	ldr.w	r2, [r3], #4
 8008728:	9105      	str	r1, [sp, #20]
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	a902      	add	r1, sp, #8
 8008730:	f000 fa2c 	bl	8008b8c <_svfiprintf_r>
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	b01c      	add	sp, #112	; 0x70
 800873c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008740:	b003      	add	sp, #12
 8008742:	4770      	bx	lr
 8008744:	20000080 	.word	0x20000080
 8008748:	ffff0208 	.word	0xffff0208

0800874c <__sread>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	f000 f868 	bl	8008828 <_read_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	bfab      	itete	ge
 800875c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800875e:	89a3      	ldrhlt	r3, [r4, #12]
 8008760:	181b      	addge	r3, r3, r0
 8008762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008766:	bfac      	ite	ge
 8008768:	6563      	strge	r3, [r4, #84]	; 0x54
 800876a:	81a3      	strhlt	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__swrite>:
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	461f      	mov	r7, r3
 8008774:	898b      	ldrh	r3, [r1, #12]
 8008776:	05db      	lsls	r3, r3, #23
 8008778:	4605      	mov	r5, r0
 800877a:	460c      	mov	r4, r1
 800877c:	4616      	mov	r6, r2
 800877e:	d505      	bpl.n	800878c <__swrite+0x1e>
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2302      	movs	r3, #2
 8008786:	2200      	movs	r2, #0
 8008788:	f000 f83c 	bl	8008804 <_lseek_r>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	4628      	mov	r0, r5
 800879e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	f000 b853 	b.w	800884c <_write_r>

080087a6 <__sseek>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	460c      	mov	r4, r1
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 f829 	bl	8008804 <_lseek_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	bf15      	itete	ne
 80087b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087c2:	81a3      	strheq	r3, [r4, #12]
 80087c4:	bf18      	it	ne
 80087c6:	81a3      	strhne	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__sclose>:
 80087ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ce:	f000 b809 	b.w	80087e4 <_close_r>

080087d2 <memset>:
 80087d2:	4402      	add	r2, r0
 80087d4:	4603      	mov	r3, r0
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d100      	bne.n	80087dc <memset+0xa>
 80087da:	4770      	bx	lr
 80087dc:	f803 1b01 	strb.w	r1, [r3], #1
 80087e0:	e7f9      	b.n	80087d6 <memset+0x4>
	...

080087e4 <_close_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_close_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f8 fe07 	bl	8001402 <_close>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_close_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_close_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	200130c4 	.word	0x200130c4

08008804 <_lseek_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_lseek_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f8 fe1c 	bl	8001450 <_lseek>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_lseek_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_lseek_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	200130c4 	.word	0x200130c4

08008828 <_read_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	; (8008848 <_read_r+0x20>)
 800882c:	4604      	mov	r4, r0
 800882e:	4608      	mov	r0, r1
 8008830:	4611      	mov	r1, r2
 8008832:	2200      	movs	r2, #0
 8008834:	602a      	str	r2, [r5, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f7f8 fdaa 	bl	8001390 <_read>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_read_r+0x1e>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_read_r+0x1e>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	200130c4 	.word	0x200130c4

0800884c <_write_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	; (800886c <_write_r+0x20>)
 8008850:	4604      	mov	r4, r0
 8008852:	4608      	mov	r0, r1
 8008854:	4611      	mov	r1, r2
 8008856:	2200      	movs	r2, #0
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f7f8 fdb5 	bl	80013ca <_write>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_write_r+0x1e>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_write_r+0x1e>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	200130c4 	.word	0x200130c4

08008870 <__errno>:
 8008870:	4b01      	ldr	r3, [pc, #4]	; (8008878 <__errno+0x8>)
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000080 	.word	0x20000080

0800887c <__libc_init_array>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4d0d      	ldr	r5, [pc, #52]	; (80088b4 <__libc_init_array+0x38>)
 8008880:	4c0d      	ldr	r4, [pc, #52]	; (80088b8 <__libc_init_array+0x3c>)
 8008882:	1b64      	subs	r4, r4, r5
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	2600      	movs	r6, #0
 8008888:	42a6      	cmp	r6, r4
 800888a:	d109      	bne.n	80088a0 <__libc_init_array+0x24>
 800888c:	4d0b      	ldr	r5, [pc, #44]	; (80088bc <__libc_init_array+0x40>)
 800888e:	4c0c      	ldr	r4, [pc, #48]	; (80088c0 <__libc_init_array+0x44>)
 8008890:	f000 ff78 	bl	8009784 <_init>
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	2600      	movs	r6, #0
 800889a:	42a6      	cmp	r6, r4
 800889c:	d105      	bne.n	80088aa <__libc_init_array+0x2e>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a4:	4798      	blx	r3
 80088a6:	3601      	adds	r6, #1
 80088a8:	e7ee      	b.n	8008888 <__libc_init_array+0xc>
 80088aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ae:	4798      	blx	r3
 80088b0:	3601      	adds	r6, #1
 80088b2:	e7f2      	b.n	800889a <__libc_init_array+0x1e>
 80088b4:	08009bac 	.word	0x08009bac
 80088b8:	08009bac 	.word	0x08009bac
 80088bc:	08009bac 	.word	0x08009bac
 80088c0:	08009bb0 	.word	0x08009bb0

080088c4 <__retarget_lock_init_recursive>:
 80088c4:	4770      	bx	lr

080088c6 <__retarget_lock_acquire_recursive>:
 80088c6:	4770      	bx	lr

080088c8 <__retarget_lock_release_recursive>:
 80088c8:	4770      	bx	lr

080088ca <memcpy>:
 80088ca:	440a      	add	r2, r1
 80088cc:	4291      	cmp	r1, r2
 80088ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088d2:	d100      	bne.n	80088d6 <memcpy+0xc>
 80088d4:	4770      	bx	lr
 80088d6:	b510      	push	{r4, lr}
 80088d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e0:	4291      	cmp	r1, r2
 80088e2:	d1f9      	bne.n	80088d8 <memcpy+0xe>
 80088e4:	bd10      	pop	{r4, pc}
	...

080088e8 <_free_r>:
 80088e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ea:	2900      	cmp	r1, #0
 80088ec:	d044      	beq.n	8008978 <_free_r+0x90>
 80088ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f2:	9001      	str	r0, [sp, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f1a1 0404 	sub.w	r4, r1, #4
 80088fa:	bfb8      	it	lt
 80088fc:	18e4      	addlt	r4, r4, r3
 80088fe:	f000 f8df 	bl	8008ac0 <__malloc_lock>
 8008902:	4a1e      	ldr	r2, [pc, #120]	; (800897c <_free_r+0x94>)
 8008904:	9801      	ldr	r0, [sp, #4]
 8008906:	6813      	ldr	r3, [r2, #0]
 8008908:	b933      	cbnz	r3, 8008918 <_free_r+0x30>
 800890a:	6063      	str	r3, [r4, #4]
 800890c:	6014      	str	r4, [r2, #0]
 800890e:	b003      	add	sp, #12
 8008910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008914:	f000 b8da 	b.w	8008acc <__malloc_unlock>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d908      	bls.n	800892e <_free_r+0x46>
 800891c:	6825      	ldr	r5, [r4, #0]
 800891e:	1961      	adds	r1, r4, r5
 8008920:	428b      	cmp	r3, r1
 8008922:	bf01      	itttt	eq
 8008924:	6819      	ldreq	r1, [r3, #0]
 8008926:	685b      	ldreq	r3, [r3, #4]
 8008928:	1949      	addeq	r1, r1, r5
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	e7ed      	b.n	800890a <_free_r+0x22>
 800892e:	461a      	mov	r2, r3
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b10b      	cbz	r3, 8008938 <_free_r+0x50>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d9fa      	bls.n	800892e <_free_r+0x46>
 8008938:	6811      	ldr	r1, [r2, #0]
 800893a:	1855      	adds	r5, r2, r1
 800893c:	42a5      	cmp	r5, r4
 800893e:	d10b      	bne.n	8008958 <_free_r+0x70>
 8008940:	6824      	ldr	r4, [r4, #0]
 8008942:	4421      	add	r1, r4
 8008944:	1854      	adds	r4, r2, r1
 8008946:	42a3      	cmp	r3, r4
 8008948:	6011      	str	r1, [r2, #0]
 800894a:	d1e0      	bne.n	800890e <_free_r+0x26>
 800894c:	681c      	ldr	r4, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	440c      	add	r4, r1
 8008954:	6014      	str	r4, [r2, #0]
 8008956:	e7da      	b.n	800890e <_free_r+0x26>
 8008958:	d902      	bls.n	8008960 <_free_r+0x78>
 800895a:	230c      	movs	r3, #12
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	e7d6      	b.n	800890e <_free_r+0x26>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf04      	itt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	6063      	str	r3, [r4, #4]
 800896e:	bf04      	itt	eq
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	6054      	str	r4, [r2, #4]
 8008976:	e7ca      	b.n	800890e <_free_r+0x26>
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	200130cc 	.word	0x200130cc

08008980 <sbrk_aligned>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	4e0e      	ldr	r6, [pc, #56]	; (80089bc <sbrk_aligned+0x3c>)
 8008984:	460c      	mov	r4, r1
 8008986:	6831      	ldr	r1, [r6, #0]
 8008988:	4605      	mov	r5, r0
 800898a:	b911      	cbnz	r1, 8008992 <sbrk_aligned+0x12>
 800898c:	f000 fe2e 	bl	80095ec <_sbrk_r>
 8008990:	6030      	str	r0, [r6, #0]
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f000 fe29 	bl	80095ec <_sbrk_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d00a      	beq.n	80089b4 <sbrk_aligned+0x34>
 800899e:	1cc4      	adds	r4, r0, #3
 80089a0:	f024 0403 	bic.w	r4, r4, #3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d007      	beq.n	80089b8 <sbrk_aligned+0x38>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 fe1e 	bl	80095ec <_sbrk_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d101      	bne.n	80089b8 <sbrk_aligned+0x38>
 80089b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089b8:	4620      	mov	r0, r4
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	200130d0 	.word	0x200130d0

080089c0 <_malloc_r>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	1ccd      	adds	r5, r1, #3
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	4607      	mov	r7, r0
 80089d6:	db01      	blt.n	80089dc <_malloc_r+0x1c>
 80089d8:	42a9      	cmp	r1, r5
 80089da:	d905      	bls.n	80089e8 <_malloc_r+0x28>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	2600      	movs	r6, #0
 80089e2:	4630      	mov	r0, r6
 80089e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008abc <_malloc_r+0xfc>
 80089ec:	f000 f868 	bl	8008ac0 <__malloc_lock>
 80089f0:	f8d8 3000 	ldr.w	r3, [r8]
 80089f4:	461c      	mov	r4, r3
 80089f6:	bb5c      	cbnz	r4, 8008a50 <_malloc_r+0x90>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ffc0 	bl	8008980 <sbrk_aligned>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	4604      	mov	r4, r0
 8008a04:	d155      	bne.n	8008ab2 <_malloc_r+0xf2>
 8008a06:	f8d8 4000 	ldr.w	r4, [r8]
 8008a0a:	4626      	mov	r6, r4
 8008a0c:	2e00      	cmp	r6, #0
 8008a0e:	d145      	bne.n	8008a9c <_malloc_r+0xdc>
 8008a10:	2c00      	cmp	r4, #0
 8008a12:	d048      	beq.n	8008aa6 <_malloc_r+0xe6>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	4631      	mov	r1, r6
 8008a18:	4638      	mov	r0, r7
 8008a1a:	eb04 0903 	add.w	r9, r4, r3
 8008a1e:	f000 fde5 	bl	80095ec <_sbrk_r>
 8008a22:	4581      	cmp	r9, r0
 8008a24:	d13f      	bne.n	8008aa6 <_malloc_r+0xe6>
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	1a6d      	subs	r5, r5, r1
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f7ff ffa7 	bl	8008980 <sbrk_aligned>
 8008a32:	3001      	adds	r0, #1
 8008a34:	d037      	beq.n	8008aa6 <_malloc_r+0xe6>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	442b      	add	r3, r5
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d038      	beq.n	8008ab6 <_malloc_r+0xf6>
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	42a2      	cmp	r2, r4
 8008a48:	d12b      	bne.n	8008aa2 <_malloc_r+0xe2>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	605a      	str	r2, [r3, #4]
 8008a4e:	e00f      	b.n	8008a70 <_malloc_r+0xb0>
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	1b52      	subs	r2, r2, r5
 8008a54:	d41f      	bmi.n	8008a96 <_malloc_r+0xd6>
 8008a56:	2a0b      	cmp	r2, #11
 8008a58:	d917      	bls.n	8008a8a <_malloc_r+0xca>
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	6025      	str	r5, [r4, #0]
 8008a60:	bf18      	it	ne
 8008a62:	6059      	strne	r1, [r3, #4]
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	bf08      	it	eq
 8008a68:	f8c8 1000 	streq.w	r1, [r8]
 8008a6c:	5162      	str	r2, [r4, r5]
 8008a6e:	604b      	str	r3, [r1, #4]
 8008a70:	4638      	mov	r0, r7
 8008a72:	f104 060b 	add.w	r6, r4, #11
 8008a76:	f000 f829 	bl	8008acc <__malloc_unlock>
 8008a7a:	f026 0607 	bic.w	r6, r6, #7
 8008a7e:	1d23      	adds	r3, r4, #4
 8008a80:	1af2      	subs	r2, r6, r3
 8008a82:	d0ae      	beq.n	80089e2 <_malloc_r+0x22>
 8008a84:	1b9b      	subs	r3, r3, r6
 8008a86:	50a3      	str	r3, [r4, r2]
 8008a88:	e7ab      	b.n	80089e2 <_malloc_r+0x22>
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	6862      	ldr	r2, [r4, #4]
 8008a8e:	d1dd      	bne.n	8008a4c <_malloc_r+0x8c>
 8008a90:	f8c8 2000 	str.w	r2, [r8]
 8008a94:	e7ec      	b.n	8008a70 <_malloc_r+0xb0>
 8008a96:	4623      	mov	r3, r4
 8008a98:	6864      	ldr	r4, [r4, #4]
 8008a9a:	e7ac      	b.n	80089f6 <_malloc_r+0x36>
 8008a9c:	4634      	mov	r4, r6
 8008a9e:	6876      	ldr	r6, [r6, #4]
 8008aa0:	e7b4      	b.n	8008a0c <_malloc_r+0x4c>
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	e7cc      	b.n	8008a40 <_malloc_r+0x80>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f000 f80e 	bl	8008acc <__malloc_unlock>
 8008ab0:	e797      	b.n	80089e2 <_malloc_r+0x22>
 8008ab2:	6025      	str	r5, [r4, #0]
 8008ab4:	e7dc      	b.n	8008a70 <_malloc_r+0xb0>
 8008ab6:	605b      	str	r3, [r3, #4]
 8008ab8:	deff      	udf	#255	; 0xff
 8008aba:	bf00      	nop
 8008abc:	200130cc 	.word	0x200130cc

08008ac0 <__malloc_lock>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__malloc_lock+0x8>)
 8008ac2:	f7ff bf00 	b.w	80088c6 <__retarget_lock_acquire_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	200130c8 	.word	0x200130c8

08008acc <__malloc_unlock>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__malloc_unlock+0x8>)
 8008ace:	f7ff befb 	b.w	80088c8 <__retarget_lock_release_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	200130c8 	.word	0x200130c8

08008ad8 <__ssputs_r>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	688e      	ldr	r6, [r1, #8]
 8008ade:	461f      	mov	r7, r3
 8008ae0:	42be      	cmp	r6, r7
 8008ae2:	680b      	ldr	r3, [r1, #0]
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	4690      	mov	r8, r2
 8008aea:	d82c      	bhi.n	8008b46 <__ssputs_r+0x6e>
 8008aec:	898a      	ldrh	r2, [r1, #12]
 8008aee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af2:	d026      	beq.n	8008b42 <__ssputs_r+0x6a>
 8008af4:	6965      	ldr	r5, [r4, #20]
 8008af6:	6909      	ldr	r1, [r1, #16]
 8008af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008afc:	eba3 0901 	sub.w	r9, r3, r1
 8008b00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b04:	1c7b      	adds	r3, r7, #1
 8008b06:	444b      	add	r3, r9
 8008b08:	106d      	asrs	r5, r5, #1
 8008b0a:	429d      	cmp	r5, r3
 8008b0c:	bf38      	it	cc
 8008b0e:	461d      	movcc	r5, r3
 8008b10:	0553      	lsls	r3, r2, #21
 8008b12:	d527      	bpl.n	8008b64 <__ssputs_r+0x8c>
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7ff ff53 	bl	80089c0 <_malloc_r>
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	b360      	cbz	r0, 8008b78 <__ssputs_r+0xa0>
 8008b1e:	6921      	ldr	r1, [r4, #16]
 8008b20:	464a      	mov	r2, r9
 8008b22:	f7ff fed2 	bl	80088ca <memcpy>
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	6126      	str	r6, [r4, #16]
 8008b34:	6165      	str	r5, [r4, #20]
 8008b36:	444e      	add	r6, r9
 8008b38:	eba5 0509 	sub.w	r5, r5, r9
 8008b3c:	6026      	str	r6, [r4, #0]
 8008b3e:	60a5      	str	r5, [r4, #8]
 8008b40:	463e      	mov	r6, r7
 8008b42:	42be      	cmp	r6, r7
 8008b44:	d900      	bls.n	8008b48 <__ssputs_r+0x70>
 8008b46:	463e      	mov	r6, r7
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	4632      	mov	r2, r6
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	f000 fd33 	bl	80095b8 <memmove>
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	1b9b      	subs	r3, r3, r6
 8008b56:	60a3      	str	r3, [r4, #8]
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	4433      	add	r3, r6
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b64:	462a      	mov	r2, r5
 8008b66:	f000 fd51 	bl	800960c <_realloc_r>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1e0      	bne.n	8008b32 <__ssputs_r+0x5a>
 8008b70:	6921      	ldr	r1, [r4, #16]
 8008b72:	4650      	mov	r0, sl
 8008b74:	f7ff feb8 	bl	80088e8 <_free_r>
 8008b78:	230c      	movs	r3, #12
 8008b7a:	f8ca 3000 	str.w	r3, [sl]
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b8a:	e7e9      	b.n	8008b60 <__ssputs_r+0x88>

08008b8c <_svfiprintf_r>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	4698      	mov	r8, r3
 8008b92:	898b      	ldrh	r3, [r1, #12]
 8008b94:	061b      	lsls	r3, r3, #24
 8008b96:	b09d      	sub	sp, #116	; 0x74
 8008b98:	4607      	mov	r7, r0
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	d50e      	bpl.n	8008bbe <_svfiprintf_r+0x32>
 8008ba0:	690b      	ldr	r3, [r1, #16]
 8008ba2:	b963      	cbnz	r3, 8008bbe <_svfiprintf_r+0x32>
 8008ba4:	2140      	movs	r1, #64	; 0x40
 8008ba6:	f7ff ff0b 	bl	80089c0 <_malloc_r>
 8008baa:	6028      	str	r0, [r5, #0]
 8008bac:	6128      	str	r0, [r5, #16]
 8008bae:	b920      	cbnz	r0, 8008bba <_svfiprintf_r+0x2e>
 8008bb0:	230c      	movs	r3, #12
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb8:	e0d0      	b.n	8008d5c <_svfiprintf_r+0x1d0>
 8008bba:	2340      	movs	r3, #64	; 0x40
 8008bbc:	616b      	str	r3, [r5, #20]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc2:	2320      	movs	r3, #32
 8008bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bcc:	2330      	movs	r3, #48	; 0x30
 8008bce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d74 <_svfiprintf_r+0x1e8>
 8008bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd6:	f04f 0901 	mov.w	r9, #1
 8008bda:	4623      	mov	r3, r4
 8008bdc:	469a      	mov	sl, r3
 8008bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be2:	b10a      	cbz	r2, 8008be8 <_svfiprintf_r+0x5c>
 8008be4:	2a25      	cmp	r2, #37	; 0x25
 8008be6:	d1f9      	bne.n	8008bdc <_svfiprintf_r+0x50>
 8008be8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bec:	d00b      	beq.n	8008c06 <_svfiprintf_r+0x7a>
 8008bee:	465b      	mov	r3, fp
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f7ff ff6f 	bl	8008ad8 <__ssputs_r>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	f000 80a9 	beq.w	8008d52 <_svfiprintf_r+0x1c6>
 8008c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c02:	445a      	add	r2, fp
 8008c04:	9209      	str	r2, [sp, #36]	; 0x24
 8008c06:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 80a1 	beq.w	8008d52 <_svfiprintf_r+0x1c6>
 8008c10:	2300      	movs	r3, #0
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c1a:	f10a 0a01 	add.w	sl, sl, #1
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	9307      	str	r3, [sp, #28]
 8008c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c26:	931a      	str	r3, [sp, #104]	; 0x68
 8008c28:	4654      	mov	r4, sl
 8008c2a:	2205      	movs	r2, #5
 8008c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c30:	4850      	ldr	r0, [pc, #320]	; (8008d74 <_svfiprintf_r+0x1e8>)
 8008c32:	f7f7 fb05 	bl	8000240 <memchr>
 8008c36:	9a04      	ldr	r2, [sp, #16]
 8008c38:	b9d8      	cbnz	r0, 8008c72 <_svfiprintf_r+0xe6>
 8008c3a:	06d0      	lsls	r0, r2, #27
 8008c3c:	bf44      	itt	mi
 8008c3e:	2320      	movmi	r3, #32
 8008c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c44:	0711      	lsls	r1, r2, #28
 8008c46:	bf44      	itt	mi
 8008c48:	232b      	movmi	r3, #43	; 0x2b
 8008c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c52:	2b2a      	cmp	r3, #42	; 0x2a
 8008c54:	d015      	beq.n	8008c82 <_svfiprintf_r+0xf6>
 8008c56:	9a07      	ldr	r2, [sp, #28]
 8008c58:	4654      	mov	r4, sl
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f04f 0c0a 	mov.w	ip, #10
 8008c60:	4621      	mov	r1, r4
 8008c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c66:	3b30      	subs	r3, #48	; 0x30
 8008c68:	2b09      	cmp	r3, #9
 8008c6a:	d94d      	bls.n	8008d08 <_svfiprintf_r+0x17c>
 8008c6c:	b1b0      	cbz	r0, 8008c9c <_svfiprintf_r+0x110>
 8008c6e:	9207      	str	r2, [sp, #28]
 8008c70:	e014      	b.n	8008c9c <_svfiprintf_r+0x110>
 8008c72:	eba0 0308 	sub.w	r3, r0, r8
 8008c76:	fa09 f303 	lsl.w	r3, r9, r3
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	46a2      	mov	sl, r4
 8008c80:	e7d2      	b.n	8008c28 <_svfiprintf_r+0x9c>
 8008c82:	9b03      	ldr	r3, [sp, #12]
 8008c84:	1d19      	adds	r1, r3, #4
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	9103      	str	r1, [sp, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bfbb      	ittet	lt
 8008c8e:	425b      	neglt	r3, r3
 8008c90:	f042 0202 	orrlt.w	r2, r2, #2
 8008c94:	9307      	strge	r3, [sp, #28]
 8008c96:	9307      	strlt	r3, [sp, #28]
 8008c98:	bfb8      	it	lt
 8008c9a:	9204      	strlt	r2, [sp, #16]
 8008c9c:	7823      	ldrb	r3, [r4, #0]
 8008c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca0:	d10c      	bne.n	8008cbc <_svfiprintf_r+0x130>
 8008ca2:	7863      	ldrb	r3, [r4, #1]
 8008ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca6:	d134      	bne.n	8008d12 <_svfiprintf_r+0x186>
 8008ca8:	9b03      	ldr	r3, [sp, #12]
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	9203      	str	r2, [sp, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bfb8      	it	lt
 8008cb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cb8:	3402      	adds	r4, #2
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d84 <_svfiprintf_r+0x1f8>
 8008cc0:	7821      	ldrb	r1, [r4, #0]
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	f7f7 fabb 	bl	8000240 <memchr>
 8008cca:	b138      	cbz	r0, 8008cdc <_svfiprintf_r+0x150>
 8008ccc:	9b04      	ldr	r3, [sp, #16]
 8008cce:	eba0 000a 	sub.w	r0, r0, sl
 8008cd2:	2240      	movs	r2, #64	; 0x40
 8008cd4:	4082      	lsls	r2, r0
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	4825      	ldr	r0, [pc, #148]	; (8008d78 <_svfiprintf_r+0x1ec>)
 8008ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ce6:	2206      	movs	r2, #6
 8008ce8:	f7f7 faaa 	bl	8000240 <memchr>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d038      	beq.n	8008d62 <_svfiprintf_r+0x1d6>
 8008cf0:	4b22      	ldr	r3, [pc, #136]	; (8008d7c <_svfiprintf_r+0x1f0>)
 8008cf2:	bb1b      	cbnz	r3, 8008d3c <_svfiprintf_r+0x1b0>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	3307      	adds	r3, #7
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d02:	4433      	add	r3, r6
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	e768      	b.n	8008bda <_svfiprintf_r+0x4e>
 8008d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	2001      	movs	r0, #1
 8008d10:	e7a6      	b.n	8008c60 <_svfiprintf_r+0xd4>
 8008d12:	2300      	movs	r3, #0
 8008d14:	3401      	adds	r4, #1
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d24:	3a30      	subs	r2, #48	; 0x30
 8008d26:	2a09      	cmp	r2, #9
 8008d28:	d903      	bls.n	8008d32 <_svfiprintf_r+0x1a6>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c6      	beq.n	8008cbc <_svfiprintf_r+0x130>
 8008d2e:	9105      	str	r1, [sp, #20]
 8008d30:	e7c4      	b.n	8008cbc <_svfiprintf_r+0x130>
 8008d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d36:	4604      	mov	r4, r0
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7f0      	b.n	8008d1e <_svfiprintf_r+0x192>
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <_svfiprintf_r+0x1f4>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4638      	mov	r0, r7
 8008d48:	f3af 8000 	nop.w
 8008d4c:	1c42      	adds	r2, r0, #1
 8008d4e:	4606      	mov	r6, r0
 8008d50:	d1d6      	bne.n	8008d00 <_svfiprintf_r+0x174>
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	065b      	lsls	r3, r3, #25
 8008d56:	f53f af2d 	bmi.w	8008bb4 <_svfiprintf_r+0x28>
 8008d5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d5c:	b01d      	add	sp, #116	; 0x74
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <_svfiprintf_r+0x1f4>)
 8008d6a:	a904      	add	r1, sp, #16
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f000 f9bd 	bl	80090ec <_printf_i>
 8008d72:	e7eb      	b.n	8008d4c <_svfiprintf_r+0x1c0>
 8008d74:	08009b70 	.word	0x08009b70
 8008d78:	08009b7a 	.word	0x08009b7a
 8008d7c:	00000000 	.word	0x00000000
 8008d80:	08008ad9 	.word	0x08008ad9
 8008d84:	08009b76 	.word	0x08009b76

08008d88 <__sfputc_r>:
 8008d88:	6893      	ldr	r3, [r2, #8]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	b410      	push	{r4}
 8008d90:	6093      	str	r3, [r2, #8]
 8008d92:	da08      	bge.n	8008da6 <__sfputc_r+0x1e>
 8008d94:	6994      	ldr	r4, [r2, #24]
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	db01      	blt.n	8008d9e <__sfputc_r+0x16>
 8008d9a:	290a      	cmp	r1, #10
 8008d9c:	d103      	bne.n	8008da6 <__sfputc_r+0x1e>
 8008d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da2:	f000 bb73 	b.w	800948c <__swbuf_r>
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	1c58      	adds	r0, r3, #1
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	7019      	strb	r1, [r3, #0]
 8008dae:	4608      	mov	r0, r1
 8008db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <__sfputs_r>:
 8008db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	18d5      	adds	r5, r2, r3
 8008dc0:	42ac      	cmp	r4, r5
 8008dc2:	d101      	bne.n	8008dc8 <__sfputs_r+0x12>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e007      	b.n	8008dd8 <__sfputs_r+0x22>
 8008dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ffda 	bl	8008d88 <__sfputc_r>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d1f3      	bne.n	8008dc0 <__sfputs_r+0xa>
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ddc <_vfiprintf_r>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	460d      	mov	r5, r1
 8008de2:	b09d      	sub	sp, #116	; 0x74
 8008de4:	4614      	mov	r4, r2
 8008de6:	4698      	mov	r8, r3
 8008de8:	4606      	mov	r6, r0
 8008dea:	b118      	cbz	r0, 8008df4 <_vfiprintf_r+0x18>
 8008dec:	6a03      	ldr	r3, [r0, #32]
 8008dee:	b90b      	cbnz	r3, 8008df4 <_vfiprintf_r+0x18>
 8008df0:	f7ff fc44 	bl	800867c <__sinit>
 8008df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008df6:	07d9      	lsls	r1, r3, #31
 8008df8:	d405      	bmi.n	8008e06 <_vfiprintf_r+0x2a>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	059a      	lsls	r2, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_vfiprintf_r+0x2a>
 8008e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e02:	f7ff fd60 	bl	80088c6 <__retarget_lock_acquire_recursive>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	071b      	lsls	r3, r3, #28
 8008e0a:	d501      	bpl.n	8008e10 <_vfiprintf_r+0x34>
 8008e0c:	692b      	ldr	r3, [r5, #16]
 8008e0e:	b99b      	cbnz	r3, 8008e38 <_vfiprintf_r+0x5c>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 fb78 	bl	8009508 <__swsetup_r>
 8008e18:	b170      	cbz	r0, 8008e38 <_vfiprintf_r+0x5c>
 8008e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e1c:	07dc      	lsls	r4, r3, #31
 8008e1e:	d504      	bpl.n	8008e2a <_vfiprintf_r+0x4e>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e24:	b01d      	add	sp, #116	; 0x74
 8008e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	0598      	lsls	r0, r3, #22
 8008e2e:	d4f7      	bmi.n	8008e20 <_vfiprintf_r+0x44>
 8008e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e32:	f7ff fd49 	bl	80088c8 <__retarget_lock_release_recursive>
 8008e36:	e7f3      	b.n	8008e20 <_vfiprintf_r+0x44>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e46:	2330      	movs	r3, #48	; 0x30
 8008e48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ffc <_vfiprintf_r+0x220>
 8008e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e50:	f04f 0901 	mov.w	r9, #1
 8008e54:	4623      	mov	r3, r4
 8008e56:	469a      	mov	sl, r3
 8008e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e5c:	b10a      	cbz	r2, 8008e62 <_vfiprintf_r+0x86>
 8008e5e:	2a25      	cmp	r2, #37	; 0x25
 8008e60:	d1f9      	bne.n	8008e56 <_vfiprintf_r+0x7a>
 8008e62:	ebba 0b04 	subs.w	fp, sl, r4
 8008e66:	d00b      	beq.n	8008e80 <_vfiprintf_r+0xa4>
 8008e68:	465b      	mov	r3, fp
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7ff ffa1 	bl	8008db6 <__sfputs_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	f000 80a9 	beq.w	8008fcc <_vfiprintf_r+0x1f0>
 8008e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e7c:	445a      	add	r2, fp
 8008e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e80:	f89a 3000 	ldrb.w	r3, [sl]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 80a1 	beq.w	8008fcc <_vfiprintf_r+0x1f0>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	9307      	str	r3, [sp, #28]
 8008e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ea2:	4654      	mov	r4, sl
 8008ea4:	2205      	movs	r2, #5
 8008ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eaa:	4854      	ldr	r0, [pc, #336]	; (8008ffc <_vfiprintf_r+0x220>)
 8008eac:	f7f7 f9c8 	bl	8000240 <memchr>
 8008eb0:	9a04      	ldr	r2, [sp, #16]
 8008eb2:	b9d8      	cbnz	r0, 8008eec <_vfiprintf_r+0x110>
 8008eb4:	06d1      	lsls	r1, r2, #27
 8008eb6:	bf44      	itt	mi
 8008eb8:	2320      	movmi	r3, #32
 8008eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ebe:	0713      	lsls	r3, r2, #28
 8008ec0:	bf44      	itt	mi
 8008ec2:	232b      	movmi	r3, #43	; 0x2b
 8008ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ece:	d015      	beq.n	8008efc <_vfiprintf_r+0x120>
 8008ed0:	9a07      	ldr	r2, [sp, #28]
 8008ed2:	4654      	mov	r4, sl
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	f04f 0c0a 	mov.w	ip, #10
 8008eda:	4621      	mov	r1, r4
 8008edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee0:	3b30      	subs	r3, #48	; 0x30
 8008ee2:	2b09      	cmp	r3, #9
 8008ee4:	d94d      	bls.n	8008f82 <_vfiprintf_r+0x1a6>
 8008ee6:	b1b0      	cbz	r0, 8008f16 <_vfiprintf_r+0x13a>
 8008ee8:	9207      	str	r2, [sp, #28]
 8008eea:	e014      	b.n	8008f16 <_vfiprintf_r+0x13a>
 8008eec:	eba0 0308 	sub.w	r3, r0, r8
 8008ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	46a2      	mov	sl, r4
 8008efa:	e7d2      	b.n	8008ea2 <_vfiprintf_r+0xc6>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	1d19      	adds	r1, r3, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	9103      	str	r1, [sp, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfbb      	ittet	lt
 8008f08:	425b      	neglt	r3, r3
 8008f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f0e:	9307      	strge	r3, [sp, #28]
 8008f10:	9307      	strlt	r3, [sp, #28]
 8008f12:	bfb8      	it	lt
 8008f14:	9204      	strlt	r2, [sp, #16]
 8008f16:	7823      	ldrb	r3, [r4, #0]
 8008f18:	2b2e      	cmp	r3, #46	; 0x2e
 8008f1a:	d10c      	bne.n	8008f36 <_vfiprintf_r+0x15a>
 8008f1c:	7863      	ldrb	r3, [r4, #1]
 8008f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f20:	d134      	bne.n	8008f8c <_vfiprintf_r+0x1b0>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	1d1a      	adds	r2, r3, #4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	9203      	str	r2, [sp, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	bfb8      	it	lt
 8008f2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f32:	3402      	adds	r4, #2
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800900c <_vfiprintf_r+0x230>
 8008f3a:	7821      	ldrb	r1, [r4, #0]
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	4650      	mov	r0, sl
 8008f40:	f7f7 f97e 	bl	8000240 <memchr>
 8008f44:	b138      	cbz	r0, 8008f56 <_vfiprintf_r+0x17a>
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	eba0 000a 	sub.w	r0, r0, sl
 8008f4c:	2240      	movs	r2, #64	; 0x40
 8008f4e:	4082      	lsls	r2, r0
 8008f50:	4313      	orrs	r3, r2
 8008f52:	3401      	adds	r4, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5a:	4829      	ldr	r0, [pc, #164]	; (8009000 <_vfiprintf_r+0x224>)
 8008f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f60:	2206      	movs	r2, #6
 8008f62:	f7f7 f96d 	bl	8000240 <memchr>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d03f      	beq.n	8008fea <_vfiprintf_r+0x20e>
 8008f6a:	4b26      	ldr	r3, [pc, #152]	; (8009004 <_vfiprintf_r+0x228>)
 8008f6c:	bb1b      	cbnz	r3, 8008fb6 <_vfiprintf_r+0x1da>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	3307      	adds	r3, #7
 8008f72:	f023 0307 	bic.w	r3, r3, #7
 8008f76:	3308      	adds	r3, #8
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7c:	443b      	add	r3, r7
 8008f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f80:	e768      	b.n	8008e54 <_vfiprintf_r+0x78>
 8008f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f86:	460c      	mov	r4, r1
 8008f88:	2001      	movs	r0, #1
 8008f8a:	e7a6      	b.n	8008eda <_vfiprintf_r+0xfe>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	3401      	adds	r4, #1
 8008f90:	9305      	str	r3, [sp, #20]
 8008f92:	4619      	mov	r1, r3
 8008f94:	f04f 0c0a 	mov.w	ip, #10
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9e:	3a30      	subs	r2, #48	; 0x30
 8008fa0:	2a09      	cmp	r2, #9
 8008fa2:	d903      	bls.n	8008fac <_vfiprintf_r+0x1d0>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0c6      	beq.n	8008f36 <_vfiprintf_r+0x15a>
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	e7c4      	b.n	8008f36 <_vfiprintf_r+0x15a>
 8008fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7f0      	b.n	8008f98 <_vfiprintf_r+0x1bc>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4b12      	ldr	r3, [pc, #72]	; (8009008 <_vfiprintf_r+0x22c>)
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f3af 8000 	nop.w
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	1c78      	adds	r0, r7, #1
 8008fca:	d1d6      	bne.n	8008f7a <_vfiprintf_r+0x19e>
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x202>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x202>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f7ff fc75 	bl	80088c8 <__retarget_lock_release_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	065b      	lsls	r3, r3, #25
 8008fe2:	f53f af1d 	bmi.w	8008e20 <_vfiprintf_r+0x44>
 8008fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe8:	e71c      	b.n	8008e24 <_vfiprintf_r+0x48>
 8008fea:	ab03      	add	r3, sp, #12
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <_vfiprintf_r+0x22c>)
 8008ff2:	a904      	add	r1, sp, #16
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f000 f879 	bl	80090ec <_printf_i>
 8008ffa:	e7e4      	b.n	8008fc6 <_vfiprintf_r+0x1ea>
 8008ffc:	08009b70 	.word	0x08009b70
 8009000:	08009b7a 	.word	0x08009b7a
 8009004:	00000000 	.word	0x00000000
 8009008:	08008db7 	.word	0x08008db7
 800900c:	08009b76 	.word	0x08009b76

08009010 <_printf_common>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	4616      	mov	r6, r2
 8009016:	4699      	mov	r9, r3
 8009018:	688a      	ldr	r2, [r1, #8]
 800901a:	690b      	ldr	r3, [r1, #16]
 800901c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009020:	4293      	cmp	r3, r2
 8009022:	bfb8      	it	lt
 8009024:	4613      	movlt	r3, r2
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800902c:	4607      	mov	r7, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b10a      	cbz	r2, 8009036 <_printf_common+0x26>
 8009032:	3301      	adds	r3, #1
 8009034:	6033      	str	r3, [r6, #0]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	0699      	lsls	r1, r3, #26
 800903a:	bf42      	ittt	mi
 800903c:	6833      	ldrmi	r3, [r6, #0]
 800903e:	3302      	addmi	r3, #2
 8009040:	6033      	strmi	r3, [r6, #0]
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	f015 0506 	ands.w	r5, r5, #6
 8009048:	d106      	bne.n	8009058 <_printf_common+0x48>
 800904a:	f104 0a19 	add.w	sl, r4, #25
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	6832      	ldr	r2, [r6, #0]
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	42ab      	cmp	r3, r5
 8009056:	dc26      	bgt.n	80090a6 <_printf_common+0x96>
 8009058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800905c:	1e13      	subs	r3, r2, #0
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	bf18      	it	ne
 8009062:	2301      	movne	r3, #1
 8009064:	0692      	lsls	r2, r2, #26
 8009066:	d42b      	bmi.n	80090c0 <_printf_common+0xb0>
 8009068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906c:	4649      	mov	r1, r9
 800906e:	4638      	mov	r0, r7
 8009070:	47c0      	blx	r8
 8009072:	3001      	adds	r0, #1
 8009074:	d01e      	beq.n	80090b4 <_printf_common+0xa4>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	f003 0306 	and.w	r3, r3, #6
 800907e:	2b04      	cmp	r3, #4
 8009080:	bf02      	ittt	eq
 8009082:	68e5      	ldreq	r5, [r4, #12]
 8009084:	6833      	ldreq	r3, [r6, #0]
 8009086:	1aed      	subeq	r5, r5, r3
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	bf0c      	ite	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	2500      	movne	r5, #0
 8009092:	4293      	cmp	r3, r2
 8009094:	bfc4      	itt	gt
 8009096:	1a9b      	subgt	r3, r3, r2
 8009098:	18ed      	addgt	r5, r5, r3
 800909a:	2600      	movs	r6, #0
 800909c:	341a      	adds	r4, #26
 800909e:	42b5      	cmp	r5, r6
 80090a0:	d11a      	bne.n	80090d8 <_printf_common+0xc8>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e008      	b.n	80090b8 <_printf_common+0xa8>
 80090a6:	2301      	movs	r3, #1
 80090a8:	4652      	mov	r2, sl
 80090aa:	4649      	mov	r1, r9
 80090ac:	4638      	mov	r0, r7
 80090ae:	47c0      	blx	r8
 80090b0:	3001      	adds	r0, #1
 80090b2:	d103      	bne.n	80090bc <_printf_common+0xac>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090bc:	3501      	adds	r5, #1
 80090be:	e7c6      	b.n	800904e <_printf_common+0x3e>
 80090c0:	18e1      	adds	r1, r4, r3
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	2030      	movs	r0, #48	; 0x30
 80090c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ca:	4422      	add	r2, r4
 80090cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d4:	3302      	adds	r3, #2
 80090d6:	e7c7      	b.n	8009068 <_printf_common+0x58>
 80090d8:	2301      	movs	r3, #1
 80090da:	4622      	mov	r2, r4
 80090dc:	4649      	mov	r1, r9
 80090de:	4638      	mov	r0, r7
 80090e0:	47c0      	blx	r8
 80090e2:	3001      	adds	r0, #1
 80090e4:	d0e6      	beq.n	80090b4 <_printf_common+0xa4>
 80090e6:	3601      	adds	r6, #1
 80090e8:	e7d9      	b.n	800909e <_printf_common+0x8e>
	...

080090ec <_printf_i>:
 80090ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	7e0f      	ldrb	r7, [r1, #24]
 80090f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090f4:	2f78      	cmp	r7, #120	; 0x78
 80090f6:	4691      	mov	r9, r2
 80090f8:	4680      	mov	r8, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	469a      	mov	sl, r3
 80090fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009102:	d807      	bhi.n	8009114 <_printf_i+0x28>
 8009104:	2f62      	cmp	r7, #98	; 0x62
 8009106:	d80a      	bhi.n	800911e <_printf_i+0x32>
 8009108:	2f00      	cmp	r7, #0
 800910a:	f000 80d4 	beq.w	80092b6 <_printf_i+0x1ca>
 800910e:	2f58      	cmp	r7, #88	; 0x58
 8009110:	f000 80c0 	beq.w	8009294 <_printf_i+0x1a8>
 8009114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800911c:	e03a      	b.n	8009194 <_printf_i+0xa8>
 800911e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009122:	2b15      	cmp	r3, #21
 8009124:	d8f6      	bhi.n	8009114 <_printf_i+0x28>
 8009126:	a101      	add	r1, pc, #4	; (adr r1, 800912c <_printf_i+0x40>)
 8009128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800912c:	08009185 	.word	0x08009185
 8009130:	08009199 	.word	0x08009199
 8009134:	08009115 	.word	0x08009115
 8009138:	08009115 	.word	0x08009115
 800913c:	08009115 	.word	0x08009115
 8009140:	08009115 	.word	0x08009115
 8009144:	08009199 	.word	0x08009199
 8009148:	08009115 	.word	0x08009115
 800914c:	08009115 	.word	0x08009115
 8009150:	08009115 	.word	0x08009115
 8009154:	08009115 	.word	0x08009115
 8009158:	0800929d 	.word	0x0800929d
 800915c:	080091c5 	.word	0x080091c5
 8009160:	08009257 	.word	0x08009257
 8009164:	08009115 	.word	0x08009115
 8009168:	08009115 	.word	0x08009115
 800916c:	080092bf 	.word	0x080092bf
 8009170:	08009115 	.word	0x08009115
 8009174:	080091c5 	.word	0x080091c5
 8009178:	08009115 	.word	0x08009115
 800917c:	08009115 	.word	0x08009115
 8009180:	0800925f 	.word	0x0800925f
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	1d1a      	adds	r2, r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	602a      	str	r2, [r5, #0]
 800918c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009194:	2301      	movs	r3, #1
 8009196:	e09f      	b.n	80092d8 <_printf_i+0x1ec>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	0607      	lsls	r7, r0, #24
 800919e:	f103 0104 	add.w	r1, r3, #4
 80091a2:	6029      	str	r1, [r5, #0]
 80091a4:	d501      	bpl.n	80091aa <_printf_i+0xbe>
 80091a6:	681e      	ldr	r6, [r3, #0]
 80091a8:	e003      	b.n	80091b2 <_printf_i+0xc6>
 80091aa:	0646      	lsls	r6, r0, #25
 80091ac:	d5fb      	bpl.n	80091a6 <_printf_i+0xba>
 80091ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	da03      	bge.n	80091be <_printf_i+0xd2>
 80091b6:	232d      	movs	r3, #45	; 0x2d
 80091b8:	4276      	negs	r6, r6
 80091ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091be:	485a      	ldr	r0, [pc, #360]	; (8009328 <_printf_i+0x23c>)
 80091c0:	230a      	movs	r3, #10
 80091c2:	e012      	b.n	80091ea <_printf_i+0xfe>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	1d19      	adds	r1, r3, #4
 80091ca:	6029      	str	r1, [r5, #0]
 80091cc:	0605      	lsls	r5, r0, #24
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0xe8>
 80091d0:	681e      	ldr	r6, [r3, #0]
 80091d2:	e002      	b.n	80091da <_printf_i+0xee>
 80091d4:	0641      	lsls	r1, r0, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0xe4>
 80091d8:	881e      	ldrh	r6, [r3, #0]
 80091da:	4853      	ldr	r0, [pc, #332]	; (8009328 <_printf_i+0x23c>)
 80091dc:	2f6f      	cmp	r7, #111	; 0x6f
 80091de:	bf0c      	ite	eq
 80091e0:	2308      	moveq	r3, #8
 80091e2:	230a      	movne	r3, #10
 80091e4:	2100      	movs	r1, #0
 80091e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ea:	6865      	ldr	r5, [r4, #4]
 80091ec:	60a5      	str	r5, [r4, #8]
 80091ee:	2d00      	cmp	r5, #0
 80091f0:	bfa2      	ittt	ge
 80091f2:	6821      	ldrge	r1, [r4, #0]
 80091f4:	f021 0104 	bicge.w	r1, r1, #4
 80091f8:	6021      	strge	r1, [r4, #0]
 80091fa:	b90e      	cbnz	r6, 8009200 <_printf_i+0x114>
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	d04b      	beq.n	8009298 <_printf_i+0x1ac>
 8009200:	4615      	mov	r5, r2
 8009202:	fbb6 f1f3 	udiv	r1, r6, r3
 8009206:	fb03 6711 	mls	r7, r3, r1, r6
 800920a:	5dc7      	ldrb	r7, [r0, r7]
 800920c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009210:	4637      	mov	r7, r6
 8009212:	42bb      	cmp	r3, r7
 8009214:	460e      	mov	r6, r1
 8009216:	d9f4      	bls.n	8009202 <_printf_i+0x116>
 8009218:	2b08      	cmp	r3, #8
 800921a:	d10b      	bne.n	8009234 <_printf_i+0x148>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	07de      	lsls	r6, r3, #31
 8009220:	d508      	bpl.n	8009234 <_printf_i+0x148>
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	6861      	ldr	r1, [r4, #4]
 8009226:	4299      	cmp	r1, r3
 8009228:	bfde      	ittt	le
 800922a:	2330      	movle	r3, #48	; 0x30
 800922c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009230:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009234:	1b52      	subs	r2, r2, r5
 8009236:	6122      	str	r2, [r4, #16]
 8009238:	f8cd a000 	str.w	sl, [sp]
 800923c:	464b      	mov	r3, r9
 800923e:	aa03      	add	r2, sp, #12
 8009240:	4621      	mov	r1, r4
 8009242:	4640      	mov	r0, r8
 8009244:	f7ff fee4 	bl	8009010 <_printf_common>
 8009248:	3001      	adds	r0, #1
 800924a:	d14a      	bne.n	80092e2 <_printf_i+0x1f6>
 800924c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009250:	b004      	add	sp, #16
 8009252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	f043 0320 	orr.w	r3, r3, #32
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	4833      	ldr	r0, [pc, #204]	; (800932c <_printf_i+0x240>)
 8009260:	2778      	movs	r7, #120	; 0x78
 8009262:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	6829      	ldr	r1, [r5, #0]
 800926a:	061f      	lsls	r7, r3, #24
 800926c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009270:	d402      	bmi.n	8009278 <_printf_i+0x18c>
 8009272:	065f      	lsls	r7, r3, #25
 8009274:	bf48      	it	mi
 8009276:	b2b6      	uxthmi	r6, r6
 8009278:	07df      	lsls	r7, r3, #31
 800927a:	bf48      	it	mi
 800927c:	f043 0320 	orrmi.w	r3, r3, #32
 8009280:	6029      	str	r1, [r5, #0]
 8009282:	bf48      	it	mi
 8009284:	6023      	strmi	r3, [r4, #0]
 8009286:	b91e      	cbnz	r6, 8009290 <_printf_i+0x1a4>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	f023 0320 	bic.w	r3, r3, #32
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	2310      	movs	r3, #16
 8009292:	e7a7      	b.n	80091e4 <_printf_i+0xf8>
 8009294:	4824      	ldr	r0, [pc, #144]	; (8009328 <_printf_i+0x23c>)
 8009296:	e7e4      	b.n	8009262 <_printf_i+0x176>
 8009298:	4615      	mov	r5, r2
 800929a:	e7bd      	b.n	8009218 <_printf_i+0x12c>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	6826      	ldr	r6, [r4, #0]
 80092a0:	6961      	ldr	r1, [r4, #20]
 80092a2:	1d18      	adds	r0, r3, #4
 80092a4:	6028      	str	r0, [r5, #0]
 80092a6:	0635      	lsls	r5, r6, #24
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	d501      	bpl.n	80092b0 <_printf_i+0x1c4>
 80092ac:	6019      	str	r1, [r3, #0]
 80092ae:	e002      	b.n	80092b6 <_printf_i+0x1ca>
 80092b0:	0670      	lsls	r0, r6, #25
 80092b2:	d5fb      	bpl.n	80092ac <_printf_i+0x1c0>
 80092b4:	8019      	strh	r1, [r3, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	4615      	mov	r5, r2
 80092bc:	e7bc      	b.n	8009238 <_printf_i+0x14c>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	1d1a      	adds	r2, r3, #4
 80092c2:	602a      	str	r2, [r5, #0]
 80092c4:	681d      	ldr	r5, [r3, #0]
 80092c6:	6862      	ldr	r2, [r4, #4]
 80092c8:	2100      	movs	r1, #0
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7f6 ffb8 	bl	8000240 <memchr>
 80092d0:	b108      	cbz	r0, 80092d6 <_printf_i+0x1ea>
 80092d2:	1b40      	subs	r0, r0, r5
 80092d4:	6060      	str	r0, [r4, #4]
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	2300      	movs	r3, #0
 80092dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e0:	e7aa      	b.n	8009238 <_printf_i+0x14c>
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	462a      	mov	r2, r5
 80092e6:	4649      	mov	r1, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	47d0      	blx	sl
 80092ec:	3001      	adds	r0, #1
 80092ee:	d0ad      	beq.n	800924c <_printf_i+0x160>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	079b      	lsls	r3, r3, #30
 80092f4:	d413      	bmi.n	800931e <_printf_i+0x232>
 80092f6:	68e0      	ldr	r0, [r4, #12]
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	4298      	cmp	r0, r3
 80092fc:	bfb8      	it	lt
 80092fe:	4618      	movlt	r0, r3
 8009300:	e7a6      	b.n	8009250 <_printf_i+0x164>
 8009302:	2301      	movs	r3, #1
 8009304:	4632      	mov	r2, r6
 8009306:	4649      	mov	r1, r9
 8009308:	4640      	mov	r0, r8
 800930a:	47d0      	blx	sl
 800930c:	3001      	adds	r0, #1
 800930e:	d09d      	beq.n	800924c <_printf_i+0x160>
 8009310:	3501      	adds	r5, #1
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	9903      	ldr	r1, [sp, #12]
 8009316:	1a5b      	subs	r3, r3, r1
 8009318:	42ab      	cmp	r3, r5
 800931a:	dcf2      	bgt.n	8009302 <_printf_i+0x216>
 800931c:	e7eb      	b.n	80092f6 <_printf_i+0x20a>
 800931e:	2500      	movs	r5, #0
 8009320:	f104 0619 	add.w	r6, r4, #25
 8009324:	e7f5      	b.n	8009312 <_printf_i+0x226>
 8009326:	bf00      	nop
 8009328:	08009b81 	.word	0x08009b81
 800932c:	08009b92 	.word	0x08009b92

08009330 <__sflush_r>:
 8009330:	898a      	ldrh	r2, [r1, #12]
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	4605      	mov	r5, r0
 8009338:	0710      	lsls	r0, r2, #28
 800933a:	460c      	mov	r4, r1
 800933c:	d458      	bmi.n	80093f0 <__sflush_r+0xc0>
 800933e:	684b      	ldr	r3, [r1, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	dc05      	bgt.n	8009350 <__sflush_r+0x20>
 8009344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	dc02      	bgt.n	8009350 <__sflush_r+0x20>
 800934a:	2000      	movs	r0, #0
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009352:	2e00      	cmp	r6, #0
 8009354:	d0f9      	beq.n	800934a <__sflush_r+0x1a>
 8009356:	2300      	movs	r3, #0
 8009358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800935c:	682f      	ldr	r7, [r5, #0]
 800935e:	6a21      	ldr	r1, [r4, #32]
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	d032      	beq.n	80093ca <__sflush_r+0x9a>
 8009364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	075a      	lsls	r2, r3, #29
 800936a:	d505      	bpl.n	8009378 <__sflush_r+0x48>
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	1ac0      	subs	r0, r0, r3
 8009370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009372:	b10b      	cbz	r3, 8009378 <__sflush_r+0x48>
 8009374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009376:	1ac0      	subs	r0, r0, r3
 8009378:	2300      	movs	r3, #0
 800937a:	4602      	mov	r2, r0
 800937c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800937e:	6a21      	ldr	r1, [r4, #32]
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	d106      	bne.n	8009398 <__sflush_r+0x68>
 800938a:	6829      	ldr	r1, [r5, #0]
 800938c:	291d      	cmp	r1, #29
 800938e:	d82b      	bhi.n	80093e8 <__sflush_r+0xb8>
 8009390:	4a29      	ldr	r2, [pc, #164]	; (8009438 <__sflush_r+0x108>)
 8009392:	410a      	asrs	r2, r1
 8009394:	07d6      	lsls	r6, r2, #31
 8009396:	d427      	bmi.n	80093e8 <__sflush_r+0xb8>
 8009398:	2200      	movs	r2, #0
 800939a:	6062      	str	r2, [r4, #4]
 800939c:	04d9      	lsls	r1, r3, #19
 800939e:	6922      	ldr	r2, [r4, #16]
 80093a0:	6022      	str	r2, [r4, #0]
 80093a2:	d504      	bpl.n	80093ae <__sflush_r+0x7e>
 80093a4:	1c42      	adds	r2, r0, #1
 80093a6:	d101      	bne.n	80093ac <__sflush_r+0x7c>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b903      	cbnz	r3, 80093ae <__sflush_r+0x7e>
 80093ac:	6560      	str	r0, [r4, #84]	; 0x54
 80093ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093b0:	602f      	str	r7, [r5, #0]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d0c9      	beq.n	800934a <__sflush_r+0x1a>
 80093b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d002      	beq.n	80093c4 <__sflush_r+0x94>
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff fa92 	bl	80088e8 <_free_r>
 80093c4:	2000      	movs	r0, #0
 80093c6:	6360      	str	r0, [r4, #52]	; 0x34
 80093c8:	e7c0      	b.n	800934c <__sflush_r+0x1c>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	1c41      	adds	r1, r0, #1
 80093d2:	d1c8      	bne.n	8009366 <__sflush_r+0x36>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c5      	beq.n	8009366 <__sflush_r+0x36>
 80093da:	2b1d      	cmp	r3, #29
 80093dc:	d001      	beq.n	80093e2 <__sflush_r+0xb2>
 80093de:	2b16      	cmp	r3, #22
 80093e0:	d101      	bne.n	80093e6 <__sflush_r+0xb6>
 80093e2:	602f      	str	r7, [r5, #0]
 80093e4:	e7b1      	b.n	800934a <__sflush_r+0x1a>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e7ad      	b.n	800934c <__sflush_r+0x1c>
 80093f0:	690f      	ldr	r7, [r1, #16]
 80093f2:	2f00      	cmp	r7, #0
 80093f4:	d0a9      	beq.n	800934a <__sflush_r+0x1a>
 80093f6:	0793      	lsls	r3, r2, #30
 80093f8:	680e      	ldr	r6, [r1, #0]
 80093fa:	bf08      	it	eq
 80093fc:	694b      	ldreq	r3, [r1, #20]
 80093fe:	600f      	str	r7, [r1, #0]
 8009400:	bf18      	it	ne
 8009402:	2300      	movne	r3, #0
 8009404:	eba6 0807 	sub.w	r8, r6, r7
 8009408:	608b      	str	r3, [r1, #8]
 800940a:	f1b8 0f00 	cmp.w	r8, #0
 800940e:	dd9c      	ble.n	800934a <__sflush_r+0x1a>
 8009410:	6a21      	ldr	r1, [r4, #32]
 8009412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009414:	4643      	mov	r3, r8
 8009416:	463a      	mov	r2, r7
 8009418:	4628      	mov	r0, r5
 800941a:	47b0      	blx	r6
 800941c:	2800      	cmp	r0, #0
 800941e:	dc06      	bgt.n	800942e <__sflush_r+0xfe>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800942c:	e78e      	b.n	800934c <__sflush_r+0x1c>
 800942e:	4407      	add	r7, r0
 8009430:	eba8 0800 	sub.w	r8, r8, r0
 8009434:	e7e9      	b.n	800940a <__sflush_r+0xda>
 8009436:	bf00      	nop
 8009438:	dfbffffe 	.word	0xdfbffffe

0800943c <_fflush_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b913      	cbnz	r3, 800944c <_fflush_r+0x10>
 8009446:	2500      	movs	r5, #0
 8009448:	4628      	mov	r0, r5
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	b118      	cbz	r0, 8009456 <_fflush_r+0x1a>
 800944e:	6a03      	ldr	r3, [r0, #32]
 8009450:	b90b      	cbnz	r3, 8009456 <_fflush_r+0x1a>
 8009452:	f7ff f913 	bl	800867c <__sinit>
 8009456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0f3      	beq.n	8009446 <_fflush_r+0xa>
 800945e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009460:	07d0      	lsls	r0, r2, #31
 8009462:	d404      	bmi.n	800946e <_fflush_r+0x32>
 8009464:	0599      	lsls	r1, r3, #22
 8009466:	d402      	bmi.n	800946e <_fflush_r+0x32>
 8009468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800946a:	f7ff fa2c 	bl	80088c6 <__retarget_lock_acquire_recursive>
 800946e:	4628      	mov	r0, r5
 8009470:	4621      	mov	r1, r4
 8009472:	f7ff ff5d 	bl	8009330 <__sflush_r>
 8009476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009478:	07da      	lsls	r2, r3, #31
 800947a:	4605      	mov	r5, r0
 800947c:	d4e4      	bmi.n	8009448 <_fflush_r+0xc>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	059b      	lsls	r3, r3, #22
 8009482:	d4e1      	bmi.n	8009448 <_fflush_r+0xc>
 8009484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009486:	f7ff fa1f 	bl	80088c8 <__retarget_lock_release_recursive>
 800948a:	e7dd      	b.n	8009448 <_fflush_r+0xc>

0800948c <__swbuf_r>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	460e      	mov	r6, r1
 8009490:	4614      	mov	r4, r2
 8009492:	4605      	mov	r5, r0
 8009494:	b118      	cbz	r0, 800949e <__swbuf_r+0x12>
 8009496:	6a03      	ldr	r3, [r0, #32]
 8009498:	b90b      	cbnz	r3, 800949e <__swbuf_r+0x12>
 800949a:	f7ff f8ef 	bl	800867c <__sinit>
 800949e:	69a3      	ldr	r3, [r4, #24]
 80094a0:	60a3      	str	r3, [r4, #8]
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	071a      	lsls	r2, r3, #28
 80094a6:	d525      	bpl.n	80094f4 <__swbuf_r+0x68>
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	b31b      	cbz	r3, 80094f4 <__swbuf_r+0x68>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	6922      	ldr	r2, [r4, #16]
 80094b0:	1a98      	subs	r0, r3, r2
 80094b2:	6963      	ldr	r3, [r4, #20]
 80094b4:	b2f6      	uxtb	r6, r6
 80094b6:	4283      	cmp	r3, r0
 80094b8:	4637      	mov	r7, r6
 80094ba:	dc04      	bgt.n	80094c6 <__swbuf_r+0x3a>
 80094bc:	4621      	mov	r1, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	f7ff ffbc 	bl	800943c <_fflush_r>
 80094c4:	b9e0      	cbnz	r0, 8009500 <__swbuf_r+0x74>
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	60a3      	str	r3, [r4, #8]
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	701e      	strb	r6, [r3, #0]
 80094d4:	6962      	ldr	r2, [r4, #20]
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	429a      	cmp	r2, r3
 80094da:	d004      	beq.n	80094e6 <__swbuf_r+0x5a>
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	07db      	lsls	r3, r3, #31
 80094e0:	d506      	bpl.n	80094f0 <__swbuf_r+0x64>
 80094e2:	2e0a      	cmp	r6, #10
 80094e4:	d104      	bne.n	80094f0 <__swbuf_r+0x64>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff ffa7 	bl	800943c <_fflush_r>
 80094ee:	b938      	cbnz	r0, 8009500 <__swbuf_r+0x74>
 80094f0:	4638      	mov	r0, r7
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f4:	4621      	mov	r1, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f806 	bl	8009508 <__swsetup_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0d5      	beq.n	80094ac <__swbuf_r+0x20>
 8009500:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009504:	e7f4      	b.n	80094f0 <__swbuf_r+0x64>
	...

08009508 <__swsetup_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <__swsetup_r+0xac>)
 800950c:	4605      	mov	r5, r0
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	460c      	mov	r4, r1
 8009512:	b118      	cbz	r0, 800951c <__swsetup_r+0x14>
 8009514:	6a03      	ldr	r3, [r0, #32]
 8009516:	b90b      	cbnz	r3, 800951c <__swsetup_r+0x14>
 8009518:	f7ff f8b0 	bl	800867c <__sinit>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009522:	0718      	lsls	r0, r3, #28
 8009524:	d422      	bmi.n	800956c <__swsetup_r+0x64>
 8009526:	06d9      	lsls	r1, r3, #27
 8009528:	d407      	bmi.n	800953a <__swsetup_r+0x32>
 800952a:	2309      	movs	r3, #9
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009538:	e034      	b.n	80095a4 <__swsetup_r+0x9c>
 800953a:	0758      	lsls	r0, r3, #29
 800953c:	d512      	bpl.n	8009564 <__swsetup_r+0x5c>
 800953e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009540:	b141      	cbz	r1, 8009554 <__swsetup_r+0x4c>
 8009542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009546:	4299      	cmp	r1, r3
 8009548:	d002      	beq.n	8009550 <__swsetup_r+0x48>
 800954a:	4628      	mov	r0, r5
 800954c:	f7ff f9cc 	bl	80088e8 <_free_r>
 8009550:	2300      	movs	r3, #0
 8009552:	6363      	str	r3, [r4, #52]	; 0x34
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	2300      	movs	r3, #0
 800955e:	6063      	str	r3, [r4, #4]
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f043 0308 	orr.w	r3, r3, #8
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	b94b      	cbnz	r3, 8009584 <__swsetup_r+0x7c>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800957a:	d003      	beq.n	8009584 <__swsetup_r+0x7c>
 800957c:	4621      	mov	r1, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f899 	bl	80096b6 <__smakebuf_r>
 8009584:	89a0      	ldrh	r0, [r4, #12]
 8009586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800958a:	f010 0301 	ands.w	r3, r0, #1
 800958e:	d00a      	beq.n	80095a6 <__swsetup_r+0x9e>
 8009590:	2300      	movs	r3, #0
 8009592:	60a3      	str	r3, [r4, #8]
 8009594:	6963      	ldr	r3, [r4, #20]
 8009596:	425b      	negs	r3, r3
 8009598:	61a3      	str	r3, [r4, #24]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	b943      	cbnz	r3, 80095b0 <__swsetup_r+0xa8>
 800959e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095a2:	d1c4      	bne.n	800952e <__swsetup_r+0x26>
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	0781      	lsls	r1, r0, #30
 80095a8:	bf58      	it	pl
 80095aa:	6963      	ldrpl	r3, [r4, #20]
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	e7f4      	b.n	800959a <__swsetup_r+0x92>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7f7      	b.n	80095a4 <__swsetup_r+0x9c>
 80095b4:	20000080 	.word	0x20000080

080095b8 <memmove>:
 80095b8:	4288      	cmp	r0, r1
 80095ba:	b510      	push	{r4, lr}
 80095bc:	eb01 0402 	add.w	r4, r1, r2
 80095c0:	d902      	bls.n	80095c8 <memmove+0x10>
 80095c2:	4284      	cmp	r4, r0
 80095c4:	4623      	mov	r3, r4
 80095c6:	d807      	bhi.n	80095d8 <memmove+0x20>
 80095c8:	1e43      	subs	r3, r0, #1
 80095ca:	42a1      	cmp	r1, r4
 80095cc:	d008      	beq.n	80095e0 <memmove+0x28>
 80095ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095d6:	e7f8      	b.n	80095ca <memmove+0x12>
 80095d8:	4402      	add	r2, r0
 80095da:	4601      	mov	r1, r0
 80095dc:	428a      	cmp	r2, r1
 80095de:	d100      	bne.n	80095e2 <memmove+0x2a>
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095ea:	e7f7      	b.n	80095dc <memmove+0x24>

080095ec <_sbrk_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	; (8009608 <_sbrk_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f7 ff38 	bl	800146c <_sbrk>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_sbrk_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_sbrk_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	200130c4 	.word	0x200130c4

0800960c <_realloc_r>:
 800960c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009610:	4680      	mov	r8, r0
 8009612:	4614      	mov	r4, r2
 8009614:	460e      	mov	r6, r1
 8009616:	b921      	cbnz	r1, 8009622 <_realloc_r+0x16>
 8009618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	4611      	mov	r1, r2
 800961e:	f7ff b9cf 	b.w	80089c0 <_malloc_r>
 8009622:	b92a      	cbnz	r2, 8009630 <_realloc_r+0x24>
 8009624:	f7ff f960 	bl	80088e8 <_free_r>
 8009628:	4625      	mov	r5, r4
 800962a:	4628      	mov	r0, r5
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009630:	f000 f8a0 	bl	8009774 <_malloc_usable_size_r>
 8009634:	4284      	cmp	r4, r0
 8009636:	4607      	mov	r7, r0
 8009638:	d802      	bhi.n	8009640 <_realloc_r+0x34>
 800963a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800963e:	d812      	bhi.n	8009666 <_realloc_r+0x5a>
 8009640:	4621      	mov	r1, r4
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff f9bc 	bl	80089c0 <_malloc_r>
 8009648:	4605      	mov	r5, r0
 800964a:	2800      	cmp	r0, #0
 800964c:	d0ed      	beq.n	800962a <_realloc_r+0x1e>
 800964e:	42bc      	cmp	r4, r7
 8009650:	4622      	mov	r2, r4
 8009652:	4631      	mov	r1, r6
 8009654:	bf28      	it	cs
 8009656:	463a      	movcs	r2, r7
 8009658:	f7ff f937 	bl	80088ca <memcpy>
 800965c:	4631      	mov	r1, r6
 800965e:	4640      	mov	r0, r8
 8009660:	f7ff f942 	bl	80088e8 <_free_r>
 8009664:	e7e1      	b.n	800962a <_realloc_r+0x1e>
 8009666:	4635      	mov	r5, r6
 8009668:	e7df      	b.n	800962a <_realloc_r+0x1e>

0800966a <__swhatbuf_r>:
 800966a:	b570      	push	{r4, r5, r6, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009672:	2900      	cmp	r1, #0
 8009674:	b096      	sub	sp, #88	; 0x58
 8009676:	4615      	mov	r5, r2
 8009678:	461e      	mov	r6, r3
 800967a:	da0d      	bge.n	8009698 <__swhatbuf_r+0x2e>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009682:	f04f 0100 	mov.w	r1, #0
 8009686:	bf0c      	ite	eq
 8009688:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800968c:	2340      	movne	r3, #64	; 0x40
 800968e:	2000      	movs	r0, #0
 8009690:	6031      	str	r1, [r6, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	b016      	add	sp, #88	; 0x58
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	466a      	mov	r2, sp
 800969a:	f000 f849 	bl	8009730 <_fstat_r>
 800969e:	2800      	cmp	r0, #0
 80096a0:	dbec      	blt.n	800967c <__swhatbuf_r+0x12>
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096a8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096ac:	4259      	negs	r1, r3
 80096ae:	4159      	adcs	r1, r3
 80096b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096b4:	e7eb      	b.n	800968e <__swhatbuf_r+0x24>

080096b6 <__smakebuf_r>:
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096ba:	079d      	lsls	r5, r3, #30
 80096bc:	4606      	mov	r6, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	d507      	bpl.n	80096d2 <__smakebuf_r+0x1c>
 80096c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	2301      	movs	r3, #1
 80096cc:	6163      	str	r3, [r4, #20]
 80096ce:	b002      	add	sp, #8
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	ab01      	add	r3, sp, #4
 80096d4:	466a      	mov	r2, sp
 80096d6:	f7ff ffc8 	bl	800966a <__swhatbuf_r>
 80096da:	9900      	ldr	r1, [sp, #0]
 80096dc:	4605      	mov	r5, r0
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff f96e 	bl	80089c0 <_malloc_r>
 80096e4:	b948      	cbnz	r0, 80096fa <__smakebuf_r+0x44>
 80096e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ea:	059a      	lsls	r2, r3, #22
 80096ec:	d4ef      	bmi.n	80096ce <__smakebuf_r+0x18>
 80096ee:	f023 0303 	bic.w	r3, r3, #3
 80096f2:	f043 0302 	orr.w	r3, r3, #2
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	e7e3      	b.n	80096c2 <__smakebuf_r+0xc>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	6020      	str	r0, [r4, #0]
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	9b00      	ldr	r3, [sp, #0]
 8009706:	6163      	str	r3, [r4, #20]
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	6120      	str	r0, [r4, #16]
 800970c:	b15b      	cbz	r3, 8009726 <__smakebuf_r+0x70>
 800970e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009712:	4630      	mov	r0, r6
 8009714:	f000 f81e 	bl	8009754 <_isatty_r>
 8009718:	b128      	cbz	r0, 8009726 <__smakebuf_r+0x70>
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f023 0303 	bic.w	r3, r3, #3
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	431d      	orrs	r5, r3
 800972a:	81a5      	strh	r5, [r4, #12]
 800972c:	e7cf      	b.n	80096ce <__smakebuf_r+0x18>
	...

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	; (8009750 <_fstat_r+0x20>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f7 fe6c 	bl	800141a <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	200130c4 	.word	0x200130c4

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	; (8009770 <_isatty_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f7 fe6b 	bl	800143a <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	200130c4 	.word	0x200130c4

08009774 <_malloc_usable_size_r>:
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f18      	subs	r0, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbc      	itt	lt
 800977e:	580b      	ldrlt	r3, [r1, r0]
 8009780:	18c0      	addlt	r0, r0, r3
 8009782:	4770      	bx	lr

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
