
008_Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007690  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a28  08007a28  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ea8  20000020  08007a50  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ec8  08007a50  00022ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ce5  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035af  00000000  00000000  00035d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f37  00000000  00000000  0003a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002490d  00000000  00000000  0003b5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b63  00000000  00000000  0005fefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df8b7  00000000  00000000  00077a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005180  00000000  00000000  00157318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0015c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007848 	.word	0x08007848

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	08007848 	.word	0x08007848

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b970 	b.w	800052c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d965      	bls.n	8000346 <__udivmoddi4+0xe2>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa20 f202 	lsr.w	r2, r0, r2
 800028e:	4317      	orrs	r7, r2
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	fbb7 f1fe 	udiv	r1, r7, lr
 800029e:	0c22      	lsrs	r2, r4, #16
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a8:	fb01 f005 	mul.w	r0, r1, r5
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002b8:	f080 811c 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8119 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	fb00 f505 	mul.w	r5, r0, r5
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x294>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x294>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xbc>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ed 	beq.w	80004ee <__udivmoddi4+0x28a>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d149      	bne.n	80003bc <__udivmoddi4+0x158>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xce>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4617      	mov	r7, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000340:	e9c6 4700 	strd	r4, r7, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa2>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xe6>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x210>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035a:	fa1f fe8c 	uxth.w	lr, ip
 800035e:	2101      	movs	r1, #1
 8000360:	fbb2 f5f7 	udiv	r5, r2, r7
 8000364:	fb07 2015 	mls	r0, r7, r5, r2
 8000368:	0c22      	lsrs	r2, r4, #16
 800036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036e:	fb0e f005 	mul.w	r0, lr, r5
 8000372:	4290      	cmp	r0, r2
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x124>
 8000376:	eb1c 0202 	adds.w	r2, ip, r2
 800037a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4290      	cmp	r0, r2
 8000382:	f200 80cb 	bhi.w	800051c <__udivmoddi4+0x2b8>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000398:	fb0e fe00 	mul.w	lr, lr, r0
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f200 80bb 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	eba4 040e 	sub.w	r4, r4, lr
 80003b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ba:	e79f      	b.n	80002fc <__udivmoddi4+0x98>
 80003bc:	f1c1 0720 	rsb	r7, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa05 f401 	lsl.w	r4, r5, r1
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	40fd      	lsrs	r5, r7
 80003d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fbb5 f8f9 	udiv	r8, r5, r9
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fb09 5518 	mls	r5, r9, r8, r5
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb08 f50e 	mul.w	r5, r8, lr
 80003f0:	42a5      	cmp	r5, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	fa00 f001 	lsl.w	r0, r0, r1
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	42a5      	cmp	r5, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a8 0802 	sub.w	r8, r8, #2
 8000412:	4464      	add	r4, ip
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	b29d      	uxth	r5, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	fb03 fe0e 	mul.w	lr, r3, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000434:	d26c      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000436:	45a6      	cmp	lr, r4
 8000438:	d96a      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043a:	3b02      	subs	r3, #2
 800043c:	4464      	add	r4, ip
 800043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000442:	fba3 9502 	umull	r9, r5, r3, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	42ac      	cmp	r4, r5
 800044c:	46c8      	mov	r8, r9
 800044e:	46ae      	mov	lr, r5
 8000450:	d356      	bcc.n	8000500 <__udivmoddi4+0x29c>
 8000452:	d053      	beq.n	80004fc <__udivmoddi4+0x298>
 8000454:	b156      	cbz	r6, 800046c <__udivmoddi4+0x208>
 8000456:	ebb0 0208 	subs.w	r2, r0, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	fa04 f707 	lsl.w	r7, r4, r7
 8000462:	40ca      	lsrs	r2, r1
 8000464:	40cc      	lsrs	r4, r1
 8000466:	4317      	orrs	r7, r2
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	4618      	mov	r0, r3
 800046e:	2100      	movs	r1, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	f1c3 0120 	rsb	r1, r3, #32
 8000478:	fa02 fc03 	lsl.w	ip, r2, r3
 800047c:	fa20 f201 	lsr.w	r2, r0, r1
 8000480:	fa25 f101 	lsr.w	r1, r5, r1
 8000484:	409d      	lsls	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1510 	mls	r5, r7, r0, r1
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	fb00 f50e 	mul.w	r5, r0, lr
 80004a2:	428d      	cmp	r5, r1
 80004a4:	fa04 f403 	lsl.w	r4, r4, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x258>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b2:	d22f      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	428d      	cmp	r5, r1
 80004b6:	d92d      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1b49      	subs	r1, r1, r5
 80004be:	b292      	uxth	r2, r2
 80004c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c4:	fb07 1115 	mls	r1, r7, r5, r1
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	fb05 f10e 	mul.w	r1, r5, lr
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x282>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004dc:	d216      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004de:	4291      	cmp	r1, r2
 80004e0:	d914      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004e2:	3d02      	subs	r5, #2
 80004e4:	4462      	add	r2, ip
 80004e6:	1a52      	subs	r2, r2, r1
 80004e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ec:	e738      	b.n	8000360 <__udivmoddi4+0xfc>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xa2>
 80004f4:	4639      	mov	r1, r7
 80004f6:	e6e6      	b.n	80002c6 <__udivmoddi4+0x62>
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x90>
 80004fc:	4548      	cmp	r0, r9
 80004fe:	d2a9      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 8000500:	ebb9 0802 	subs.w	r8, r9, r2
 8000504:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000508:	3b01      	subs	r3, #1
 800050a:	e7a3      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050c:	4645      	mov	r5, r8
 800050e:	e7ea      	b.n	80004e6 <__udivmoddi4+0x282>
 8000510:	462b      	mov	r3, r5
 8000512:	e794      	b.n	800043e <__udivmoddi4+0x1da>
 8000514:	4640      	mov	r0, r8
 8000516:	e7d1      	b.n	80004bc <__udivmoddi4+0x258>
 8000518:	46d0      	mov	r8, sl
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e732      	b.n	8000388 <__udivmoddi4+0x124>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xd8>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e742      	b.n	80003b2 <__udivmoddi4+0x14e>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <led_effect_stop>:
 */

#include "main.h"


void led_effect_stop(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af02      	add	r7, sp, #8

	for(int i=0; i<4; i++){
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e00e      	b.n	800055a <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i], portMAX_DELAY);
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <led_effect_stop+0x3c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2200      	movs	r2, #0
 800054e:	2103      	movs	r1, #3
 8000550:	f006 fa60 	bl	8006a14 <xTimerGenericCommand>
	for(int i=0; i<4; i++){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b03      	cmp	r3, #3
 800055e:	dded      	ble.n	800053c <led_effect_stop+0xc>
	}

}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000c4 	.word	0x200000c4

08000570 <led_effect>:


void led_effect(int n){
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]

	led_effect_stop();
 8000578:	f7ff ffda 	bl	8000530 <led_effect_stop>
	xTimerStart(led_timer_handle[n-1], portMAX_DELAY);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <led_effect+0x34>)
 8000582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000586:	f005 f99b 	bl	80058c0 <xTaskGetTickCount>
 800058a:	4602      	mov	r2, r0
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4620      	mov	r0, r4
 8000598:	f006 fa3c 	bl	8006a14 <xTimerGenericCommand>

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	200000c4 	.word	0x200000c4

080005a8 <turn_off_all_leds>:


void turn_off_all_leds(void){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <turn_off_all_leds+0x38>)
 80005b4:	f001 fa8c 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <turn_off_all_leds+0x38>)
 80005c0:	f001 fa86 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <turn_off_all_leds+0x3c>)
 80005cc:	f001 fa80 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2110      	movs	r1, #16
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <turn_off_all_leds+0x3c>)
 80005d6:	f001 fa7b 	bl	8001ad0 <HAL_GPIO_WritePin>

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400

080005e8 <turn_on_all_leds>:


void turn_on_all_leds(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <turn_on_all_leds+0x38>)
 80005f4:	f001 fa6c 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <turn_on_all_leds+0x38>)
 8000600:	f001 fa66 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <turn_on_all_leds+0x3c>)
 800060c:	f001 fa60 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <turn_on_all_leds+0x3c>)
 8000616:	f001 fa5b 	bl	8001ad0 <HAL_GPIO_WritePin>

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400

08000628 <turn_on_even_leds>:


void turn_on_even_leds(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <turn_on_even_leds+0x38>)
 8000634:	f001 fa4c 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <turn_on_even_leds+0x38>)
 8000640:	f001 fa46 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <turn_on_even_leds+0x3c>)
 800064c:	f001 fa40 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <turn_on_even_leds+0x3c>)
 8000656:	f001 fa3b 	bl	8001ad0 <HAL_GPIO_WritePin>

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400

08000668 <turn_on_odd_leds>:


void turn_on_odd_leds(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <turn_on_odd_leds+0x38>)
 8000674:	f001 fa2c 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <turn_on_odd_leds+0x38>)
 8000680:	f001 fa26 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <turn_on_odd_leds+0x3c>)
 800068c:	f001 fa20 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <turn_on_odd_leds+0x3c>)
 8000696:	f001 fa1b 	bl	8001ad0 <HAL_GPIO_WritePin>

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020400 	.word	0x40020400

080006a8 <LED_control>:


void LED_control(int val){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// 2
	for(int i=0; i<4; i++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e038      	b.n	8000728 <LED_control+0x80>
		GPIO_PinState pinstate = ((val >> i)& 0x1);
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	fa42 f303 	asr.w	r3, r2, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	72fb      	strb	r3, [r7, #11]
		switch (i){
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d82a      	bhi.n	8000722 <LED_control+0x7a>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <LED_control+0x2c>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	080006f5 	.word	0x080006f5
 80006dc:	08000705 	.word	0x08000705
 80006e0:	08000715 	.word	0x08000715
		case 0:
			HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, pinstate);
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	461a      	mov	r2, r3
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <LED_control+0x90>)
 80006ee:	f001 f9ef 	bl	8001ad0 <HAL_GPIO_WritePin>
			break;
 80006f2:	e016      	b.n	8000722 <LED_control+0x7a>
		case 1:
			HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, pinstate);
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	461a      	mov	r2, r3
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <LED_control+0x90>)
 80006fe:	f001 f9e7 	bl	8001ad0 <HAL_GPIO_WritePin>
			break;
 8000702:	e00e      	b.n	8000722 <LED_control+0x7a>
		case 2:
			HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, pinstate);
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	461a      	mov	r2, r3
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <LED_control+0x94>)
 800070e:	f001 f9df 	bl	8001ad0 <HAL_GPIO_WritePin>
			break;
 8000712:	e006      	b.n	8000722 <LED_control+0x7a>
		case 3:
			HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, pinstate);
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	461a      	mov	r2, r3
 8000718:	2110      	movs	r1, #16
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <LED_control+0x94>)
 800071c:	f001 f9d8 	bl	8001ad0 <HAL_GPIO_WritePin>
			break;
 8000720:	bf00      	nop
	for(int i=0; i<4; i++){
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b03      	cmp	r3, #3
 800072c:	ddc3      	ble.n	80006b6 <LED_control+0xe>

		}

	}

}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <LED_effect1>:


// Toggle all LEDs
void LED_effect1(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LED_effect1+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <LED_effect1+0x28>)
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <LED_effect1+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <LED_effect1+0x1e>
 8000758:	f7ff ff26 	bl	80005a8 <turn_off_all_leds>

}
 800075c:	e001      	b.n	8000762 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800075e:	f7ff ff43 	bl	80005e8 <turn_on_all_leds>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000

0800076c <LED_effect2>:


// Toggle even and odd LEDs
void LED_effect2(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <LED_effect2+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <LED_effect2+0x28>)
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LED_effect2+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <LED_effect2+0x1e>
 8000784:	f7ff ff50 	bl	8000628 <turn_on_even_leds>

}
 8000788:	e001      	b.n	800078e <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800078a:	f7ff ff6d 	bl	8000668 <turn_on_odd_leds>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000004 	.word	0x20000004

08000798 <LED_effect3>:


// Count up LEDs
void LED_effect3(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	static int i = 0;
	LED_control( 0x1 << (i++ % 4));
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <LED_effect3+0x2c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <LED_effect3+0x2c>)
 80007a4:	600a      	str	r2, [r1, #0]
 80007a6:	425a      	negs	r2, r3
 80007a8:	f003 0303 	and.w	r3, r3, #3
 80007ac:	f002 0203 	and.w	r2, r2, #3
 80007b0:	bf58      	it	pl
 80007b2:	4253      	negpl	r3, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff74 	bl	80006a8 <LED_control>

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000003c 	.word	0x2000003c

080007c8 <LED_effect4>:


// Count down LEDs
void LED_effect4(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	static int i = 0;
	LED_control( 0x08 >> (i++ % 4));
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <LED_effect4+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <LED_effect4+0x2c>)
 80007d4:	600a      	str	r2, [r1, #0]
 80007d6:	425a      	negs	r2, r3
 80007d8:	f003 0303 	and.w	r3, r3, #3
 80007dc:	f002 0203 	and.w	r2, r2, #3
 80007e0:	bf58      	it	pl
 80007e2:	4253      	negpl	r3, r2
 80007e4:	2208      	movs	r2, #8
 80007e6:	fa42 f303 	asr.w	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff5c 	bl	80006a8 <LED_control>

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000040 	.word	0x20000040

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fe1d 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f8ff 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f9bd 	bl	8000b84 <MX_GPIO_Init>
  MX_RTC_Init();
 800080a:	f000 f96b 	bl	8000ae4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800080e:	f000 f98f 	bl	8000b30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(menu_task_handler, "menu_task", 250, NULL, 2, &menu_task_handle);
 8000812:	4b66      	ldr	r3, [pc, #408]	; (80009ac <main+0x1b4>)
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	2302      	movs	r3, #2
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	22fa      	movs	r2, #250	; 0xfa
 800081e:	4964      	ldr	r1, [pc, #400]	; (80009b0 <main+0x1b8>)
 8000820:	4864      	ldr	r0, [pc, #400]	; (80009b4 <main+0x1bc>)
 8000822:	f004 fd87 	bl	8005334 <xTaskCreate>
 8000826:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d00a      	beq.n	8000844 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000832:	f383 8811 	msr	BASEPRI, r3
 8000836:	f3bf 8f6f 	isb	sy
 800083a:	f3bf 8f4f 	dsb	sy
 800083e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000840:	bf00      	nop
 8000842:	e7fe      	b.n	8000842 <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 250, NULL, 2, &cmd_task_handle);
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <main+0x1c0>)
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	2302      	movs	r3, #2
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	22fa      	movs	r2, #250	; 0xfa
 8000850:	495a      	ldr	r1, [pc, #360]	; (80009bc <main+0x1c4>)
 8000852:	485b      	ldr	r0, [pc, #364]	; (80009c0 <main+0x1c8>)
 8000854:	f004 fd6e 	bl	8005334 <xTaskCreate>
 8000858:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d00a      	beq.n	8000876 <main+0x7e>
        __asm volatile
 8000860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000864:	f383 8811 	msr	BASEPRI, r3
 8000868:	f3bf 8f6f 	isb	sy
 800086c:	f3bf 8f4f 	dsb	sy
 8000870:	61bb      	str	r3, [r7, #24]
    }
 8000872:	bf00      	nop
 8000874:	e7fe      	b.n	8000874 <main+0x7c>

  status = xTaskCreate(print_task_handler, "print_task", 250, NULL, 2, &print_task_handle);
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <main+0x1cc>)
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2302      	movs	r3, #2
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	22fa      	movs	r2, #250	; 0xfa
 8000882:	4951      	ldr	r1, [pc, #324]	; (80009c8 <main+0x1d0>)
 8000884:	4851      	ldr	r0, [pc, #324]	; (80009cc <main+0x1d4>)
 8000886:	f004 fd55 	bl	8005334 <xTaskCreate>
 800088a:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d00a      	beq.n	80008a8 <main+0xb0>
        __asm volatile
 8000892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	617b      	str	r3, [r7, #20]
    }
 80008a4:	bf00      	nop
 80008a6:	e7fe      	b.n	80008a6 <main+0xae>

  status = xTaskCreate(led_task_handler, "led_task", 250, NULL, 2, &led_task_handle);
 80008a8:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <main+0x1d8>)
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	2302      	movs	r3, #2
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2300      	movs	r3, #0
 80008b2:	22fa      	movs	r2, #250	; 0xfa
 80008b4:	4947      	ldr	r1, [pc, #284]	; (80009d4 <main+0x1dc>)
 80008b6:	4848      	ldr	r0, [pc, #288]	; (80009d8 <main+0x1e0>)
 80008b8:	f004 fd3c 	bl	8005334 <xTaskCreate>
 80008bc:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d00a      	beq.n	80008da <main+0xe2>
        __asm volatile
 80008c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c8:	f383 8811 	msr	BASEPRI, r3
 80008cc:	f3bf 8f6f 	isb	sy
 80008d0:	f3bf 8f4f 	dsb	sy
 80008d4:	613b      	str	r3, [r7, #16]
    }
 80008d6:	bf00      	nop
 80008d8:	e7fe      	b.n	80008d8 <main+0xe0>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 250, NULL, 2, &rtc_task_handle);
 80008da:	4b40      	ldr	r3, [pc, #256]	; (80009dc <main+0x1e4>)
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	2302      	movs	r3, #2
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	22fa      	movs	r2, #250	; 0xfa
 80008e6:	493e      	ldr	r1, [pc, #248]	; (80009e0 <main+0x1e8>)
 80008e8:	483e      	ldr	r0, [pc, #248]	; (80009e4 <main+0x1ec>)
 80008ea:	f004 fd23 	bl	8005334 <xTaskCreate>
 80008ee:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00a      	beq.n	800090c <main+0x114>
        __asm volatile
 80008f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fa:	f383 8811 	msr	BASEPRI, r3
 80008fe:	f3bf 8f6f 	isb	sy
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	60fb      	str	r3, [r7, #12]
    }
 8000908:	bf00      	nop
 800090a:	e7fe      	b.n	800090a <main+0x112>

  q_data_handle = xQueueCreate(10, sizeof(char));
 800090c:	2200      	movs	r2, #0
 800090e:	2101      	movs	r1, #1
 8000910:	200a      	movs	r0, #10
 8000912:	f003 ff9f 	bl	8004854 <xQueueGenericCreate>
 8000916:	4603      	mov	r3, r0
 8000918:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <main+0x1f0>)
 800091a:	6013      	str	r3, [r2, #0]

  configASSERT(q_data_handle != NULL);
 800091c:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <main+0x1f0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10a      	bne.n	800093a <main+0x142>
        __asm volatile
 8000924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	60bb      	str	r3, [r7, #8]
    }
 8000936:	bf00      	nop
 8000938:	e7fe      	b.n	8000938 <main+0x140>

  q_print_handle = xQueueCreate(10, sizeof(size_t));
 800093a:	2200      	movs	r2, #0
 800093c:	2104      	movs	r1, #4
 800093e:	200a      	movs	r0, #10
 8000940:	f003 ff88 	bl	8004854 <xQueueGenericCreate>
 8000944:	4603      	mov	r3, r0
 8000946:	4a29      	ldr	r2, [pc, #164]	; (80009ec <main+0x1f4>)
 8000948:	6013      	str	r3, [r2, #0]

  configASSERT(q_print_handle != NULL);
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <main+0x1f4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10a      	bne.n	8000968 <main+0x170>
        __asm volatile
 8000952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000956:	f383 8811 	msr	BASEPRI, r3
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	607b      	str	r3, [r7, #4]
    }
 8000964:	bf00      	nop
 8000966:	e7fe      	b.n	8000966 <main+0x16e>

  // Create software timers for LED effects
  for(int i=0; i<4; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
 800096c:	e013      	b.n	8000996 <main+0x19e>
	  led_timer_handle[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	461a      	mov	r2, r3
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <main+0x1f8>)
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	4613      	mov	r3, r2
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0x1fc>)
 8000982:	f005 ffed 	bl	8006960 <xTimerCreate>
 8000986:	4602      	mov	r2, r0
 8000988:	491b      	ldr	r1, [pc, #108]	; (80009f8 <main+0x200>)
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<4; i++){
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	3301      	adds	r3, #1
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	2b03      	cmp	r3, #3
 800099a:	dde8      	ble.n	800096e <main+0x176>

  }

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	4917      	ldr	r1, [pc, #92]	; (80009fc <main+0x204>)
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <main+0x208>)
 80009a2:	f002 fe7a 	bl	800369a <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80009a6:	f004 fe2f 	bl	8005608 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <main+0x1b2>
 80009ac:	200000a8 	.word	0x200000a8
 80009b0:	08007860 	.word	0x08007860
 80009b4:	0800105d 	.word	0x0800105d
 80009b8:	200000ac 	.word	0x200000ac
 80009bc:	0800786c 	.word	0x0800786c
 80009c0:	08001145 	.word	0x08001145
 80009c4:	200000b0 	.word	0x200000b0
 80009c8:	08007878 	.word	0x08007878
 80009cc:	08001261 	.word	0x08001261
 80009d0:	200000b4 	.word	0x200000b4
 80009d4:	08007884 	.word	0x08007884
 80009d8:	080012a1 	.word	0x080012a1
 80009dc:	200000b8 	.word	0x200000b8
 80009e0:	08007890 	.word	0x08007890
 80009e4:	080013cd 	.word	0x080013cd
 80009e8:	200000bc 	.word	0x200000bc
 80009ec:	200000c0 	.word	0x200000c0
 80009f0:	08000c95 	.word	0x08000c95
 80009f4:	0800789c 	.word	0x0800789c
 80009f8:	200000c4 	.word	0x200000c4
 80009fc:	200000d4 	.word	0x200000d4
 8000a00:	20000064 	.word	0x20000064

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 fede 	bl	80077d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <SystemClock_Config+0xd8>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <SystemClock_Config+0xd8>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0xd8>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <SystemClock_Config+0xdc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <SystemClock_Config+0xdc>)
 8000a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <SystemClock_Config+0xdc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a60:	230a      	movs	r3, #10
 8000a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a80:	23a8      	movs	r3, #168	; 0xa8
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fedb 	bl	8002850 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000aa0:	f000 f97c 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f81e 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000ace:	f000 f965 	bl	8000d9c <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_RTC_Init+0x44>)
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <MX_RTC_Init+0x48>)
 8000aec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_RTC_Init+0x44>)
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_RTC_Init+0x44>)
 8000af6:	227f      	movs	r2, #127	; 0x7f
 8000af8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_RTC_Init+0x44>)
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_RTC_Init+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_RTC_Init+0x44>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_RTC_Init+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_RTC_Init+0x44>)
 8000b14:	f002 f93a 	bl	8002d8c <HAL_RTC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b1e:	f000 f93d 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000044 	.word	0x20000044
 8000b2c:	40002800 	.word	0x40002800

08000b30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART2_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b68:	f002 fcb8 	bl	80034dc <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 f913 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000064 	.word	0x20000064
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x100>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <MX_GPIO_Init+0x104>)
 8000c12:	f000 ff5d 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c1c:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_GPIO_Init+0x108>)
 8000c1e:	f000 ff57 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4815      	ldr	r0, [pc, #84]	; (8000c90 <MX_GPIO_Init+0x10c>)
 8000c3a:	f000 fdb5 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin|LD3_Pin;
 8000c3e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_GPIO_Init+0x104>)
 8000c58:	f000 fda6 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin;
 8000c5c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0x108>)
 8000c76:	f000 fd97 	bl	80017a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800

08000c94 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f006 f959 	bl	8006f54 <pvTimerGetTimerID>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	60fb      	str	r3, [r7, #12]

	switch(id){
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d816      	bhi.n	8000cdc <led_effect_callback+0x48>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <led_effect_callback+0x20>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000cc5 	.word	0x08000cc5
 8000cb8:	08000ccb 	.word	0x08000ccb
 8000cbc:	08000cd1 	.word	0x08000cd1
 8000cc0:	08000cd7 	.word	0x08000cd7
	case 1:
		LED_effect1();
 8000cc4:	f7ff fd3c 	bl	8000740 <LED_effect1>
		break;
 8000cc8:	e008      	b.n	8000cdc <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000cca:	f7ff fd4f 	bl	800076c <LED_effect2>
		break;
 8000cce:	e005      	b.n	8000cdc <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000cd0:	f7ff fd62 	bl	8000798 <LED_effect3>
		break;
 8000cd4:	e002      	b.n	8000cdc <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000cd6:	f7ff fd77 	bl	80007c8 <LED_effect4>
		break;
 8000cda:	bf00      	nop
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_UART_RxCpltCallback>:

// This function is called from the UART interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	if(!xQueueIsQueueFullFromISR(q_data_handle)){
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_UART_RxCpltCallback+0x84>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fa76 	bl	80051e2 <xQueueIsQueueFullFromISR>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d107      	bne.n	8000d0c <HAL_UART_RxCpltCallback+0x28>
		// Enqueue Data
		xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_UART_RxCpltCallback+0x84>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	2200      	movs	r2, #0
 8000d04:	4919      	ldr	r1, [pc, #100]	; (8000d6c <HAL_UART_RxCpltCallback+0x88>)
 8000d06:	f003 ff15 	bl	8004b34 <xQueueGenericSendFromISR>
 8000d0a:	e013      	b.n	8000d34 <HAL_UART_RxCpltCallback+0x50>
	}else{
		if(user_data == '\r'){
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_UART_RxCpltCallback+0x88>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b0d      	cmp	r3, #13
 8000d14:	d10e      	bne.n	8000d34 <HAL_UART_RxCpltCallback+0x50>
			// Remove the last item in the Queue
			xQueueReceiveFromISR(q_data_handle, (void*)&dummy, NULL);
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_UART_RxCpltCallback+0x84>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f107 010f 	add.w	r1, r7, #15
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f899 	bl	8004e58 <xQueueReceiveFromISR>
			// Enqueue the \n
			xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_UART_RxCpltCallback+0x84>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	490f      	ldr	r1, [pc, #60]	; (8000d6c <HAL_UART_RxCpltCallback+0x88>)
 8000d30:	f003 ff00 	bl	8004b34 <xQueueGenericSendFromISR>
		}
	}

	// If data is \n then notify the cmd_task
	if(user_data == '\r'){
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_UART_RxCpltCallback+0x88>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b0d      	cmp	r3, #13
 8000d3c:	d10a      	bne.n	8000d54 <HAL_UART_RxCpltCallback+0x70>
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_UART_RxCpltCallback+0x8c>)
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	2300      	movs	r3, #0
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f005 fbf8 	bl	8006544 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	4905      	ldr	r1, [pc, #20]	; (8000d6c <HAL_UART_RxCpltCallback+0x88>)
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <HAL_UART_RxCpltCallback+0x90>)
 8000d5a:	f002 fc9e 	bl	800369a <HAL_UART_Receive_IT>


}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000bc 	.word	0x200000bc
 8000d6c:	200000d4 	.word	0x200000d4
 8000d70:	200000ac 	.word	0x200000ac
 8000d74:	20000064 	.word	0x20000064

08000d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d8a:	f000 fb79 	bl	8001480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40001000 	.word	0x40001000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b09a      	sub	sp, #104	; 0x68
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	225c      	movs	r2, #92	; 0x5c
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 fce3 	bl	80077d4 <memset>
  if(hrtc->Instance==RTC)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_RTC_MspInit+0x4c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d111      	bne.n	8000e3c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e20:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 ffb8 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e32:	f7ff ffb3 	bl	8000d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_RTC_MspInit+0x50>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3768      	adds	r7, #104	; 0x68
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40002800 	.word	0x40002800
 8000e48:	42470e3c 	.word	0x42470e3c

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_UART_MspInit+0x94>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d133      	bne.n	8000ed6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <HAL_UART_MspInit+0x9c>)
 8000ec2:	f000 fc71 	bl	80017a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2106      	movs	r1, #6
 8000eca:	2026      	movs	r0, #38	; 0x26
 8000ecc:	f000 fbb0 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed0:	2026      	movs	r0, #38	; 0x26
 8000ed2:	f000 fbc9 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	; 0x38
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <HAL_InitTick+0xe4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <HAL_InitTick+0xe4>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_InitTick+0xe4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f18:	f107 0210 	add.w	r2, r7, #16
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 ff08 	bl	8001d38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f32:	f000 fed9 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8000f36:	6378      	str	r0, [r7, #52]	; 0x34
 8000f38:	e004      	b.n	8000f44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f3a:	f000 fed5 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	4a23      	ldr	r2, [pc, #140]	; (8000fd4 <HAL_InitTick+0xe8>)
 8000f48:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4c:	0c9b      	lsrs	r3, r3, #18
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <HAL_InitTick+0xf0>)
 8000f56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f60:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f7a:	f002 f801 	bl	8002f80 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d11b      	bne.n	8000fc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <HAL_InitTick+0xec>)
 8000f8e:	f002 f851 	bl	8003034 <HAL_TIM_Base_Start_IT>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d111      	bne.n	8000fc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fa0:	2036      	movs	r0, #54	; 0x36
 8000fa2:	f000 fb61 	bl	8001668 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d808      	bhi.n	8000fbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	2036      	movs	r0, #54	; 0x36
 8000fb2:	f000 fb3d 	bl	8001630 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_InitTick+0xf4>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e002      	b.n	8000fc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	200000d8 	.word	0x200000d8
 8000fdc:	40001000 	.word	0x40001000
 8000fe0:	20000010 	.word	0x20000010

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <USART2_IRQHandler+0x10>)
 8001016:	f002 fb71 	bl	80036fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000064 	.word	0x20000064

08001024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM6_DAC_IRQHandler+0x10>)
 800102a:	f002 f873 	bl	8003114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000d8 	.word	0x200000d8

08001038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <menu_task_handler>:
void process_command(command_t* cmd);

const char* msg_inv = "//////Invalid Option//////\n";


void menu_task_handler(void* param){
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af02      	add	r7, sp, #8
 8001062:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	int option;
	const char* msg_menu = "  =================== \n"
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <menu_task_handler+0xd0>)
 8001066:	60bb      	str	r3, [r7, #8]
							"Exit          ----> 2\n"
							"Enter your choice here: ";

	while(1){
		// Send message to the menu
		xQueueSend(q_print_handle, &msg_menu, portMAX_DELAY);
 8001068:	4b31      	ldr	r3, [pc, #196]	; (8001130 <menu_task_handler+0xd4>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 0108 	add.w	r1, r7, #8
 8001070:	2300      	movs	r3, #0
 8001072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001076:	f003 fc5f 	bl	8004938 <xQueueGenericSend>

		// Wait for a response and put it into the cmd_addr
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001082:	9200      	str	r2, [sp, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f005 f8b9 	bl	8006200 <xTaskGenericNotifyWait>

		// Cast it to a command_t pointer and assign the address to cmd
		cmd = (command_t*)cmd_addr;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	617b      	str	r3, [r7, #20]

		// Ensure the cmd is a valid entry of length 1. Valid Commands: 0, 1, or 2
		if(cmd->len == 1){
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d133      	bne.n	8001102 <menu_task_handler+0xa6>

			// Convert the ASCI to number by subtracting 48
			option = cmd->payload[0] - 48;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	3b30      	subs	r3, #48	; 0x30
 80010a0:	613b      	str	r3, [r7, #16]

			switch(option){
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d035      	beq.n	8001114 <menu_task_handler+0xb8>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	dc20      	bgt.n	80010f0 <menu_task_handler+0x94>
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <menu_task_handler+0x60>
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d00d      	beq.n	80010d6 <menu_task_handler+0x7a>
 80010ba:	e019      	b.n	80010f0 <menu_task_handler+0x94>
			case 0:
				// Led Effects
				curr_state = sLedEffect;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <menu_task_handler+0xd8>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task_handle, 0, eNoAction);
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <menu_task_handler+0xdc>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	f005 f916 	bl	8006300 <xTaskGenericNotify>
				break;
 80010d4:	e01f      	b.n	8001116 <menu_task_handler+0xba>
			case 1:
				// RTC Menu
				curr_state = sRtcMenu;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <menu_task_handler+0xd8>)
 80010d8:	2202      	movs	r2, #2
 80010da:	701a      	strb	r2, [r3, #0]
				xTaskNotify(rtc_task_handle, 0, eNoAction);
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <menu_task_handler+0xe0>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2300      	movs	r3, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	f005 f909 	bl	8006300 <xTaskGenericNotify>
				break;
 80010ee:	e012      	b.n	8001116 <menu_task_handler+0xba>
			case 2:
				// Exit

				break;
			default:
				xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <menu_task_handler+0xd4>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010fa:	4911      	ldr	r1, [pc, #68]	; (8001140 <menu_task_handler+0xe4>)
 80010fc:	f003 fc1c 	bl	8004938 <xQueueGenericSend>
				continue;
 8001100:	e012      	b.n	8001128 <menu_task_handler+0xcc>
			}

		}else{

			// Invalid Entry
			xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <menu_task_handler+0xd4>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <menu_task_handler+0xe4>)
 800110e:	f003 fc13 	bl	8004938 <xQueueGenericSend>
			continue;
 8001112:	e009      	b.n	8001128 <menu_task_handler+0xcc>
				break;
 8001114:	bf00      	nop

		}

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2300      	movs	r3, #0
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f005 f86c 	bl	8006200 <xTaskGenericNotifyWait>
		xQueueSend(q_print_handle, &msg_menu, portMAX_DELAY);
 8001128:	e79e      	b.n	8001068 <menu_task_handler+0xc>
 800112a:	bf00      	nop
 800112c:	080078c4 	.word	0x080078c4
 8001130:	200000c0 	.word	0x200000c0
 8001134:	200000d5 	.word	0x200000d5
 8001138:	200000b4 	.word	0x200000b4
 800113c:	200000b8 	.word	0x200000b8
 8001140:	2000000c 	.word	0x2000000c

08001144 <cmd_task_handler>:

	}
}


void cmd_task_handler(void* param){
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
	command_t command;

	while(1){

		// Notify wait until notification
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f005 f851 	bl	8006200 <xTaskGenericNotifyWait>
 800115e:	6178      	str	r0, [r7, #20]
		// Process the user data(command) stored in input data queue
		if(returnedVal == pdTRUE){
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d1f2      	bne.n	800114c <cmd_task_handler+0x8>
			process_command(&command);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f802 	bl	8001174 <process_command>
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001170:	e7ec      	b.n	800114c <cmd_task_handler+0x8>
	...

08001174 <process_command>:
		// Notify the command to relevant task
	}
}

// Helper function for Command
void process_command(command_t* cmd){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f835 	bl	80011ec <extract_command>

	switch(curr_state){
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <process_command+0x68>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b05      	cmp	r3, #5
 8001188:	dc24      	bgt.n	80011d4 <process_command+0x60>
 800118a:	2b02      	cmp	r3, #2
 800118c:	da18      	bge.n	80011c0 <process_command+0x4c>
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <process_command+0x24>
 8001192:	2b01      	cmp	r3, #1
 8001194:	d00a      	beq.n	80011ac <process_command+0x38>
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}
 8001196:	e01d      	b.n	80011d4 <process_command+0x60>
		xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <process_command+0x6c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	2300      	movs	r3, #0
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2303      	movs	r3, #3
 80011a4:	2100      	movs	r1, #0
 80011a6:	f005 f8ab 	bl	8006300 <xTaskGenericNotify>
		break;
 80011aa:	e013      	b.n	80011d4 <process_command+0x60>
		xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <process_command+0x70>)
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	2300      	movs	r3, #0
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2303      	movs	r3, #3
 80011b8:	2100      	movs	r1, #0
 80011ba:	f005 f8a1 	bl	8006300 <xTaskGenericNotify>
		break;
 80011be:	e009      	b.n	80011d4 <process_command+0x60>
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <process_command+0x74>)
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2303      	movs	r3, #3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f005 f897 	bl	8006300 <xTaskGenericNotify>
		break;
 80011d2:	bf00      	nop
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000d5 	.word	0x200000d5
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	200000b4 	.word	0x200000b4
 80011e8:	200000b8 	.word	0x200000b8

080011ec <extract_command>:

// Helper Function for Process_Command
int extract_command(command_t* cmd){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data_handle);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <extract_command+0x70>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fec4 	bl	8004f86 <uxQueueMessagesWaiting>
 80011fe:	4603      	mov	r3, r0
 8001200:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <extract_command+0x22>
 8001208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120c:	e022      	b.n	8001254 <extract_command+0x68>
	uint8_t i = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data_handle, &item, 0);
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <extract_command+0x70>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f107 010f 	add.w	r1, r7, #15
 800121a:	2200      	movs	r2, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fd3b 	bl	8004c98 <xQueueReceive>
 8001222:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d106      	bne.n	8001238 <extract_command+0x4c>
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	75fa      	strb	r2, [r7, #23]
 8001230:	461a      	mov	r2, r3
 8001232:	7bf9      	ldrb	r1, [r7, #15]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	5499      	strb	r1, [r3, r2]
	}while(item != '\r');
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b0d      	cmp	r3, #13
 800123c:	d1e9      	bne.n	8001212 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	3b01      	subs	r3, #1
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	2100      	movs	r1, #0
 8001246:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	3b01      	subs	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	729a      	strb	r2, [r3, #10]

	return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000bc 	.word	0x200000bc

08001260 <print_task_handler>:


void print_task_handler(void* param){
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

	uint32_t* msg;
	while(1){
		xQueueReceive(q_print_handle, &msg, portMAX_DELAY);
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <print_task_handler+0x38>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f107 010c 	add.w	r1, r7, #12
 8001270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001274:	4618      	mov	r0, r3
 8001276:	f003 fd0f 	bl	8004c98 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800127a:	68fc      	ldr	r4, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffd0 	bl	8000224 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128c:	4621      	mov	r1, r4
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <print_task_handler+0x3c>)
 8001290:	f002 f971 	bl	8003576 <HAL_UART_Transmit>
		xQueueReceive(q_print_handle, &msg, portMAX_DELAY);
 8001294:	e7e8      	b.n	8001268 <print_task_handler+0x8>
 8001296:	bf00      	nop
 8001298:	200000c0 	.word	0x200000c0
 800129c:	20000064 	.word	0x20000064

080012a0 <led_task_handler>:

	}
}

void led_task_handler(void* param){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	const char* msg_led = "  =================== \n"
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <led_task_handler+0x104>)
 80012aa:	60fb      	str	r3, [r7, #12]
							"Enter your choice here: ";

	while(1){

		// TODO: Wait for notification (Notify Wait)
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f004 ffa1 	bl	8006200 <xTaskGenericNotifyWait>

		// TODO: Print LED menu
		xQueueSend(q_print_handle, &msg_led, portMAX_DELAY);
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <led_task_handler+0x108>)
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f107 010c 	add.w	r1, r7, #12
 80012c6:	2300      	movs	r3, #0
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	f003 fb34 	bl	8004938 <xQueueGenericSend>

		// TODO: wait for LED commands (Notify Wait)
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d8:	9200      	str	r2, [sp, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2000      	movs	r0, #0
 80012e0:	f004 ff8e 	bl	8006200 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4){
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	7a9b      	ldrb	r3, [r3, #10]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d843      	bhi.n	8001378 <led_task_handler+0xd8>
			if(! strcmp((char*)cmd->payload, "none")){
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	492e      	ldr	r1, [pc, #184]	; (80013ac <led_task_handler+0x10c>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff8b 	bl	8000210 <strcmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <led_task_handler+0x66>
				led_effect_stop();
 8001300:	f7ff f916 	bl	8000530 <led_effect_stop>
 8001304:	e040      	b.n	8001388 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e1")){
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4929      	ldr	r1, [pc, #164]	; (80013b0 <led_task_handler+0x110>)
 800130a:	4618      	mov	r0, r3
 800130c:	f7fe ff80 	bl	8000210 <strcmp>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <led_task_handler+0x7e>
				led_effect(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff f92a 	bl	8000570 <led_effect>
 800131c:	e034      	b.n	8001388 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e2")){
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4924      	ldr	r1, [pc, #144]	; (80013b4 <led_task_handler+0x114>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff74 	bl	8000210 <strcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <led_task_handler+0x96>
				led_effect(2);
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff f91e 	bl	8000570 <led_effect>
 8001334:	e028      	b.n	8001388 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e3")){
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	491f      	ldr	r1, [pc, #124]	; (80013b8 <led_task_handler+0x118>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ff68 	bl	8000210 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d103      	bne.n	800134e <led_task_handler+0xae>
				led_effect(3);
 8001346:	2003      	movs	r0, #3
 8001348:	f7ff f912 	bl	8000570 <led_effect>
 800134c:	e01c      	b.n	8001388 <led_task_handler+0xe8>
			}else if(! strcmp((char*)cmd->payload, "e4")){
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	491a      	ldr	r1, [pc, #104]	; (80013bc <led_task_handler+0x11c>)
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ff5c 	bl	8000210 <strcmp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <led_task_handler+0xc6>
				led_effect(4);
 800135e:	2004      	movs	r0, #4
 8001360:	f7ff f906 	bl	8000570 <led_effect>
 8001364:	e010      	b.n	8001388 <led_task_handler+0xe8>
			}else{
				xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <led_task_handler+0x108>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001370:	4913      	ldr	r1, [pc, #76]	; (80013c0 <led_task_handler+0x120>)
 8001372:	f003 fae1 	bl	8004938 <xQueueGenericSend>
 8001376:	e007      	b.n	8001388 <led_task_handler+0xe8>
			}
		}else{
			// TODO: print Invalid Message
			xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <led_task_handler+0x108>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001382:	490f      	ldr	r1, [pc, #60]	; (80013c0 <led_task_handler+0x120>)
 8001384:	f003 fad8 	bl	8004938 <xQueueGenericSend>
		}

		// TODO: update state variable
		curr_state = sMainMenu;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <led_task_handler+0x124>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]

		// TODO: Notify menu task
		xTaskNotify(menu_task_handle, 0, eNoAction);
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <led_task_handler+0x128>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	f004 ffb0 	bl	8006300 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80013a0:	e784      	b.n	80012ac <led_task_handler+0xc>
 80013a2:	bf00      	nop
 80013a4:	08007964 	.word	0x08007964
 80013a8:	200000c0 	.word	0x200000c0
 80013ac:	080079d8 	.word	0x080079d8
 80013b0:	080079e0 	.word	0x080079e0
 80013b4:	080079e4 	.word	0x080079e4
 80013b8:	080079e8 	.word	0x080079e8
 80013bc:	080079ec 	.word	0x080079ec
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	200000d5 	.word	0x200000d5
 80013c8:	200000a8 	.word	0x200000a8

080013cc <rtc_task_handler>:


	}
}

void rtc_task_handler(void* param){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	6078      	str	r0, [r7, #4]

//	const char* msg_test = "+";

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2000      	movs	r0, #0
 80013e2:	f004 ff0d 	bl	8006200 <xTaskGenericNotifyWait>
 80013e6:	e7f5      	b.n	80013d4 <rtc_task_handler+0x8>

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ee:	490e      	ldr	r1, [pc, #56]	; (8001428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001404:	4c0b      	ldr	r4, [pc, #44]	; (8001434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001412:	f7ff fe11 	bl	8001038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f006 f9e5 	bl	80077e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff f9ed 	bl	80007f8 <main>
  bx  lr    
 800141e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800142c:	08007a30 	.word	0x08007a30
  ldr r2, =_sbss
 8001430:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001434:	20012ec8 	.word	0x20012ec8

08001438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_Init+0x40>)
 8001446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_Init+0x40>)
 8001452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_Init+0x40>)
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f8d8 	bl	800161a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	200f      	movs	r0, #15
 800146c:	f7ff fd3e 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff fc9a 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023c00 	.word	0x40023c00

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000014 	.word	0x20000014
 80014a4:	20000120 	.word	0x20000120

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000120 	.word	0x20000120

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff4c 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001642:	f7ff ff61 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001646:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff ffb1 	bl	80015b4 <NVIC_EncodePriority>
 8001652:	4602      	mov	r2, r0
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff80 	bl	8001560 <__NVIC_SetPriority>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff54 	bl	8001524 <__NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001692:	f7ff ff09 	bl	80014a8 <HAL_GetTick>
 8001696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e052      	b.n	800175c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0216 	bic.w	r2, r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_DMA_Abort+0x62>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	e013      	b.n	8001730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001708:	f7ff fece 	bl	80014a8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b05      	cmp	r3, #5
 8001714:	d90c      	bls.n	8001730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e015      	b.n	800175c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1e4      	bne.n	8001708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	223f      	movs	r2, #63	; 0x3f
 8001744:	409a      	lsls	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00c      	b.n	800179c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2205      	movs	r2, #5
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e165      	b.n	8001a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8154 	bne.w	8001a8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80ae 	beq.w	8001a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b5a      	ldr	r3, [pc, #360]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_GPIO_Init+0x304>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x216>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x310>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x212>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x314>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x20e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_GPIO_Init+0x318>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x20a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_GPIO_Init+0x31c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x206>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_GPIO_Init+0x320>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x202>
 80019a6:	2306      	movs	r3, #6
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019c2:	2300      	movs	r3, #0
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d4:	4935      	ldr	r1, [pc, #212]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_GPIO_Init+0x324>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a31      	ldr	r2, [pc, #196]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a36:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a84:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	f67f ae96 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40013c00 	.word	0x40013c00

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff fc58 	bl	80014a8 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff fc54 	bl	80014a8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 fbb1 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f91e 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08007a08 	.word	0x08007a08
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000010 	.word	0x20000010

08001cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08007a18 	.word	0x08007a18

08001d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d14:	f7ff ffdc 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0b5b      	lsrs	r3, r3, #13
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08007a18 	.word	0x08007a18

08001d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	220f      	movs	r2, #15
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_RCC_GetClockConfig+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 020f 	and.w	r2, r3, #15
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dda:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	496c      	ldr	r1, [pc, #432]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001df2:	2301      	movs	r3, #1
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e02:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	4960      	ldr	r1, [pc, #384]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d017      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4955      	ldr	r1, [pc, #340]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	4946      	ldr	r1, [pc, #280]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 808a 	beq.w	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed2:	f7ff fae9 	bl	80014a8 <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff fae5 	bl	80014a8 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e278      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f00:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02f      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d028      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f1e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d114      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fab3 	bl	80014a8 <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff faaf 	bl	80014a8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e240      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ee      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f74:	d114      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8a:	4902      	ldr	r1, [pc, #8]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
 8001f90:	e00c      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470e40 	.word	0x42470e40
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a49      	ldr	r2, [pc, #292]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001faa:	6093      	str	r3, [r2, #8]
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	4944      	ldr	r1, [pc, #272]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001fd0:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001fd2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002008:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	492e      	ldr	r1, [pc, #184]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d011      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	4926      	ldr	r1, [pc, #152]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002042:	d101      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002044:	2301      	movs	r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	491a      	ldr	r1, [pc, #104]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d011      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	4911      	ldr	r1, [pc, #68]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d101      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002096:	2301      	movs	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a8:	f040 80ff 	bne.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020b2:	f7ff f9f9 	bl	80014a8 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020b8:	e00e      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020ba:	f7ff f9f5 	bl	80014a8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d907      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e188      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	424711e0 	.word	0x424711e0
 80020d4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002100:	2b00      	cmp	r3, #0
 8002102:	d028      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d124      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800210c:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	3301      	adds	r3, #1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800211e:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002124:	0e1b      	lsrs	r3, r3, #24
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	3b01      	subs	r3, #1
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	431a      	orrs	r2, r3
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	4961      	ldr	r1, [pc, #388]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002174:	2b00      	cmp	r3, #0
 8002176:	d035      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d130      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002182:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	3301      	adds	r3, #1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002194:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219a:	0f1b      	lsrs	r3, r3, #28
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	019b      	lsls	r3, r3, #6
 80021ac:	431a      	orrs	r2, r3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	071b      	lsls	r3, r3, #28
 80021c4:	4943      	ldr	r1, [pc, #268]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d2:	f023 021f 	bic.w	r2, r3, #31
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	493d      	ldr	r1, [pc, #244]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d029      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f8:	d124      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800220e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002212:	0f1b      	lsrs	r3, r3, #28
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	019b      	lsls	r3, r3, #6
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431a      	orrs	r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	071b      	lsls	r3, r3, #28
 800223c:	4925      	ldr	r1, [pc, #148]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	071b      	lsls	r3, r3, #28
 8002276:	4917      	ldr	r1, [pc, #92]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff f910 	bl	80014a8 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800228c:	f7ff f90c 	bl	80014a8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e09f      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 8095 	bne.w	80023dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff f8f6 	bl	80014a8 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022be:	e00f      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80022c0:	f7ff f8f2 	bl	80014a8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d908      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e085      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	42470068 	.word	0x42470068
 80022dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ec:	d0e8      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	2b00      	cmp	r3, #0
 8002314:	d127      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	4928      	ldr	r1, [pc, #160]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800234e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002352:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	3b01      	subs	r3, #1
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01d      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800237a:	d118      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	0e1b      	lsrs	r3, r3, #24
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	4910      	ldr	r1, [pc, #64]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff f878 	bl	80014a8 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80023bc:	f7ff f874 	bl	80014a8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e007      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023da:	d1ef      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3730      	adds	r7, #48	; 0x30
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470070 	.word	0x42470070

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b0ae      	sub	sp, #184	; 0xb8
 80023f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002416:	4bcb      	ldr	r3, [pc, #812]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b0c      	cmp	r3, #12
 8002420:	f200 8206 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x440>
 8002424:	a201      	add	r2, pc, #4	; (adr r2, 800242c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	08002461 	.word	0x08002461
 8002430:	08002831 	.word	0x08002831
 8002434:	08002831 	.word	0x08002831
 8002438:	08002831 	.word	0x08002831
 800243c:	08002469 	.word	0x08002469
 8002440:	08002831 	.word	0x08002831
 8002444:	08002831 	.word	0x08002831
 8002448:	08002831 	.word	0x08002831
 800244c:	08002471 	.word	0x08002471
 8002450:	08002831 	.word	0x08002831
 8002454:	08002831 	.word	0x08002831
 8002458:	08002831 	.word	0x08002831
 800245c:	08002661 	.word	0x08002661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4bb9      	ldr	r3, [pc, #740]	; (8002748 <HAL_RCC_GetSysClockFreq+0x358>)
 8002462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002466:	e1e7      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002468:	4bb8      	ldr	r3, [pc, #736]	; (800274c <HAL_RCC_GetSysClockFreq+0x35c>)
 800246a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800246e:	e1e3      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002470:	4bb4      	ldr	r3, [pc, #720]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800247c:	4bb1      	ldr	r3, [pc, #708]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d071      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002488:	4bae      	ldr	r3, [pc, #696]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	2200      	movs	r2, #0
 8002490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002494:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024ae:	4622      	mov	r2, r4
 80024b0:	462b      	mov	r3, r5
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	0159      	lsls	r1, r3, #5
 80024bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c0:	0150      	lsls	r0, r2, #5
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4621      	mov	r1, r4
 80024c8:	1a51      	subs	r1, r2, r1
 80024ca:	6439      	str	r1, [r7, #64]	; 0x40
 80024cc:	4629      	mov	r1, r5
 80024ce:	eb63 0301 	sbc.w	r3, r3, r1
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024e0:	4649      	mov	r1, r9
 80024e2:	018b      	lsls	r3, r1, #6
 80024e4:	4641      	mov	r1, r8
 80024e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ea:	4641      	mov	r1, r8
 80024ec:	018a      	lsls	r2, r1, #6
 80024ee:	4641      	mov	r1, r8
 80024f0:	1a51      	subs	r1, r2, r1
 80024f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024f4:	4649      	mov	r1, r9
 80024f6:	eb63 0301 	sbc.w	r3, r3, r1
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002508:	4649      	mov	r1, r9
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	4641      	mov	r1, r8
 800250e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002512:	4641      	mov	r1, r8
 8002514:	00ca      	lsls	r2, r1, #3
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4603      	mov	r3, r0
 800251c:	4622      	mov	r2, r4
 800251e:	189b      	adds	r3, r3, r2
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
 8002522:	462b      	mov	r3, r5
 8002524:	460a      	mov	r2, r1
 8002526:	eb42 0303 	adc.w	r3, r2, r3
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002538:	4629      	mov	r1, r5
 800253a:	024b      	lsls	r3, r1, #9
 800253c:	4621      	mov	r1, r4
 800253e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002542:	4621      	mov	r1, r4
 8002544:	024a      	lsls	r2, r1, #9
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002558:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800255c:	f7fd fe6a 	bl	8000234 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800256a:	e067      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256c:	4b75      	ldr	r3, [pc, #468]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002578:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800257c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002584:	67bb      	str	r3, [r7, #120]	; 0x78
 8002586:	2300      	movs	r3, #0
 8002588:	67fb      	str	r3, [r7, #124]	; 0x7c
 800258a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800258e:	4622      	mov	r2, r4
 8002590:	462b      	mov	r3, r5
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	0159      	lsls	r1, r3, #5
 800259c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a0:	0150      	lsls	r0, r2, #5
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4621      	mov	r1, r4
 80025a8:	1a51      	subs	r1, r2, r1
 80025aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80025ac:	4629      	mov	r1, r5
 80025ae:	eb63 0301 	sbc.w	r3, r3, r1
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025c0:	4649      	mov	r1, r9
 80025c2:	018b      	lsls	r3, r1, #6
 80025c4:	4641      	mov	r1, r8
 80025c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ca:	4641      	mov	r1, r8
 80025cc:	018a      	lsls	r2, r1, #6
 80025ce:	4641      	mov	r1, r8
 80025d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d4:	4649      	mov	r1, r9
 80025d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ee:	4692      	mov	sl, r2
 80025f0:	469b      	mov	fp, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	eb1a 0303 	adds.w	r3, sl, r3
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	462b      	mov	r3, r5
 80025fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800260e:	4629      	mov	r1, r5
 8002610:	028b      	lsls	r3, r1, #10
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002618:	4621      	mov	r1, r4
 800261a:	028a      	lsls	r2, r1, #10
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002624:	2200      	movs	r2, #0
 8002626:	673b      	str	r3, [r7, #112]	; 0x70
 8002628:	677a      	str	r2, [r7, #116]	; 0x74
 800262a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800262e:	f7fd fe01 	bl	8000234 <__aeabi_uldivmod>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4613      	mov	r3, r2
 8002638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	3301      	adds	r3, #1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800264e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800265e:	e0eb      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d06b      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_RCC_GetSysClockFreq+0x354>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	2200      	movs	r2, #0
 8002680:	66bb      	str	r3, [r7, #104]	; 0x68
 8002682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268a:	663b      	str	r3, [r7, #96]	; 0x60
 800268c:	2300      	movs	r3, #0
 800268e:	667b      	str	r3, [r7, #100]	; 0x64
 8002690:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002694:	4622      	mov	r2, r4
 8002696:	462b      	mov	r3, r5
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4621      	mov	r1, r4
 80026ae:	1a51      	subs	r1, r2, r1
 80026b0:	61b9      	str	r1, [r7, #24]
 80026b2:	4629      	mov	r1, r5
 80026b4:	eb63 0301 	sbc.w	r3, r3, r1
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026c6:	4659      	mov	r1, fp
 80026c8:	018b      	lsls	r3, r1, #6
 80026ca:	4651      	mov	r1, sl
 80026cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d0:	4651      	mov	r1, sl
 80026d2:	018a      	lsls	r2, r1, #6
 80026d4:	4651      	mov	r1, sl
 80026d6:	ebb2 0801 	subs.w	r8, r2, r1
 80026da:	4659      	mov	r1, fp
 80026dc:	eb63 0901 	sbc.w	r9, r3, r1
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f4:	4690      	mov	r8, r2
 80026f6:	4699      	mov	r9, r3
 80026f8:	4623      	mov	r3, r4
 80026fa:	eb18 0303 	adds.w	r3, r8, r3
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	462b      	mov	r3, r5
 8002702:	eb49 0303 	adc.w	r3, r9, r3
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002714:	4629      	mov	r1, r5
 8002716:	024b      	lsls	r3, r1, #9
 8002718:	4621      	mov	r1, r4
 800271a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800271e:	4621      	mov	r1, r4
 8002720:	024a      	lsls	r2, r1, #9
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800272a:	2200      	movs	r2, #0
 800272c:	65bb      	str	r3, [r7, #88]	; 0x58
 800272e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002730:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002734:	f7fd fd7e 	bl	8000234 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002742:	e065      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x420>
 8002744:	40023800 	.word	0x40023800
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002750:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_GetSysClockFreq+0x458>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	2200      	movs	r2, #0
 8002758:	4618      	mov	r0, r3
 800275a:	4611      	mov	r1, r2
 800275c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002760:	653b      	str	r3, [r7, #80]	; 0x50
 8002762:	2300      	movs	r3, #0
 8002764:	657b      	str	r3, [r7, #84]	; 0x54
 8002766:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800276a:	4642      	mov	r2, r8
 800276c:	464b      	mov	r3, r9
 800276e:	f04f 0000 	mov.w	r0, #0
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	0159      	lsls	r1, r3, #5
 8002778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277c:	0150      	lsls	r0, r2, #5
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4641      	mov	r1, r8
 8002784:	1a51      	subs	r1, r2, r1
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	4649      	mov	r1, r9
 800278a:	eb63 0301 	sbc.w	r3, r3, r1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800279c:	4659      	mov	r1, fp
 800279e:	018b      	lsls	r3, r1, #6
 80027a0:	4651      	mov	r1, sl
 80027a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a6:	4651      	mov	r1, sl
 80027a8:	018a      	lsls	r2, r1, #6
 80027aa:	4651      	mov	r1, sl
 80027ac:	1a54      	subs	r4, r2, r1
 80027ae:	4659      	mov	r1, fp
 80027b0:	eb63 0501 	sbc.w	r5, r3, r1
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	00eb      	lsls	r3, r5, #3
 80027be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c2:	00e2      	lsls	r2, r4, #3
 80027c4:	4614      	mov	r4, r2
 80027c6:	461d      	mov	r5, r3
 80027c8:	4643      	mov	r3, r8
 80027ca:	18e3      	adds	r3, r4, r3
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	464b      	mov	r3, r9
 80027d0:	eb45 0303 	adc.w	r3, r5, r3
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e2:	4629      	mov	r1, r5
 80027e4:	028b      	lsls	r3, r1, #10
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ec:	4621      	mov	r1, r4
 80027ee:	028a      	lsls	r2, r1, #10
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f8:	2200      	movs	r2, #0
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80027fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002802:	f7fd fd17 	bl	8000234 <__aeabi_uldivmod>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4613      	mov	r3, r2
 800280c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCC_GetSysClockFreq+0x458>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0f1b      	lsrs	r3, r3, #28
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800281e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800282e:	e003      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800283c:	4618      	mov	r0, r3
 800283e:	37b8      	adds	r7, #184	; 0xb8
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400

08002850 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e28d      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8083 	beq.w	8002976 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002870:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b04      	cmp	r3, #4
 800287a:	d019      	beq.n	80028b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800287c:	4b91      	ldr	r3, [pc, #580]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002884:	2b08      	cmp	r3, #8
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002888:	4b8e      	ldr	r3, [pc, #568]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002894:	d00c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d112      	bne.n	80028c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	4b84      	ldr	r3, [pc, #528]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05b      	beq.n	8002974 <HAL_RCC_OscConfig+0x124>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d157      	bne.n	8002974 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e25a      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x90>
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7b      	ldr	r2, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0xcc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0xb4>
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0xcc>
 8002904:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6e      	ldr	r2, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fdc0 	bl	80014a8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fdbc 	bl	80014a8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e21f      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0xdc>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fdac 	bl	80014a8 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe fda8 	bl	80014a8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e20b      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x104>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d06f      	beq.n	8002a62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002982:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b00      	cmp	r3, #0
 800298c:	d017      	beq.n	80029be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002996:	2b08      	cmp	r3, #8
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d11c      	bne.n	80029ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b44      	ldr	r3, [pc, #272]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d116      	bne.n	80029ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x186>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e1d3      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4937      	ldr	r1, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	e03a      	b.n	8002a62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_OscConfig+0x278>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fd55 	bl	80014a8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fe fd51 	bl	80014a8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1b4      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4925      	ldr	r1, [pc, #148]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_OscConfig+0x278>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fd34 	bl	80014a8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a44:	f7fe fd30 	bl	80014a8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e193      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d036      	beq.n	8002adc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fd14 	bl	80014a8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a84:	f7fe fd10 	bl	80014a8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e173      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x234>
 8002aa2:	e01b      	b.n	8002adc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fcfd 	bl	80014a8 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	e00e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fcf9 	bl	80014a8 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e15c      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	42470000 	.word	0x42470000
 8002acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ea      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8097 	beq.w	8002c18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a7e      	ldr	r2, [pc, #504]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b7c      	ldr	r3, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7fe fcb9 	bl	80014a8 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe fcb5 	bl	80014a8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e118      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x31e>
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x358>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x340>
 8002b76:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a60      	ldr	r2, [pc, #384]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x358>
 8002b90:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002ba2:	f023 0304 	bic.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fc7a 	bl	80014a8 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fc76 	bl	80014a8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e0d7      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ee      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x368>
 8002bda:	e014      	b.n	8002c06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fc64 	bl	80014a8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe fc60 	bl	80014a8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0c1      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfa:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ee      	bne.n	8002be4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80ad 	beq.w	8002d7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d060      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d145      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_RCC_OscConfig+0x4b4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fc34 	bl	80014a8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe fc30 	bl	80014a8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e093      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	071b      	lsls	r3, r3, #28
 8002c8e:	491b      	ldr	r1, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4b4>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fc05 	bl	80014a8 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fc01 	bl	80014a8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e064      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x452>
 8002cc0:	e05c      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_OscConfig+0x4b4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fbee 	bl	80014a8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fbea 	bl	80014a8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04d      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x480>
 8002cee:	e045      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e040      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_RCC_OscConfig+0x538>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d030      	beq.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d129      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d122      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d119      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	3b01      	subs	r3, #1
 8002d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d10f      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800

08002d8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e066      	b.n	8002e70 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7f5b      	ldrb	r3, [r3, #29]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe f820 	bl	8000df8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	22ca      	movs	r2, #202	; 0xca
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2253      	movs	r2, #83	; 0x53
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f87a 	bl	8002ec8 <RTC_EnterInitMode>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d12c      	bne.n	8002e38 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6919      	ldr	r1, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f881 	bl	8002f36 <RTC_ExitInitMode>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	22ff      	movs	r2, #255	; 0xff
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e94:	f7fe fb08 	bl	80014a8 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e9c:	f7fe fb04 	bl	80014a8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e007      	b.n	8002ec0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ee      	beq.n	8002e9c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d122      	bne.n	8002f2c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef6:	f7fe fad7 	bl	80014a8 <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002efc:	e00c      	b.n	8002f18 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002efe:	f7fe fad3 	bl	80014a8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0c:	d904      	bls.n	8002f18 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <RTC_EnterInitMode+0x64>
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d1e8      	bne.n	8002efe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff89 	bl	8002e78 <HAL_RTC_WaitForSynchro>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e041      	b.n	8003016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f839 	bl	800301e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f000 f9d8 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d001      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04e      	b.n	80030ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d022      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d01d      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <HAL_TIM_Base_Start_IT+0xc8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d018      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <HAL_TIM_Base_Start_IT+0xcc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <HAL_TIM_Base_Start_IT+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1b      	ldr	r2, [pc, #108]	; (8003108 <HAL_TIM_Base_Start_IT+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a19      	ldr	r2, [pc, #100]	; (800310c <HAL_TIM_Base_Start_IT+0xd8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x80>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_TIM_Base_Start_IT+0xdc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d111      	bne.n	80030d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d010      	beq.n	80030e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	e007      	b.n	80030e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800
 8003104:	40000c00 	.word	0x40000c00
 8003108:	40010400 	.word	0x40010400
 800310c:	40014000 	.word	0x40014000
 8003110:	40001800 	.word	0x40001800

08003114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d122      	bne.n	8003170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	d11b      	bne.n	8003170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0202 	mvn.w	r2, #2
 8003140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8ee 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8e0 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8f1 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0204 	mvn.w	r2, #4
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8c4 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8b6 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8c7 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0208 	mvn.w	r2, #8
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2204      	movs	r2, #4
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f89a 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f88c 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f89d 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b10      	cmp	r3, #16
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b10      	cmp	r3, #16
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0210 	mvn.w	r2, #16
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2208      	movs	r2, #8
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f870 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f862 	bl	8003324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f873 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0201 	mvn.w	r2, #1
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fd70 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b80      	cmp	r3, #128	; 0x80
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f902 	bl	80034c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f838 	bl	8003360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b20      	cmp	r3, #32
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0220 	mvn.w	r2, #32
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8cc 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a40      	ldr	r2, [pc, #256]	; (8003488 <TIM_Base_SetConfig+0x114>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	; (800348c <TIM_Base_SetConfig+0x118>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <TIM_Base_SetConfig+0x114>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d027      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	; (800348c <TIM_Base_SetConfig+0x118>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d023      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d017      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <TIM_Base_SetConfig+0x128>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <TIM_Base_SetConfig+0x12c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <TIM_Base_SetConfig+0x130>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <TIM_Base_SetConfig+0x134>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <TIM_Base_SetConfig+0x138>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <TIM_Base_SetConfig+0x13c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0xf8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <TIM_Base_SetConfig+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d103      	bne.n	8003474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40010400 	.word	0x40010400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	40001800 	.word	0x40001800
 80034ac:	40001c00 	.word	0x40001c00
 80034b0:	40002000 	.word	0x40002000

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e03f      	b.n	800356e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fca2 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800351e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fddf 	bl	80040e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b08a      	sub	sp, #40	; 0x28
 800357a:	af02      	add	r7, sp, #8
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	d17c      	bne.n	8003690 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_UART_Transmit+0x2c>
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e075      	b.n	8003692 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_UART_Transmit+0x3e>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e06e      	b.n	8003692 <HAL_UART_Transmit+0x11c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ca:	f7fd ff6d 	bl	80014a8 <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e4:	d108      	bne.n	80035f8 <HAL_UART_Transmit+0x82>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e003      	b.n	8003600 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003608:	e02a      	b.n	8003660 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fb1f 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e036      	b.n	8003692 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3302      	adds	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e007      	b.n	8003652 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3301      	adds	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1cf      	bne.n	800360a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 faef 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e006      	b.n	8003692 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d11d      	bne.n	80036f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_UART_Receive_IT+0x26>
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e016      	b.n	80036f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Receive_IT+0x38>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e00f      	b.n	80036f2 <HAL_UART_Receive_IT+0x58>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	461a      	mov	r2, r3
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fb24 	bl	8003d34 <UART_Start_Receive_IT>
 80036ec:	4603      	mov	r3, r0
 80036ee:	e000      	b.n	80036f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0ba      	sub	sp, #232	; 0xe8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800373a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_UART_IRQHandler+0x66>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fc07 	bl	8003f6e <UART_Receive_IT>
      return;
 8003760:	e256      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80de 	beq.w	8003928 <HAL_UART_IRQHandler+0x22c>
 800376c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80d1 	beq.w	8003928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_UART_IRQHandler+0xae>
 8003792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xd2>
 80037b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0xf6>
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <HAL_UART_IRQHandler+0x126>
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0208 	orr.w	r2, r3, #8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 81ed 	beq.w	8003c06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_UART_IRQHandler+0x14e>
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fb92 	bl	8003f6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_UART_IRQHandler+0x17a>
 800386e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04f      	beq.n	8003916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa9a 	bl	8003db0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d141      	bne.n	800390e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1d9      	bne.n	800388a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d013      	beq.n	8003906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4a7d      	ldr	r2, [pc, #500]	; (8003ad8 <HAL_UART_IRQHandler+0x3dc>)
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd ff3a 	bl	8001764 <HAL_DMA_Abort_IT>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003900:	4610      	mov	r0, r2
 8003902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e00e      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f990 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e00a      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f98c 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	e006      	b.n	8003924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f988 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003922:	e170      	b.n	8003c06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	bf00      	nop
    return;
 8003926:	e16e      	b.n	8003c06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 814a 	bne.w	8003bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8143 	beq.w	8003bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 813c 	beq.w	8003bc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	f040 80b4 	bne.w	8003adc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8140 	beq.w	8003c0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800398e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003992:	429a      	cmp	r2, r3
 8003994:	f080 8139 	bcs.w	8003c0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800399e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	f000 8088 	beq.w	8003abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1d9      	bne.n	80039ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e1      	bne.n	80039fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fde3 	bl	8001684 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8b6 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ad4:	e099      	b.n	8003c0a <HAL_UART_IRQHandler+0x50e>
 8003ad6:	bf00      	nop
 8003ad8:	08003e77 	.word	0x08003e77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 808b 	beq.w	8003c0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8086 	beq.w	8003c0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	330c      	adds	r3, #12
 8003b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b26:	647a      	str	r2, [r7, #68]	; 0x44
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e3      	bne.n	8003b02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	623b      	str	r3, [r7, #32]
   return(result);
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e3      	bne.n	8003b3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ba4:	61fa      	str	r2, [r7, #28]
 8003ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	69b9      	ldr	r1, [r7, #24]
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e3      	bne.n	8003b80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f83e 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc4:	e023      	b.n	8003c0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_UART_IRQHandler+0x4ea>
 8003bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f95d 	bl	8003e9e <UART_Transmit_IT>
    return;
 8003be4:	e014      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00e      	beq.n	8003c10 <HAL_UART_IRQHandler+0x514>
 8003bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f99d 	bl	8003f3e <UART_EndTransmit_IT>
    return;
 8003c04:	e004      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
    return;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
      return;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_UART_IRQHandler+0x514>
      return;
 8003c0e:	bf00      	nop
  }
}
 8003c10:	37e8      	adds	r7, #232	; 0xe8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop

08003c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	; 0x40
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	e050      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c70:	d04c      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c78:	f7fd fc16 	bl	80014a8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d241      	bcs.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cdc:	623a      	str	r2, [r7, #32]
 8003cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	69f9      	ldr	r1, [r7, #28]
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e00f      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d09f      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3740      	adds	r7, #64	; 0x40
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2222      	movs	r2, #34	; 0x22
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0220 	orr.w	r2, r2, #32
 8003da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b095      	sub	sp, #84	; 0x54
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dd8:	643a      	str	r2, [r7, #64]	; 0x40
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e5      	bne.n	8003db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3314      	adds	r3, #20
 8003e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d119      	bne.n	8003e5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e48:	61ba      	str	r2, [r7, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6979      	ldr	r1, [r7, #20]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	613b      	str	r3, [r7, #16]
   return(result);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e6a:	bf00      	nop
 8003e6c:	3754      	adds	r7, #84	; 0x54
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fecb 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b21      	cmp	r3, #33	; 0x21
 8003eb0:	d13e      	bne.n	8003f30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eba:	d114      	bne.n	8003ee6 <UART_Transmit_IT+0x48>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d110      	bne.n	8003ee6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	1c9a      	adds	r2, r3, #2
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]
 8003ee4:	e008      	b.n	8003ef8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6211      	str	r1, [r2, #32]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4619      	mov	r1, r3
 8003f06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10f      	bne.n	8003f2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fe5a 	bl	8003c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b08c      	sub	sp, #48	; 0x30
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	f040 80ab 	bne.w	80040da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d117      	bne.n	8003fbe <UART_Receive_IT+0x50>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d113      	bne.n	8003fbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
 8003fbc:	e026      	b.n	800400c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d007      	beq.n	8003fe2 <UART_Receive_IT+0x74>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <UART_Receive_IT+0x82>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e008      	b.n	8004002 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29b      	uxth	r3, r3
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4619      	mov	r1, r3
 800401a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800401c:	2b00      	cmp	r3, #0
 800401e:	d15a      	bne.n	80040d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0220 	bic.w	r2, r2, #32
 800402e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800403e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	2b01      	cmp	r3, #1
 800405e:	d135      	bne.n	80040cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	613b      	str	r3, [r7, #16]
   return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	623a      	str	r2, [r7, #32]
 8004088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	69f9      	ldr	r1, [r7, #28]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	61bb      	str	r3, [r7, #24]
   return(result);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d10a      	bne.n	80040be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fdbb 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
 80040ca:	e002      	b.n	80040d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fc fe09 	bl	8000ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e002      	b.n	80040dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3730      	adds	r7, #48	; 0x30
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e8:	b0c0      	sub	sp, #256	; 0x100
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	68d9      	ldr	r1, [r3, #12]
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	ea40 0301 	orr.w	r3, r0, r1
 800410c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	431a      	orrs	r2, r3
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800413c:	f021 010c 	bic.w	r1, r1, #12
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800414a:	430b      	orrs	r3, r1
 800414c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	6999      	ldr	r1, [r3, #24]
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	ea40 0301 	orr.w	r3, r0, r1
 800416a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b8f      	ldr	r3, [pc, #572]	; (80043b0 <UART_SetConfig+0x2cc>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d005      	beq.n	8004184 <UART_SetConfig+0xa0>
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <UART_SetConfig+0x2d0>)
 8004180:	429a      	cmp	r2, r3
 8004182:	d104      	bne.n	800418e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7fd fdc4 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 8004188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800418c:	e003      	b.n	8004196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800418e:	f7fd fdab 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8004192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	f040 810c 	bne.w	80043bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	1891      	adds	r1, r2, r2
 80041bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80041be:	415b      	adcs	r3, r3
 80041c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041c6:	4621      	mov	r1, r4
 80041c8:	eb12 0801 	adds.w	r8, r2, r1
 80041cc:	4629      	mov	r1, r5
 80041ce:	eb43 0901 	adc.w	r9, r3, r1
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e6:	4690      	mov	r8, r2
 80041e8:	4699      	mov	r9, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	eb18 0303 	adds.w	r3, r8, r3
 80041f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041f4:	462b      	mov	r3, r5
 80041f6:	eb49 0303 	adc.w	r3, r9, r3
 80041fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800420a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800420e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004212:	460b      	mov	r3, r1
 8004214:	18db      	adds	r3, r3, r3
 8004216:	653b      	str	r3, [r7, #80]	; 0x50
 8004218:	4613      	mov	r3, r2
 800421a:	eb42 0303 	adc.w	r3, r2, r3
 800421e:	657b      	str	r3, [r7, #84]	; 0x54
 8004220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004228:	f7fc f804 	bl	8000234 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b61      	ldr	r3, [pc, #388]	; (80043b8 <UART_SetConfig+0x2d4>)
 8004232:	fba3 2302 	umull	r2, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	011c      	lsls	r4, r3, #4
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	64b9      	str	r1, [r7, #72]	; 0x48
 8004254:	415b      	adcs	r3, r3
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800425c:	4641      	mov	r1, r8
 800425e:	eb12 0a01 	adds.w	sl, r2, r1
 8004262:	4649      	mov	r1, r9
 8004264:	eb43 0b01 	adc.w	fp, r3, r1
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800427c:	4692      	mov	sl, r2
 800427e:	469b      	mov	fp, r3
 8004280:	4643      	mov	r3, r8
 8004282:	eb1a 0303 	adds.w	r3, sl, r3
 8004286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800428a:	464b      	mov	r3, r9
 800428c:	eb4b 0303 	adc.w	r3, fp, r3
 8004290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042a8:	460b      	mov	r3, r1
 80042aa:	18db      	adds	r3, r3, r3
 80042ac:	643b      	str	r3, [r7, #64]	; 0x40
 80042ae:	4613      	mov	r3, r2
 80042b0:	eb42 0303 	adc.w	r3, r2, r3
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
 80042b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042be:	f7fb ffb9 	bl	8000234 <__aeabi_uldivmod>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <UART_SetConfig+0x2d4>)
 80042ca:	fba3 2301 	umull	r2, r3, r3, r1
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2264      	movs	r2, #100	; 0x64
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	1acb      	subs	r3, r1, r3
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042de:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <UART_SetConfig+0x2d4>)
 80042e0:	fba3 2302 	umull	r2, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ec:	441c      	add	r4, r3
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	63b9      	str	r1, [r7, #56]	; 0x38
 8004308:	415b      	adcs	r3, r3
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6339      	str	r1, [r7, #48]	; 0x30
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800435c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004364:	460b      	mov	r3, r1
 8004366:	18db      	adds	r3, r3, r3
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
 800436a:	4613      	mov	r3, r2
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800437a:	f7fb ff5b 	bl	8000234 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <UART_SetConfig+0x2d4>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <UART_SetConfig+0x2d4>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 0207 	and.w	r2, r3, #7
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4422      	add	r2, r4
 80043aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ac:	e106      	b.n	80045bc <UART_SetConfig+0x4d8>
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40011400 	.word	0x40011400
 80043b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	6239      	str	r1, [r7, #32]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043de:	4641      	mov	r1, r8
 80043e0:	1854      	adds	r4, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0501 	adc.w	r5, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	18e3      	adds	r3, r4, r3
 8004400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004404:	464b      	mov	r3, r9
 8004406:	eb45 0303 	adc.w	r3, r5, r3
 800440a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800441a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800442a:	4629      	mov	r1, r5
 800442c:	008b      	lsls	r3, r1, #2
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004434:	4621      	mov	r1, r4
 8004436:	008a      	lsls	r2, r1, #2
 8004438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800443c:	f7fb fefa 	bl	8000234 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4b60      	ldr	r3, [pc, #384]	; (80045c8 <UART_SetConfig+0x4e4>)
 8004446:	fba3 2302 	umull	r2, r3, r3, r2
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	011c      	lsls	r4, r3, #4
 800444e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800445c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004460:	4642      	mov	r2, r8
 8004462:	464b      	mov	r3, r9
 8004464:	1891      	adds	r1, r2, r2
 8004466:	61b9      	str	r1, [r7, #24]
 8004468:	415b      	adcs	r3, r3
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004470:	4641      	mov	r1, r8
 8004472:	1851      	adds	r1, r2, r1
 8004474:	6139      	str	r1, [r7, #16]
 8004476:	4649      	mov	r1, r9
 8004478:	414b      	adcs	r3, r1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004488:	4659      	mov	r1, fp
 800448a:	00cb      	lsls	r3, r1, #3
 800448c:	4651      	mov	r1, sl
 800448e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004492:	4651      	mov	r1, sl
 8004494:	00ca      	lsls	r2, r1, #3
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	4603      	mov	r3, r0
 800449c:	4642      	mov	r2, r8
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044a4:	464b      	mov	r3, r9
 80044a6:	460a      	mov	r2, r1
 80044a8:	eb42 0303 	adc.w	r3, r2, r3
 80044ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044c8:	4649      	mov	r1, r9
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	4641      	mov	r1, r8
 80044ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d2:	4641      	mov	r1, r8
 80044d4:	008a      	lsls	r2, r1, #2
 80044d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044da:	f7fb feab 	bl	8000234 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <UART_SetConfig+0x4e4>)
 80044e6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2264      	movs	r2, #100	; 0x64
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	1acb      	subs	r3, r1, r3
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	3332      	adds	r3, #50	; 0x32
 80044f8:	4a33      	ldr	r2, [pc, #204]	; (80045c8 <UART_SetConfig+0x4e4>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004504:	441c      	add	r4, r3
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	673b      	str	r3, [r7, #112]	; 0x70
 800450e:	677a      	str	r2, [r7, #116]	; 0x74
 8004510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	1891      	adds	r1, r2, r2
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	415b      	adcs	r3, r3
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004524:	4641      	mov	r1, r8
 8004526:	1851      	adds	r1, r2, r1
 8004528:	6039      	str	r1, [r7, #0]
 800452a:	4649      	mov	r1, r9
 800452c:	414b      	adcs	r3, r1
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800453c:	4659      	mov	r1, fp
 800453e:	00cb      	lsls	r3, r1, #3
 8004540:	4651      	mov	r1, sl
 8004542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004546:	4651      	mov	r1, sl
 8004548:	00ca      	lsls	r2, r1, #3
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	4603      	mov	r3, r0
 8004550:	4642      	mov	r2, r8
 8004552:	189b      	adds	r3, r3, r2
 8004554:	66bb      	str	r3, [r7, #104]	; 0x68
 8004556:	464b      	mov	r3, r9
 8004558:	460a      	mov	r2, r1
 800455a:	eb42 0303 	adc.w	r3, r2, r3
 800455e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	663b      	str	r3, [r7, #96]	; 0x60
 800456a:	667a      	str	r2, [r7, #100]	; 0x64
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004578:	4649      	mov	r1, r9
 800457a:	008b      	lsls	r3, r1, #2
 800457c:	4641      	mov	r1, r8
 800457e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004582:	4641      	mov	r1, r8
 8004584:	008a      	lsls	r2, r1, #2
 8004586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800458a:	f7fb fe53 	bl	8000234 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <UART_SetConfig+0x4e4>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UART_SetConfig+0x4e4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 020f 	and.w	r2, r3, #15
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4422      	add	r2, r4
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045c2:	46bd      	mov	sp, r7
 80045c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c8:	51eb851f 	.word	0x51eb851f

080045cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f103 0208 	add.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f103 0208 	add.w	r2, r3, #8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f103 0208 	add.w	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004684:	d103      	bne.n	800468e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e00c      	b.n	80046a8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3308      	adds	r3, #8
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e002      	b.n	800469c <vListInsert+0x2e>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d2f6      	bcs.n	8004696 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6892      	ldr	r2, [r2, #8]
 80046f6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6852      	ldr	r2, [r2, #4]
 8004700:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d103      	bne.n	8004714 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1e5a      	subs	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <xQueueGenericReset+0x2e>
        __asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60fb      	str	r3, [r7, #12]
    }
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05d      	beq.n	8004824 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d059      	beq.n	8004824 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	2100      	movs	r1, #0
 800477a:	fba3 2302 	umull	r2, r3, r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d000      	beq.n	8004784 <xQueueGenericReset+0x50>
 8004782:	2101      	movs	r1, #1
 8004784:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004786:	2b00      	cmp	r3, #0
 8004788:	d14c      	bne.n	8004824 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800478a:	f002 fd35 	bl	80071f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	6939      	ldr	r1, [r7, #16]
 8004798:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	441a      	add	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2200      	movs	r2, #0
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	441a      	add	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	22ff      	movs	r2, #255	; 0xff
 80047ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d114      	bne.n	800480a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01a      	beq.n	800481e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	3310      	adds	r3, #16
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 fa5f 	bl	8005cb0 <xTaskRemoveFromEventList>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d012      	beq.n	800481e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <xQueueGenericReset+0x11c>)
 80047fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	e009      	b.n	800481e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3310      	adds	r3, #16
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fedc 	bl	80045cc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fed7 	bl	80045cc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800481e:	f002 fd1b 	bl	8007258 <vPortExitCritical>
 8004822:	e001      	b.n	8004828 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <xQueueGenericReset+0x110>
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60bb      	str	r3, [r7, #8]
    }
 8004840:	bf00      	nop
 8004842:	e7fe      	b.n	8004842 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004844:	697b      	ldr	r3, [r7, #20]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02e      	beq.n	80048ca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800486c:	2100      	movs	r1, #0
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	fba3 2302 	umull	r2, r3, r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d000      	beq.n	800487c <xQueueGenericCreate+0x28>
 800487a:	2101      	movs	r1, #1
 800487c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800487e:	2b00      	cmp	r3, #0
 8004880:	d123      	bne.n	80048ca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800488a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800488e:	d81c      	bhi.n	80048ca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3350      	adds	r3, #80	; 0x50
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 fdcc 	bl	800743c <pvPortMalloc>
 80048a4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01c      	beq.n	80048e6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3350      	adds	r3, #80	; 0x50
 80048b4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048b6:	79fa      	ldrb	r2, [r7, #7]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f814 	bl	80048f0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80048c8:	e00d      	b.n	80048e6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueGenericCreate+0x92>
        __asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	613b      	str	r3, [r7, #16]
    }
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80048e6:	69fb      	ldr	r3, [r7, #28]
    }
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e002      	b.n	8004912 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800491e:	2101      	movs	r1, #1
 8004920:	69b8      	ldr	r0, [r7, #24]
 8004922:	f7ff ff07 	bl	8004734 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	; 0x38
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004946:	2300      	movs	r3, #0
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xQueueGenericSend+0x32>
        __asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <xQueueGenericSend+0x40>
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <xQueueGenericSend+0x44>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <xQueueGenericSend+0x46>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <xQueueGenericSend+0x60>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d103      	bne.n	80049a6 <xQueueGenericSend+0x6e>
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <xQueueGenericSend+0x72>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericSend+0x74>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericSend+0x8e>
        __asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
    }
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c6:	f001 fb83 	bl	80060d0 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xQueueGenericSend+0x9e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <xQueueGenericSend+0xa2>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <xQueueGenericSend+0xa4>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericSend+0xbe>
        __asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61fb      	str	r3, [r7, #28]
    }
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80049f6:	f002 fbff 	bl	80071f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <xQueueGenericSend+0xd4>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d129      	bne.n	8004a60 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a12:	f000 fad6 	bl	8004fc2 <prvCopyDataToQueue>
 8004a16:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	3324      	adds	r3, #36	; 0x24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f943 	bl	8005cb0 <xTaskRemoveFromEventList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	e00a      	b.n	8004a58 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004a58:	f002 fbfe 	bl	8007258 <vPortExitCritical>
                return pdPASS;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e063      	b.n	8004b28 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a66:	f002 fbf7 	bl	8007258 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e05c      	b.n	8004b28 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 f9ef 	bl	8005e5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a82:	f002 fbe9 	bl	8007258 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a86:	f000 fe11 	bl	80056ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a8a:	f002 fbb5 	bl	80071f8 <vPortEnterCritical>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9a:	d103      	bne.n	8004aa4 <xQueueGenericSend+0x16c>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d103      	bne.n	8004aba <xQueueGenericSend+0x182>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aba:	f002 fbcd 	bl	8007258 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004abe:	1d3a      	adds	r2, r7, #4
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 f9de 	bl	8005e88 <xTaskCheckForTimeOut>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d124      	bne.n	8004b1c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	f000 fb6d 	bl	80051b2 <prvIsQueueFull>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f878 	bl	8005bdc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aee:	f000 faf8 	bl	80050e2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004af2:	f000 fde9 	bl	80056c8 <xTaskResumeAll>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f af7c 	bne.w	80049f6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	e772      	b.n	80049f6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b12:	f000 fae6 	bl	80050e2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004b16:	f000 fdd7 	bl	80056c8 <xTaskResumeAll>
 8004b1a:	e76c      	b.n	80049f6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fae0 	bl	80050e2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004b22:	f000 fdd1 	bl	80056c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004b26:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3738      	adds	r7, #56	; 0x38
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b092      	sub	sp, #72	; 0x48
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8004b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueGenericSendFromISR+0x3c>
 8004b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGenericSendFromISR+0x40>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGenericSendFromISR+0x42>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSendFromISR+0x6a>
 8004b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSendFromISR+0x6e>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSendFromISR+0x70>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbe:	f002 fbfd 	bl	80073bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	623a      	str	r2, [r7, #32]
 8004bd8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004bda:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <xQueueGenericSendFromISR+0xbc>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d146      	bne.n	8004c7e <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c06:	f000 f9dc 	bl	8004fc2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004c0a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c12:	d112      	bne.n	8004c3a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02d      	beq.n	8004c78 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f845 	bl	8005cb0 <xTaskRemoveFromEventList>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d025      	beq.n	8004c78 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d022      	beq.n	8004c78 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e01e      	b.n	8004c78 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004c3a:	f000 fe51 	bl	80058e0 <uxTaskGetNumberOfTasks>
 8004c3e:	6338      	str	r0, [r7, #48]	; 0x30
 8004c40:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d916      	bls.n	8004c78 <xQueueGenericSendFromISR+0x144>
 8004c4a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c50:	d10a      	bne.n	8004c68 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	61bb      	str	r3, [r7, #24]
    }
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xQueueGenericSendFromISR+0x132>
 8004c68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	b25a      	sxtb	r2, r3
 8004c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8004c7c:	e001      	b.n	8004c82 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	647b      	str	r3, [r7, #68]	; 0x44
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004c8c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3748      	adds	r7, #72	; 0x48
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	; 0x30
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <xQueueReceive+0x30>
        __asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	623b      	str	r3, [r7, #32]
    }
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d103      	bne.n	8004cd6 <xQueueReceive+0x3e>
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <xQueueReceive+0x42>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueReceive+0x44>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xQueueReceive+0x5e>
        __asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61fb      	str	r3, [r7, #28]
    }
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cf6:	f001 f9eb 	bl	80060d0 <xTaskGetSchedulerState>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <xQueueReceive+0x6e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueReceive+0x72>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueReceive+0x74>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xQueueReceive+0x8e>
        __asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	61bb      	str	r3, [r7, #24]
    }
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d26:	f002 fa67 	bl	80071f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01f      	beq.n	8004d76 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	f000 f9ac 	bl	8005096 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00f      	beq.n	8004d6e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	3310      	adds	r3, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 ffac 	bl	8005cb0 <xTaskRemoveFromEventList>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <xQueueReceive+0x1bc>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004d6e:	f002 fa73 	bl	8007258 <vPortExitCritical>
                return pdPASS;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e069      	b.n	8004e4a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d7c:	f002 fa6c 	bl	8007258 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e062      	b.n	8004e4a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d8a:	f107 0310 	add.w	r3, r7, #16
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 f864 	bl	8005e5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d98:	f002 fa5e 	bl	8007258 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d9c:	f000 fc86 	bl	80056ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004da0:	f002 fa2a 	bl	80071f8 <vPortEnterCritical>
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db0:	d103      	bne.n	8004dba <xQueueReceive+0x122>
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dc6:	d103      	bne.n	8004dd0 <xQueueReceive+0x138>
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd0:	f002 fa42 	bl	8007258 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd4:	1d3a      	adds	r2, r7, #4
 8004dd6:	f107 0310 	add.w	r3, r7, #16
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f853 	bl	8005e88 <xTaskCheckForTimeOut>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d123      	bne.n	8004e30 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dea:	f000 f9cc 	bl	8005186 <prvIsQueueEmpty>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d017      	beq.n	8004e24 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 feed 	bl	8005bdc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e04:	f000 f96d 	bl	80050e2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004e08:	f000 fc5e 	bl	80056c8 <xTaskResumeAll>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d189      	bne.n	8004d26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <xQueueReceive+0x1bc>)
 8004e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	e780      	b.n	8004d26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e26:	f000 f95c 	bl	80050e2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e2a:	f000 fc4d 	bl	80056c8 <xTaskResumeAll>
 8004e2e:	e77a      	b.n	8004d26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e32:	f000 f956 	bl	80050e2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e36:	f000 fc47 	bl	80056c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3c:	f000 f9a3 	bl	8005186 <prvIsQueueEmpty>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f43f af6f 	beq.w	8004d26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004e48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3730      	adds	r7, #48	; 0x30
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b090      	sub	sp, #64	; 0x40
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <xQueueReceiveFromISR+0x3a>
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <xQueueReceiveFromISR+0x3e>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <xQueueReceiveFromISR+0x40>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	623b      	str	r3, [r7, #32]
    }
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eb2:	f002 fa83 	bl	80073bc <vPortValidateInterruptPriority>
        __asm volatile
 8004eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	61fa      	str	r2, [r7, #28]
 8004ecc:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004ece:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d046      	beq.n	8004f6c <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eec:	f000 f8d3 	bl	8005096 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f00:	d112      	bne.n	8004f28 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02d      	beq.n	8004f66 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fece 	bl	8005cb0 <xTaskRemoveFromEventList>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d025      	beq.n	8004f66 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d022      	beq.n	8004f66 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e01e      	b.n	8004f66 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004f28:	f000 fcda 	bl	80058e0 <uxTaskGetNumberOfTasks>
 8004f2c:	62b8      	str	r0, [r7, #40]	; 0x28
 8004f2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d916      	bls.n	8004f66 <xQueueReceiveFromISR+0x10e>
 8004f38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3e:	d10a      	bne.n	8004f56 <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	617b      	str	r3, [r7, #20]
    }
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xQueueReceiveFromISR+0xfc>
 8004f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	b25a      	sxtb	r2, r3
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8004f66:	2301      	movs	r3, #1
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6a:	e001      	b.n	8004f70 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f383 8811 	msr	BASEPRI, r3
    }
 8004f7a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3740      	adds	r7, #64	; 0x40
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60bb      	str	r3, [r7, #8]
    }
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004faa:	f002 f925 	bl	80071f8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004fb4:	f002 f950 	bl	8007258 <vPortExitCritical>

    return uxReturn;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d14d      	bne.n	8005084 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 f88d 	bl	800610c <xTaskPriorityDisinherit>
 8004ff2:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	e043      	b.n	8005084 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d119      	bne.n	8005036 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6858      	ldr	r0, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	461a      	mov	r2, r3
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	f002 fc0d 	bl	800782c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	441a      	add	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d32b      	bcc.n	8005084 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	e026      	b.n	8005084 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68d8      	ldr	r0, [r3, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	461a      	mov	r2, r3
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	f002 fbf3 	bl	800782c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	425b      	negs	r3, r3
 8005050:	441a      	add	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d207      	bcs.n	8005072 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	425b      	negs	r3, r3
 800506c:	441a      	add	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d105      	bne.n	8005084 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800508c:	697b      	ldr	r3, [r7, #20]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d018      	beq.n	80050da <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	441a      	add	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d303      	bcc.n	80050ca <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	461a      	mov	r2, r3
 80050d4:	6838      	ldr	r0, [r7, #0]
 80050d6:	f002 fba9 	bl	800782c <memcpy>
    }
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80050ea:	f002 f885 	bl	80071f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f6:	e011      	b.n	800511c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fdd3 	bl	8005cb0 <xTaskRemoveFromEventList>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005110:	f000 ff20 	bl	8005f54 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	3b01      	subs	r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	dce9      	bgt.n	80050f8 <prvUnlockQueue+0x16>
 8005124:	e000      	b.n	8005128 <prvUnlockQueue+0x46>
                    break;
 8005126:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005130:	f002 f892 	bl	8007258 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005134:	f002 f860 	bl	80071f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005140:	e011      	b.n	8005166 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3310      	adds	r3, #16
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fdae 	bl	8005cb0 <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800515a:	f000 fefb 	bl	8005f54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800515e:	7bbb      	ldrb	r3, [r7, #14]
 8005160:	3b01      	subs	r3, #1
 8005162:	b2db      	uxtb	r3, r3
 8005164:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516a:	2b00      	cmp	r3, #0
 800516c:	dce9      	bgt.n	8005142 <prvUnlockQueue+0x60>
 800516e:	e000      	b.n	8005172 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005170:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800517a:	f002 f86d 	bl	8007258 <vPortExitCritical>
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800518e:	f002 f833 	bl	80071f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e001      	b.n	80051a4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80051a4:	f002 f858 	bl	8007258 <vPortExitCritical>

    return xReturn;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80051ba:	f002 f81d 	bl	80071f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d102      	bne.n	80051d0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e001      	b.n	80051d4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80051d4:	f002 f840 	bl	8007258 <vPortExitCritical>

    return xReturn;
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
    }
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	429a      	cmp	r2, r3
 8005214:	d102      	bne.n	800521c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e001      	b.n	8005220 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005220:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005222:	4618      	mov	r0, r3
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
    }
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d024      	beq.n	80052aa <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e01e      	b.n	80052a4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <vQueueAddToRegistry+0x98>)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d105      	bne.n	8005282 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <vQueueAddToRegistry+0x98>)
 800527c:	4413      	add	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
                    break;
 8005280:	e013      	b.n	80052aa <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <vQueueAddToRegistry+0x6e>
 8005288:	4a0f      	ldr	r2, [pc, #60]	; (80052c8 <vQueueAddToRegistry+0x98>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <vQueueAddToRegistry+0x98>)
 800529a:	4413      	add	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	3301      	adds	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d9dd      	bls.n	8005266 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000124 	.word	0x20000124

080052cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80052dc:	f001 ff8c 	bl	80071f8 <vPortEnterCritical>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052e6:	b25b      	sxtb	r3, r3
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ec:	d103      	bne.n	80052f6 <vQueueWaitForMessageRestricted+0x2a>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005302:	d103      	bne.n	800530c <vQueueWaitForMessageRestricted+0x40>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800530c:	f001 ffa4 	bl	8007258 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3324      	adds	r3, #36	; 0x24
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fc7f 	bl	8005c24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005326:	6978      	ldr	r0, [r7, #20]
 8005328:	f7ff fedb 	bl	80050e2 <prvUnlockQueue>
    }
 800532c:	bf00      	nop
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	; 0x30
 8005338:	af04      	add	r7, sp, #16
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4618      	mov	r0, r3
 800534a:	f002 f877 	bl	800743c <pvPortMalloc>
 800534e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d013      	beq.n	800537e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005356:	2058      	movs	r0, #88	; 0x58
 8005358:	f002 f870 	bl	800743c <pvPortMalloc>
 800535c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005364:	2258      	movs	r2, #88	; 0x58
 8005366:	2100      	movs	r1, #0
 8005368:	69f8      	ldr	r0, [r7, #28]
 800536a:	f002 fa33 	bl	80077d4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
 8005374:	e005      	b.n	8005382 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f002 f91a 	bl	80075b0 <vPortFree>
 800537c:	e001      	b.n	8005382 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	2300      	movs	r3, #0
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f80e 	bl	80053c0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80053a4:	69f8      	ldr	r0, [r7, #28]
 80053a6:	f000 f899 	bl	80054dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80053aa:	2301      	movs	r3, #1
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e002      	b.n	80053b6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80053b6:	69bb      	ldr	r3, [r7, #24]
    }
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	461a      	mov	r2, r3
 80053d8:	21a5      	movs	r1, #165	; 0xa5
 80053da:	f002 f9fb 	bl	80077d4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053e8:	3b01      	subs	r3, #1
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	617b      	str	r3, [r7, #20]
    }
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01e      	beq.n	800545c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e012      	b.n	800544a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	7819      	ldrb	r1, [r3, #0]
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	3334      	adds	r3, #52	; 0x34
 8005434:	460a      	mov	r2, r1
 8005436:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b09      	cmp	r3, #9
 800544e:	d9e9      	bls.n	8005424 <prvInitialiseNewTask+0x64>
 8005450:	e000      	b.n	8005454 <prvInitialiseNewTask+0x94>
            {
                break;
 8005452:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b04      	cmp	r3, #4
 8005460:	d90a      	bls.n	8005478 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	613b      	str	r3, [r7, #16]
    }
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	2b04      	cmp	r3, #4
 800547c:	d901      	bls.n	8005482 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800547e:	2304      	movs	r3, #4
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff f8ba 	bl	800460c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	3318      	adds	r3, #24
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff f8b5 	bl	800460c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f1c3 0205 	rsb	r2, r3, #5
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	69b8      	ldr	r0, [r7, #24]
 80054be:	f001 fd69 	bl	8006f94 <pxPortInitialiseStack>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054d4:	bf00      	nop
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80054e4:	f001 fe88 	bl	80071f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80054e8:	4b40      	ldr	r3, [pc, #256]	; (80055ec <prvAddNewTaskToReadyList+0x110>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	4a3f      	ldr	r2, [pc, #252]	; (80055ec <prvAddNewTaskToReadyList+0x110>)
 80054f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80054f2:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <prvAddNewTaskToReadyList+0x114>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80054fa:	4a3d      	ldr	r2, [pc, #244]	; (80055f0 <prvAddNewTaskToReadyList+0x114>)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005500:	4b3a      	ldr	r3, [pc, #232]	; (80055ec <prvAddNewTaskToReadyList+0x110>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d110      	bne.n	800552a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005508:	f000 fd48 	bl	8005f9c <prvInitialiseTaskLists>
 800550c:	e00d      	b.n	800552a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800550e:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <prvAddNewTaskToReadyList+0x118>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <prvAddNewTaskToReadyList+0x114>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	429a      	cmp	r2, r3
 8005522:	d802      	bhi.n	800552a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005524:	4a32      	ldr	r2, [pc, #200]	; (80055f0 <prvAddNewTaskToReadyList+0x114>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800552a:	4b33      	ldr	r3, [pc, #204]	; (80055f8 <prvAddNewTaskToReadyList+0x11c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	4a31      	ldr	r2, [pc, #196]	; (80055f8 <prvAddNewTaskToReadyList+0x11c>)
 8005532:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005534:	4b30      	ldr	r3, [pc, #192]	; (80055f8 <prvAddNewTaskToReadyList+0x11c>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	2201      	movs	r2, #1
 8005542:	409a      	lsls	r2, r3
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <prvAddNewTaskToReadyList+0x120>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4313      	orrs	r3, r2
 800554a:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <prvAddNewTaskToReadyList+0x120>)
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005552:	492b      	ldr	r1, [pc, #172]	; (8005600 <prvAddNewTaskToReadyList+0x124>)
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	3304      	adds	r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	609a      	str	r2, [r3, #8]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	3204      	adds	r2, #4
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <prvAddNewTaskToReadyList+0x124>)
 8005592:	441a      	add	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	615a      	str	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	4918      	ldr	r1, [pc, #96]	; (8005600 <prvAddNewTaskToReadyList+0x124>)
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	4814      	ldr	r0, [pc, #80]	; (8005600 <prvAddNewTaskToReadyList+0x124>)
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4403      	add	r3, r0
 80055b8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80055ba:	f001 fe4d 	bl	8007258 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <prvAddNewTaskToReadyList+0x118>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00e      	beq.n	80055e4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvAddNewTaskToReadyList+0x114>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d207      	bcs.n	80055e4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <prvAddNewTaskToReadyList+0x128>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	2000023c 	.word	0x2000023c
 80055f0:	20000164 	.word	0x20000164
 80055f4:	20000248 	.word	0x20000248
 80055f8:	20000258 	.word	0x20000258
 80055fc:	20000244 	.word	0x20000244
 8005600:	20000168 	.word	0x20000168
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <vTaskStartScheduler+0x88>)
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	2300      	movs	r3, #0
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2300      	movs	r3, #0
 8005618:	2282      	movs	r2, #130	; 0x82
 800561a:	491e      	ldr	r1, [pc, #120]	; (8005694 <vTaskStartScheduler+0x8c>)
 800561c:	481e      	ldr	r0, [pc, #120]	; (8005698 <vTaskStartScheduler+0x90>)
 800561e:	f7ff fe89 	bl	8005334 <xTaskCreate>
 8005622:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d102      	bne.n	8005630 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800562a:	f001 f967 	bl	80068fc <xTimerCreateTimerTask>
 800562e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d116      	bne.n	8005664 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60bb      	str	r3, [r7, #8]
    }
 8005648:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <vTaskStartScheduler+0x94>)
 800564c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005650:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <vTaskStartScheduler+0x98>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005658:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <vTaskStartScheduler+0x9c>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800565e:	f001 fd29 	bl	80070b4 <xPortStartScheduler>
 8005662:	e00e      	b.n	8005682 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800566a:	d10a      	bne.n	8005682 <vTaskStartScheduler+0x7a>
        __asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	607b      	str	r3, [r7, #4]
    }
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <vTaskStartScheduler+0xa0>)
 8005684:	681b      	ldr	r3, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000260 	.word	0x20000260
 8005694:	080079f0 	.word	0x080079f0
 8005698:	08005f6d 	.word	0x08005f6d
 800569c:	2000025c 	.word	0x2000025c
 80056a0:	20000248 	.word	0x20000248
 80056a4:	20000240 	.word	0x20000240
 80056a8:	20000018 	.word	0x20000018

080056ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <vTaskSuspendAll+0x18>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a03      	ldr	r2, [pc, #12]	; (80056c4 <vTaskSuspendAll+0x18>)
 80056b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	20000264 	.word	0x20000264

080056c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80056d6:	4b71      	ldr	r3, [pc, #452]	; (800589c <xTaskResumeAll+0x1d4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
    }
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80056f4:	f001 fd80 	bl	80071f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80056f8:	4b68      	ldr	r3, [pc, #416]	; (800589c <xTaskResumeAll+0x1d4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	4a67      	ldr	r2, [pc, #412]	; (800589c <xTaskResumeAll+0x1d4>)
 8005700:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005702:	4b66      	ldr	r3, [pc, #408]	; (800589c <xTaskResumeAll+0x1d4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 80c0 	bne.w	800588c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800570c:	4b64      	ldr	r3, [pc, #400]	; (80058a0 <xTaskResumeAll+0x1d8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80bb 	beq.w	800588c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005716:	e08a      	b.n	800582e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005718:	4b62      	ldr	r3, [pc, #392]	; (80058a4 <xTaskResumeAll+0x1dc>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	6a12      	ldr	r2, [r2, #32]
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	69d2      	ldr	r2, [r2, #28]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3318      	adds	r3, #24
 8005742:	429a      	cmp	r2, r3
 8005744:	d103      	bne.n	800574e <xTaskResumeAll+0x86>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2200      	movs	r2, #0
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1e5a      	subs	r2, r3, #1
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	68d2      	ldr	r2, [r2, #12]
 800576c:	609a      	str	r2, [r3, #8]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	6892      	ldr	r2, [r2, #8]
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3304      	adds	r3, #4
 8005780:	429a      	cmp	r2, r3
 8005782:	d103      	bne.n	800578c <xTaskResumeAll+0xc4>
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	2200      	movs	r2, #0
 8005790:	615a      	str	r2, [r3, #20]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1e5a      	subs	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	2201      	movs	r2, #1
 80057a2:	409a      	lsls	r2, r3
 80057a4:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <xTaskResumeAll+0x1e0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	4a3f      	ldr	r2, [pc, #252]	; (80058a8 <xTaskResumeAll+0x1e0>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	493e      	ldr	r1, [pc, #248]	; (80058ac <xTaskResumeAll+0x1e4>)
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	3304      	adds	r3, #4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	3204      	adds	r2, #4
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4a2e      	ldr	r2, [pc, #184]	; (80058ac <xTaskResumeAll+0x1e4>)
 80057f2:	441a      	add	r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	615a      	str	r2, [r3, #20]
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	492b      	ldr	r1, [pc, #172]	; (80058ac <xTaskResumeAll+0x1e4>)
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	4827      	ldr	r0, [pc, #156]	; (80058ac <xTaskResumeAll+0x1e4>)
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4403      	add	r3, r0
 8005818:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <xTaskResumeAll+0x1e8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <xTaskResumeAll+0x1ec>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800582e:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <xTaskResumeAll+0x1dc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f af70 	bne.w	8005718 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800583e:	f000 fc2b 	bl	8006098 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <xTaskResumeAll+0x1f0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800584e:	f000 f853 	bl	80058f8 <xTaskIncrementTick>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005858:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <xTaskResumeAll+0x1ec>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	3b01      	subs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f1      	bne.n	800584e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800586a:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <xTaskResumeAll+0x1f0>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005870:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <xTaskResumeAll+0x1ec>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTaskResumeAll+0x1f4>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800588c:	f001 fce4 	bl	8007258 <vPortExitCritical>

    return xAlreadyYielded;
 8005890:	69bb      	ldr	r3, [r7, #24]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000264 	.word	0x20000264
 80058a0:	2000023c 	.word	0x2000023c
 80058a4:	200001fc 	.word	0x200001fc
 80058a8:	20000244 	.word	0x20000244
 80058ac:	20000168 	.word	0x20000168
 80058b0:	20000164 	.word	0x20000164
 80058b4:	20000250 	.word	0x20000250
 80058b8:	2000024c 	.word	0x2000024c
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <xTaskGetTickCount+0x1c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80058cc:	687b      	ldr	r3, [r7, #4]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000240 	.word	0x20000240

080058e0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <uxTaskGetNumberOfTasks+0x14>)
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	2000023c 	.word	0x2000023c

080058f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005902:	4b7d      	ldr	r3, [pc, #500]	; (8005af8 <xTaskIncrementTick+0x200>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 80ec 	bne.w	8005ae4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800590c:	4b7b      	ldr	r3, [pc, #492]	; (8005afc <xTaskIncrementTick+0x204>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005914:	4a79      	ldr	r2, [pc, #484]	; (8005afc <xTaskIncrementTick+0x204>)
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d120      	bne.n	8005962 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005920:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <xTaskIncrementTick+0x208>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <xTaskIncrementTick+0x48>
        __asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	607b      	str	r3, [r7, #4]
    }
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xTaskIncrementTick+0x46>
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <xTaskIncrementTick+0x208>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	4b6f      	ldr	r3, [pc, #444]	; (8005b04 <xTaskIncrementTick+0x20c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6d      	ldr	r2, [pc, #436]	; (8005b00 <xTaskIncrementTick+0x208>)
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4a6d      	ldr	r2, [pc, #436]	; (8005b04 <xTaskIncrementTick+0x20c>)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <xTaskIncrementTick+0x210>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	4a6b      	ldr	r2, [pc, #428]	; (8005b08 <xTaskIncrementTick+0x210>)
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	f000 fb9b 	bl	8006098 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005962:	4b6a      	ldr	r3, [pc, #424]	; (8005b0c <xTaskIncrementTick+0x214>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	429a      	cmp	r2, r3
 800596a:	f0c0 80a6 	bcc.w	8005aba <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596e:	4b64      	ldr	r3, [pc, #400]	; (8005b00 <xTaskIncrementTick+0x208>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005978:	4b64      	ldr	r3, [pc, #400]	; (8005b0c <xTaskIncrementTick+0x214>)
 800597a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800597e:	601a      	str	r2, [r3, #0]
                    break;
 8005980:	e09b      	b.n	8005aba <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005982:	4b5f      	ldr	r3, [pc, #380]	; (8005b00 <xTaskIncrementTick+0x208>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	429a      	cmp	r2, r3
 8005998:	d203      	bcs.n	80059a2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800599a:	4a5c      	ldr	r2, [pc, #368]	; (8005b0c <xTaskIncrementTick+0x214>)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80059a0:	e08b      	b.n	8005aba <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	68d2      	ldr	r2, [r2, #12]
 80059b0:	609a      	str	r2, [r3, #8]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	6892      	ldr	r2, [r2, #8]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	3304      	adds	r3, #4
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d103      	bne.n	80059d0 <xTaskIncrementTick+0xd8>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2200      	movs	r2, #0
 80059d4:	615a      	str	r2, [r3, #20]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01e      	beq.n	8005a26 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	6a12      	ldr	r2, [r2, #32]
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	69d2      	ldr	r2, [r2, #28]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	3318      	adds	r3, #24
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d103      	bne.n	8005a16 <xTaskIncrementTick+0x11e>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <xTaskIncrementTick+0x218>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	4a36      	ldr	r2, [pc, #216]	; (8005b10 <xTaskIncrementTick+0x218>)
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	4935      	ldr	r1, [pc, #212]	; (8005b14 <xTaskIncrementTick+0x21c>)
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	3304      	adds	r3, #4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	3204      	adds	r2, #4
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	1d1a      	adds	r2, r3, #4
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <xTaskIncrementTick+0x21c>)
 8005a7c:	441a      	add	r2, r3
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	615a      	str	r2, [r3, #20]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4923      	ldr	r1, [pc, #140]	; (8005b14 <xTaskIncrementTick+0x21c>)
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	1c59      	adds	r1, r3, #1
 8005a96:	481f      	ldr	r0, [pc, #124]	; (8005b14 <xTaskIncrementTick+0x21c>)
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4403      	add	r3, r0
 8005aa2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <xTaskIncrementTick+0x220>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	f67f af5d 	bls.w	800596e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab8:	e759      	b.n	800596e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <xTaskIncrementTick+0x220>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4914      	ldr	r1, [pc, #80]	; (8005b14 <xTaskIncrementTick+0x21c>)
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d901      	bls.n	8005ad6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <xTaskIncrementTick+0x224>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae2:	e004      	b.n	8005aee <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <xTaskIncrementTick+0x228>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <xTaskIncrementTick+0x228>)
 8005aec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3728      	adds	r7, #40	; 0x28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000264 	.word	0x20000264
 8005afc:	20000240 	.word	0x20000240
 8005b00:	200001f4 	.word	0x200001f4
 8005b04:	200001f8 	.word	0x200001f8
 8005b08:	20000254 	.word	0x20000254
 8005b0c:	2000025c 	.word	0x2000025c
 8005b10:	20000244 	.word	0x20000244
 8005b14:	20000168 	.word	0x20000168
 8005b18:	20000164 	.word	0x20000164
 8005b1c:	20000250 	.word	0x20000250
 8005b20:	2000024c 	.word	0x2000024c

08005b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b2a:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <vTaskSwitchContext+0xa4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <vTaskSwitchContext+0xa8>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005b38:	e03f      	b.n	8005bba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <vTaskSwitchContext+0xa8>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b40:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <vTaskSwitchContext+0xac>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	fab3 f383 	clz	r3, r3
 8005b4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	f1c3 031f 	rsb	r3, r3, #31
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	491f      	ldr	r1, [pc, #124]	; (8005bd4 <vTaskSwitchContext+0xb0>)
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	607b      	str	r3, [r7, #4]
    }
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <vTaskSwitchContext+0x5a>
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <vTaskSwitchContext+0xb0>)
 8005b8c:	4413      	add	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d104      	bne.n	8005bb0 <vTaskSwitchContext+0x8c>
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <vTaskSwitchContext+0xb4>)
 8005bb8:	6013      	str	r3, [r2, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000264 	.word	0x20000264
 8005bcc:	20000250 	.word	0x20000250
 8005bd0:	20000244 	.word	0x20000244
 8005bd4:	20000168 	.word	0x20000168
 8005bd8:	20000164 	.word	0x20000164

08005bdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
    }
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <vTaskPlaceOnEventList+0x44>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3318      	adds	r3, #24
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fe fd2f 	bl	800466e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c10:	2101      	movs	r1, #1
 8005c12:	6838      	ldr	r0, [r7, #0]
 8005c14:	f000 fdf2 	bl	80067fc <prvAddCurrentTaskToDelayedList>
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000164 	.word	0x20000164

08005c24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	613b      	str	r3, [r7, #16]
    }
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	4b16      	ldr	r3, [pc, #88]	; (8005cac <vTaskPlaceOnEventListRestricted+0x88>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	61da      	str	r2, [r3, #28]
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <vTaskPlaceOnEventListRestricted+0x88>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	6892      	ldr	r2, [r2, #8]
 8005c62:	621a      	str	r2, [r3, #32]
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <vTaskPlaceOnEventListRestricted+0x88>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	3218      	adds	r2, #24
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <vTaskPlaceOnEventListRestricted+0x88>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f103 0218 	add.w	r2, r3, #24
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <vTaskPlaceOnEventListRestricted+0x88>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c98:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	68b8      	ldr	r0, [r7, #8]
 8005c9e:	f000 fdad 	bl	80067fc <prvAddCurrentTaskToDelayedList>
    }
 8005ca2:	bf00      	nop
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000164 	.word	0x20000164

08005cb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b08b      	sub	sp, #44	; 0x2c
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
    }
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	6a12      	ldr	r2, [r2, #32]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	69d2      	ldr	r2, [r2, #28]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d103      	bne.n	8005d0a <xTaskRemoveFromEventList+0x5a>
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	1e5a      	subs	r2, r3, #1
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d1a:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <xTaskRemoveFromEventList+0x194>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d15e      	bne.n	8005de0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	68d2      	ldr	r2, [r2, #12]
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	6a3a      	ldr	r2, [r7, #32]
 8005d38:	6892      	ldr	r2, [r2, #8]
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	3304      	adds	r3, #4
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d103      	bne.n	8005d50 <xTaskRemoveFromEventList+0xa0>
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	2200      	movs	r2, #0
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <xTaskRemoveFromEventList+0x198>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	4a36      	ldr	r2, [pc, #216]	; (8005e48 <xTaskRemoveFromEventList+0x198>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4935      	ldr	r1, [pc, #212]	; (8005e4c <xTaskRemoveFromEventList+0x19c>)
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3304      	adds	r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	609a      	str	r2, [r3, #8]
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	3204      	adds	r2, #4
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	1d1a      	adds	r2, r3, #4
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4a25      	ldr	r2, [pc, #148]	; (8005e4c <xTaskRemoveFromEventList+0x19c>)
 8005db6:	441a      	add	r2, r3
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	615a      	str	r2, [r3, #20]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4922      	ldr	r1, [pc, #136]	; (8005e4c <xTaskRemoveFromEventList+0x19c>)
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	481e      	ldr	r0, [pc, #120]	; (8005e4c <xTaskRemoveFromEventList+0x19c>)
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4403      	add	r3, r0
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	e01b      	b.n	8005e18 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <xTaskRemoveFromEventList+0x1a0>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	61da      	str	r2, [r3, #28]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	621a      	str	r2, [r3, #32]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	3218      	adds	r2, #24
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f103 0218 	add.w	r2, r3, #24
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <xTaskRemoveFromEventList+0x1a0>)
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <xTaskRemoveFromEventList+0x1a0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <xTaskRemoveFromEventList+0x1a0>)
 8005e16:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <xTaskRemoveFromEventList+0x1a4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d905      	bls.n	8005e32 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005e26:	2301      	movs	r3, #1
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <xTaskRemoveFromEventList+0x1a8>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e001      	b.n	8005e36 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	372c      	adds	r7, #44	; 0x2c
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	20000264 	.word	0x20000264
 8005e48:	20000244 	.word	0x20000244
 8005e4c:	20000168 	.word	0x20000168
 8005e50:	200001fc 	.word	0x200001fc
 8005e54:	20000164 	.word	0x20000164
 8005e58:	20000250 	.word	0x20000250

08005e5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <vTaskInternalSetTimeOutState+0x24>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <vTaskInternalSetTimeOutState+0x28>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	605a      	str	r2, [r3, #4]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000254 	.word	0x20000254
 8005e84:	20000240 	.word	0x20000240

08005e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	613b      	str	r3, [r7, #16]
    }
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60fb      	str	r3, [r7, #12]
    }
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005eca:	f001 f995 	bl	80071f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005ece:	4b1f      	ldr	r3, [pc, #124]	; (8005f4c <xTaskCheckForTimeOut+0xc4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee6:	d102      	bne.n	8005eee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	e026      	b.n	8005f3c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <xTaskCheckForTimeOut+0xc8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d00a      	beq.n	8005f10 <xTaskCheckForTimeOut+0x88>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d305      	bcc.n	8005f10 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e015      	b.n	8005f3c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d20b      	bcs.n	8005f32 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	1ad2      	subs	r2, r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ff98 	bl	8005e5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e004      	b.n	8005f3c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005f3c:	f001 f98c 	bl	8007258 <vPortExitCritical>

    return xReturn;
 8005f40:	69fb      	ldr	r3, [r7, #28]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000240 	.word	0x20000240
 8005f50:	20000254 	.word	0x20000254

08005f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <vTaskMissedYield+0x14>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	20000250 	.word	0x20000250

08005f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005f74:	f000 f852 	bl	800601c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <prvIdleTask+0x28>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d9f9      	bls.n	8005f74 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <prvIdleTask+0x2c>)
 8005f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005f90:	e7f0      	b.n	8005f74 <prvIdleTask+0x8>
 8005f92:	bf00      	nop
 8005f94:	20000168 	.word	0x20000168
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	e00c      	b.n	8005fc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a12      	ldr	r2, [pc, #72]	; (8005ffc <prvInitialiseTaskLists+0x60>)
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fb08 	bl	80045cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d9ef      	bls.n	8005fa8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005fc8:	480d      	ldr	r0, [pc, #52]	; (8006000 <prvInitialiseTaskLists+0x64>)
 8005fca:	f7fe faff 	bl	80045cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005fce:	480d      	ldr	r0, [pc, #52]	; (8006004 <prvInitialiseTaskLists+0x68>)
 8005fd0:	f7fe fafc 	bl	80045cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005fd4:	480c      	ldr	r0, [pc, #48]	; (8006008 <prvInitialiseTaskLists+0x6c>)
 8005fd6:	f7fe faf9 	bl	80045cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005fda:	480c      	ldr	r0, [pc, #48]	; (800600c <prvInitialiseTaskLists+0x70>)
 8005fdc:	f7fe faf6 	bl	80045cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005fe0:	480b      	ldr	r0, [pc, #44]	; (8006010 <prvInitialiseTaskLists+0x74>)
 8005fe2:	f7fe faf3 	bl	80045cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <prvInitialiseTaskLists+0x78>)
 8005fe8:	4a05      	ldr	r2, [pc, #20]	; (8006000 <prvInitialiseTaskLists+0x64>)
 8005fea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <prvInitialiseTaskLists+0x7c>)
 8005fee:	4a05      	ldr	r2, [pc, #20]	; (8006004 <prvInitialiseTaskLists+0x68>)
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000168 	.word	0x20000168
 8006000:	200001cc 	.word	0x200001cc
 8006004:	200001e0 	.word	0x200001e0
 8006008:	200001fc 	.word	0x200001fc
 800600c:	20000210 	.word	0x20000210
 8006010:	20000228 	.word	0x20000228
 8006014:	200001f4 	.word	0x200001f4
 8006018:	200001f8 	.word	0x200001f8

0800601c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006022:	e019      	b.n	8006058 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006024:	f001 f8e8 	bl	80071f8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <prvCheckTasksWaitingTermination+0x50>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe fb53 	bl	80046e0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <prvCheckTasksWaitingTermination+0x54>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3b01      	subs	r3, #1
 8006040:	4a0b      	ldr	r2, [pc, #44]	; (8006070 <prvCheckTasksWaitingTermination+0x54>)
 8006042:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <prvCheckTasksWaitingTermination+0x58>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3b01      	subs	r3, #1
 800604a:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <prvCheckTasksWaitingTermination+0x58>)
 800604c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800604e:	f001 f903 	bl	8007258 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f810 	bl	8006078 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <prvCheckTasksWaitingTermination+0x58>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e1      	bne.n	8006024 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000210 	.word	0x20000210
 8006070:	2000023c 	.word	0x2000023c
 8006074:	20000224 	.word	0x20000224

08006078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fa93 	bl	80075b0 <vPortFree>
            vPortFree( pxTCB );
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 fa90 	bl	80075b0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvResetNextTaskUnblockTime+0x30>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <prvResetNextTaskUnblockTime+0x34>)
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80060ae:	e005      	b.n	80060bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <prvResetNextTaskUnblockTime+0x30>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a04      	ldr	r2, [pc, #16]	; (80060cc <prvResetNextTaskUnblockTime+0x34>)
 80060ba:	6013      	str	r3, [r2, #0]
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	200001f4 	.word	0x200001f4
 80060cc:	2000025c 	.word	0x2000025c

080060d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <xTaskGetSchedulerState+0x34>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80060de:	2301      	movs	r3, #1
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	e008      	b.n	80060f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <xTaskGetSchedulerState+0x38>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80060ec:	2302      	movs	r3, #2
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	e001      	b.n	80060f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80060f6:	687b      	ldr	r3, [r7, #4]
    }
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20000248 	.word	0x20000248
 8006108:	20000264 	.word	0x20000264

0800610c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d063      	beq.n	80061ea <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006122:	4b34      	ldr	r3, [pc, #208]	; (80061f4 <xTaskPriorityDisinherit+0xe8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d00a      	beq.n	8006142 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
    }
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	60bb      	str	r3, [r7, #8]
    }
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006164:	1e5a      	subs	r2, r3, #1
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006172:	429a      	cmp	r2, r3
 8006174:	d039      	beq.n	80061ea <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d135      	bne.n	80061ea <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe faac 	bl	80046e0 <uxListRemove>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	2201      	movs	r2, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43da      	mvns	r2, r3
 800619a:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <xTaskPriorityDisinherit+0xec>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4013      	ands	r3, r2
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <xTaskPriorityDisinherit+0xec>)
 80061a2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	f1c3 0205 	rsb	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	2201      	movs	r2, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <xTaskPriorityDisinherit+0xec>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <xTaskPriorityDisinherit+0xec>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4a09      	ldr	r2, [pc, #36]	; (80061fc <xTaskPriorityDisinherit+0xf0>)
 80061d8:	441a      	add	r2, r3
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3304      	adds	r3, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7fe fa20 	bl	8004626 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80061ea:	697b      	ldr	r3, [r7, #20]
    }
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000164 	.word	0x20000164
 80061f8:	20000244 	.word	0x20000244
 80061fc:	20000168 	.word	0x20000168

08006200 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	613b      	str	r3, [r7, #16]
    }
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800622a:	f000 ffe5 	bl	80071f8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800622e:	4b32      	ldr	r3, [pc, #200]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	3354      	adds	r3, #84	; 0x54
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d022      	beq.n	8006286 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006240:	4b2d      	ldr	r3, [pc, #180]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	3214      	adds	r2, #20
 8006248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	43d2      	mvns	r2, r2
 8006250:	4011      	ands	r1, r2
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	3214      	adds	r2, #20
 8006256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	3354      	adds	r3, #84	; 0x54
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800626e:	2101      	movs	r1, #1
 8006270:	6a38      	ldr	r0, [r7, #32]
 8006272:	f000 fac3 	bl	80067fc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006276:	4b21      	ldr	r3, [pc, #132]	; (80062fc <xTaskGenericNotifyWait+0xfc>)
 8006278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006286:	f000 ffe7 	bl	8007258 <vPortExitCritical>

        taskENTER_CRITICAL();
 800628a:	f000 ffb5 	bl	80071f8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006294:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	3214      	adds	r2, #20
 800629c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80062a4:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	3354      	adds	r3, #84	; 0x54
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d002      	beq.n	80062bc <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e00e      	b.n	80062da <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80062bc:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	3214      	adds	r2, #20
 80062c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	43d2      	mvns	r2, r2
 80062cc:	4011      	ands	r1, r2
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	3214      	adds	r2, #20
 80062d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80062d6:	2301      	movs	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <xTaskGenericNotifyWait+0xf8>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	3354      	adds	r3, #84	; 0x54
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80062e8:	f000 ffb6 	bl	8007258 <vPortExitCritical>

        return xReturn;
 80062ec:	697b      	ldr	r3, [r7, #20]
    }
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000164 	.word	0x20000164
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800630e:	2301      	movs	r3, #1
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <xTaskGenericNotify+0x2e>
        __asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
    }
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	61fb      	str	r3, [r7, #28]
    }
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800634e:	f000 ff53 	bl	80071f8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d006      	beq.n	8006366 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	3214      	adds	r2, #20
 800635e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006364:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4413      	add	r3, r2
 800636c:	3354      	adds	r3, #84	; 0x54
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	3354      	adds	r3, #84	; 0x54
 800637c:	2202      	movs	r2, #2
 800637e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d83b      	bhi.n	80063fe <xTaskGenericNotify+0xfe>
 8006386:	a201      	add	r2, pc, #4	; (adr r2, 800638c <xTaskGenericNotify+0x8c>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	0800641d 	.word	0x0800641d
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063d5 	.word	0x080063d5
 800639c:	080063e3 	.word	0x080063e3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	3214      	adds	r2, #20
 80063a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	ea42 0103 	orr.w	r1, r2, r3
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	3214      	adds	r2, #20
 80063b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063ba:	e032      	b.n	8006422 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	3214      	adds	r2, #20
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	1c59      	adds	r1, r3, #1
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	3214      	adds	r2, #20
 80063ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063d2:	e026      	b.n	8006422 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	3214      	adds	r2, #20
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063e0:	e01f      	b.n	8006422 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80063e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d006      	beq.n	80063f8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	3214      	adds	r2, #20
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80063f6:	e014      	b.n	8006422 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80063fc:	e011      	b.n	8006422 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80063fe:	4b4c      	ldr	r3, [pc, #304]	; (8006530 <xTaskGenericNotify+0x230>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <xTaskGenericNotify+0x120>
        __asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	61bb      	str	r3, [r7, #24]
    }
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <xTaskGenericNotify+0x11a>
                    break;
 800641c:	bf00      	nop
 800641e:	e000      	b.n	8006422 <xTaskGenericNotify+0x122>

                    break;
 8006420:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006426:	2b01      	cmp	r3, #1
 8006428:	d17b      	bne.n	8006522 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006436:	68d2      	ldr	r2, [r2, #12]
 8006438:	609a      	str	r2, [r3, #8]
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	6892      	ldr	r2, [r2, #8]
 8006442:	605a      	str	r2, [r3, #4]
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	3304      	adds	r3, #4
 800644c:	429a      	cmp	r2, r3
 800644e:	d103      	bne.n	8006458 <xTaskGenericNotify+0x158>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	605a      	str	r2, [r3, #4]
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2200      	movs	r2, #0
 800645c:	615a      	str	r2, [r3, #20]
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	2201      	movs	r2, #1
 800646e:	409a      	lsls	r2, r3
 8006470:	4b30      	ldr	r3, [pc, #192]	; (8006534 <xTaskGenericNotify+0x234>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4313      	orrs	r3, r2
 8006476:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <xTaskGenericNotify+0x234>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	492e      	ldr	r1, [pc, #184]	; (8006538 <xTaskGenericNotify+0x238>)
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	3304      	adds	r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	609a      	str	r2, [r3, #8]
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	60da      	str	r2, [r3, #12]
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a4:	3204      	adds	r2, #4
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4a1e      	ldr	r2, [pc, #120]	; (8006538 <xTaskGenericNotify+0x238>)
 80064be:	441a      	add	r2, r3
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	615a      	str	r2, [r3, #20]
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	491b      	ldr	r1, [pc, #108]	; (8006538 <xTaskGenericNotify+0x238>)
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	4817      	ldr	r0, [pc, #92]	; (8006538 <xTaskGenericNotify+0x238>)
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4403      	add	r3, r0
 80064e4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <xTaskGenericNotify+0x204>
        __asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	617b      	str	r3, [r7, #20]
    }
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <xTaskGenericNotify+0x23c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	429a      	cmp	r2, r3
 8006510:	d907      	bls.n	8006522 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <xTaskGenericNotify+0x240>)
 8006514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006522:	f000 fe99 	bl	8007258 <vPortExitCritical>

        return xReturn;
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006528:	4618      	mov	r0, r3
 800652a:	3738      	adds	r7, #56	; 0x38
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000240 	.word	0x20000240
 8006534:	20000244 	.word	0x20000244
 8006538:	20000168 	.word	0x20000168
 800653c:	20000164 	.word	0x20000164
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006544:	b580      	push	{r7, lr}
 8006546:	b092      	sub	sp, #72	; 0x48
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006552:	2301      	movs	r3, #1
 8006554:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800658e:	f000 ff15 	bl	80073bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8006596:	f3ef 8211 	mrs	r2, BASEPRI
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	623a      	str	r2, [r7, #32]
 80065ac:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80065ae:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80065b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80065b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	3214      	adds	r2, #20
 80065be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80065c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4413      	add	r3, r2
 80065cc:	3354      	adds	r3, #84	; 0x54
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80065d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4413      	add	r3, r2
 80065da:	3354      	adds	r3, #84	; 0x54
 80065dc:	2202      	movs	r2, #2
 80065de:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d83b      	bhi.n	800665e <xTaskGenericNotifyFromISR+0x11a>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <xTaskGenericNotifyFromISR+0xa8>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	0800667d 	.word	0x0800667d
 80065f0:	08006601 	.word	0x08006601
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006635 	.word	0x08006635
 80065fc:	08006643 	.word	0x08006643
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	3214      	adds	r2, #20
 8006606:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	ea42 0103 	orr.w	r1, r2, r3
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	3214      	adds	r2, #20
 8006616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800661a:	e032      	b.n	8006682 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800661c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	3214      	adds	r2, #20
 8006622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	3214      	adds	r2, #20
 800662e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006632:	e026      	b.n	8006682 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	3214      	adds	r2, #20
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006640:	e01f      	b.n	8006682 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006642:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006646:	2b02      	cmp	r3, #2
 8006648:	d006      	beq.n	8006658 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	3214      	adds	r2, #20
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006656:	e014      	b.n	8006682 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006658:	2300      	movs	r3, #0
 800665a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800665c:	e011      	b.n	8006682 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800665e:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <xTaskGenericNotifyFromISR+0x29c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61bb      	str	r3, [r7, #24]
    }
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006680:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006682:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006686:	2b01      	cmp	r3, #1
 8006688:	f040 809e 	bne.w	80067c8 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	617b      	str	r3, [r7, #20]
    }
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066aa:	4b4e      	ldr	r3, [pc, #312]	; (80067e4 <xTaskGenericNotifyFromISR+0x2a0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d15e      	bne.n	8006770 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30
 80066b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066be:	68d2      	ldr	r2, [r2, #12]
 80066c0:	609a      	str	r2, [r3, #8]
 80066c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c8:	6892      	ldr	r2, [r2, #8]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d2:	3304      	adds	r3, #4
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d103      	bne.n	80066e0 <xTaskGenericNotifyFromISR+0x19c>
 80066d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	605a      	str	r2, [r3, #4]
 80066e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e2:	2200      	movs	r2, #0
 80066e4:	615a      	str	r2, [r3, #20]
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	1e5a      	subs	r2, r3, #1
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80066f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	4b3b      	ldr	r3, [pc, #236]	; (80067e8 <xTaskGenericNotifyFromISR+0x2a4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	4a3a      	ldr	r2, [pc, #232]	; (80067e8 <xTaskGenericNotifyFromISR+0x2a4>)
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	4939      	ldr	r1, [pc, #228]	; (80067ec <xTaskGenericNotifyFromISR+0x2a8>)
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3304      	adds	r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671c:	609a      	str	r2, [r3, #8]
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800672c:	3204      	adds	r2, #4
 800672e:	605a      	str	r2, [r3, #4]
 8006730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a29      	ldr	r2, [pc, #164]	; (80067ec <xTaskGenericNotifyFromISR+0x2a8>)
 8006746:	441a      	add	r2, r3
 8006748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674a:	615a      	str	r2, [r3, #20]
 800674c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4926      	ldr	r1, [pc, #152]	; (80067ec <xTaskGenericNotifyFromISR+0x2a8>)
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	4822      	ldr	r0, [pc, #136]	; (80067ec <xTaskGenericNotifyFromISR+0x2a8>)
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4403      	add	r3, r0
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	e01b      	b.n	80067a8 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006770:	4b1f      	ldr	r3, [pc, #124]	; (80067f0 <xTaskGenericNotifyFromISR+0x2ac>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
 8006776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800677a:	61da      	str	r2, [r3, #28]
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006782:	621a      	str	r2, [r3, #32]
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800678a:	3218      	adds	r2, #24
 800678c:	605a      	str	r2, [r3, #4]
 800678e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006790:	f103 0218 	add.w	r2, r3, #24
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <xTaskGenericNotifyFromISR+0x2ac>)
 800679c:	629a      	str	r2, [r3, #40]	; 0x28
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <xTaskGenericNotifyFromISR+0x2ac>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <xTaskGenericNotifyFromISR+0x2ac>)
 80067a6:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ac:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <xTaskGenericNotifyFromISR+0x2b0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d908      	bls.n	80067c8 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80067b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80067bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <xTaskGenericNotifyFromISR+0x2b4>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ca:	613b      	str	r3, [r7, #16]
        __asm volatile
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f383 8811 	msr	BASEPRI, r3
    }
 80067d2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80067d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80067d6:	4618      	mov	r0, r3
 80067d8:	3748      	adds	r7, #72	; 0x48
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000240 	.word	0x20000240
 80067e4:	20000264 	.word	0x20000264
 80067e8:	20000244 	.word	0x20000244
 80067ec:	20000168 	.word	0x20000168
 80067f0:	200001fc 	.word	0x200001fc
 80067f4:	20000164 	.word	0x20000164
 80067f8:	20000250 	.word	0x20000250

080067fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006806:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800680c:	4b35      	ldr	r3, [pc, #212]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3304      	adds	r3, #4
 8006812:	4618      	mov	r0, r3
 8006814:	f7fd ff64 	bl	80046e0 <uxListRemove>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800681e:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	2201      	movs	r2, #1
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	43da      	mvns	r2, r3
 800682c:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <prvAddCurrentTaskToDelayedList+0xec>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4013      	ands	r3, r2
 8006832:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006834:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800683c:	d124      	bne.n	8006888 <prvAddCurrentTaskToDelayedList+0x8c>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d021      	beq.n	8006888 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006844:	4b29      	ldr	r3, [pc, #164]	; (80068ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	609a      	str	r2, [r3, #8]
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	3204      	adds	r2, #4
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	1d1a      	adds	r2, r3, #4
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	609a      	str	r2, [r3, #8]
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8006878:	615a      	str	r2, [r3, #20]
 800687a:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <prvAddCurrentTaskToDelayedList+0xf0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006886:	e026      	b.n	80068d6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006890:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	429a      	cmp	r2, r3
 800689e:	d209      	bcs.n	80068b4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f7fd fede 	bl	800466e <vListInsert>
}
 80068b2:	e010      	b.n	80068d6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f7fd fed4 	bl	800466e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80068c6:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d202      	bcs.n	80068d6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80068d0:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6013      	str	r3, [r2, #0]
}
 80068d6:	bf00      	nop
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000240 	.word	0x20000240
 80068e4:	20000164 	.word	0x20000164
 80068e8:	20000244 	.word	0x20000244
 80068ec:	20000228 	.word	0x20000228
 80068f0:	200001f8 	.word	0x200001f8
 80068f4:	200001f4 	.word	0x200001f4
 80068f8:	2000025c 	.word	0x2000025c

080068fc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006906:	f000 faef 	bl	8006ee8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <xTimerCreateTimerTask+0x54>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <xTimerCreateTimerTask+0x58>)
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	2302      	movs	r3, #2
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	2300      	movs	r3, #0
 800691c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006920:	490d      	ldr	r1, [pc, #52]	; (8006958 <xTimerCreateTimerTask+0x5c>)
 8006922:	480e      	ldr	r0, [pc, #56]	; (800695c <xTimerCreateTimerTask+0x60>)
 8006924:	f7fe fd06 	bl	8005334 <xTaskCreate>
 8006928:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	603b      	str	r3, [r7, #0]
    }
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006946:	687b      	ldr	r3, [r7, #4]
    }
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000298 	.word	0x20000298
 8006954:	2000029c 	.word	0x2000029c
 8006958:	080079f8 	.word	0x080079f8
 800695c:	08006b55 	.word	0x08006b55

08006960 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800696e:	202c      	movs	r0, #44	; 0x2c
 8006970:	f000 fd64 	bl	800743c <pvPortMalloc>
 8006974:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00d      	beq.n	8006998 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f805 	bl	80069a2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006998:	697b      	ldr	r3, [r7, #20]
        }
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	617b      	str	r3, [r7, #20]
    }
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80069cc:	f000 fa8c 	bl	8006ee8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fd fe0d 	bl	800460c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069fe:	f043 0304 	orr.w	r3, r3, #4
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8006a0a:	bf00      	nop
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	623b      	str	r3, [r7, #32]
    }
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <xTimerGenericCommand+0x98>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02a      	beq.n	8006aa0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b05      	cmp	r3, #5
 8006a5a:	dc18      	bgt.n	8006a8e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a5c:	f7ff fb38 	bl	80060d0 <xTaskGetSchedulerState>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d109      	bne.n	8006a7a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <xTimerGenericCommand+0x98>)
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f107 0114 	add.w	r1, r7, #20
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a72:	f7fd ff61 	bl	8004938 <xQueueGenericSend>
 8006a76:	6278      	str	r0, [r7, #36]	; 0x24
 8006a78:	e012      	b.n	8006aa0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <xTimerGenericCommand+0x98>)
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	f107 0114 	add.w	r1, r7, #20
 8006a82:	2300      	movs	r3, #0
 8006a84:	2200      	movs	r2, #0
 8006a86:	f7fd ff57 	bl	8004938 <xQueueGenericSend>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a8c:	e008      	b.n	8006aa0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <xTimerGenericCommand+0x98>)
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	f107 0114 	add.w	r1, r7, #20
 8006a96:	2300      	movs	r3, #0
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	f7fe f84b 	bl	8004b34 <xQueueGenericSendFromISR>
 8006a9e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3728      	adds	r7, #40	; 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000298 	.word	0x20000298

08006ab0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006abc:	e008      	b.n	8006ad0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	18d1      	adds	r1, r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f8dd 	bl	8006c9c <prvInsertTimerInActiveList>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1ea      	bne.n	8006abe <prvReloadTimer+0xe>
        }
    }
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afe:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <prvProcessExpiredTimer+0x5c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd fde7 	bl	80046e0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff ffc3 	bl	8006ab0 <prvReloadTimer>
 8006b2a:	e008      	b.n	8006b3e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	4798      	blx	r3
    }
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000290 	.word	0x20000290

08006b54 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 f857 	bl	8006c14 <prvGetNextExpireTime>
 8006b66:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f803 	bl	8006b78 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b72:	f000 f8d5 	bl	8006d20 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b76:	e7f1      	b.n	8006b5c <prvTimerTask+0x8>

08006b78 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b82:	f7fe fd93 	bl	80056ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f866 	bl	8006c5c <prvSampleTimeNow>
 8006b90:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d130      	bne.n	8006bfa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <prvProcessTimerOrBlockTask+0x3c>
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d806      	bhi.n	8006bb4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006ba6:	f7fe fd8f 	bl	80056c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff ffa1 	bl	8006af4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006bb2:	e024      	b.n	8006bfe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bba:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <prvProcessTimerOrBlockTask+0x90>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <prvProcessTimerOrBlockTask+0x50>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <prvProcessTimerOrBlockTask+0x52>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <prvProcessTimerOrBlockTask+0x94>)
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f7fe fb77 	bl	80052cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006bde:	f7fe fd73 	bl	80056c8 <xTaskResumeAll>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006be8:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <prvProcessTimerOrBlockTask+0x98>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
    }
 8006bf8:	e001      	b.n	8006bfe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006bfa:	f7fe fd65 	bl	80056c8 <xTaskResumeAll>
    }
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000294 	.word	0x20000294
 8006c0c:	20000298 	.word	0x20000298
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c1c:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <prvGetNextExpireTime+0x44>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <prvGetNextExpireTime+0x16>
 8006c26:	2201      	movs	r2, #1
 8006c28:	e000      	b.n	8006c2c <prvGetNextExpireTime+0x18>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <prvGetNextExpireTime+0x44>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e001      	b.n	8006c48 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006c48:	68fb      	ldr	r3, [r7, #12]
    }
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000290 	.word	0x20000290

08006c5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006c64:	f7fe fe2c 	bl	80058c0 <xTaskGetTickCount>
 8006c68:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <prvSampleTimeNow+0x3c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d205      	bcs.n	8006c80 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c74:	f000 f912 	bl	8006e9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c86:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <prvSampleTimeNow+0x3c>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
    }
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200002a0 	.word	0x200002a0

08006c9c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d812      	bhi.n	8006ce8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d302      	bcc.n	8006cd6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e01b      	b.n	8006d0e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <prvInsertTimerInActiveList+0x7c>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f7fd fcc4 	bl	800466e <vListInsert>
 8006ce6:	e012      	b.n	8006d0e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d206      	bcs.n	8006cfe <prvInsertTimerInActiveList+0x62>
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e007      	b.n	8006d0e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <prvInsertTimerInActiveList+0x80>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fd fcb0 	bl	800466e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006d0e:	697b      	ldr	r3, [r7, #20]
    }
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000294 	.word	0x20000294
 8006d1c:	20000290 	.word	0x20000290

08006d20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d26:	e0a6      	b.n	8006e76 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f2c0 80a3 	blt.w	8006e76 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fd fccd 	bl	80046e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d46:	1d3b      	adds	r3, r7, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ff87 	bl	8006c5c <prvSampleTimeNow>
 8006d4e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	f200 808d 	bhi.w	8006e74 <prvProcessReceivedCommands+0x154>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <prvProcessReceivedCommands+0x40>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006d85 	.word	0x08006d85
 8006d68:	08006ded 	.word	0x08006ded
 8006d6c:	08006e01 	.word	0x08006e01
 8006d70:	08006e4b 	.word	0x08006e4b
 8006d74:	08006d85 	.word	0x08006d85
 8006d78:	08006d85 	.word	0x08006d85
 8006d7c:	08006ded 	.word	0x08006ded
 8006d80:	08006e01 	.word	0x08006e01
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	18d1      	adds	r1, r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	69f8      	ldr	r0, [r7, #28]
 8006da4:	f7ff ff7a 	bl	8006c9c <prvInsertTimerInActiveList>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d063      	beq.n	8006e76 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	69f8      	ldr	r0, [r7, #28]
 8006dca:	f7ff fe71 	bl	8006ab0 <prvReloadTimer>
 8006dce:	e008      	b.n	8006de2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	69f8      	ldr	r0, [r7, #28]
 8006de8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006dea:	e044      	b.n	8006e76 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006dfe:	e03a      	b.n	8006e76 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	617b      	str	r3, [r7, #20]
    }
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	18d1      	adds	r1, r2, r3
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	69f8      	ldr	r0, [r7, #28]
 8006e44:	f7ff ff2a 	bl	8006c9c <prvInsertTimerInActiveList>
                        break;
 8006e48:	e015      	b.n	8006e76 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8006e58:	69f8      	ldr	r0, [r7, #28]
 8006e5a:	f000 fba9 	bl	80075b0 <vPortFree>
 8006e5e:	e00a      	b.n	8006e76 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e72:	e000      	b.n	8006e76 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006e74:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <prvProcessReceivedCommands+0x178>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f107 0108 	add.w	r1, r7, #8
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fd ff09 	bl	8004c98 <xQueueReceive>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f47f af4d 	bne.w	8006d28 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	3720      	adds	r7, #32
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000298 	.word	0x20000298

08006e9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ea2:	e009      	b.n	8006eb8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <prvSwitchTimerLists+0x44>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006eae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006eb2:	6838      	ldr	r0, [r7, #0]
 8006eb4:	f7ff fe1e 	bl	8006af4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <prvSwitchTimerLists+0x44>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <prvSwitchTimerLists+0x44>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <prvSwitchTimerLists+0x48>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a04      	ldr	r2, [pc, #16]	; (8006ee0 <prvSwitchTimerLists+0x44>)
 8006ece:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006ed0:	4a04      	ldr	r2, [pc, #16]	; (8006ee4 <prvSwitchTimerLists+0x48>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
    }
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000290 	.word	0x20000290
 8006ee4:	20000294 	.word	0x20000294

08006ee8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006eec:	f000 f984 	bl	80071f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006ef0:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <prvCheckForValidListAndQueue+0x54>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11d      	bne.n	8006f34 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006ef8:	4811      	ldr	r0, [pc, #68]	; (8006f40 <prvCheckForValidListAndQueue+0x58>)
 8006efa:	f7fd fb67 	bl	80045cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006efe:	4811      	ldr	r0, [pc, #68]	; (8006f44 <prvCheckForValidListAndQueue+0x5c>)
 8006f00:	f7fd fb64 	bl	80045cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006f04:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <prvCheckForValidListAndQueue+0x60>)
 8006f06:	4a0e      	ldr	r2, [pc, #56]	; (8006f40 <prvCheckForValidListAndQueue+0x58>)
 8006f08:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006f0a:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <prvCheckForValidListAndQueue+0x64>)
 8006f0c:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <prvCheckForValidListAndQueue+0x5c>)
 8006f0e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006f10:	2200      	movs	r2, #0
 8006f12:	210c      	movs	r1, #12
 8006f14:	200a      	movs	r0, #10
 8006f16:	f7fd fc9d 	bl	8004854 <xQueueGenericCreate>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <prvCheckForValidListAndQueue+0x54>)
 8006f1e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <prvCheckForValidListAndQueue+0x54>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <prvCheckForValidListAndQueue+0x54>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4908      	ldr	r1, [pc, #32]	; (8006f50 <prvCheckForValidListAndQueue+0x68>)
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe f97e 	bl	8005230 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f34:	f000 f990 	bl	8007258 <vPortExitCritical>
    }
 8006f38:	bf00      	nop
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20000298 	.word	0x20000298
 8006f40:	20000268 	.word	0x20000268
 8006f44:	2000027c 	.word	0x2000027c
 8006f48:	20000290 	.word	0x20000290
 8006f4c:	20000294 	.word	0x20000294
 8006f50:	08007a00 	.word	0x08007a00

08006f54 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <pvTimerGetTimerID+0x28>
        __asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
    }
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006f7c:	f000 f93c 	bl	80071f8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006f86:	f000 f967 	bl	8007258 <vPortExitCritical>

        return pvReturn;
 8006f8a:	693b      	ldr	r3, [r7, #16]
    }
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b04      	subs	r3, #4
 8006fa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3b04      	subs	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006fc4:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <pxPortInitialiseStack+0x64>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b14      	subs	r3, #20
 8006fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f06f 0202 	mvn.w	r2, #2
 8006fe2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3b20      	subs	r3, #32
 8006fe8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006fea:	68fb      	ldr	r3, [r7, #12]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	08006ffd 	.word	0x08006ffd

08006ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <prvTaskExitError+0x54>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800700e:	d00a      	beq.n	8007026 <prvTaskExitError+0x2a>
        __asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
    }
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <prvTaskExitError+0x28>
        __asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
    }
 8007038:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800703a:	bf00      	nop
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0fc      	beq.n	800703c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	2000001c 	.word	0x2000001c
	...

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	20000164 	.word	0x20000164
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
 80070aa:	0000      	.short	0x0000
 80070ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop

080070b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070ba:	4b46      	ldr	r3, [pc, #280]	; (80071d4 <xPortStartScheduler+0x120>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a46      	ldr	r2, [pc, #280]	; (80071d8 <xPortStartScheduler+0x124>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d10a      	bne.n	80070da <xPortStartScheduler+0x26>
        __asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	613b      	str	r3, [r7, #16]
    }
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070da:	4b3e      	ldr	r3, [pc, #248]	; (80071d4 <xPortStartScheduler+0x120>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a3f      	ldr	r2, [pc, #252]	; (80071dc <xPortStartScheduler+0x128>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10a      	bne.n	80070fa <xPortStartScheduler+0x46>
        __asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	60fb      	str	r3, [r7, #12]
    }
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070fa:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <xPortStartScheduler+0x12c>)
 80070fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	22ff      	movs	r2, #255	; 0xff
 800710a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <xPortStartScheduler+0x130>)
 8007120:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007122:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <xPortStartScheduler+0x134>)
 8007124:	2207      	movs	r2, #7
 8007126:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007128:	e009      	b.n	800713e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800712a:	4b2f      	ldr	r3, [pc, #188]	; (80071e8 <xPortStartScheduler+0x134>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3b01      	subs	r3, #1
 8007130:	4a2d      	ldr	r2, [pc, #180]	; (80071e8 <xPortStartScheduler+0x134>)
 8007132:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007146:	2b80      	cmp	r3, #128	; 0x80
 8007148:	d0ef      	beq.n	800712a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800714a:	4b27      	ldr	r3, [pc, #156]	; (80071e8 <xPortStartScheduler+0x134>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1c3 0307 	rsb	r3, r3, #7
 8007152:	2b04      	cmp	r3, #4
 8007154:	d00a      	beq.n	800716c <xPortStartScheduler+0xb8>
        __asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60bb      	str	r3, [r7, #8]
    }
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800716c:	4b1e      	ldr	r3, [pc, #120]	; (80071e8 <xPortStartScheduler+0x134>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <xPortStartScheduler+0x134>)
 8007174:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <xPortStartScheduler+0x134>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717e:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <xPortStartScheduler+0x134>)
 8007180:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	b2da      	uxtb	r2, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800718a:	4b18      	ldr	r3, [pc, #96]	; (80071ec <xPortStartScheduler+0x138>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <xPortStartScheduler+0x138>)
 8007190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007194:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007196:	4b15      	ldr	r3, [pc, #84]	; (80071ec <xPortStartScheduler+0x138>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a14      	ldr	r2, [pc, #80]	; (80071ec <xPortStartScheduler+0x138>)
 800719c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80071a2:	f000 f8db 	bl	800735c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <xPortStartScheduler+0x13c>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80071ac:	f000 f8fa 	bl	80073a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <xPortStartScheduler+0x140>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a0f      	ldr	r2, [pc, #60]	; (80071f4 <xPortStartScheduler+0x140>)
 80071b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80071bc:	f7ff ff64 	bl	8007088 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80071c0:	f7fe fcb0 	bl	8005b24 <vTaskSwitchContext>
    prvTaskExitError();
 80071c4:	f7ff ff1a 	bl	8006ffc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	e000ed00 	.word	0xe000ed00
 80071d8:	410fc271 	.word	0x410fc271
 80071dc:	410fc270 	.word	0x410fc270
 80071e0:	e000e400 	.word	0xe000e400
 80071e4:	200002a4 	.word	0x200002a4
 80071e8:	200002a8 	.word	0x200002a8
 80071ec:	e000ed20 	.word	0xe000ed20
 80071f0:	2000001c 	.word	0x2000001c
 80071f4:	e000ef34 	.word	0xe000ef34

080071f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
        __asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
    }
 8007210:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007212:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <vPortEnterCritical+0x58>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3301      	adds	r3, #1
 8007218:	4a0d      	ldr	r2, [pc, #52]	; (8007250 <vPortEnterCritical+0x58>)
 800721a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <vPortEnterCritical+0x58>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10f      	bne.n	8007244 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <vPortEnterCritical+0x5c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <vPortEnterCritical+0x4c>
        __asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	603b      	str	r3, [r7, #0]
    }
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <vPortEnterCritical+0x4a>
    }
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	2000001c 	.word	0x2000001c
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800725e:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <vPortExitCritical+0x50>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <vPortExitCritical+0x24>
        __asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	607b      	str	r3, [r7, #4]
    }
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <vPortExitCritical+0x50>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3b01      	subs	r3, #1
 8007282:	4a09      	ldr	r2, [pc, #36]	; (80072a8 <vPortExitCritical+0x50>)
 8007284:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007286:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <vPortExitCritical+0x50>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <vPortExitCritical+0x42>
 800728e:	2300      	movs	r3, #0
 8007290:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f383 8811 	msr	BASEPRI, r3
    }
 8007298:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	2000001c 	.word	0x2000001c
 80072ac:	00000000 	.word	0x00000000

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f01e 0f10 	tst.w	lr, #16
 80072c0:	bf08      	it	eq
 80072c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7fe fc20 	bl	8005b24 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f6:	f01e 0f10 	tst.w	lr, #16
 80072fa:	bf08      	it	eq
 80072fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007300:	f380 8809 	msr	PSP, r0
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst>:
 8007310:	20000164 	.word	0x20000164
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
        __asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
    }
 8007330:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007332:	f7fe fae1 	bl	80058f8 <xTaskIncrementTick>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <SysTick_Handler+0x40>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f383 8811 	msr	BASEPRI, r3
    }
 800734e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <vPortSetupTimerInterrupt+0x38>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <vPortSetupTimerInterrupt+0x3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <vPortSetupTimerInterrupt+0x40>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <vPortSetupTimerInterrupt+0x44>)
 800737a:	3b01      	subs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000e010 	.word	0xe000e010
 8007394:	e000e018 	.word	0xe000e018
 8007398:	20000008 	.word	0x20000008
 800739c:	10624dd3 	.word	0x10624dd3
 80073a0:	e000e014 	.word	0xe000e014

080073a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80073a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073b4 <vPortEnableVFP+0x10>
 80073a8:	6801      	ldr	r1, [r0, #0]
 80073aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ae:	6001      	str	r1, [r0, #0]
 80073b0:	4770      	bx	lr
 80073b2:	0000      	.short	0x0000
 80073b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop

080073bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80073c2:	f3ef 8305 	mrs	r3, IPSR
 80073c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b0f      	cmp	r3, #15
 80073cc:	d914      	bls.n	80073f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <vPortValidateInterruptPriority+0x70>)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4413      	add	r3, r2
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073d8:	4b15      	ldr	r3, [pc, #84]	; (8007430 <vPortValidateInterruptPriority+0x74>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	7afa      	ldrb	r2, [r7, #11]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d20a      	bcs.n	80073f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	607b      	str	r3, [r7, #4]
    }
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073f8:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <vPortValidateInterruptPriority+0x78>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007400:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <vPortValidateInterruptPriority+0x7c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d90a      	bls.n	800741e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	603b      	str	r3, [r7, #0]
    }
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <vPortValidateInterruptPriority+0x60>
    }
 800741e:	bf00      	nop
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	e000e3f0 	.word	0xe000e3f0
 8007430:	200002a4 	.word	0x200002a4
 8007434:	e000ed0c 	.word	0xe000ed0c
 8007438:	200002a8 	.word	0x200002a8

0800743c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007448:	f7fe f930 	bl	80056ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800744c:	4b53      	ldr	r3, [pc, #332]	; (800759c <pvPortMalloc+0x160>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007454:	f000 f908 	bl	8007668 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d012      	beq.n	8007484 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800745e:	2208      	movs	r2, #8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	3308      	adds	r3, #8
 800746a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	43db      	mvns	r3, r3
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d804      	bhi.n	8007480 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4413      	add	r3, r2
 800747c:	607b      	str	r3, [r7, #4]
 800747e:	e001      	b.n	8007484 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	db70      	blt.n	800756c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d06d      	beq.n	800756c <pvPortMalloc+0x130>
 8007490:	4b43      	ldr	r3, [pc, #268]	; (80075a0 <pvPortMalloc+0x164>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d868      	bhi.n	800756c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800749a:	4b42      	ldr	r3, [pc, #264]	; (80075a4 <pvPortMalloc+0x168>)
 800749c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800749e:	4b41      	ldr	r3, [pc, #260]	; (80075a4 <pvPortMalloc+0x168>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a4:	e004      	b.n	80074b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d903      	bls.n	80074c2 <pvPortMalloc+0x86>
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f1      	bne.n	80074a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80074c2:	4b36      	ldr	r3, [pc, #216]	; (800759c <pvPortMalloc+0x160>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d04f      	beq.n	800756c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2208      	movs	r2, #8
 80074d2:	4413      	add	r3, r2
 80074d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	2308      	movs	r3, #8
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d91f      	bls.n	800752e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <pvPortMalloc+0xda>
        __asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
    }
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	1ad2      	subs	r2, r2, r3
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007528:	6978      	ldr	r0, [r7, #20]
 800752a:	f000 f8f9 	bl	8007720 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <pvPortMalloc+0x164>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	4a19      	ldr	r2, [pc, #100]	; (80075a0 <pvPortMalloc+0x164>)
 800753a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800753c:	4b18      	ldr	r3, [pc, #96]	; (80075a0 <pvPortMalloc+0x164>)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	4b19      	ldr	r3, [pc, #100]	; (80075a8 <pvPortMalloc+0x16c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d203      	bcs.n	8007550 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007548:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <pvPortMalloc+0x164>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <pvPortMalloc+0x16c>)
 800754e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <pvPortMalloc+0x170>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	4a10      	ldr	r2, [pc, #64]	; (80075ac <pvPortMalloc+0x170>)
 800756a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800756c:	f7fe f8ac 	bl	80056c8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <pvPortMalloc+0x154>
        __asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60fb      	str	r3, [r7, #12]
    }
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <pvPortMalloc+0x152>
    return pvReturn;
 8007590:	69fb      	ldr	r3, [r7, #28]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3728      	adds	r7, #40	; 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20012eb4 	.word	0x20012eb4
 80075a0:	20012eb8 	.word	0x20012eb8
 80075a4:	20012eac 	.word	0x20012eac
 80075a8:	20012ebc 	.word	0x20012ebc
 80075ac:	20012ec0 	.word	0x20012ec0

080075b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d049      	beq.n	8007656 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80075c2:	2308      	movs	r3, #8
 80075c4:	425b      	negs	r3, r3
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	db0a      	blt.n	80075ee <vPortFree+0x3e>
        __asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	60fb      	str	r3, [r7, #12]
    }
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <vPortFree+0x5c>
        __asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60bb      	str	r3, [r7, #8]
    }
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	0fdb      	lsrs	r3, r3, #31
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01c      	beq.n	8007656 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d118      	bne.n	8007656 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007630:	f7fe f83c 	bl	80056ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	4b09      	ldr	r3, [pc, #36]	; (8007660 <vPortFree+0xb0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4413      	add	r3, r2
 800763e:	4a08      	ldr	r2, [pc, #32]	; (8007660 <vPortFree+0xb0>)
 8007640:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007642:	6938      	ldr	r0, [r7, #16]
 8007644:	f000 f86c 	bl	8007720 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007648:	4b06      	ldr	r3, [pc, #24]	; (8007664 <vPortFree+0xb4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a05      	ldr	r2, [pc, #20]	; (8007664 <vPortFree+0xb4>)
 8007650:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007652:	f7fe f839 	bl	80056c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007656:	bf00      	nop
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20012eb8 	.word	0x20012eb8
 8007664:	20012ec4 	.word	0x20012ec4

08007668 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800766e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007672:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <prvHeapInit+0xa4>)
 8007676:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00c      	beq.n	800769c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3307      	adds	r3, #7
 8007686:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	4a1d      	ldr	r2, [pc, #116]	; (800770c <prvHeapInit+0xa4>)
 8007698:	4413      	add	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <prvHeapInit+0xa8>)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <prvHeapInit+0xa8>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4413      	add	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80076b4:	2208      	movs	r2, #8
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0307 	bic.w	r3, r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a13      	ldr	r2, [pc, #76]	; (8007714 <prvHeapInit+0xac>)
 80076c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <prvHeapInit+0xac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80076d2:	4b10      	ldr	r3, [pc, #64]	; (8007714 <prvHeapInit+0xac>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	1ad2      	subs	r2, r2, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <prvHeapInit+0xac>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	4a08      	ldr	r2, [pc, #32]	; (8007718 <prvHeapInit+0xb0>)
 80076f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4a07      	ldr	r2, [pc, #28]	; (800771c <prvHeapInit+0xb4>)
 80076fe:	6013      	str	r3, [r2, #0]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	200002ac 	.word	0x200002ac
 8007710:	20012eac 	.word	0x20012eac
 8007714:	20012eb4 	.word	0x20012eb4
 8007718:	20012ebc 	.word	0x20012ebc
 800771c:	20012eb8 	.word	0x20012eb8

08007720 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007728:	4b28      	ldr	r3, [pc, #160]	; (80077cc <prvInsertBlockIntoFreeList+0xac>)
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e002      	b.n	8007734 <prvInsertBlockIntoFreeList+0x14>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d8f7      	bhi.n	800772e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4413      	add	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d108      	bne.n	8007762 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	441a      	add	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	441a      	add	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d118      	bne.n	80077a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <prvInsertBlockIntoFreeList+0xb0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d00d      	beq.n	800779e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	441a      	add	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e008      	b.n	80077b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <prvInsertBlockIntoFreeList+0xb0>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e003      	b.n	80077b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d002      	beq.n	80077be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20012eac 	.word	0x20012eac
 80077d0:	20012eb4 	.word	0x20012eb4

080077d4 <memset>:
 80077d4:	4402      	add	r2, r0
 80077d6:	4603      	mov	r3, r0
 80077d8:	4293      	cmp	r3, r2
 80077da:	d100      	bne.n	80077de <memset+0xa>
 80077dc:	4770      	bx	lr
 80077de:	f803 1b01 	strb.w	r1, [r3], #1
 80077e2:	e7f9      	b.n	80077d8 <memset+0x4>

080077e4 <__libc_init_array>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	4d0d      	ldr	r5, [pc, #52]	; (800781c <__libc_init_array+0x38>)
 80077e8:	4c0d      	ldr	r4, [pc, #52]	; (8007820 <__libc_init_array+0x3c>)
 80077ea:	1b64      	subs	r4, r4, r5
 80077ec:	10a4      	asrs	r4, r4, #2
 80077ee:	2600      	movs	r6, #0
 80077f0:	42a6      	cmp	r6, r4
 80077f2:	d109      	bne.n	8007808 <__libc_init_array+0x24>
 80077f4:	4d0b      	ldr	r5, [pc, #44]	; (8007824 <__libc_init_array+0x40>)
 80077f6:	4c0c      	ldr	r4, [pc, #48]	; (8007828 <__libc_init_array+0x44>)
 80077f8:	f000 f826 	bl	8007848 <_init>
 80077fc:	1b64      	subs	r4, r4, r5
 80077fe:	10a4      	asrs	r4, r4, #2
 8007800:	2600      	movs	r6, #0
 8007802:	42a6      	cmp	r6, r4
 8007804:	d105      	bne.n	8007812 <__libc_init_array+0x2e>
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	f855 3b04 	ldr.w	r3, [r5], #4
 800780c:	4798      	blx	r3
 800780e:	3601      	adds	r6, #1
 8007810:	e7ee      	b.n	80077f0 <__libc_init_array+0xc>
 8007812:	f855 3b04 	ldr.w	r3, [r5], #4
 8007816:	4798      	blx	r3
 8007818:	3601      	adds	r6, #1
 800781a:	e7f2      	b.n	8007802 <__libc_init_array+0x1e>
 800781c:	08007a28 	.word	0x08007a28
 8007820:	08007a28 	.word	0x08007a28
 8007824:	08007a28 	.word	0x08007a28
 8007828:	08007a2c 	.word	0x08007a2c

0800782c <memcpy>:
 800782c:	440a      	add	r2, r1
 800782e:	4291      	cmp	r1, r2
 8007830:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007834:	d100      	bne.n	8007838 <memcpy+0xc>
 8007836:	4770      	bx	lr
 8007838:	b510      	push	{r4, lr}
 800783a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800783e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007842:	4291      	cmp	r1, r2
 8007844:	d1f9      	bne.n	800783a <memcpy+0xe>
 8007846:	bd10      	pop	{r4, pc}

08007848 <_init>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr

08007854 <_fini>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	bf00      	nop
 8007858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785a:	bc08      	pop	{r3}
 800785c:	469e      	mov	lr, r3
 800785e:	4770      	bx	lr
