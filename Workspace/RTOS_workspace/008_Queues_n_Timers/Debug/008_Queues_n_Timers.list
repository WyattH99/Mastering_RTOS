
008_Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e90  20000014  08006020  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ea4  08006020  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dd3  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ad  00000000  00000000  00034e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed2  00000000  00000000  00039310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e20  00000000  00000000  0003a1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016956  00000000  00000000  0003d002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df6eb  00000000  00000000  00053958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f84  00000000  00000000  00133044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00137fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f78 	.word	0x08005f78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005f78 	.word	0x08005f78

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fbe9 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f8df 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f99d 	bl	8000858 <MX_GPIO_Init>
  MX_RTC_Init();
 800051e:	f000 f94b 	bl	80007b8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f96f 	bl	8000804 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(menu_task_handler, "menu_task", 250, NULL, 2, &menu_task_handle);
 8000526:	4b59      	ldr	r3, [pc, #356]	; (800068c <main+0x180>)
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	22fa      	movs	r2, #250	; 0xfa
 8000532:	4957      	ldr	r1, [pc, #348]	; (8000690 <main+0x184>)
 8000534:	4857      	ldr	r0, [pc, #348]	; (8000694 <main+0x188>)
 8000536:	f003 ff21 	bl	800437c <xTaskCreate>
 800053a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d00a      	beq.n	8000558 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000546:	f383 8811 	msr	BASEPRI, r3
 800054a:	f3bf 8f6f 	isb	sy
 800054e:	f3bf 8f4f 	dsb	sy
 8000552:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000554:	bf00      	nop
 8000556:	e7fe      	b.n	8000556 <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 250, NULL, 2, &cmd_task_handle);
 8000558:	4b4f      	ldr	r3, [pc, #316]	; (8000698 <main+0x18c>)
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2302      	movs	r3, #2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	22fa      	movs	r2, #250	; 0xfa
 8000564:	494d      	ldr	r1, [pc, #308]	; (800069c <main+0x190>)
 8000566:	484e      	ldr	r0, [pc, #312]	; (80006a0 <main+0x194>)
 8000568:	f003 ff08 	bl	800437c <xTaskCreate>
 800056c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d00a      	beq.n	800058a <main+0x7e>
        __asm volatile
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	617b      	str	r3, [r7, #20]
    }
 8000586:	bf00      	nop
 8000588:	e7fe      	b.n	8000588 <main+0x7c>

  status = xTaskCreate(print_task_handler, "print_task", 250, NULL, 2, &print_task_handle);
 800058a:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <main+0x198>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22fa      	movs	r2, #250	; 0xfa
 8000596:	4944      	ldr	r1, [pc, #272]	; (80006a8 <main+0x19c>)
 8000598:	4844      	ldr	r0, [pc, #272]	; (80006ac <main+0x1a0>)
 800059a:	f003 feef 	bl	800437c <xTaskCreate>
 800059e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0xb0>
        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	613b      	str	r3, [r7, #16]
    }
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0xae>

  status = xTaskCreate(led_task_handler, "led_task", 250, NULL, 2, &led_task_handle);
 80005bc:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <main+0x1a4>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	22fa      	movs	r2, #250	; 0xfa
 80005c8:	493a      	ldr	r1, [pc, #232]	; (80006b4 <main+0x1a8>)
 80005ca:	483b      	ldr	r0, [pc, #236]	; (80006b8 <main+0x1ac>)
 80005cc:	f003 fed6 	bl	800437c <xTaskCreate>
 80005d0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0xe2>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	60fb      	str	r3, [r7, #12]
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0xe0>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 250, NULL, 2, &rtc_task_handle);
 80005ee:	4b33      	ldr	r3, [pc, #204]	; (80006bc <main+0x1b0>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22fa      	movs	r2, #250	; 0xfa
 80005fa:	4931      	ldr	r1, [pc, #196]	; (80006c0 <main+0x1b4>)
 80005fc:	4831      	ldr	r0, [pc, #196]	; (80006c4 <main+0x1b8>)
 80005fe:	f003 febd 	bl	800437c <xTaskCreate>
 8000602:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d00a      	beq.n	8000620 <main+0x114>
        __asm volatile
 800060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060e:	f383 8811 	msr	BASEPRI, r3
 8000612:	f3bf 8f6f 	isb	sy
 8000616:	f3bf 8f4f 	dsb	sy
 800061a:	60bb      	str	r3, [r7, #8]
    }
 800061c:	bf00      	nop
 800061e:	e7fe      	b.n	800061e <main+0x112>

  q_data = xQueueCreate(10, sizeof(char));
 8000620:	2200      	movs	r2, #0
 8000622:	2101      	movs	r1, #1
 8000624:	200a      	movs	r0, #10
 8000626:	f003 fc47 	bl	8003eb8 <xQueueGenericCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <main+0x1bc>)
 800062e:	6013      	str	r3, [r2, #0]

  configASSERT(q_data != NULL);
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <main+0x1bc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10a      	bne.n	800064e <main+0x142>
        __asm volatile
 8000638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063c:	f383 8811 	msr	BASEPRI, r3
 8000640:	f3bf 8f6f 	isb	sy
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	607b      	str	r3, [r7, #4]
    }
 800064a:	bf00      	nop
 800064c:	e7fe      	b.n	800064c <main+0x140>

  q_print = xQueueCreate(10, sizeof(size_t));
 800064e:	2200      	movs	r2, #0
 8000650:	2104      	movs	r1, #4
 8000652:	200a      	movs	r0, #10
 8000654:	f003 fc30 	bl	8003eb8 <xQueueGenericCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <main+0x1c0>)
 800065c:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <main+0x1c0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10a      	bne.n	800067c <main+0x170>
        __asm volatile
 8000666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066a:	f383 8811 	msr	BASEPRI, r3
 800066e:	f3bf 8f6f 	isb	sy
 8000672:	f3bf 8f4f 	dsb	sy
 8000676:	603b      	str	r3, [r7, #0]
    }
 8000678:	bf00      	nop
 800067a:	e7fe      	b.n	800067a <main+0x16e>

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	4914      	ldr	r1, [pc, #80]	; (80006d0 <main+0x1c4>)
 8000680:	4814      	ldr	r0, [pc, #80]	; (80006d4 <main+0x1c8>)
 8000682:	f002 fbce 	bl	8002e22 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000686:	f003 ffe3 	bl	8004650 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x17e>
 800068c:	20000094 	.word	0x20000094
 8000690:	08005f90 	.word	0x08005f90
 8000694:	08000c61 	.word	0x08000c61
 8000698:	20000098 	.word	0x20000098
 800069c:	08005f9c 	.word	0x08005f9c
 80006a0:	08000c6b 	.word	0x08000c6b
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	08005fa8 	.word	0x08005fa8
 80006ac:	08000c75 	.word	0x08000c75
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	08005fb4 	.word	0x08005fb4
 80006b8:	08000c7f 	.word	0x08000c7f
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	08005fc0 	.word	0x08005fc0
 80006c4:	08000c89 	.word	0x08000c89
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	200000ac 	.word	0x200000ac
 80006d0:	200000b0 	.word	0x200000b0
 80006d4:	20000050 	.word	0x20000050

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 fc0c 	bl	8005f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <SystemClock_Config+0xd8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <SystemClock_Config+0xdc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000734:	230a      	movs	r3, #10
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000754:	23a8      	movs	r3, #168	; 0xa8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fcc7 	bl	80020fc <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000774:	f000 f914 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fe0a 	bl	80013b0 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007a2:	f000 f8fd 	bl	80009a0 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_RTC_Init+0x44>)
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <MX_RTC_Init+0x48>)
 80007c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_RTC_Init+0x44>)
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_RTC_Init+0x44>)
 80007ca:	227f      	movs	r2, #127	; 0x7f
 80007cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_RTC_Init+0x44>)
 80007d0:	22ff      	movs	r2, #255	; 0xff
 80007d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_RTC_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_RTC_Init+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_RTC_Init+0x44>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_RTC_Init+0x44>)
 80007e8:	f001 ff26 	bl	8002638 <HAL_RTC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007f2:	f000 f8d5 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000030 	.word	0x20000030
 8000800:	40002800 	.word	0x40002800

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f002 faa4 	bl	8002d88 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f8ab 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000050 	.word	0x20000050
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b39      	ldr	r3, [pc, #228]	; (8000958 <MX_GPIO_Init+0x100>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a38      	ldr	r2, [pc, #224]	; (8000958 <MX_GPIO_Init+0x100>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b36      	ldr	r3, [pc, #216]	; (8000958 <MX_GPIO_Init+0x100>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MX_GPIO_Init+0x100>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a31      	ldr	r2, [pc, #196]	; (8000958 <MX_GPIO_Init+0x100>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <MX_GPIO_Init+0x100>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_GPIO_Init+0x100>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <MX_GPIO_Init+0x100>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_GPIO_Init+0x100>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0x100>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_GPIO_Init+0x100>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0x100>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008e4:	481d      	ldr	r0, [pc, #116]	; (800095c <MX_GPIO_Init+0x104>)
 80008e6:	f000 fd49 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x108>)
 80008f2:	f000 fd43 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_GPIO_Init+0x10c>)
 800090e:	f000 fba1 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin|LD3_Pin;
 8000912:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0x104>)
 800092c:	f000 fb92 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin;
 8000930:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0x108>)
 800094a:	f000 fb83 	bl	8001054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400
 8000964:	40020800 	.word	0x40020800

08000968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]


}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 f9cd 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09a      	sub	sp, #104	; 0x68
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	225c      	movs	r2, #92	; 0x5c
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f005 fa79 	bl	8005f04 <memset>
  if(hrtc->Instance==RTC)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <HAL_RTC_MspInit+0x4c>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d111      	bne.n	8000a40 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fe0c 	bl	8001648 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a36:	f7ff ffb3 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <HAL_RTC_MspInit+0x50>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3768      	adds	r7, #104	; 0x68
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40002800 	.word	0x40002800
 8000a4c:	42470e3c 	.word	0x42470e3c

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_UART_MspInit+0x94>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d133      	bne.n	8000ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_UART_MspInit+0x98>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aba:	2307      	movs	r3, #7
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_UART_MspInit+0x9c>)
 8000ac6:	f000 fac5 	bl	8001054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2106      	movs	r1, #6
 8000ace:	2026      	movs	r0, #38	; 0x26
 8000ad0:	f000 fa04 	bl	8000edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad4:	2026      	movs	r0, #38	; 0x26
 8000ad6:	f000 fa1d 	bl	8000f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	; 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <HAL_InitTick+0xe4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a32      	ldr	r2, [pc, #200]	; (8000bd4 <HAL_InitTick+0xe4>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <HAL_InitTick+0xe4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fd5c 	bl	80015e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b36:	f000 fd2d 	bl	8001594 <HAL_RCC_GetPCLK1Freq>
 8000b3a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b3e:	f000 fd29 	bl	8001594 <HAL_RCC_GetPCLK1Freq>
 8000b42:	4603      	mov	r3, r0
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <HAL_InitTick+0xe8>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	3b01      	subs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_InitTick+0xec>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <HAL_InitTick+0xf0>)
 8000b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_InitTick+0xec>)
 8000b5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_InitTick+0xec>)
 8000b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_InitTick+0xec>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_InitTick+0xec>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_InitTick+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_InitTick+0xec>)
 8000b7e:	f001 fe55 	bl	800282c <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d11b      	bne.n	8000bc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <HAL_InitTick+0xec>)
 8000b92:	f001 fea5 	bl	80028e0 <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d111      	bne.n	8000bc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ba4:	2036      	movs	r0, #54	; 0x36
 8000ba6:	f000 f9b5 	bl	8000f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d808      	bhi.n	8000bc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2036      	movs	r0, #54	; 0x36
 8000bb6:	f000 f991 	bl	8000edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_InitTick+0xf4>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e002      	b.n	8000bc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3738      	adds	r7, #56	; 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	431bde83 	.word	0x431bde83
 8000bdc:	200000b4 	.word	0x200000b4
 8000be0:	40001000 	.word	0x40001000
 8000be4:	20000004 	.word	0x20000004

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART2_IRQHandler+0x10>)
 8000c1a:	f002 f933 	bl	8002e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000050 	.word	0x20000050

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM6_DAC_IRQHandler+0x10>)
 8000c2e:	f001 fec7 	bl	80029c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000b4 	.word	0x200000b4

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <menu_task_handler>:
 *      Author: wyatt
 */

#include "main.h"

void menu_task_handler(void* param){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	while(1){
 8000c68:	e7fe      	b.n	8000c68 <menu_task_handler+0x8>

08000c6a <cmd_task_handler>:

	}
}

void cmd_task_handler(void* param){
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	while(1){
 8000c72:	e7fe      	b.n	8000c72 <cmd_task_handler+0x8>

08000c74 <print_task_handler>:

	}
}

void print_task_handler(void* param){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	while(1){
 8000c7c:	e7fe      	b.n	8000c7c <print_task_handler+0x8>

08000c7e <led_task_handler>:

	}
}

void led_task_handler(void* param){
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	while(1){
 8000c86:	e7fe      	b.n	8000c86 <led_task_handler+0x8>

08000c88 <rtc_task_handler>:

	}
}

void rtc_task_handler(void* param){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	while(1){
 8000c90:	e7fe      	b.n	8000c90 <rtc_task_handler+0x8>
	...

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ffbd 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f005 f927 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc21 	bl	800050c <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cd8:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 8000cdc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ce0:	20012ea4 	.word	0x20012ea4

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f8d8 	bl	8000ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff feea 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe46 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200000fc 	.word	0x200000fc

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000fc 	.word	0x200000fc

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eee:	f7ff ff61 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f7ff ffb1 	bl	8000e60 <NVIC_EncodePriority>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff80 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f3e:	f7ff ff09 	bl	8000d54 <HAL_GetTick>
 8000f42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d008      	beq.n	8000f62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e052      	b.n	8001008 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0216 	bic.w	r2, r2, #22
 8000f70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <HAL_DMA_Abort+0x62>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb2:	e013      	b.n	8000fdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb4:	f7ff fece 	bl	8000d54 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d90c      	bls.n	8000fdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e015      	b.n	8001008 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e4      	bne.n	8000fb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fee:	223f      	movs	r2, #63	; 0x3f
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d004      	beq.n	800102e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00c      	b.n	8001048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e165      	b.n	800133c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8154 	bne.w	8001336 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ae 	beq.w	8001336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <HAL_GPIO_Init+0x300>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a58      	ldr	r2, [pc, #352]	; (8001358 <HAL_GPIO_Init+0x304>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x308>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x30c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x310>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x314>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x318>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x20a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x31c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x206>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x320>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x202>
 8001252:	2306      	movs	r3, #6
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001256:	2307      	movs	r3, #7
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x21c>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x304>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x324>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x324>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_GPIO_Init+0x324>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae96 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0cc      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d90c      	bls.n	80013ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800140e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d044      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d119      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d003      	beq.n	800146e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146a:	2b03      	cmp	r3, #3
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e06f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e067      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f023 0203 	bic.w	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4934      	ldr	r1, [pc, #208]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff fc58 	bl	8000d54 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	e00a      	b.n	80014be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7ff fc54 	bl	8000d54 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e04f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 020c 	and.w	r2, r3, #12
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1eb      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d20c      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001536:	f000 fbb1 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 800153a:	4602      	mov	r2, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	5ccb      	ldrb	r3, [r1, r3]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1c8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff faca 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00
 800156c:	40023800 	.word	0x40023800
 8001570:	08005fe4 	.word	0x08005fe4
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_RCC_GetHCLKFreq+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000

08001594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001598:	f7ff fff0 	bl	800157c <HAL_RCC_GetHCLKFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	0a9b      	lsrs	r3, r3, #10
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	4903      	ldr	r1, [pc, #12]	; (80015b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	08005ff4 	.word	0x08005ff4

080015bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015c0:	f7ff ffdc 	bl	800157c <HAL_RCC_GetHCLKFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	0b5b      	lsrs	r3, r3, #13
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	4903      	ldr	r1, [pc, #12]	; (80015e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	08005ff4 	.word	0x08005ff4

080015e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	220f      	movs	r2, #15
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_GetClockConfig+0x5c>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_RCC_GetClockConfig+0x5c>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_RCC_GetClockConfig+0x5c>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_GetClockConfig+0x5c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_RCC_GetClockConfig+0x60>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 020f 	and.w	r2, r3, #15
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d010      	beq.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001686:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	496c      	ldr	r1, [pc, #432]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001690:	4313      	orrs	r3, r2
 8001692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800169e:	2301      	movs	r3, #1
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d010      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	4960      	ldr	r1, [pc, #384]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016cc:	2301      	movs	r3, #1
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d017      	beq.n	800170c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4955      	ldr	r1, [pc, #340]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016fa:	d101      	bne.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001718:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	4946      	ldr	r1, [pc, #280]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001728:	4313      	orrs	r3, r2
 800172a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001736:	d101      	bne.n	800173c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001738:	2301      	movs	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001744:	2301      	movs	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 808a 	beq.w	800186a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a33      	ldr	r2, [pc, #204]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800177e:	f7ff fae9 	bl	8000d54 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fae5 	bl	8000d54 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e278      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ac:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02f      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017bc:	6a3a      	ldr	r2, [r7, #32]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d028      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ca:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d114      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fab3 	bl	8000d54 <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff faaf 	bl	8000d54 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e240      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ee      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001820:	d114      	bne.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001836:	4902      	ldr	r1, [pc, #8]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
 800183c:	e00c      	b.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470e40 	.word	0x42470e40
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001852:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001856:	6093      	str	r3, [r2, #8]
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800185a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	4944      	ldr	r1, [pc, #272]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001866:	4313      	orrs	r3, r2
 8001868:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800187e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800189c:	4313      	orrs	r3, r2
 800189e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	492e      	ldr	r1, [pc, #184]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d011      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	4926      	ldr	r1, [pc, #152]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018ee:	d101      	bne.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00a      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	491a      	ldr	r1, [pc, #104]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001910:	4313      	orrs	r3, r2
 8001912:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	2b00      	cmp	r3, #0
 8001920:	d011      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001928:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001930:	4911      	ldr	r1, [pc, #68]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001932:	4313      	orrs	r3, r2
 8001934:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001940:	d101      	bne.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001942:	2301      	movs	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d005      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001954:	f040 80ff 	bne.w	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800195e:	f7ff f9f9 	bl	8000d54 <HAL_GetTick>
 8001962:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001964:	e00e      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001966:	f7ff f9f5 	bl	8000d54 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d907      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e188      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001978:	40023800 	.word	0x40023800
 800197c:	424711e0 	.word	0x424711e0
 8001980:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001984:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ea      	bne.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d028      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d124      	bne.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	3301      	adds	r3, #1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d0:	0e1b      	lsrs	r3, r3, #24
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	431a      	orrs	r2, r3
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	071b      	lsls	r3, r3, #28
 80019fa:	4961      	ldr	r1, [pc, #388]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a16:	d00a      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d035      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2c:	d130      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a46:	0f1b      	lsrs	r3, r3, #28
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	019b      	lsls	r3, r3, #6
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	071b      	lsls	r3, r3, #28
 8001a70:	4943      	ldr	r1, [pc, #268]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7e:	f023 021f 	bic.w	r2, r3, #31
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	3b01      	subs	r3, #1
 8001a88:	493d      	ldr	r1, [pc, #244]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d029      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa4:	d124      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001abe:	0f1b      	lsrs	r3, r3, #28
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	019b      	lsls	r3, r3, #6
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	431a      	orrs	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	071b      	lsls	r3, r3, #28
 8001ae8:	4925      	ldr	r1, [pc, #148]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d016      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	071b      	lsls	r3, r3, #28
 8001b22:	4917      	ldr	r1, [pc, #92]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f910 	bl	8000d54 <HAL_GetTick>
 8001b34:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b38:	f7ff f90c 	bl	8000d54 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e09f      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 8095 	bne.w	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f8f6 	bl	8000d54 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b6c:	f7ff f8f2 	bl	8000d54 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e085      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	42470068 	.word	0x42470068
 8001b88:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b98:	d0e8      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02b      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d127      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	431a      	orrs	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	4928      	ldr	r1, [pc, #160]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bfe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	3b01      	subs	r3, #1
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	4922      	ldr	r1, [pc, #136]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01d      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c26:	d118      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	0e1b      	lsrs	r3, r3, #24
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4910      	ldr	r1, [pc, #64]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff f878 	bl	8000d54 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c68:	f7ff f874 	bl	8000d54 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e007      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c86:	d1ef      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	42470070 	.word	0x42470070

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b0ae      	sub	sp, #184	; 0xb8
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc2:	4bcb      	ldr	r3, [pc, #812]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	f200 8206 	bhi.w	80020dc <HAL_RCC_GetSysClockFreq+0x440>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001d0d 	.word	0x08001d0d
 8001cdc:	080020dd 	.word	0x080020dd
 8001ce0:	080020dd 	.word	0x080020dd
 8001ce4:	080020dd 	.word	0x080020dd
 8001ce8:	08001d15 	.word	0x08001d15
 8001cec:	080020dd 	.word	0x080020dd
 8001cf0:	080020dd 	.word	0x080020dd
 8001cf4:	080020dd 	.word	0x080020dd
 8001cf8:	08001d1d 	.word	0x08001d1d
 8001cfc:	080020dd 	.word	0x080020dd
 8001d00:	080020dd 	.word	0x080020dd
 8001d04:	080020dd 	.word	0x080020dd
 8001d08:	08001f0d 	.word	0x08001f0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4bb9      	ldr	r3, [pc, #740]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d12:	e1e7      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d14:	4bb8      	ldr	r3, [pc, #736]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d1a:	e1e3      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4bb4      	ldr	r3, [pc, #720]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d28:	4bb1      	ldr	r3, [pc, #708]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d071      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d34:	4bae      	ldr	r3, [pc, #696]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	462b      	mov	r3, r5
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0159      	lsls	r1, r3, #5
 8001d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6c:	0150      	lsls	r0, r2, #5
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4621      	mov	r1, r4
 8001d74:	1a51      	subs	r1, r2, r1
 8001d76:	6439      	str	r1, [r7, #64]	; 0x40
 8001d78:	4629      	mov	r1, r5
 8001d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	4641      	mov	r1, r8
 8001d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d96:	4641      	mov	r1, r8
 8001d98:	018a      	lsls	r2, r1, #6
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da0:	4649      	mov	r1, r9
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001db4:	4649      	mov	r1, r9
 8001db6:	00cb      	lsls	r3, r1, #3
 8001db8:	4641      	mov	r1, r8
 8001dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	00ca      	lsls	r2, r1, #3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4622      	mov	r2, r4
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	462b      	mov	r3, r5
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	eb42 0303 	adc.w	r3, r2, r3
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001de4:	4629      	mov	r1, r5
 8001de6:	024b      	lsls	r3, r1, #9
 8001de8:	4621      	mov	r1, r4
 8001dea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dee:	4621      	mov	r1, r4
 8001df0:	024a      	lsls	r2, r1, #9
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e08:	f7fe fa02 	bl	8000210 <__aeabi_uldivmod>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4613      	mov	r3, r2
 8001e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e24:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e32:	2300      	movs	r3, #0
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4641      	mov	r1, r8
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4641      	mov	r1, r8
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e80:	4649      	mov	r1, r9
 8001e82:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e9a:	4692      	mov	sl, r2
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	028b      	lsls	r3, r1, #10
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	028a      	lsls	r2, r1, #10
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ed6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eda:	f7fe f999 	bl	8000210 <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f0a:	e0eb      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d06b      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f36:	663b      	str	r3, [r7, #96]	; 0x60
 8001f38:	2300      	movs	r3, #0
 8001f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f40:	4622      	mov	r2, r4
 8001f42:	462b      	mov	r3, r5
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4621      	mov	r1, r4
 8001f5a:	1a51      	subs	r1, r2, r1
 8001f5c:	61b9      	str	r1, [r7, #24]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f72:	4659      	mov	r1, fp
 8001f74:	018b      	lsls	r3, r1, #6
 8001f76:	4651      	mov	r1, sl
 8001f78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	018a      	lsls	r2, r1, #6
 8001f80:	4651      	mov	r1, sl
 8001f82:	ebb2 0801 	subs.w	r8, r2, r1
 8001f86:	4659      	mov	r1, fp
 8001f88:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	eb18 0303 	adds.w	r3, r8, r3
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	462b      	mov	r3, r5
 8001fae:	eb49 0303 	adc.w	r3, r9, r3
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	024b      	lsls	r3, r1, #9
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fca:	4621      	mov	r1, r4
 8001fcc:	024a      	lsls	r2, r1, #9
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fe0:	f7fe f916 	bl	8000210 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fee:	e065      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x420>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	2200      	movs	r2, #0
 8002004:	4618      	mov	r0, r3
 8002006:	4611      	mov	r1, r2
 8002008:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
 800200e:	2300      	movs	r3, #0
 8002010:	657b      	str	r3, [r7, #84]	; 0x54
 8002012:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002016:	4642      	mov	r2, r8
 8002018:	464b      	mov	r3, r9
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	0159      	lsls	r1, r3, #5
 8002024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002028:	0150      	lsls	r0, r2, #5
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4641      	mov	r1, r8
 8002030:	1a51      	subs	r1, r2, r1
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	4649      	mov	r1, r9
 8002036:	eb63 0301 	sbc.w	r3, r3, r1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002048:	4659      	mov	r1, fp
 800204a:	018b      	lsls	r3, r1, #6
 800204c:	4651      	mov	r1, sl
 800204e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002052:	4651      	mov	r1, sl
 8002054:	018a      	lsls	r2, r1, #6
 8002056:	4651      	mov	r1, sl
 8002058:	1a54      	subs	r4, r2, r1
 800205a:	4659      	mov	r1, fp
 800205c:	eb63 0501 	sbc.w	r5, r3, r1
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	00eb      	lsls	r3, r5, #3
 800206a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800206e:	00e2      	lsls	r2, r4, #3
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4643      	mov	r3, r8
 8002076:	18e3      	adds	r3, r4, r3
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	464b      	mov	r3, r9
 800207c:	eb45 0303 	adc.w	r3, r5, r3
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208e:	4629      	mov	r1, r5
 8002090:	028b      	lsls	r3, r1, #10
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002098:	4621      	mov	r1, r4
 800209a:	028a      	lsls	r2, r1, #10
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020a4:	2200      	movs	r2, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020ae:	f7fe f8af 	bl	8000210 <__aeabi_uldivmod>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4613      	mov	r3, r2
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0f1b      	lsrs	r3, r3, #28
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80020ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020da:	e003      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	37b8      	adds	r7, #184	; 0xb8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400

080020fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e28d      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8083 	beq.w	8002222 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800211c:	4b94      	ldr	r3, [pc, #592]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d019      	beq.n	800215c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002128:	4b91      	ldr	r3, [pc, #580]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002130:	2b08      	cmp	r3, #8
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002134:	4b8e      	ldr	r3, [pc, #568]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002140:	d00c      	beq.n	800215c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x124>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e25a      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x90>
 800217e:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xcc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xb4>
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a72      	ldr	r2, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xcc>
 80021b0:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6b      	ldr	r2, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fdc0 	bl	8000d54 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe fdbc 	bl	8000d54 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e21f      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b61      	ldr	r3, [pc, #388]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xdc>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fdac 	bl	8000d54 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe fda8 	bl	8000d54 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e20b      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x104>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06f      	beq.n	800230e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800222e:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d017      	beq.n	800226a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002246:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x186>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1d3      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4937      	ldr	r1, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCC_OscConfig+0x278>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fd55 	bl	8000d54 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe fd51 	bl	8000d54 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1b4      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4925      	ldr	r1, [pc, #148]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x278>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd34 	bl	8000d54 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe fd30 	bl	8000d54 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e193      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe fd14 	bl	8000d54 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe fd10 	bl	8000d54 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e173      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x234>
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7fe fcfd 	bl	8000d54 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	e00e      	b.n	800237c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235e:	f7fe fcf9 	bl	8000d54 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d907      	bls.n	800237c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e15c      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 8002370:	40023800 	.word	0x40023800
 8002374:	42470000 	.word	0x42470000
 8002378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b8a      	ldr	r3, [pc, #552]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ea      	bne.n	800235e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8097 	beq.w	80024c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b83      	ldr	r3, [pc, #524]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b79      	ldr	r3, [pc, #484]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fcb9 	bl	8000d54 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe fcb5 	bl	8000d54 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e118      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x31e>
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x358>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x340>
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x358>
 800243c:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fc7a 	bl	8000d54 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fc76 	bl	8000d54 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0d7      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <HAL_RCC_OscConfig+0x368>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fc64 	bl	8000d54 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fc60 	bl	8000d54 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0c1      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ee      	bne.n	8002490 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80ad 	beq.w	8002628 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d060      	beq.n	800259c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d145      	bne.n	800256e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fc34 	bl	8000d54 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fc30 	bl	8000d54 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e093      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fc05 	bl	8000d54 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe fc01 	bl	8000d54 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e064      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x452>
 800256c:	e05c      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fbee 	bl	8000d54 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fbea 	bl	8000d54 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04d      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x480>
 800259a:	e045      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e040      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_RCC_OscConfig+0x538>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d030      	beq.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d129      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d122      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d119      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d10f      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d107      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e066      	b.n	800271c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7f5b      	ldrb	r3, [r3, #29]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe f9cc 	bl	80009fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	22ca      	movs	r2, #202	; 0xca
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2253      	movs	r2, #83	; 0x53
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f87a 	bl	8002774 <RTC_EnterInitMode>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d12c      	bne.n	80026e4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f881 	bl	80027e2 <RTC_ExitInitMode>
 80026e0:	4603      	mov	r3, r0
 80026e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d113      	bne.n	8002712 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800273e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7fe fb08 	bl	8000d54 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002746:	e009      	b.n	800275c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002748:	f7fe fb04 	bl	8000d54 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002756:	d901      	bls.n	800275c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e007      	b.n	800276c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0ee      	beq.n	8002748 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d122      	bne.n	80027d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027a2:	f7fe fad7 	bl	8000d54 <HAL_GetTick>
 80027a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027a8:	e00c      	b.n	80027c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027aa:	f7fe fad3 	bl	8000d54 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b8:	d904      	bls.n	80027c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <RTC_EnterInitMode+0x64>
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d1e8      	bne.n	80027aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff89 	bl	8002724 <HAL_RTC_WaitForSynchro>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2204      	movs	r2, #4
 800281c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f839 	bl	80028ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 f9d8 	bl	8002c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d001      	beq.n	80028f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e04e      	b.n	8002996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d01d      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x80>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_TIM_Base_Start_IT+0xdc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d010      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e007      	b.n	8002994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40010400 	.word	0x40010400
 80029b8:	40014000 	.word	0x40014000
 80029bc:	40001800 	.word	0x40001800

080029c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d122      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d11b      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0202 	mvn.w	r2, #2
 80029ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8ee 	bl	8002be4 <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8e0 	bl	8002bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f8f1 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0204 	mvn.w	r2, #4
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8c4 	bl	8002be4 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8b6 	bl	8002bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8c7 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0208 	mvn.w	r2, #8
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f89a 	bl	8002be4 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f88c 	bl	8002bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f89d 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0210 	mvn.w	r2, #16
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2208      	movs	r2, #8
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f870 	bl	8002be4 <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f862 	bl	8002bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f873 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0201 	mvn.w	r2, #1
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fd ff1c 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f902 	bl	8002d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f838 	bl	8002c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0220 	mvn.w	r2, #32
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8cc 	bl	8002d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <TIM_Base_SetConfig+0x114>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3e:	d00f      	beq.n	8002c60 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3d      	ldr	r2, [pc, #244]	; (8002d38 <TIM_Base_SetConfig+0x118>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00b      	beq.n	8002c60 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <TIM_Base_SetConfig+0x11c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3b      	ldr	r2, [pc, #236]	; (8002d40 <TIM_Base_SetConfig+0x120>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <TIM_Base_SetConfig+0x124>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2f      	ldr	r2, [pc, #188]	; (8002d34 <TIM_Base_SetConfig+0x114>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d02b      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d027      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <TIM_Base_SetConfig+0x118>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d023      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <TIM_Base_SetConfig+0x11c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01f      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <TIM_Base_SetConfig+0x120>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01b      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <TIM_Base_SetConfig+0x124>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d017      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <TIM_Base_SetConfig+0x128>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <TIM_Base_SetConfig+0x12c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00f      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <TIM_Base_SetConfig+0x130>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <TIM_Base_SetConfig+0x134>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <TIM_Base_SetConfig+0x138>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <TIM_Base_SetConfig+0x13c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <TIM_Base_SetConfig+0x114>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_Base_SetConfig+0xf8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <TIM_Base_SetConfig+0x124>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d103      	bne.n	8002d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	615a      	str	r2, [r3, #20]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40014400 	.word	0x40014400
 8002d50:	40014800 	.word	0x40014800
 8002d54:	40001800 	.word	0x40001800
 8002d58:	40001c00 	.word	0x40001c00
 8002d5c:	40002000 	.word	0x40002000

08002d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e03f      	b.n	8002e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fe4e 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fcdf 	bl	8003790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d11d      	bne.n	8002e78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Receive_IT+0x26>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e016      	b.n	8002e7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Receive_IT+0x38>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e00f      	b.n	8002e7a <HAL_UART_Receive_IT+0x58>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fab6 	bl	80033e0 <UART_Start_Receive_IT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	e000      	b.n	8002e7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0ba      	sub	sp, #232	; 0xe8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_UART_IRQHandler+0x66>
 8002ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb99 	bl	800361a <UART_Receive_IT>
      return;
 8002ee8:	e256      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80de 	beq.w	80030b0 <HAL_UART_IRQHandler+0x22c>
 8002ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80d1 	beq.w	80030b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_UART_IRQHandler+0xae>
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_UART_IRQHandler+0xd2>
 8002f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_UART_IRQHandler+0xf6>
 8002f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d011      	beq.n	8002faa <HAL_UART_IRQHandler+0x126>
 8002f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0208 	orr.w	r2, r3, #8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 81ed 	beq.w	800338e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x14e>
 8002fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fb24 	bl	800361a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_UART_IRQHandler+0x17a>
 8002ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04f      	beq.n	800309e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa2c 	bl	800345c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d141      	bne.n	8003096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800302c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3314      	adds	r3, #20
 800303a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800303e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800304a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1d9      	bne.n	8003012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	2b00      	cmp	r3, #0
 8003064:	d013      	beq.n	800308e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	4a7d      	ldr	r2, [pc, #500]	; (8003260 <HAL_UART_IRQHandler+0x3dc>)
 800306c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd ffcc 	bl	8001010 <HAL_DMA_Abort_IT>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e00e      	b.n	80030ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f990 	bl	80033b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e00a      	b.n	80030ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f98c 	bl	80033b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e006      	b.n	80030ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f988 	bl	80033b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030aa:	e170      	b.n	800338e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	bf00      	nop
    return;
 80030ae:	e16e      	b.n	800338e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 814a 	bne.w	800334e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8143 	beq.w	800334e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 813c 	beq.w	800334e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	f040 80b4 	bne.w	8003264 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8140 	beq.w	8003392 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800311a:	429a      	cmp	r2, r3
 800311c:	f080 8139 	bcs.w	8003392 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003126:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003132:	f000 8088 	beq.w	8003246 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800314c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800316e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800317a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1d9      	bne.n	8003136 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3314      	adds	r3, #20
 80031a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e1      	bne.n	8003182 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e3      	bne.n	80031be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003228:	65ba      	str	r2, [r7, #88]	; 0x58
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800322e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e3      	bne.n	8003204 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fe75 	bl	8000f30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800324e:	b29b      	uxth	r3, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8b6 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800325c:	e099      	b.n	8003392 <HAL_UART_IRQHandler+0x50e>
 800325e:	bf00      	nop
 8003260:	08003523 	.word	0x08003523
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326c:	b29b      	uxth	r3, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 808b 	beq.w	8003396 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8086 	beq.w	8003396 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032ae:	647a      	str	r2, [r7, #68]	; 0x44
 80032b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e3      	bne.n	800328a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	623b      	str	r3, [r7, #32]
   return(result);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032e6:	633a      	str	r2, [r7, #48]	; 0x30
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e3      	bne.n	80032c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	60fb      	str	r3, [r7, #12]
   return(result);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0310 	bic.w	r3, r3, #16
 800331e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	69b9      	ldr	r1, [r7, #24]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	617b      	str	r3, [r7, #20]
   return(result);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e3      	bne.n	8003308 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f83e 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800334c:	e023      	b.n	8003396 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_UART_IRQHandler+0x4ea>
 800335a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8ef 	bl	800354a <UART_Transmit_IT>
    return;
 800336c:	e014      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <HAL_UART_IRQHandler+0x514>
 800337a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f92f 	bl	80035ea <UART_EndTransmit_IT>
    return;
 800338c:	e004      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
    return;
 800338e:	bf00      	nop
 8003390:	e002      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
      return;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
      return;
 8003396:	bf00      	nop
  }
}
 8003398:	37e8      	adds	r7, #232	; 0xe8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop

080033a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	88fa      	ldrh	r2, [r7, #6]
 80033fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2222      	movs	r2, #34	; 0x22
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0220 	orr.w	r2, r2, #32
 800344c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b095      	sub	sp, #84	; 0x54
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003484:	643a      	str	r2, [r7, #64]	; 0x40
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800348a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e5      	bne.n	8003464 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d119      	bne.n	8003508 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f023 0310 	bic.w	r3, r3, #16
 80034ea:	647b      	str	r3, [r7, #68]	; 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	330c      	adds	r3, #12
 80034f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f4:	61ba      	str	r2, [r7, #24]
 80034f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6979      	ldr	r1, [r7, #20]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	613b      	str	r3, [r7, #16]
   return(result);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e5      	bne.n	80034d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003516:	bf00      	nop
 8003518:	3754      	adds	r7, #84	; 0x54
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff ff39 	bl	80033b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b21      	cmp	r3, #33	; 0x21
 800355c:	d13e      	bne.n	80035dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003566:	d114      	bne.n	8003592 <UART_Transmit_IT+0x48>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d110      	bne.n	8003592 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003584:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	1c9a      	adds	r2, r3, #2
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]
 8003590:	e008      	b.n	80035a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6211      	str	r1, [r2, #32]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4619      	mov	r1, r3
 80035b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fec8 	bl	80033a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08c      	sub	sp, #48	; 0x30
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b22      	cmp	r3, #34	; 0x22
 800362c:	f040 80ab 	bne.w	8003786 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d117      	bne.n	800366a <UART_Receive_IT+0x50>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d113      	bne.n	800366a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	b29a      	uxth	r2, r3
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
 8003668:	e026      	b.n	80036b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d007      	beq.n	800368e <UART_Receive_IT+0x74>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <UART_Receive_IT+0x82>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e008      	b.n	80036ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4619      	mov	r1, r3
 80036c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d15a      	bne.n	8003782 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0220 	bic.w	r2, r2, #32
 80036da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	2b01      	cmp	r3, #1
 800370a:	d135      	bne.n	8003778 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	330c      	adds	r3, #12
 8003718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	613b      	str	r3, [r7, #16]
   return(result);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f023 0310 	bic.w	r3, r3, #16
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	623a      	str	r2, [r7, #32]
 8003734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	69f9      	ldr	r1, [r7, #28]
 8003738:	6a3a      	ldr	r2, [r7, #32]
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e5      	bne.n	8003712 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b10      	cmp	r3, #16
 8003752:	d10a      	bne.n	800376a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fe29 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
 8003776:	e002      	b.n	800377e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd f8f5 	bl	8000968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e002      	b.n	8003788 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003786:	2302      	movs	r3, #2
  }
}
 8003788:	4618      	mov	r0, r3
 800378a:	3730      	adds	r7, #48	; 0x30
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b0c0      	sub	sp, #256	; 0x100
 8003796:	af00      	add	r7, sp, #0
 8003798:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	68d9      	ldr	r1, [r3, #12]
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	ea40 0301 	orr.w	r3, r0, r1
 80037b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037e8:	f021 010c 	bic.w	r1, r1, #12
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037f6:	430b      	orrs	r3, r1
 80037f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	6999      	ldr	r1, [r3, #24]
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	ea40 0301 	orr.w	r3, r0, r1
 8003816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b8f      	ldr	r3, [pc, #572]	; (8003a5c <UART_SetConfig+0x2cc>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d005      	beq.n	8003830 <UART_SetConfig+0xa0>
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b8d      	ldr	r3, [pc, #564]	; (8003a60 <UART_SetConfig+0x2d0>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d104      	bne.n	800383a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fd fec4 	bl	80015bc <HAL_RCC_GetPCLK2Freq>
 8003834:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003838:	e003      	b.n	8003842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383a:	f7fd feab 	bl	8001594 <HAL_RCC_GetPCLK1Freq>
 800383e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	f040 810c 	bne.w	8003a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800385a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800385e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	1891      	adds	r1, r2, r2
 8003868:	65b9      	str	r1, [r7, #88]	; 0x58
 800386a:	415b      	adcs	r3, r3
 800386c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800386e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003872:	4621      	mov	r1, r4
 8003874:	eb12 0801 	adds.w	r8, r2, r1
 8003878:	4629      	mov	r1, r5
 800387a:	eb43 0901 	adc.w	r9, r3, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	4623      	mov	r3, r4
 8003898:	eb18 0303 	adds.w	r3, r8, r3
 800389c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038a0:	462b      	mov	r3, r5
 80038a2:	eb49 0303 	adc.w	r3, r9, r3
 80038a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038be:	460b      	mov	r3, r1
 80038c0:	18db      	adds	r3, r3, r3
 80038c2:	653b      	str	r3, [r7, #80]	; 0x50
 80038c4:	4613      	mov	r3, r2
 80038c6:	eb42 0303 	adc.w	r3, r2, r3
 80038ca:	657b      	str	r3, [r7, #84]	; 0x54
 80038cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038d4:	f7fc fc9c 	bl	8000210 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <UART_SetConfig+0x2d4>)
 80038de:	fba3 2302 	umull	r2, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	011c      	lsls	r4, r3, #4
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003900:	415b      	adcs	r3, r3
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003908:	4641      	mov	r1, r8
 800390a:	eb12 0a01 	adds.w	sl, r2, r1
 800390e:	4649      	mov	r1, r9
 8003910:	eb43 0b01 	adc.w	fp, r3, r1
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003928:	4692      	mov	sl, r2
 800392a:	469b      	mov	fp, r3
 800392c:	4643      	mov	r3, r8
 800392e:	eb1a 0303 	adds.w	r3, sl, r3
 8003932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003936:	464b      	mov	r3, r9
 8003938:	eb4b 0303 	adc.w	r3, fp, r3
 800393c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800394c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003954:	460b      	mov	r3, r1
 8003956:	18db      	adds	r3, r3, r3
 8003958:	643b      	str	r3, [r7, #64]	; 0x40
 800395a:	4613      	mov	r3, r2
 800395c:	eb42 0303 	adc.w	r3, r2, r3
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
 8003962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800396a:	f7fc fc51 	bl	8000210 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4611      	mov	r1, r2
 8003974:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <UART_SetConfig+0x2d4>)
 8003976:	fba3 2301 	umull	r2, r3, r3, r1
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2264      	movs	r2, #100	; 0x64
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	1acb      	subs	r3, r1, r3
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <UART_SetConfig+0x2d4>)
 800398c:	fba3 2302 	umull	r2, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003998:	441c      	add	r4, r3
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039b4:	415b      	adcs	r3, r3
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039bc:	4641      	mov	r1, r8
 80039be:	1851      	adds	r1, r2, r1
 80039c0:	6339      	str	r1, [r7, #48]	; 0x30
 80039c2:	4649      	mov	r1, r9
 80039c4:	414b      	adcs	r3, r1
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039d4:	4659      	mov	r1, fp
 80039d6:	00cb      	lsls	r3, r1, #3
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039de:	4651      	mov	r1, sl
 80039e0:	00ca      	lsls	r2, r1, #3
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	4642      	mov	r2, r8
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039f0:	464b      	mov	r3, r9
 80039f2:	460a      	mov	r2, r1
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a10:	460b      	mov	r3, r1
 8003a12:	18db      	adds	r3, r3, r3
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a16:	4613      	mov	r3, r2
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a26:	f7fc fbf3 	bl	8000210 <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <UART_SetConfig+0x2d4>)
 8003a30:	fba3 1302 	umull	r1, r3, r3, r2
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	2164      	movs	r1, #100	; 0x64
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	3332      	adds	r3, #50	; 0x32
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <UART_SetConfig+0x2d4>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4422      	add	r2, r4
 8003a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a58:	e106      	b.n	8003c68 <UART_SetConfig+0x4d8>
 8003a5a:	bf00      	nop
 8003a5c:	40011000 	.word	0x40011000
 8003a60:	40011400 	.word	0x40011400
 8003a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a7a:	4642      	mov	r2, r8
 8003a7c:	464b      	mov	r3, r9
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	6239      	str	r1, [r7, #32]
 8003a82:	415b      	adcs	r3, r3
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	1854      	adds	r4, r2, r1
 8003a8e:	4649      	mov	r1, r9
 8003a90:	eb43 0501 	adc.w	r5, r3, r1
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	00eb      	lsls	r3, r5, #3
 8003a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa2:	00e2      	lsls	r2, r4, #3
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	18e3      	adds	r3, r4, r3
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	eb45 0303 	adc.w	r3, r5, r3
 8003ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	008b      	lsls	r3, r1, #2
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	008a      	lsls	r2, r1, #2
 8003ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ae8:	f7fc fb92 	bl	8000210 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4b60      	ldr	r3, [pc, #384]	; (8003c74 <UART_SetConfig+0x4e4>)
 8003af2:	fba3 2302 	umull	r2, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	011c      	lsls	r4, r3, #4
 8003afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	61b9      	str	r1, [r7, #24]
 8003b14:	415b      	adcs	r3, r3
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	1851      	adds	r1, r2, r1
 8003b20:	6139      	str	r1, [r7, #16]
 8003b22:	4649      	mov	r1, r9
 8003b24:	414b      	adcs	r3, r1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b34:	4659      	mov	r1, fp
 8003b36:	00cb      	lsls	r3, r1, #3
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3e:	4651      	mov	r1, sl
 8003b40:	00ca      	lsls	r2, r1, #3
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b50:	464b      	mov	r3, r9
 8003b52:	460a      	mov	r2, r1
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b74:	4649      	mov	r1, r9
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7e:	4641      	mov	r1, r8
 8003b80:	008a      	lsls	r2, r1, #2
 8003b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b86:	f7fc fb43 	bl	8000210 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <UART_SetConfig+0x4e4>)
 8003b92:	fba3 2301 	umull	r2, r3, r3, r1
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	; 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1acb      	subs	r3, r1, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a33      	ldr	r2, [pc, #204]	; (8003c74 <UART_SetConfig+0x4e4>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	673b      	str	r3, [r7, #112]	; 0x70
 8003bba:	677a      	str	r2, [r7, #116]	; 0x74
 8003bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c02:	464b      	mov	r3, r9
 8003c04:	460a      	mov	r2, r1
 8003c06:	eb42 0303 	adc.w	r3, r2, r3
 8003c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	663b      	str	r3, [r7, #96]	; 0x60
 8003c16:	667a      	str	r2, [r7, #100]	; 0x64
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c36:	f7fc faeb 	bl	8000210 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <UART_SetConfig+0x4e4>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	; 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	3332      	adds	r3, #50	; 0x32
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <UART_SetConfig+0x4e4>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 020f 	and.w	r2, r3, #15
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4422      	add	r2, r4
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c74:	51eb851f 	.word	0x51eb851f

08003c78 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f103 0208 	add.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c90:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f103 0208 	add.w	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 0208 	add.w	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce8:	d103      	bne.n	8003cf2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e00c      	b.n	8003d0c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e002      	b.n	8003d00 <vListInsert+0x2e>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d2f6      	bcs.n	8003cfa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6852      	ldr	r2, [r2, #4]
 8003d64:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d103      	bne.n	8003d78 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003da2:	2301      	movs	r3, #1
 8003da4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueGenericReset+0x2e>
        __asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	60fb      	str	r3, [r7, #12]
    }
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05d      	beq.n	8003e88 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d059      	beq.n	8003e88 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	2100      	movs	r1, #0
 8003dde:	fba3 2302 	umull	r2, r3, r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d000      	beq.n	8003de8 <xQueueGenericReset+0x50>
 8003de6:	2101      	movs	r1, #1
 8003de8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d14c      	bne.n	8003e88 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003dee:	f001 fddb 	bl	80059a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	6939      	ldr	r1, [r7, #16]
 8003dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	441a      	add	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	6939      	ldr	r1, [r7, #16]
 8003e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	441a      	add	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	22ff      	movs	r2, #255	; 0xff
 8003e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d114      	bne.n	8003e6e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01a      	beq.n	8003e82 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3310      	adds	r3, #16
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 ff45 	bl	8004ce0 <xTaskRemoveFromEventList>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d012      	beq.n	8003e82 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <xQueueGenericReset+0x11c>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	e009      	b.n	8003e82 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3310      	adds	r3, #16
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff00 	bl	8003c78 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	3324      	adds	r3, #36	; 0x24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fefb 	bl	8003c78 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003e82:	f001 fdc1 	bl	8005a08 <vPortExitCritical>
 8003e86:	e001      	b.n	8003e8c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <xQueueGenericReset+0x110>
        __asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60bb      	str	r3, [r7, #8]
    }
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003ea8:	697b      	ldr	r3, [r7, #20]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02e      	beq.n	8003f2e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d000      	beq.n	8003ee0 <xQueueGenericCreate+0x28>
 8003ede:	2101      	movs	r1, #1
 8003ee0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d123      	bne.n	8003f2e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003eee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003ef2:	d81c      	bhi.n	8003f2e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	3350      	adds	r3, #80	; 0x50
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fe32 	bl	8005b6c <pvPortMalloc>
 8003f08:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01c      	beq.n	8003f4a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3350      	adds	r3, #80	; 0x50
 8003f18:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f1a:	79fa      	ldrb	r2, [r7, #7]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f814 	bl	8003f54 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003f2c:	e00d      	b.n	8003f4a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xQueueGenericCreate+0x92>
        __asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
    }
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e002      	b.n	8003f76 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f82:	2101      	movs	r1, #1
 8003f84:	69b8      	ldr	r0, [r7, #24]
 8003f86:	f7ff ff07 	bl	8003d98 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <xQueueReceive+0x30>
        __asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	623b      	str	r3, [r7, #32]
    }
 8003fc8:	bf00      	nop
 8003fca:	e7fe      	b.n	8003fca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <xQueueReceive+0x3e>
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <xQueueReceive+0x42>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <xQueueReceive+0x44>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xQueueReceive+0x5e>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	61fb      	str	r3, [r7, #28]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ffa:	f001 f881 	bl	8005100 <xTaskGetSchedulerState>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <xQueueReceive+0x6e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xQueueReceive+0x72>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <xQueueReceive+0x74>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xQueueReceive+0x8e>
        __asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	61bb      	str	r3, [r7, #24]
    }
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800402a:	f001 fcbd 	bl	80059a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01f      	beq.n	800407a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800403e:	f000 f88d 	bl	800415c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00f      	beq.n	8004072 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	3310      	adds	r3, #16
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fe42 	bl	8004ce0 <xTaskRemoveFromEventList>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <xQueueReceive+0x1bc>)
 8004064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004072:	f001 fcc9 	bl	8005a08 <vPortExitCritical>
                return pdPASS;
 8004076:	2301      	movs	r3, #1
 8004078:	e069      	b.n	800414e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004080:	f001 fcc2 	bl	8005a08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004084:	2300      	movs	r3, #0
 8004086:	e062      	b.n	800414e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800408e:	f107 0310 	add.w	r3, r7, #16
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fefa 	bl	8004e8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800409c:	f001 fcb4 	bl	8005a08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040a0:	f000 fb28 	bl	80046f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80040a4:	f001 fc80 	bl	80059a8 <vPortEnterCritical>
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ae:	b25b      	sxtb	r3, r3
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b4:	d103      	bne.n	80040be <xQueueReceive+0x122>
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ca:	d103      	bne.n	80040d4 <xQueueReceive+0x138>
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d4:	f001 fc98 	bl	8005a08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040d8:	1d3a      	adds	r2, r7, #4
 80040da:	f107 0310 	add.w	r3, r7, #16
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fee9 	bl	8004eb8 <xTaskCheckForTimeOut>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d123      	bne.n	8004134 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ee:	f000 f8ad 	bl	800424c <prvIsQueueEmpty>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	3324      	adds	r3, #36	; 0x24
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fd83 	bl	8004c0c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004108:	f000 f84e 	bl	80041a8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800410c:	f000 fb00 	bl	8004710 <xTaskResumeAll>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d189      	bne.n	800402a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <xQueueReceive+0x1bc>)
 8004118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	e780      	b.n	800402a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412a:	f000 f83d 	bl	80041a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800412e:	f000 faef 	bl	8004710 <xTaskResumeAll>
 8004132:	e77a      	b.n	800402a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004136:	f000 f837 	bl	80041a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800413a:	f000 fae9 	bl	8004710 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800413e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004140:	f000 f884 	bl	800424c <prvIsQueueEmpty>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	f43f af6f 	beq.w	800402a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800414c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800414e:	4618      	mov	r0, r3
 8004150:	3730      	adds	r7, #48	; 0x30
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	441a      	add	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d303      	bcc.n	8004190 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68d9      	ldr	r1, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	461a      	mov	r2, r3
 800419a:	6838      	ldr	r0, [r7, #0]
 800419c:	f001 fede 	bl	8005f5c <memcpy>
    }
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80041b0:	f001 fbfa 	bl	80059a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041bc:	e011      	b.n	80041e2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3324      	adds	r3, #36	; 0x24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd88 	bl	8004ce0 <xTaskRemoveFromEventList>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80041d6:	f000 fed5 	bl	8004f84 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	3b01      	subs	r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	dce9      	bgt.n	80041be <prvUnlockQueue+0x16>
 80041ea:	e000      	b.n	80041ee <prvUnlockQueue+0x46>
                    break;
 80041ec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80041f6:	f001 fc07 	bl	8005a08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80041fa:	f001 fbd5 	bl	80059a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004204:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004206:	e011      	b.n	800422c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d012      	beq.n	8004236 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3310      	adds	r3, #16
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fd63 	bl	8004ce0 <xTaskRemoveFromEventList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004220:	f000 feb0 	bl	8004f84 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	3b01      	subs	r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800422c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004230:	2b00      	cmp	r3, #0
 8004232:	dce9      	bgt.n	8004208 <prvUnlockQueue+0x60>
 8004234:	e000      	b.n	8004238 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004236:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	22ff      	movs	r2, #255	; 0xff
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004240:	f001 fbe2 	bl	8005a08 <vPortExitCritical>
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004254:	f001 fba8 	bl	80059a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e001      	b.n	800426a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800426a:	f001 fbcd 	bl	8005a08 <vPortExitCritical>

    return xReturn;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
    }
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d024      	beq.n	80042f2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e01e      	b.n	80042ec <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <vQueueAddToRegistry+0x98>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d105      	bne.n	80042ca <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <vQueueAddToRegistry+0x98>)
 80042c4:	4413      	add	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
                    break;
 80042c8:	e013      	b.n	80042f2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <vQueueAddToRegistry+0x6e>
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <vQueueAddToRegistry+0x98>)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <vQueueAddToRegistry+0x98>)
 80042e2:	4413      	add	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b07      	cmp	r3, #7
 80042f0:	d9dd      	bls.n	80042ae <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000100 	.word	0x20000100

08004314 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004324:	f001 fb40 	bl	80059a8 <vPortEnterCritical>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800432e:	b25b      	sxtb	r3, r3
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004334:	d103      	bne.n	800433e <vQueueWaitForMessageRestricted+0x2a>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004344:	b25b      	sxtb	r3, r3
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434a:	d103      	bne.n	8004354 <vQueueWaitForMessageRestricted+0x40>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004354:	f001 fb58 	bl	8005a08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fc73 	bl	8004c54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800436e:	6978      	ldr	r0, [r7, #20]
 8004370:	f7ff ff1a 	bl	80041a8 <prvUnlockQueue>
    }
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af04      	add	r7, sp, #16
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fbeb 	bl	8005b6c <pvPortMalloc>
 8004396:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d013      	beq.n	80043c6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800439e:	2058      	movs	r0, #88	; 0x58
 80043a0:	f001 fbe4 	bl	8005b6c <pvPortMalloc>
 80043a4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80043ac:	2258      	movs	r2, #88	; 0x58
 80043ae:	2100      	movs	r1, #0
 80043b0:	69f8      	ldr	r0, [r7, #28]
 80043b2:	f001 fda7 	bl	8005f04 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
 80043bc:	e005      	b.n	80043ca <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f001 fc8e 	bl	8005ce0 <vPortFree>
 80043c4:	e001      	b.n	80043ca <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043d0:	88fa      	ldrh	r2, [r7, #6]
 80043d2:	2300      	movs	r3, #0
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	9302      	str	r3, [sp, #8]
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f80e 	bl	8004408 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80043ec:	69f8      	ldr	r0, [r7, #28]
 80043ee:	f000 f899 	bl	8004524 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e002      	b.n	80043fe <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043fc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80043fe:	69bb      	ldr	r3, [r7, #24]
    }
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	461a      	mov	r2, r3
 8004420:	21a5      	movs	r1, #165	; 0xa5
 8004422:	f001 fd6f 	bl	8005f04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004430:	3b01      	subs	r3, #1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <prvInitialiseNewTask+0x58>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	617b      	str	r3, [r7, #20]
    }
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01e      	beq.n	80044a4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e012      	b.n	8004492 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	7819      	ldrb	r1, [r3, #0]
 8004474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	3334      	adds	r3, #52	; 0x34
 800447c:	460a      	mov	r2, r1
 800447e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d006      	beq.n	800449a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	3301      	adds	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2b09      	cmp	r3, #9
 8004496:	d9e9      	bls.n	800446c <prvInitialiseNewTask+0x64>
 8004498:	e000      	b.n	800449c <prvInitialiseNewTask+0x94>
            {
                break;
 800449a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d90a      	bls.n	80044c0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	613b      	str	r3, [r7, #16]
    }
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d901      	bls.n	80044ca <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044c6:	2304      	movs	r3, #4
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	3304      	adds	r3, #4
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fbec 	bl	8003cb8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	3318      	adds	r3, #24
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fbe7 	bl	8003cb8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	f1c3 0205 	rsb	r2, r3, #5
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	69b8      	ldr	r0, [r7, #24]
 8004506:	f001 f91d 	bl	8005744 <pxPortInitialiseStack>
 800450a:	4602      	mov	r2, r0
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800452c:	f001 fa3c 	bl	80059a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004530:	4b40      	ldr	r3, [pc, #256]	; (8004634 <prvAddNewTaskToReadyList+0x110>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4a3f      	ldr	r2, [pc, #252]	; (8004634 <prvAddNewTaskToReadyList+0x110>)
 8004538:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800453a:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <prvAddNewTaskToReadyList+0x114>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004542:	4a3d      	ldr	r2, [pc, #244]	; (8004638 <prvAddNewTaskToReadyList+0x114>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004548:	4b3a      	ldr	r3, [pc, #232]	; (8004634 <prvAddNewTaskToReadyList+0x110>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d110      	bne.n	8004572 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004550:	f000 fd3c 	bl	8004fcc <prvInitialiseTaskLists>
 8004554:	e00d      	b.n	8004572 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <prvAddNewTaskToReadyList+0x118>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <prvAddNewTaskToReadyList+0x114>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d802      	bhi.n	8004572 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800456c:	4a32      	ldr	r2, [pc, #200]	; (8004638 <prvAddNewTaskToReadyList+0x114>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <prvAddNewTaskToReadyList+0x11c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a31      	ldr	r2, [pc, #196]	; (8004640 <prvAddNewTaskToReadyList+0x11c>)
 800457a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800457c:	4b30      	ldr	r3, [pc, #192]	; (8004640 <prvAddNewTaskToReadyList+0x11c>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <prvAddNewTaskToReadyList+0x120>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <prvAddNewTaskToReadyList+0x120>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	492b      	ldr	r1, [pc, #172]	; (8004648 <prvAddNewTaskToReadyList+0x124>)
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3304      	adds	r3, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	3204      	adds	r2, #4
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1d1a      	adds	r2, r3, #4
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <prvAddNewTaskToReadyList+0x124>)
 80045da:	441a      	add	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	615a      	str	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4918      	ldr	r1, [pc, #96]	; (8004648 <prvAddNewTaskToReadyList+0x124>)
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	4814      	ldr	r0, [pc, #80]	; (8004648 <prvAddNewTaskToReadyList+0x124>)
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4403      	add	r3, r0
 8004600:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004602:	f001 fa01 	bl	8005a08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <prvAddNewTaskToReadyList+0x118>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00e      	beq.n	800462c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvAddNewTaskToReadyList+0x114>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	429a      	cmp	r2, r3
 800461a:	d207      	bcs.n	800462c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <prvAddNewTaskToReadyList+0x128>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000218 	.word	0x20000218
 8004638:	20000140 	.word	0x20000140
 800463c:	20000224 	.word	0x20000224
 8004640:	20000234 	.word	0x20000234
 8004644:	20000220 	.word	0x20000220
 8004648:	20000144 	.word	0x20000144
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <vTaskStartScheduler+0x88>)
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	2300      	movs	r3, #0
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2300      	movs	r3, #0
 8004660:	2282      	movs	r2, #130	; 0x82
 8004662:	491e      	ldr	r1, [pc, #120]	; (80046dc <vTaskStartScheduler+0x8c>)
 8004664:	481e      	ldr	r0, [pc, #120]	; (80046e0 <vTaskStartScheduler+0x90>)
 8004666:	f7ff fe89 	bl	800437c <xTaskCreate>
 800466a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004672:	f000 fde3 	bl	800523c <xTimerCreateTimerTask>
 8004676:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d116      	bne.n	80046ac <vTaskStartScheduler+0x5c>
        __asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60bb      	str	r3, [r7, #8]
    }
 8004690:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <vTaskStartScheduler+0x94>)
 8004694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004698:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <vTaskStartScheduler+0x98>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <vTaskStartScheduler+0x9c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80046a6:	f001 f8dd 	bl	8005864 <xPortStartScheduler>
 80046aa:	e00e      	b.n	80046ca <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b2:	d10a      	bne.n	80046ca <vTaskStartScheduler+0x7a>
        __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	607b      	str	r3, [r7, #4]
    }
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <vTaskStartScheduler+0xa0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	2000023c 	.word	0x2000023c
 80046dc:	08005fcc 	.word	0x08005fcc
 80046e0:	08004f9d 	.word	0x08004f9d
 80046e4:	20000238 	.word	0x20000238
 80046e8:	20000224 	.word	0x20000224
 80046ec:	2000021c 	.word	0x2000021c
 80046f0:	2000000c 	.word	0x2000000c

080046f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <vTaskSuspendAll+0x18>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4a03      	ldr	r2, [pc, #12]	; (800470c <vTaskSuspendAll+0x18>)
 8004700:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	20000240 	.word	0x20000240

08004710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800471e:	4b71      	ldr	r3, [pc, #452]	; (80048e4 <xTaskResumeAll+0x1d4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <xTaskResumeAll+0x2c>
        __asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	607b      	str	r3, [r7, #4]
    }
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800473c:	f001 f934 	bl	80059a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004740:	4b68      	ldr	r3, [pc, #416]	; (80048e4 <xTaskResumeAll+0x1d4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3b01      	subs	r3, #1
 8004746:	4a67      	ldr	r2, [pc, #412]	; (80048e4 <xTaskResumeAll+0x1d4>)
 8004748:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474a:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <xTaskResumeAll+0x1d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 80c0 	bne.w	80048d4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004754:	4b64      	ldr	r3, [pc, #400]	; (80048e8 <xTaskResumeAll+0x1d8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80bb 	beq.w	80048d4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475e:	e08a      	b.n	8004876 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004760:	4b62      	ldr	r3, [pc, #392]	; (80048ec <xTaskResumeAll+0x1dc>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	6a12      	ldr	r2, [r2, #32]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	69d2      	ldr	r2, [r2, #28]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3318      	adds	r3, #24
 800478a:	429a      	cmp	r2, r3
 800478c:	d103      	bne.n	8004796 <xTaskResumeAll+0x86>
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	68d2      	ldr	r2, [r2, #12]
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	3304      	adds	r3, #4
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d103      	bne.n	80047d4 <xTaskResumeAll+0xc4>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2200      	movs	r2, #0
 80047d8:	615a      	str	r2, [r3, #20]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	1e5a      	subs	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <xTaskResumeAll+0x1e0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4a3f      	ldr	r2, [pc, #252]	; (80048f0 <xTaskResumeAll+0x1e0>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	493e      	ldr	r1, [pc, #248]	; (80048f4 <xTaskResumeAll+0x1e4>)
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3304      	adds	r3, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	3204      	adds	r2, #4
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a2e      	ldr	r2, [pc, #184]	; (80048f4 <xTaskResumeAll+0x1e4>)
 800483a:	441a      	add	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	615a      	str	r2, [r3, #20]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	492b      	ldr	r1, [pc, #172]	; (80048f4 <xTaskResumeAll+0x1e4>)
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	4827      	ldr	r0, [pc, #156]	; (80048f4 <xTaskResumeAll+0x1e4>)
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4403      	add	r3, r0
 8004860:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <xTaskResumeAll+0x1e8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004870:	4b22      	ldr	r3, [pc, #136]	; (80048fc <xTaskResumeAll+0x1ec>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <xTaskResumeAll+0x1dc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f47f af70 	bne.w	8004760 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004886:	f000 fc1f 	bl	80050c8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <xTaskResumeAll+0x1f0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d010      	beq.n	80048b8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004896:	f000 f847 	bl	8004928 <xTaskIncrementTick>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <xTaskResumeAll+0x1ec>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f1      	bne.n	8004896 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <xTaskResumeAll+0x1f0>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <xTaskResumeAll+0x1ec>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80048c0:	2301      	movs	r3, #1
 80048c2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <xTaskResumeAll+0x1f4>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80048d4:	f001 f898 	bl	8005a08 <vPortExitCritical>

    return xAlreadyYielded;
 80048d8:	69bb      	ldr	r3, [r7, #24]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000240 	.word	0x20000240
 80048e8:	20000218 	.word	0x20000218
 80048ec:	200001d8 	.word	0x200001d8
 80048f0:	20000220 	.word	0x20000220
 80048f4:	20000144 	.word	0x20000144
 80048f8:	20000140 	.word	0x20000140
 80048fc:	2000022c 	.word	0x2000022c
 8004900:	20000228 	.word	0x20000228
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <xTaskGetTickCount+0x1c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004914:	687b      	ldr	r3, [r7, #4]
}
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000021c 	.word	0x2000021c

08004928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <xTaskIncrementTick+0x200>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 80ec 	bne.w	8004b14 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800493c:	4b7b      	ldr	r3, [pc, #492]	; (8004b2c <xTaskIncrementTick+0x204>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004944:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <xTaskIncrementTick+0x204>)
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d120      	bne.n	8004992 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004950:	4b77      	ldr	r3, [pc, #476]	; (8004b30 <xTaskIncrementTick+0x208>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <xTaskIncrementTick+0x48>
        __asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	607b      	str	r3, [r7, #4]
    }
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <xTaskIncrementTick+0x46>
 8004970:	4b6f      	ldr	r3, [pc, #444]	; (8004b30 <xTaskIncrementTick+0x208>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <xTaskIncrementTick+0x20c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6d      	ldr	r2, [pc, #436]	; (8004b30 <xTaskIncrementTick+0x208>)
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4a6d      	ldr	r2, [pc, #436]	; (8004b34 <xTaskIncrementTick+0x20c>)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <xTaskIncrementTick+0x210>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	4a6b      	ldr	r2, [pc, #428]	; (8004b38 <xTaskIncrementTick+0x210>)
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	f000 fb9b 	bl	80050c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004992:	4b6a      	ldr	r3, [pc, #424]	; (8004b3c <xTaskIncrementTick+0x214>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a3a      	ldr	r2, [r7, #32]
 8004998:	429a      	cmp	r2, r3
 800499a:	f0c0 80a6 	bcc.w	8004aea <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800499e:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <xTaskIncrementTick+0x208>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a8:	4b64      	ldr	r3, [pc, #400]	; (8004b3c <xTaskIncrementTick+0x214>)
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ae:	601a      	str	r2, [r3, #0]
                    break;
 80049b0:	e09b      	b.n	8004aea <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b2:	4b5f      	ldr	r3, [pc, #380]	; (8004b30 <xTaskIncrementTick+0x208>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d203      	bcs.n	80049d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80049ca:	4a5c      	ldr	r2, [pc, #368]	; (8004b3c <xTaskIncrementTick+0x214>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80049d0:	e08b      	b.n	8004aea <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	68d2      	ldr	r2, [r2, #12]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	6892      	ldr	r2, [r2, #8]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3304      	adds	r3, #4
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d103      	bne.n	8004a00 <xTaskIncrementTick+0xd8>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2200      	movs	r2, #0
 8004a04:	615a      	str	r2, [r3, #20]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1e5a      	subs	r2, r3, #1
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01e      	beq.n	8004a56 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	6a12      	ldr	r2, [r2, #32]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	69d2      	ldr	r2, [r2, #28]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3318      	adds	r3, #24
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d103      	bne.n	8004a46 <xTaskIncrementTick+0x11e>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <xTaskIncrementTick+0x218>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	4a36      	ldr	r2, [pc, #216]	; (8004b40 <xTaskIncrementTick+0x218>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	4935      	ldr	r1, [pc, #212]	; (8004b44 <xTaskIncrementTick+0x21c>)
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3304      	adds	r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	3204      	adds	r2, #4
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	1d1a      	adds	r2, r3, #4
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <xTaskIncrementTick+0x21c>)
 8004aac:	441a      	add	r2, r3
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	615a      	str	r2, [r3, #20]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4923      	ldr	r1, [pc, #140]	; (8004b44 <xTaskIncrementTick+0x21c>)
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	481f      	ldr	r0, [pc, #124]	; (8004b44 <xTaskIncrementTick+0x21c>)
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <xTaskIncrementTick+0x220>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	f67f af5d 	bls.w	800499e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ae8:	e759      	b.n	800499e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aea:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <xTaskIncrementTick+0x220>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4914      	ldr	r1, [pc, #80]	; (8004b44 <xTaskIncrementTick+0x21c>)
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d901      	bls.n	8004b06 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <xTaskIncrementTick+0x224>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e004      	b.n	8004b1e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <xTaskIncrementTick+0x228>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	4a0d      	ldr	r2, [pc, #52]	; (8004b50 <xTaskIncrementTick+0x228>)
 8004b1c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3728      	adds	r7, #40	; 0x28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000240 	.word	0x20000240
 8004b2c:	2000021c 	.word	0x2000021c
 8004b30:	200001d0 	.word	0x200001d0
 8004b34:	200001d4 	.word	0x200001d4
 8004b38:	20000230 	.word	0x20000230
 8004b3c:	20000238 	.word	0x20000238
 8004b40:	20000220 	.word	0x20000220
 8004b44:	20000144 	.word	0x20000144
 8004b48:	20000140 	.word	0x20000140
 8004b4c:	2000022c 	.word	0x2000022c
 8004b50:	20000228 	.word	0x20000228

08004b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b5a:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <vTaskSwitchContext+0xa4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b62:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <vTaskSwitchContext+0xa8>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004b68:	e03f      	b.n	8004bea <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <vTaskSwitchContext+0xa8>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b70:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <vTaskSwitchContext+0xac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	f1c3 031f 	rsb	r3, r3, #31
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	491f      	ldr	r1, [pc, #124]	; (8004c04 <vTaskSwitchContext+0xb0>)
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
    }
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <vTaskSwitchContext+0x5a>
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <vTaskSwitchContext+0xb0>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d104      	bne.n	8004be0 <vTaskSwitchContext+0x8c>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <vTaskSwitchContext+0xb4>)
 8004be8:	6013      	str	r3, [r2, #0]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000240 	.word	0x20000240
 8004bfc:	2000022c 	.word	0x2000022c
 8004c00:	20000220 	.word	0x20000220
 8004c04:	20000144 	.word	0x20000144
 8004c08:	20000140 	.word	0x20000140

08004c0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60fb      	str	r3, [r7, #12]
    }
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <vTaskPlaceOnEventList+0x44>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3318      	adds	r3, #24
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff f849 	bl	8003cd2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c40:	2101      	movs	r1, #1
 8004c42:	6838      	ldr	r0, [r7, #0]
 8004c44:	f000 fa7a 	bl	800513c <prvAddCurrentTaskToDelayedList>
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000140 	.word	0x20000140

08004c54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	613b      	str	r3, [r7, #16]
    }
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <vTaskPlaceOnEventListRestricted+0x88>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	61da      	str	r2, [r3, #28]
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <vTaskPlaceOnEventListRestricted+0x88>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	6892      	ldr	r2, [r2, #8]
 8004c92:	621a      	str	r2, [r3, #32]
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <vTaskPlaceOnEventListRestricted+0x88>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	3218      	adds	r2, #24
 8004c9e:	605a      	str	r2, [r3, #4]
 8004ca0:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <vTaskPlaceOnEventListRestricted+0x88>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f103 0218 	add.w	r2, r3, #24
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <vTaskPlaceOnEventListRestricted+0x88>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cc8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	f000 fa35 	bl	800513c <prvAddCurrentTaskToDelayedList>
    }
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000140 	.word	0x20000140

08004ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b08b      	sub	sp, #44	; 0x2c
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60fb      	str	r3, [r7, #12]
    }
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	6a3a      	ldr	r2, [r7, #32]
 8004d18:	6a12      	ldr	r2, [r2, #32]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	69d2      	ldr	r2, [r2, #28]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	3318      	adds	r3, #24
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d103      	bne.n	8004d3a <xTaskRemoveFromEventList+0x5a>
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	6a1a      	ldr	r2, [r3, #32]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4a:	4b4a      	ldr	r3, [pc, #296]	; (8004e74 <xTaskRemoveFromEventList+0x194>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d15e      	bne.n	8004e10 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	68d2      	ldr	r2, [r2, #12]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	6892      	ldr	r2, [r2, #8]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	3304      	adds	r3, #4
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d103      	bne.n	8004d80 <xTaskRemoveFromEventList+0xa0>
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	2200      	movs	r2, #0
 8004d84:	615a      	str	r2, [r3, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	1e5a      	subs	r2, r3, #1
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	2201      	movs	r2, #1
 8004d96:	409a      	lsls	r2, r3
 8004d98:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <xTaskRemoveFromEventList+0x198>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	4a36      	ldr	r2, [pc, #216]	; (8004e78 <xTaskRemoveFromEventList+0x198>)
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	4935      	ldr	r1, [pc, #212]	; (8004e7c <xTaskRemoveFromEventList+0x19c>)
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3304      	adds	r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	60da      	str	r2, [r3, #12]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	3204      	adds	r2, #4
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <xTaskRemoveFromEventList+0x19c>)
 8004de6:	441a      	add	r2, r3
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	615a      	str	r2, [r3, #20]
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4922      	ldr	r1, [pc, #136]	; (8004e7c <xTaskRemoveFromEventList+0x19c>)
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	481e      	ldr	r0, [pc, #120]	; (8004e7c <xTaskRemoveFromEventList+0x19c>)
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4403      	add	r3, r0
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	e01b      	b.n	8004e48 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <xTaskRemoveFromEventList+0x1a0>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	61da      	str	r2, [r3, #28]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	621a      	str	r2, [r3, #32]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	3218      	adds	r2, #24
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f103 0218 	add.w	r2, r3, #24
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <xTaskRemoveFromEventList+0x1a0>)
 8004e3c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <xTaskRemoveFromEventList+0x1a0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <xTaskRemoveFromEventList+0x1a0>)
 8004e46:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <xTaskRemoveFromEventList+0x1a4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d905      	bls.n	8004e62 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <xTaskRemoveFromEventList+0x1a8>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e001      	b.n	8004e66 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	372c      	adds	r7, #44	; 0x2c
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20000240 	.word	0x20000240
 8004e78:	20000220 	.word	0x20000220
 8004e7c:	20000144 	.word	0x20000144
 8004e80:	200001d8 	.word	0x200001d8
 8004e84:	20000140 	.word	0x20000140
 8004e88:	2000022c 	.word	0x2000022c

08004e8c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <vTaskInternalSetTimeOutState+0x24>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <vTaskInternalSetTimeOutState+0x28>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	605a      	str	r2, [r3, #4]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000230 	.word	0x20000230
 8004eb4:	2000021c 	.word	0x2000021c

08004eb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	613b      	str	r3, [r7, #16]
    }
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
    }
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004efa:	f000 fd55 	bl	80059a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004efe:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <xTaskCheckForTimeOut+0xc4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f16:	d102      	bne.n	8004f1e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	e026      	b.n	8004f6c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <xTaskCheckForTimeOut+0xc8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d00a      	beq.n	8004f40 <xTaskCheckForTimeOut+0x88>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d305      	bcc.n	8004f40 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e015      	b.n	8004f6c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d20b      	bcs.n	8004f62 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad2      	subs	r2, r2, r3
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff98 	bl	8004e8c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	e004      	b.n	8004f6c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004f6c:	f000 fd4c 	bl	8005a08 <vPortExitCritical>

    return xReturn;
 8004f70:	69fb      	ldr	r3, [r7, #28]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	2000021c 	.word	0x2000021c
 8004f80:	20000230 	.word	0x20000230

08004f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <vTaskMissedYield+0x14>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	2000022c 	.word	0x2000022c

08004f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004fa4:	f000 f852 	bl	800504c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvIdleTask+0x28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d9f9      	bls.n	8004fa4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <prvIdleTask+0x2c>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004fc0:	e7f0      	b.n	8004fa4 <prvIdleTask+0x8>
 8004fc2:	bf00      	nop
 8004fc4:	20000144 	.word	0x20000144
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e00c      	b.n	8004ff2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <prvInitialiseTaskLists+0x60>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fe46 	bl	8003c78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d9ef      	bls.n	8004fd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ff8:	480d      	ldr	r0, [pc, #52]	; (8005030 <prvInitialiseTaskLists+0x64>)
 8004ffa:	f7fe fe3d 	bl	8003c78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ffe:	480d      	ldr	r0, [pc, #52]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005000:	f7fe fe3a 	bl	8003c78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005004:	480c      	ldr	r0, [pc, #48]	; (8005038 <prvInitialiseTaskLists+0x6c>)
 8005006:	f7fe fe37 	bl	8003c78 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800500a:	480c      	ldr	r0, [pc, #48]	; (800503c <prvInitialiseTaskLists+0x70>)
 800500c:	f7fe fe34 	bl	8003c78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005010:	480b      	ldr	r0, [pc, #44]	; (8005040 <prvInitialiseTaskLists+0x74>)
 8005012:	f7fe fe31 	bl	8003c78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <prvInitialiseTaskLists+0x78>)
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <prvInitialiseTaskLists+0x64>)
 800501a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <prvInitialiseTaskLists+0x7c>)
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000144 	.word	0x20000144
 8005030:	200001a8 	.word	0x200001a8
 8005034:	200001bc 	.word	0x200001bc
 8005038:	200001d8 	.word	0x200001d8
 800503c:	200001ec 	.word	0x200001ec
 8005040:	20000204 	.word	0x20000204
 8005044:	200001d0 	.word	0x200001d0
 8005048:	200001d4 	.word	0x200001d4

0800504c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005052:	e019      	b.n	8005088 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005054:	f000 fca8 	bl	80059a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <prvCheckTasksWaitingTermination+0x50>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fe6d 	bl	8003d44 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 8005072:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800507c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800507e:	f000 fcc3 	bl	8005a08 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f810 	bl	80050a8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	200001ec 	.word	0x200001ec
 80050a0:	20000218 	.word	0x20000218
 80050a4:	20000200 	.word	0x20000200

080050a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fe13 	bl	8005ce0 <vPortFree>
            vPortFree( pxTCB );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fe10 	bl	8005ce0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <prvResetNextTaskUnblockTime+0x30>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <prvResetNextTaskUnblockTime+0x34>)
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80050de:	e005      	b.n	80050ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <prvResetNextTaskUnblockTime+0x30>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <prvResetNextTaskUnblockTime+0x34>)
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	200001d0 	.word	0x200001d0
 80050fc:	20000238 	.word	0x20000238

08005100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <xTaskGetSchedulerState+0x34>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800510e:	2301      	movs	r3, #1
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	e008      	b.n	8005126 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <xTaskGetSchedulerState+0x38>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800511c:	2302      	movs	r3, #2
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	e001      	b.n	8005126 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005126:	687b      	ldr	r3, [r7, #4]
    }
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20000224 	.word	0x20000224
 8005138:	20000240 	.word	0x20000240

0800513c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005146:	4b36      	ldr	r3, [pc, #216]	; (8005220 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800514c:	4b35      	ldr	r3, [pc, #212]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fdf6 	bl	8003d44 <uxListRemove>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	2201      	movs	r2, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43da      	mvns	r2, r3
 800516c:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <prvAddCurrentTaskToDelayedList+0xec>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4013      	ands	r3, r2
 8005172:	4a2d      	ldr	r2, [pc, #180]	; (8005228 <prvAddCurrentTaskToDelayedList+0xec>)
 8005174:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517c:	d124      	bne.n	80051c8 <prvAddCurrentTaskToDelayedList+0x8c>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d021      	beq.n	80051c8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005184:	4b29      	ldr	r3, [pc, #164]	; (800522c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	609a      	str	r2, [r3, #8]
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	60da      	str	r2, [r3, #12]
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	3204      	adds	r2, #4
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1d1a      	adds	r2, r3, #4
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <prvAddCurrentTaskToDelayedList+0xf0>)
 80051b8:	615a      	str	r2, [r3, #20]
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <prvAddCurrentTaskToDelayedList+0xf0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	4a1a      	ldr	r2, [pc, #104]	; (800522c <prvAddCurrentTaskToDelayedList+0xf0>)
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80051c6:	e026      	b.n	8005216 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d209      	bcs.n	80051f4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <prvAddCurrentTaskToDelayedList+0xf4>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7fe fd70 	bl	8003cd2 <vListInsert>
}
 80051f2:	e010      	b.n	8005216 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <prvAddCurrentTaskToDelayedList+0xf8>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7fe fd66 	bl	8003cd2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	429a      	cmp	r2, r3
 800520e:	d202      	bcs.n	8005216 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6013      	str	r3, [r2, #0]
}
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	2000021c 	.word	0x2000021c
 8005224:	20000140 	.word	0x20000140
 8005228:	20000220 	.word	0x20000220
 800522c:	20000204 	.word	0x20000204
 8005230:	200001d4 	.word	0x200001d4
 8005234:	200001d0 	.word	0x200001d0
 8005238:	20000238 	.word	0x20000238

0800523c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005246:	f000 fa47 	bl	80056d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <xTimerCreateTimerTask+0x54>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <xTimerCreateTimerTask+0x58>)
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	2302      	movs	r3, #2
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005260:	490d      	ldr	r1, [pc, #52]	; (8005298 <xTimerCreateTimerTask+0x5c>)
 8005262:	480e      	ldr	r0, [pc, #56]	; (800529c <xTimerCreateTimerTask+0x60>)
 8005264:	f7ff f88a 	bl	800437c <xTaskCreate>
 8005268:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	603b      	str	r3, [r7, #0]
    }
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005286:	687b      	ldr	r3, [r7, #4]
    }
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000274 	.word	0x20000274
 8005294:	20000278 	.word	0x20000278
 8005298:	08005fd4 	.word	0x08005fd4
 800529c:	08005345 	.word	0x08005345

080052a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80052ac:	e008      	b.n	80052c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	18d1      	adds	r1, r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f8dd 	bl	800548c <prvInsertTimerInActiveList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ea      	bne.n	80052ae <prvReloadTimer+0xe>
        }
    }
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <prvProcessExpiredTimer+0x5c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fd21 	bl	8003d44 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff ffc3 	bl	80052a0 <prvReloadTimer>
 800531a:	e008      	b.n	800532e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	4798      	blx	r3
    }
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000026c 	.word	0x2000026c

08005344 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800534c:	f107 0308 	add.w	r3, r7, #8
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f857 	bl	8005404 <prvGetNextExpireTime>
 8005356:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4619      	mov	r1, r3
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f803 	bl	8005368 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005362:	f000 f8d5 	bl	8005510 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005366:	e7f1      	b.n	800534c <prvTimerTask+0x8>

08005368 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005372:	f7ff f9bf 	bl	80046f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f866 	bl	800544c <prvSampleTimeNow>
 8005380:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d130      	bne.n	80053ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <prvProcessTimerOrBlockTask+0x3c>
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	429a      	cmp	r2, r3
 8005394:	d806      	bhi.n	80053a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005396:	f7ff f9bb 	bl	8004710 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ffa1 	bl	80052e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80053a2:	e024      	b.n	80053ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <prvProcessTimerOrBlockTask+0x90>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <prvProcessTimerOrBlockTask+0x50>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <prvProcessTimerOrBlockTask+0x52>
 80053b8:	2300      	movs	r3, #0
 80053ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <prvProcessTimerOrBlockTask+0x94>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	f7fe ffa3 	bl	8004314 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80053ce:	f7ff f99f 	bl	8004710 <xTaskResumeAll>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <prvProcessTimerOrBlockTask+0x98>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
    }
 80053e8:	e001      	b.n	80053ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80053ea:	f7ff f991 	bl	8004710 <xTaskResumeAll>
    }
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000270 	.word	0x20000270
 80053fc:	20000274 	.word	0x20000274
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <prvGetNextExpireTime+0x44>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <prvGetNextExpireTime+0x16>
 8005416:	2201      	movs	r2, #1
 8005418:	e000      	b.n	800541c <prvGetNextExpireTime+0x18>
 800541a:	2200      	movs	r2, #0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <prvGetNextExpireTime+0x44>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e001      	b.n	8005438 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005438:	68fb      	ldr	r3, [r7, #12]
    }
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2000026c 	.word	0x2000026c

0800544c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005454:	f7ff fa58 	bl	8004908 <xTaskGetTickCount>
 8005458:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <prvSampleTimeNow+0x3c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d205      	bcs.n	8005470 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005464:	f000 f912 	bl	800568c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e002      	b.n	8005476 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005476:	4a04      	ldr	r2, [pc, #16]	; (8005488 <prvSampleTimeNow+0x3c>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800547c:	68fb      	ldr	r3, [r7, #12]
    }
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000027c 	.word	0x2000027c

0800548c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d812      	bhi.n	80054d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e01b      	b.n	80054fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <prvInsertTimerInActiveList+0x7c>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f7fe fbfe 	bl	8003cd2 <vListInsert>
 80054d6:	e012      	b.n	80054fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d206      	bcs.n	80054ee <prvInsertTimerInActiveList+0x62>
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e007      	b.n	80054fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ee:	4b07      	ldr	r3, [pc, #28]	; (800550c <prvInsertTimerInActiveList+0x80>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe fbea 	bl	8003cd2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80054fe:	697b      	ldr	r3, [r7, #20]
    }
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000270 	.word	0x20000270
 800550c:	2000026c 	.word	0x2000026c

08005510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005516:	e0a6      	b.n	8005666 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f2c0 80a3 	blt.w	8005666 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe fc07 	bl	8003d44 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff87 	bl	800544c <prvSampleTimeNow>
 800553e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	3b01      	subs	r3, #1
 8005544:	2b08      	cmp	r3, #8
 8005546:	f200 808d 	bhi.w	8005664 <prvProcessReceivedCommands+0x154>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <prvProcessReceivedCommands+0x40>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005575 	.word	0x08005575
 8005554:	08005575 	.word	0x08005575
 8005558:	080055dd 	.word	0x080055dd
 800555c:	080055f1 	.word	0x080055f1
 8005560:	0800563b 	.word	0x0800563b
 8005564:	08005575 	.word	0x08005575
 8005568:	08005575 	.word	0x08005575
 800556c:	080055dd 	.word	0x080055dd
 8005570:	080055f1 	.word	0x080055f1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	b2da      	uxtb	r2, r3
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	18d1      	adds	r1, r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	69f8      	ldr	r0, [r7, #28]
 8005594:	f7ff ff7a 	bl	800548c <prvInsertTimerInActiveList>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d063      	beq.n	8005666 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	4413      	add	r3, r2
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4619      	mov	r1, r3
 80055b8:	69f8      	ldr	r0, [r7, #28]
 80055ba:	f7ff fe71 	bl	80052a0 <prvReloadTimer>
 80055be:	e008      	b.n	80055d2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	69f8      	ldr	r0, [r7, #28]
 80055d8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80055da:	e044      	b.n	8005666 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80055ee:	e03a      	b.n	8005666 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	617b      	str	r3, [r7, #20]
    }
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	18d1      	adds	r1, r2, r3
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	69f8      	ldr	r0, [r7, #28]
 8005634:	f7ff ff2a 	bl	800548c <prvInsertTimerInActiveList>
                        break;
 8005638:	e015      	b.n	8005666 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005648:	69f8      	ldr	r0, [r7, #28]
 800564a:	f000 fb49 	bl	8005ce0 <vPortFree>
 800564e:	e00a      	b.n	8005666 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005662:	e000      	b.n	8005666 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005664:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <prvProcessReceivedCommands+0x178>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f107 0108 	add.w	r1, r7, #8
 800566e:	2200      	movs	r2, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fc93 	bl	8003f9c <xQueueReceive>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f47f af4d 	bne.w	8005518 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000274 	.word	0x20000274

0800568c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005692:	e009      	b.n	80056a8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <prvSwitchTimerLists+0x44>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800569e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056a2:	6838      	ldr	r0, [r7, #0]
 80056a4:	f7ff fe1e 	bl	80052e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <prvSwitchTimerLists+0x44>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <prvSwitchTimerLists+0x44>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <prvSwitchTimerLists+0x48>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a04      	ldr	r2, [pc, #16]	; (80056d0 <prvSwitchTimerLists+0x44>)
 80056be:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80056c0:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <prvSwitchTimerLists+0x48>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
    }
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	2000026c 	.word	0x2000026c
 80056d4:	20000270 	.word	0x20000270

080056d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80056dc:	f000 f964 	bl	80059a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80056e0:	4b12      	ldr	r3, [pc, #72]	; (800572c <prvCheckForValidListAndQueue+0x54>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11d      	bne.n	8005724 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80056e8:	4811      	ldr	r0, [pc, #68]	; (8005730 <prvCheckForValidListAndQueue+0x58>)
 80056ea:	f7fe fac5 	bl	8003c78 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80056ee:	4811      	ldr	r0, [pc, #68]	; (8005734 <prvCheckForValidListAndQueue+0x5c>)
 80056f0:	f7fe fac2 	bl	8003c78 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <prvCheckForValidListAndQueue+0x60>)
 80056f6:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <prvCheckForValidListAndQueue+0x58>)
 80056f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80056fa:	4b10      	ldr	r3, [pc, #64]	; (800573c <prvCheckForValidListAndQueue+0x64>)
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <prvCheckForValidListAndQueue+0x5c>)
 80056fe:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005700:	2200      	movs	r2, #0
 8005702:	210c      	movs	r1, #12
 8005704:	200a      	movs	r0, #10
 8005706:	f7fe fbd7 	bl	8003eb8 <xQueueGenericCreate>
 800570a:	4603      	mov	r3, r0
 800570c:	4a07      	ldr	r2, [pc, #28]	; (800572c <prvCheckForValidListAndQueue+0x54>)
 800570e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <prvCheckForValidListAndQueue+0x54>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <prvCheckForValidListAndQueue+0x54>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4908      	ldr	r1, [pc, #32]	; (8005740 <prvCheckForValidListAndQueue+0x68>)
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fdaa 	bl	8004278 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005724:	f000 f970 	bl	8005a08 <vPortExitCritical>
    }
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000274 	.word	0x20000274
 8005730:	20000244 	.word	0x20000244
 8005734:	20000258 	.word	0x20000258
 8005738:	2000026c 	.word	0x2000026c
 800573c:	20000270 	.word	0x20000270
 8005740:	08005fdc 	.word	0x08005fdc

08005744 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3b04      	subs	r3, #4
 8005754:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800575c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3b04      	subs	r3, #4
 8005762:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3b04      	subs	r3, #4
 8005772:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <pxPortInitialiseStack+0x64>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3b14      	subs	r3, #20
 800577e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3b04      	subs	r3, #4
 800578a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f06f 0202 	mvn.w	r2, #2
 8005792:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b20      	subs	r3, #32
 8005798:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	080057ad 	.word	0x080057ad

080057ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80057b6:	4b12      	ldr	r3, [pc, #72]	; (8005800 <prvTaskExitError+0x54>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057be:	d00a      	beq.n	80057d6 <prvTaskExitError+0x2a>
        __asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60fb      	str	r3, [r7, #12]
    }
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <prvTaskExitError+0x28>
        __asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60bb      	str	r3, [r7, #8]
    }
 80057e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80057ea:	bf00      	nop
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0fc      	beq.n	80057ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000010 	.word	0x20000010
	...

08005810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <pxCurrentTCBConst2>)
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	6808      	ldr	r0, [r1, #0]
 8005816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	f380 8809 	msr	PSP, r0
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f380 8811 	msr	BASEPRI, r0
 800582a:	4770      	bx	lr
 800582c:	f3af 8000 	nop.w

08005830 <pxCurrentTCBConst2>:
 8005830:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <prvPortStartFirstTask+0x24>)
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f380 8808 	msr	MSP, r0
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8814 	msr	CONTROL, r0
 800584a:	b662      	cpsie	i
 800584c:	b661      	cpsie	f
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	df00      	svc	0
 8005858:	bf00      	nop
 800585a:	0000      	.short	0x0000
 800585c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop

08005864 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800586a:	4b46      	ldr	r3, [pc, #280]	; (8005984 <xPortStartScheduler+0x120>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a46      	ldr	r2, [pc, #280]	; (8005988 <xPortStartScheduler+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10a      	bne.n	800588a <xPortStartScheduler+0x26>
        __asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	613b      	str	r3, [r7, #16]
    }
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800588a:	4b3e      	ldr	r3, [pc, #248]	; (8005984 <xPortStartScheduler+0x120>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a3f      	ldr	r2, [pc, #252]	; (800598c <xPortStartScheduler+0x128>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d10a      	bne.n	80058aa <xPortStartScheduler+0x46>
        __asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60fb      	str	r3, [r7, #12]
    }
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058aa:	4b39      	ldr	r3, [pc, #228]	; (8005990 <xPortStartScheduler+0x12c>)
 80058ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	22ff      	movs	r2, #255	; 0xff
 80058ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	4b31      	ldr	r3, [pc, #196]	; (8005994 <xPortStartScheduler+0x130>)
 80058d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <xPortStartScheduler+0x134>)
 80058d4:	2207      	movs	r2, #7
 80058d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058d8:	e009      	b.n	80058ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <xPortStartScheduler+0x134>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3b01      	subs	r3, #1
 80058e0:	4a2d      	ldr	r2, [pc, #180]	; (8005998 <xPortStartScheduler+0x134>)
 80058e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d0ef      	beq.n	80058da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058fa:	4b27      	ldr	r3, [pc, #156]	; (8005998 <xPortStartScheduler+0x134>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1c3 0307 	rsb	r3, r3, #7
 8005902:	2b04      	cmp	r3, #4
 8005904:	d00a      	beq.n	800591c <xPortStartScheduler+0xb8>
        __asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60bb      	str	r3, [r7, #8]
    }
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800591c:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <xPortStartScheduler+0x134>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <xPortStartScheduler+0x134>)
 8005924:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800592e:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <xPortStartScheduler+0x134>)
 8005930:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800593a:	4b18      	ldr	r3, [pc, #96]	; (800599c <xPortStartScheduler+0x138>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a17      	ldr	r2, [pc, #92]	; (800599c <xPortStartScheduler+0x138>)
 8005940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005944:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <xPortStartScheduler+0x138>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a14      	ldr	r2, [pc, #80]	; (800599c <xPortStartScheduler+0x138>)
 800594c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005950:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005952:	f000 f8db 	bl	8005b0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005956:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <xPortStartScheduler+0x13c>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800595c:	f000 f8fa 	bl	8005b54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005960:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <xPortStartScheduler+0x140>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a0f      	ldr	r2, [pc, #60]	; (80059a4 <xPortStartScheduler+0x140>)
 8005966:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800596a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800596c:	f7ff ff64 	bl	8005838 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005970:	f7ff f8f0 	bl	8004b54 <vTaskSwitchContext>
    prvTaskExitError();
 8005974:	f7ff ff1a 	bl	80057ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	e000ed00 	.word	0xe000ed00
 8005988:	410fc271 	.word	0x410fc271
 800598c:	410fc270 	.word	0x410fc270
 8005990:	e000e400 	.word	0xe000e400
 8005994:	20000280 	.word	0x20000280
 8005998:	20000284 	.word	0x20000284
 800599c:	e000ed20 	.word	0xe000ed20
 80059a0:	20000010 	.word	0x20000010
 80059a4:	e000ef34 	.word	0xe000ef34

080059a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
        __asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
    }
 80059c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80059c2:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <vPortEnterCritical+0x58>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <vPortEnterCritical+0x58>)
 80059ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <vPortEnterCritical+0x58>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d10f      	bne.n	80059f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortEnterCritical+0x5c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	603b      	str	r3, [r7, #0]
    }
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <vPortEnterCritical+0x4a>
    }
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20000010 	.word	0x20000010
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <vPortExitCritical+0x50>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <vPortExitCritical+0x24>
        __asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	607b      	str	r3, [r7, #4]
    }
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <vPortExitCritical+0x50>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <vPortExitCritical+0x50>)
 8005a34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <vPortExitCritical+0x50>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <vPortExitCritical+0x42>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005a48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000010 	.word	0x20000010
 8005a5c:	00000000 	.word	0x00000000

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <pxCurrentTCBConst>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f01e 0f10 	tst.w	lr, #16
 8005a70:	bf08      	it	eq
 8005a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	6010      	str	r0, [r2, #0]
 8005a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a84:	f380 8811 	msr	BASEPRI, r0
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f7ff f860 	bl	8004b54 <vTaskSwitchContext>
 8005a94:	f04f 0000 	mov.w	r0, #0
 8005a98:	f380 8811 	msr	BASEPRI, r0
 8005a9c:	bc09      	pop	{r0, r3}
 8005a9e:	6819      	ldr	r1, [r3, #0]
 8005aa0:	6808      	ldr	r0, [r1, #0]
 8005aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa6:	f01e 0f10 	tst.w	lr, #16
 8005aaa:	bf08      	it	eq
 8005aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ab0:	f380 8809 	msr	PSP, r0
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	f3af 8000 	nop.w

08005ac0 <pxCurrentTCBConst>:
 8005ac0:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
        __asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
    }
 8005ae0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005ae2:	f7fe ff21 	bl	8004928 <xTaskIncrementTick>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <SysTick_Handler+0x40>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	2300      	movs	r3, #0
 8005af6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f383 8811 	msr	BASEPRI, r3
    }
 8005afe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <vPortSetupTimerInterrupt+0x34>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <vPortSetupTimerInterrupt+0x38>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <vPortSetupTimerInterrupt+0x3c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <vPortSetupTimerInterrupt+0x40>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <vPortSetupTimerInterrupt+0x44>)
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <vPortSetupTimerInterrupt+0x34>)
 8005b30:	2207      	movs	r2, #7
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e010 	.word	0xe000e010
 8005b44:	e000e018 	.word	0xe000e018
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	10624dd3 	.word	0x10624dd3
 8005b50:	e000e014 	.word	0xe000e014

08005b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b64 <vPortEnableVFP+0x10>
 8005b58:	6801      	ldr	r1, [r0, #0]
 8005b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b5e:	6001      	str	r1, [r0, #0]
 8005b60:	4770      	bx	lr
 8005b62:	0000      	.short	0x0000
 8005b64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop

08005b6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005b78:	f7fe fdbc 	bl	80046f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005b7c:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <pvPortMalloc+0x160>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005b84:	f000 f908 	bl	8005d98 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d012      	beq.n	8005bb4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005b8e:	2208      	movs	r2, #8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	3308      	adds	r3, #8
 8005b9a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d804      	bhi.n	8005bb0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	e001      	b.n	8005bb4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	db70      	blt.n	8005c9c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d06d      	beq.n	8005c9c <pvPortMalloc+0x130>
 8005bc0:	4b43      	ldr	r3, [pc, #268]	; (8005cd0 <pvPortMalloc+0x164>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d868      	bhi.n	8005c9c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005bca:	4b42      	ldr	r3, [pc, #264]	; (8005cd4 <pvPortMalloc+0x168>)
 8005bcc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <pvPortMalloc+0x168>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bd4:	e004      	b.n	8005be0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <pvPortMalloc+0x86>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005bf2:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <pvPortMalloc+0x160>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d04f      	beq.n	8005c9c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4413      	add	r3, r2
 8005c04:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	2308      	movs	r3, #8
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d91f      	bls.n	8005c5e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <pvPortMalloc+0xda>
        __asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
    }
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f000 f8f9 	bl	8005e50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c5e:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <pvPortMalloc+0x164>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <pvPortMalloc+0x164>)
 8005c6a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c6c:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <pvPortMalloc+0x164>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <pvPortMalloc+0x16c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d203      	bcs.n	8005c80 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c78:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <pvPortMalloc+0x164>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <pvPortMalloc+0x16c>)
 8005c7e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005c92:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <pvPortMalloc+0x170>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	4a10      	ldr	r2, [pc, #64]	; (8005cdc <pvPortMalloc+0x170>)
 8005c9a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005c9c:	f7fe fd38 	bl	8004710 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <pvPortMalloc+0x154>
        __asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60fb      	str	r3, [r7, #12]
    }
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <pvPortMalloc+0x152>
    return pvReturn;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3728      	adds	r7, #40	; 0x28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20012e90 	.word	0x20012e90
 8005cd0:	20012e94 	.word	0x20012e94
 8005cd4:	20012e88 	.word	0x20012e88
 8005cd8:	20012e98 	.word	0x20012e98
 8005cdc:	20012e9c 	.word	0x20012e9c

08005ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d049      	beq.n	8005d86 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	425b      	negs	r3, r3
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	db0a      	blt.n	8005d1e <vPortFree+0x3e>
        __asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	60fb      	str	r3, [r7, #12]
    }
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <vPortFree+0x5c>
        __asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60bb      	str	r3, [r7, #8]
    }
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	0fdb      	lsrs	r3, r3, #31
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01c      	beq.n	8005d86 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d118      	bne.n	8005d86 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005d60:	f7fe fcc8 	bl	80046f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <vPortFree+0xb0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <vPortFree+0xb0>)
 8005d70:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f000 f86c 	bl	8005e50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <vPortFree+0xb4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <vPortFree+0xb4>)
 8005d80:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005d82:	f7fe fcc5 	bl	8004710 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20012e94 	.word	0x20012e94
 8005d94:	20012ea0 	.word	0x20012ea0

08005d98 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d9e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005da2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <prvHeapInit+0xa4>)
 8005da6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00c      	beq.n	8005dcc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3307      	adds	r3, #7
 8005db6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	4a1d      	ldr	r2, [pc, #116]	; (8005e3c <prvHeapInit+0xa4>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <prvHeapInit+0xa8>)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	; (8005e40 <prvHeapInit+0xa8>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005de4:	2208      	movs	r2, #8
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0307 	bic.w	r3, r3, #7
 8005df2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <prvHeapInit+0xac>)
 8005df8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005dfa:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <prvHeapInit+0xac>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <prvHeapInit+0xac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <prvHeapInit+0xac>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <prvHeapInit+0xb0>)
 8005e26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a07      	ldr	r2, [pc, #28]	; (8005e4c <prvHeapInit+0xb4>)
 8005e2e:	6013      	str	r3, [r2, #0]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000288 	.word	0x20000288
 8005e40:	20012e88 	.word	0x20012e88
 8005e44:	20012e90 	.word	0x20012e90
 8005e48:	20012e98 	.word	0x20012e98
 8005e4c:	20012e94 	.word	0x20012e94

08005e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e58:	4b28      	ldr	r3, [pc, #160]	; (8005efc <prvInsertBlockIntoFreeList+0xac>)
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e002      	b.n	8005e64 <prvInsertBlockIntoFreeList+0x14>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d8f7      	bhi.n	8005e5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d108      	bne.n	8005e92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d118      	bne.n	8005ed8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <prvInsertBlockIntoFreeList+0xb0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d00d      	beq.n	8005ece <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	441a      	add	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e008      	b.n	8005ee0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e003      	b.n	8005ee0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d002      	beq.n	8005eee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20012e88 	.word	0x20012e88
 8005f00:	20012e90 	.word	0x20012e90

08005f04 <memset>:
 8005f04:	4402      	add	r2, r0
 8005f06:	4603      	mov	r3, r0
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <memset+0xa>
 8005f0c:	4770      	bx	lr
 8005f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f12:	e7f9      	b.n	8005f08 <memset+0x4>

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4d0d      	ldr	r5, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1b64      	subs	r4, r4, r5
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2600      	movs	r6, #0
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4d0b      	ldr	r5, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 f826 	bl	8005f78 <_init>
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2600      	movs	r6, #0
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	08006004 	.word	0x08006004
 8005f50:	08006004 	.word	0x08006004
 8005f54:	08006004 	.word	0x08006004
 8005f58:	08006008 	.word	0x08006008

08005f5c <memcpy>:
 8005f5c:	440a      	add	r2, r1
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f64:	d100      	bne.n	8005f68 <memcpy+0xc>
 8005f66:	4770      	bx	lr
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f72:	4291      	cmp	r1, r2
 8005f74:	d1f9      	bne.n	8005f6a <memcpy+0xe>
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <_init>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr

08005f84 <_fini>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr
