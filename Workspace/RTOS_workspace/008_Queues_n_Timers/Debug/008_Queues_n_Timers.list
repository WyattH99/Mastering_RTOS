
008_Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007640  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d4  080079d4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079dc  080079dc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080079e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ea8  20000020  08007a04  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ec8  08007a04  00022ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cd9  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b0  00000000  00000000  00035d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00039320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002490d  00000000  00000000  0003b5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b68  00000000  00000000  0005fef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df8b7  00000000  00000000  00077a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005180  00000000  00000000  00157314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0015c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080077f8 	.word	0x080077f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	080077f8 	.word	0x080077f8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b970 	b.w	800052c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d965      	bls.n	8000346 <__udivmoddi4+0xe2>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa20 f202 	lsr.w	r2, r0, r2
 800028e:	4317      	orrs	r7, r2
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	fbb7 f1fe 	udiv	r1, r7, lr
 800029e:	0c22      	lsrs	r2, r4, #16
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a8:	fb01 f005 	mul.w	r0, r1, r5
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002b8:	f080 811c 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8119 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	fb00 f505 	mul.w	r5, r0, r5
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x294>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x294>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xbc>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ed 	beq.w	80004ee <__udivmoddi4+0x28a>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d149      	bne.n	80003bc <__udivmoddi4+0x158>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xce>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4617      	mov	r7, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000340:	e9c6 4700 	strd	r4, r7, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa2>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xe6>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x210>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035a:	fa1f fe8c 	uxth.w	lr, ip
 800035e:	2101      	movs	r1, #1
 8000360:	fbb2 f5f7 	udiv	r5, r2, r7
 8000364:	fb07 2015 	mls	r0, r7, r5, r2
 8000368:	0c22      	lsrs	r2, r4, #16
 800036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036e:	fb0e f005 	mul.w	r0, lr, r5
 8000372:	4290      	cmp	r0, r2
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x124>
 8000376:	eb1c 0202 	adds.w	r2, ip, r2
 800037a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4290      	cmp	r0, r2
 8000382:	f200 80cb 	bhi.w	800051c <__udivmoddi4+0x2b8>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000398:	fb0e fe00 	mul.w	lr, lr, r0
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f200 80bb 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	eba4 040e 	sub.w	r4, r4, lr
 80003b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ba:	e79f      	b.n	80002fc <__udivmoddi4+0x98>
 80003bc:	f1c1 0720 	rsb	r7, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa05 f401 	lsl.w	r4, r5, r1
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	40fd      	lsrs	r5, r7
 80003d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fbb5 f8f9 	udiv	r8, r5, r9
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fb09 5518 	mls	r5, r9, r8, r5
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb08 f50e 	mul.w	r5, r8, lr
 80003f0:	42a5      	cmp	r5, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	fa00 f001 	lsl.w	r0, r0, r1
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	42a5      	cmp	r5, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a8 0802 	sub.w	r8, r8, #2
 8000412:	4464      	add	r4, ip
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	b29d      	uxth	r5, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	fb03 fe0e 	mul.w	lr, r3, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000434:	d26c      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000436:	45a6      	cmp	lr, r4
 8000438:	d96a      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043a:	3b02      	subs	r3, #2
 800043c:	4464      	add	r4, ip
 800043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000442:	fba3 9502 	umull	r9, r5, r3, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	42ac      	cmp	r4, r5
 800044c:	46c8      	mov	r8, r9
 800044e:	46ae      	mov	lr, r5
 8000450:	d356      	bcc.n	8000500 <__udivmoddi4+0x29c>
 8000452:	d053      	beq.n	80004fc <__udivmoddi4+0x298>
 8000454:	b156      	cbz	r6, 800046c <__udivmoddi4+0x208>
 8000456:	ebb0 0208 	subs.w	r2, r0, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	fa04 f707 	lsl.w	r7, r4, r7
 8000462:	40ca      	lsrs	r2, r1
 8000464:	40cc      	lsrs	r4, r1
 8000466:	4317      	orrs	r7, r2
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	4618      	mov	r0, r3
 800046e:	2100      	movs	r1, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	f1c3 0120 	rsb	r1, r3, #32
 8000478:	fa02 fc03 	lsl.w	ip, r2, r3
 800047c:	fa20 f201 	lsr.w	r2, r0, r1
 8000480:	fa25 f101 	lsr.w	r1, r5, r1
 8000484:	409d      	lsls	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1510 	mls	r5, r7, r0, r1
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	fb00 f50e 	mul.w	r5, r0, lr
 80004a2:	428d      	cmp	r5, r1
 80004a4:	fa04 f403 	lsl.w	r4, r4, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x258>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b2:	d22f      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	428d      	cmp	r5, r1
 80004b6:	d92d      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1b49      	subs	r1, r1, r5
 80004be:	b292      	uxth	r2, r2
 80004c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c4:	fb07 1115 	mls	r1, r7, r5, r1
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	fb05 f10e 	mul.w	r1, r5, lr
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x282>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004dc:	d216      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004de:	4291      	cmp	r1, r2
 80004e0:	d914      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004e2:	3d02      	subs	r5, #2
 80004e4:	4462      	add	r2, ip
 80004e6:	1a52      	subs	r2, r2, r1
 80004e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ec:	e738      	b.n	8000360 <__udivmoddi4+0xfc>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xa2>
 80004f4:	4639      	mov	r1, r7
 80004f6:	e6e6      	b.n	80002c6 <__udivmoddi4+0x62>
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x90>
 80004fc:	4548      	cmp	r0, r9
 80004fe:	d2a9      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 8000500:	ebb9 0802 	subs.w	r8, r9, r2
 8000504:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000508:	3b01      	subs	r3, #1
 800050a:	e7a3      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050c:	4645      	mov	r5, r8
 800050e:	e7ea      	b.n	80004e6 <__udivmoddi4+0x282>
 8000510:	462b      	mov	r3, r5
 8000512:	e794      	b.n	800043e <__udivmoddi4+0x1da>
 8000514:	4640      	mov	r0, r8
 8000516:	e7d1      	b.n	80004bc <__udivmoddi4+0x258>
 8000518:	46d0      	mov	r8, sl
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e732      	b.n	8000388 <__udivmoddi4+0x124>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xd8>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e742      	b.n	80003b2 <__udivmoddi4+0x14e>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <led_effect_stop>:
 */

#include "main.h"


void led_effect_stop(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af02      	add	r7, sp, #8

	for(int i=0; i<4; i++){
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e00e      	b.n	800055a <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i], portMAX_DELAY);
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <led_effect_stop+0x3c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2200      	movs	r2, #0
 800054e:	2103      	movs	r1, #3
 8000550:	f006 fa3e 	bl	80069d0 <xTimerGenericCommand>
	for(int i=0; i<4; i++){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b03      	cmp	r3, #3
 800055e:	dded      	ble.n	800053c <led_effect_stop+0xc>
	}

}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000c4 	.word	0x200000c4

08000570 <led_effect>:


void led_effect(int n){
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]

	led_effect_stop();
 8000578:	f7ff ffda 	bl	8000530 <led_effect_stop>
	xTimerStart(led_timer_handle[n-1], portMAX_DELAY);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <led_effect+0x34>)
 8000582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000586:	f005 f979 	bl	800587c <xTaskGetTickCount>
 800058a:	4602      	mov	r2, r0
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4620      	mov	r0, r4
 8000598:	f006 fa1a 	bl	80069d0 <xTimerGenericCommand>

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	200000c4 	.word	0x200000c4

080005a8 <turn_off_all_leds>:


void turn_off_all_leds(void){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <turn_off_all_leds+0x38>)
 80005b4:	f001 fa6a 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <turn_off_all_leds+0x38>)
 80005c0:	f001 fa64 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <turn_off_all_leds+0x3c>)
 80005cc:	f001 fa5e 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2110      	movs	r1, #16
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <turn_off_all_leds+0x3c>)
 80005d6:	f001 fa59 	bl	8001a8c <HAL_GPIO_WritePin>

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400

080005e8 <turn_on_all_leds>:


void turn_on_all_leds(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <turn_on_all_leds+0x38>)
 80005f4:	f001 fa4a 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <turn_on_all_leds+0x38>)
 8000600:	f001 fa44 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <turn_on_all_leds+0x3c>)
 800060c:	f001 fa3e 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <turn_on_all_leds+0x3c>)
 8000616:	f001 fa39 	bl	8001a8c <HAL_GPIO_WritePin>

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400

08000628 <turn_on_even_leds>:


void turn_on_even_leds(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <turn_on_even_leds+0x38>)
 8000634:	f001 fa2a 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <turn_on_even_leds+0x38>)
 8000640:	f001 fa24 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <turn_on_even_leds+0x3c>)
 800064c:	f001 fa1e 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <turn_on_even_leds+0x3c>)
 8000656:	f001 fa19 	bl	8001a8c <HAL_GPIO_WritePin>

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400

08000668 <turn_on_odd_leds>:


void turn_on_odd_leds(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, RED1_LED, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <turn_on_odd_leds+0x38>)
 8000674:	f001 fa0a 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, RED2_LED, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <turn_on_odd_leds+0x38>)
 8000680:	f001 fa04 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, GREEN1_LED, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <turn_on_odd_leds+0x3c>)
 800068c:	f001 f9fe 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, GREEN2_LED, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <turn_on_odd_leds+0x3c>)
 8000696:	f001 f9f9 	bl	8001a8c <HAL_GPIO_WritePin>

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020400 	.word	0x40020400

080006a8 <LED_control>:


void LED_control(int val){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	for(int i=0; i<4; i++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e014      	b.n	80006e0 <LED_control+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, (RED1_LED << i), ((val >> i)& 0x1));
 80006b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	b299      	uxth	r1, r3
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	fa42 f303 	asr.w	r3, r2, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <LED_control+0x48>)
 80006d6:	f001 f9d9 	bl	8001a8c <HAL_GPIO_WritePin>
	for(int i=0; i<4; i++){
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	dde7      	ble.n	80006b6 <LED_control+0xe>
	}

}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020000 	.word	0x40020000

080006f4 <LED_effect1>:


// Toggle all LEDs
void LED_effect1(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <LED_effect1+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <LED_effect1+0x28>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <LED_effect1+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <LED_effect1+0x1e>
 800070c:	f7ff ff4c 	bl	80005a8 <turn_off_all_leds>

}
 8000710:	e001      	b.n	8000716 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000712:	f7ff ff69 	bl	80005e8 <turn_on_all_leds>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000000 	.word	0x20000000

08000720 <LED_effect2>:


// Toggle even and odd LEDs
void LED_effect2(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <LED_effect2+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f083 0301 	eor.w	r3, r3, #1
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <LED_effect2+0x28>)
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LED_effect2+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <LED_effect2+0x1e>
 8000738:	f7ff ff76 	bl	8000628 <turn_on_even_leds>

}
 800073c:	e001      	b.n	8000742 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800073e:	f7ff ff93 	bl	8000668 <turn_on_odd_leds>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000004 	.word	0x20000004

0800074c <LED_effect3>:


// Count up LEDs
void LED_effect3(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

	static int i = 0;
	LED_control( 0x1 << (i++ % 4));
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <LED_effect3+0x2c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <LED_effect3+0x2c>)
 8000758:	600a      	str	r2, [r1, #0]
 800075a:	425a      	negs	r2, r3
 800075c:	f003 0303 	and.w	r3, r3, #3
 8000760:	f002 0203 	and.w	r2, r2, #3
 8000764:	bf58      	it	pl
 8000766:	4253      	negpl	r3, r2
 8000768:	2201      	movs	r2, #1
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff9a 	bl	80006a8 <LED_control>

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000003c 	.word	0x2000003c

0800077c <LED_effect4>:


// Count down LEDs
void LED_effect4(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

	static int i = 0;
	LED_control( 0x08 >> (i++ % 4));
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <LED_effect4+0x2c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <LED_effect4+0x2c>)
 8000788:	600a      	str	r2, [r1, #0]
 800078a:	425a      	negs	r2, r3
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	f002 0203 	and.w	r2, r2, #3
 8000794:	bf58      	it	pl
 8000796:	4253      	negpl	r3, r2
 8000798:	2208      	movs	r2, #8
 800079a:	fa42 f303 	asr.w	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff82 	bl	80006a8 <LED_control>

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000040 	.word	0x20000040

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fe21 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f8ff 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f9bd 	bl	8000b38 <MX_GPIO_Init>
  MX_RTC_Init();
 80007be:	f000 f96b 	bl	8000a98 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80007c2:	f000 f98f 	bl	8000ae4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(menu_task_handler, "menu_task", 250, NULL, 2, &menu_task_handle);
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <main+0x1b4>)
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2302      	movs	r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	22fa      	movs	r2, #250	; 0xfa
 80007d2:	4964      	ldr	r1, [pc, #400]	; (8000964 <main+0x1b8>)
 80007d4:	4864      	ldr	r0, [pc, #400]	; (8000968 <main+0x1bc>)
 80007d6:	f004 fd8b 	bl	80052f0 <xTaskCreate>
 80007da:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d00a      	beq.n	80007f8 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e6:	f383 8811 	msr	BASEPRI, r3
 80007ea:	f3bf 8f6f 	isb	sy
 80007ee:	f3bf 8f4f 	dsb	sy
 80007f2:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007f4:	bf00      	nop
 80007f6:	e7fe      	b.n	80007f6 <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 250, NULL, 2, &cmd_task_handle);
 80007f8:	4b5c      	ldr	r3, [pc, #368]	; (800096c <main+0x1c0>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2302      	movs	r3, #2
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2300      	movs	r3, #0
 8000802:	22fa      	movs	r2, #250	; 0xfa
 8000804:	495a      	ldr	r1, [pc, #360]	; (8000970 <main+0x1c4>)
 8000806:	485b      	ldr	r0, [pc, #364]	; (8000974 <main+0x1c8>)
 8000808:	f004 fd72 	bl	80052f0 <xTaskCreate>
 800080c:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d00a      	beq.n	800082a <main+0x7e>
        __asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	61bb      	str	r3, [r7, #24]
    }
 8000826:	bf00      	nop
 8000828:	e7fe      	b.n	8000828 <main+0x7c>

  status = xTaskCreate(print_task_handler, "print_task", 250, NULL, 2, &print_task_handle);
 800082a:	4b53      	ldr	r3, [pc, #332]	; (8000978 <main+0x1cc>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	4951      	ldr	r1, [pc, #324]	; (800097c <main+0x1d0>)
 8000838:	4851      	ldr	r0, [pc, #324]	; (8000980 <main+0x1d4>)
 800083a:	f004 fd59 	bl	80052f0 <xTaskCreate>
 800083e:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00a      	beq.n	800085c <main+0xb0>
        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	617b      	str	r3, [r7, #20]
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <main+0xae>

  status = xTaskCreate(led_task_handler, "led_task", 250, NULL, 2, &led_task_handle);
 800085c:	4b49      	ldr	r3, [pc, #292]	; (8000984 <main+0x1d8>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	22fa      	movs	r2, #250	; 0xfa
 8000868:	4947      	ldr	r1, [pc, #284]	; (8000988 <main+0x1dc>)
 800086a:	4848      	ldr	r0, [pc, #288]	; (800098c <main+0x1e0>)
 800086c:	f004 fd40 	bl	80052f0 <xTaskCreate>
 8000870:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00a      	beq.n	800088e <main+0xe2>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	613b      	str	r3, [r7, #16]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <main+0xe0>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 250, NULL, 2, &rtc_task_handle);
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <main+0x1e4>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	22fa      	movs	r2, #250	; 0xfa
 800089a:	493e      	ldr	r1, [pc, #248]	; (8000994 <main+0x1e8>)
 800089c:	483e      	ldr	r0, [pc, #248]	; (8000998 <main+0x1ec>)
 800089e:	f004 fd27 	bl	80052f0 <xTaskCreate>
 80008a2:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00a      	beq.n	80008c0 <main+0x114>
        __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	60fb      	str	r3, [r7, #12]
    }
 80008bc:	bf00      	nop
 80008be:	e7fe      	b.n	80008be <main+0x112>

  q_data_handle = xQueueCreate(10, sizeof(char));
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	200a      	movs	r0, #10
 80008c6:	f003 ffa3 	bl	8004810 <xQueueGenericCreate>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a33      	ldr	r2, [pc, #204]	; (800099c <main+0x1f0>)
 80008ce:	6013      	str	r3, [r2, #0]

  configASSERT(q_data_handle != NULL);
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <main+0x1f0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10a      	bne.n	80008ee <main+0x142>
        __asm volatile
 80008d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008dc:	f383 8811 	msr	BASEPRI, r3
 80008e0:	f3bf 8f6f 	isb	sy
 80008e4:	f3bf 8f4f 	dsb	sy
 80008e8:	60bb      	str	r3, [r7, #8]
    }
 80008ea:	bf00      	nop
 80008ec:	e7fe      	b.n	80008ec <main+0x140>

  q_print_handle = xQueueCreate(10, sizeof(size_t));
 80008ee:	2200      	movs	r2, #0
 80008f0:	2104      	movs	r1, #4
 80008f2:	200a      	movs	r0, #10
 80008f4:	f003 ff8c 	bl	8004810 <xQueueGenericCreate>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <main+0x1f4>)
 80008fc:	6013      	str	r3, [r2, #0]

  configASSERT(q_print_handle != NULL);
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <main+0x1f4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <main+0x170>
        __asm volatile
 8000906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090a:	f383 8811 	msr	BASEPRI, r3
 800090e:	f3bf 8f6f 	isb	sy
 8000912:	f3bf 8f4f 	dsb	sy
 8000916:	607b      	str	r3, [r7, #4]
    }
 8000918:	bf00      	nop
 800091a:	e7fe      	b.n	800091a <main+0x16e>

  // Create software timers for LED effects
  for(int i=0; i<4; i++){
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
 8000920:	e013      	b.n	800094a <main+0x19e>
	  led_timer_handle[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	3301      	adds	r3, #1
 8000926:	461a      	mov	r2, r3
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <main+0x1f8>)
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000934:	481c      	ldr	r0, [pc, #112]	; (80009a8 <main+0x1fc>)
 8000936:	f005 fff1 	bl	800691c <xTimerCreate>
 800093a:	4602      	mov	r2, r0
 800093c:	491b      	ldr	r1, [pc, #108]	; (80009ac <main+0x200>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<4; i++){
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	3301      	adds	r3, #1
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	2b03      	cmp	r3, #3
 800094e:	dde8      	ble.n	8000922 <main+0x176>

  }

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	4917      	ldr	r1, [pc, #92]	; (80009b0 <main+0x204>)
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <main+0x208>)
 8000956:	f002 fe7e 	bl	8003656 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 800095a:	f004 fe33 	bl	80055c4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095e:	e7fe      	b.n	800095e <main+0x1b2>
 8000960:	200000a8 	.word	0x200000a8
 8000964:	08007810 	.word	0x08007810
 8000968:	08001011 	.word	0x08001011
 800096c:	200000ac 	.word	0x200000ac
 8000970:	0800781c 	.word	0x0800781c
 8000974:	080010f9 	.word	0x080010f9
 8000978:	200000b0 	.word	0x200000b0
 800097c:	08007828 	.word	0x08007828
 8000980:	08001215 	.word	0x08001215
 8000984:	200000b4 	.word	0x200000b4
 8000988:	08007834 	.word	0x08007834
 800098c:	08001255 	.word	0x08001255
 8000990:	200000b8 	.word	0x200000b8
 8000994:	08007840 	.word	0x08007840
 8000998:	08001381 	.word	0x08001381
 800099c:	200000bc 	.word	0x200000bc
 80009a0:	200000c0 	.word	0x200000c0
 80009a4:	08000c49 	.word	0x08000c49
 80009a8:	0800784c 	.word	0x0800784c
 80009ac:	200000c4 	.word	0x200000c4
 80009b0:	200000d4 	.word	0x200000d4
 80009b4:	20000064 	.word	0x20000064

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 fedc 	bl	8007784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <SystemClock_Config+0xd8>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <SystemClock_Config+0xd8>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0xd8>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <SystemClock_Config+0xdc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <SystemClock_Config+0xdc>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <SystemClock_Config+0xdc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a14:	230a      	movs	r3, #10
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a30:	2308      	movs	r3, #8
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a34:	23a8      	movs	r3, #168	; 0xa8
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fedf 	bl	800280c <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a54:	f000 f97c 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2105      	movs	r1, #5
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 f822 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a82:	f000 f965 	bl	8000d50 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_RTC_Init+0x44>)
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <MX_RTC_Init+0x48>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_RTC_Init+0x44>)
 8000aa4:	2240      	movs	r2, #64	; 0x40
 8000aa6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_RTC_Init+0x44>)
 8000aaa:	227f      	movs	r2, #127	; 0x7f
 8000aac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_RTC_Init+0x44>)
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_RTC_Init+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_RTC_Init+0x44>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_RTC_Init+0x44>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_RTC_Init+0x44>)
 8000ac8:	f002 f93e 	bl	8002d48 <HAL_RTC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ad2:	f000 f93d 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000044 	.word	0x20000044
 8000ae0:	40002800 	.word	0x40002800

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f002 fcbc 	bl	8003498 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 f913 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000064 	.word	0x20000064
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a38      	ldr	r2, [pc, #224]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_GPIO_Init+0x100>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000bc4:	481d      	ldr	r0, [pc, #116]	; (8000c3c <MX_GPIO_Init+0x104>)
 8000bc6:	f000 ff61 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000bd0:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000bd2:	f000 ff5b 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bdc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <MX_GPIO_Init+0x10c>)
 8000bee:	f000 fdb9 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin|LD3_Pin;
 8000bf2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_GPIO_Init+0x104>)
 8000c0c:	f000 fdaa 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin;
 8000c10:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000c2a:	f000 fd9b 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40020800 	.word	0x40020800

08000c48 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f006 f95d 	bl	8006f10 <pvTimerGetTimerID>
 8000c56:	4603      	mov	r3, r0
 8000c58:	60fb      	str	r3, [r7, #12]

	switch(id){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d816      	bhi.n	8000c90 <led_effect_callback+0x48>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <led_effect_callback+0x20>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000c7f 	.word	0x08000c7f
 8000c70:	08000c85 	.word	0x08000c85
 8000c74:	08000c8b 	.word	0x08000c8b
	case 1:
		LED_effect1();
 8000c78:	f7ff fd3c 	bl	80006f4 <LED_effect1>
		break;
 8000c7c:	e008      	b.n	8000c90 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000c7e:	f7ff fd4f 	bl	8000720 <LED_effect2>
		break;
 8000c82:	e005      	b.n	8000c90 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000c84:	f7ff fd62 	bl	800074c <LED_effect3>
		break;
 8000c88:	e002      	b.n	8000c90 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000c8a:	f7ff fd77 	bl	800077c <LED_effect4>
		break;
 8000c8e:	bf00      	nop
	}
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_UART_RxCpltCallback>:

// This function is called from the UART interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	if(!xQueueIsQueueFullFromISR(q_data_handle)){
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_UART_RxCpltCallback+0x84>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fa7a 	bl	800519e <xQueueIsQueueFullFromISR>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d107      	bne.n	8000cc0 <HAL_UART_RxCpltCallback+0x28>
		// Enqueue Data
		xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_UART_RxCpltCallback+0x84>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4919      	ldr	r1, [pc, #100]	; (8000d20 <HAL_UART_RxCpltCallback+0x88>)
 8000cba:	f003 ff19 	bl	8004af0 <xQueueGenericSendFromISR>
 8000cbe:	e013      	b.n	8000ce8 <HAL_UART_RxCpltCallback+0x50>
	}else{
		if(user_data == '\n'){
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_UART_RxCpltCallback+0x88>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b0a      	cmp	r3, #10
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_UART_RxCpltCallback+0x50>
			// Remove the last item in the Queue
			xQueueReceiveFromISR(q_data_handle, (void*)&dummy, NULL);
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_UART_RxCpltCallback+0x84>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f107 010f 	add.w	r1, r7, #15
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 f89d 	bl	8004e14 <xQueueReceiveFromISR>
			// Enqueue the \n
			xQueueSendFromISR(q_data_handle, (void*)&user_data, NULL);
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_UART_RxCpltCallback+0x84>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	490f      	ldr	r1, [pc, #60]	; (8000d20 <HAL_UART_RxCpltCallback+0x88>)
 8000ce4:	f003 ff04 	bl	8004af0 <xQueueGenericSendFromISR>
		}
	}

	// If data is \n then notify the cmd_task
	if(user_data == '\n'){
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_UART_RxCpltCallback+0x88>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d10a      	bne.n	8000d08 <HAL_UART_RxCpltCallback+0x70>
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_UART_RxCpltCallback+0x8c>)
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	f005 fbfc 	bl	8006500 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4905      	ldr	r1, [pc, #20]	; (8000d20 <HAL_UART_RxCpltCallback+0x88>)
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <HAL_UART_RxCpltCallback+0x90>)
 8000d0e:	f002 fca2 	bl	8003656 <HAL_UART_Receive_IT>


}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000bc 	.word	0x200000bc
 8000d20:	200000d4 	.word	0x200000d4
 8000d24:	200000ac 	.word	0x200000ac
 8000d28:	20000064 	.word	0x20000064

08000d2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3e:	f000 fb7d 	bl	800143c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40001000 	.word	0x40001000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09a      	sub	sp, #104	; 0x68
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	225c      	movs	r2, #92	; 0x5c
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 fce1 	bl	8007784 <memset>
  if(hrtc->Instance==RTC)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_RTC_MspInit+0x4c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d111      	bne.n	8000df0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dcc:	2320      	movs	r3, #32
 8000dce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 ffbc 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000de6:	f7ff ffb3 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_RTC_MspInit+0x50>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3768      	adds	r7, #104	; 0x68
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	42470e3c 	.word	0x42470e3c

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_UART_MspInit+0x94>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d133      	bne.n	8000e8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_UART_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_UART_MspInit+0x9c>)
 8000e76:	f000 fc75 	bl	8001764 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2106      	movs	r1, #6
 8000e7e:	2026      	movs	r0, #38	; 0x26
 8000e80:	f000 fbb4 	bl	80015ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e84:	2026      	movs	r0, #38	; 0x26
 8000e86:	f000 fbcd 	bl	8001624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_InitTick+0xe4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <HAL_InitTick+0xe4>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_InitTick+0xe4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ecc:	f107 0210 	add.w	r2, r7, #16
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 ff0c 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d103      	bne.n	8000eee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee6:	f000 fedd 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000eea:	6378      	str	r0, [r7, #52]	; 0x34
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eee:	f000 fed9 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <HAL_InitTick+0xe8>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	0c9b      	lsrs	r3, r3, #18
 8000f02:	3b01      	subs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_InitTick+0xec>)
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_InitTick+0xf0>)
 8000f0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_InitTick+0xec>)
 8000f0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_InitTick+0xec>)
 8000f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_InitTick+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_InitTick+0xec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_InitTick+0xec>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f2c:	4817      	ldr	r0, [pc, #92]	; (8000f8c <HAL_InitTick+0xec>)
 8000f2e:	f002 f805 	bl	8002f3c <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d11b      	bne.n	8000f78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <HAL_InitTick+0xec>)
 8000f42:	f002 f855 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d111      	bne.n	8000f78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f54:	2036      	movs	r0, #54	; 0x36
 8000f56:	f000 fb65 	bl	8001624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d808      	bhi.n	8000f72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	2036      	movs	r0, #54	; 0x36
 8000f66:	f000 fb41 	bl	80015ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_InitTick+0xf4>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e002      	b.n	8000f78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	431bde83 	.word	0x431bde83
 8000f8c:	200000d8 	.word	0x200000d8
 8000f90:	40001000 	.word	0x40001000
 8000f94:	20000010 	.word	0x20000010

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART2_IRQHandler+0x10>)
 8000fca:	f002 fb75 	bl	80036b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000064 	.word	0x20000064

08000fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM6_DAC_IRQHandler+0x10>)
 8000fde:	f002 f877 	bl	80030d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000d8 	.word	0x200000d8

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <menu_task_handler>:
void process_command(command_t* cmd);

const char* msg_inv = "//////Invalid Option//////\n";


void menu_task_handler(void* param){
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	int option;
	const char* msg_menu = "  =================== \n"
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <menu_task_handler+0xd0>)
 800101a:	60bb      	str	r3, [r7, #8]
							"Exit          ----> 2\n"
							"Enter your choice here: ";

	while(1){
		// Send message to the menu
		xQueueSend(q_print_handle, &msg_menu, portMAX_DELAY);
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <menu_task_handler+0xd4>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	f107 0108 	add.w	r1, r7, #8
 8001024:	2300      	movs	r3, #0
 8001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102a:	f003 fc63 	bl	80048f4 <xQueueGenericSend>

		// Wait for a response and put it into the cmd_addr
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001036:	9200      	str	r2, [sp, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f005 f8bd 	bl	80061bc <xTaskGenericNotifyWait>

		// Cast it to a command_t pointer and assign the address to cmd
		cmd = (command_t*)cmd_addr;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	617b      	str	r3, [r7, #20]

		// Ensure the cmd is a valid entry of length 1. Valid Commands: 0, 1, or 2
		if(cmd->len == 1){
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d133      	bne.n	80010b6 <menu_task_handler+0xa6>

			// Convert the ASCI to number by subtracting 48
			option = cmd->payload[0] - 48;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3b30      	subs	r3, #48	; 0x30
 8001054:	613b      	str	r3, [r7, #16]

			switch(option){
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d035      	beq.n	80010c8 <menu_task_handler+0xb8>
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b02      	cmp	r3, #2
 8001060:	dc20      	bgt.n	80010a4 <menu_task_handler+0x94>
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <menu_task_handler+0x60>
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d00d      	beq.n	800108a <menu_task_handler+0x7a>
 800106e:	e019      	b.n	80010a4 <menu_task_handler+0x94>
			case 0:
				// Led Effects
				curr_state = sLedEffect;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <menu_task_handler+0xd8>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task_handle, 0, eNoAction);
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <menu_task_handler+0xdc>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2300      	movs	r3, #0
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	f005 f91a 	bl	80062bc <xTaskGenericNotify>
				break;
 8001088:	e01f      	b.n	80010ca <menu_task_handler+0xba>
			case 1:
				// RTC Menu
				curr_state = sRtcMenu;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <menu_task_handler+0xd8>)
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(rtc_task_handle, 0, eNoAction);
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <menu_task_handler+0xe0>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2300      	movs	r3, #0
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	f005 f90d 	bl	80062bc <xTaskGenericNotify>
				break;
 80010a2:	e012      	b.n	80010ca <menu_task_handler+0xba>
			case 2:
				// Exit

				break;
			default:
				xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <menu_task_handler+0xd4>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	2300      	movs	r3, #0
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ae:	4911      	ldr	r1, [pc, #68]	; (80010f4 <menu_task_handler+0xe4>)
 80010b0:	f003 fc20 	bl	80048f4 <xQueueGenericSend>
				continue;
 80010b4:	e012      	b.n	80010dc <menu_task_handler+0xcc>
			}

		}else{

			// Invalid Entry
			xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <menu_task_handler+0xd4>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <menu_task_handler+0xe4>)
 80010c2:	f003 fc17 	bl	80048f4 <xQueueGenericSend>
 80010c6:	e000      	b.n	80010ca <menu_task_handler+0xba>
				break;
 80010c8:	bf00      	nop

		}

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f005 f870 	bl	80061bc <xTaskGenericNotifyWait>
		xQueueSend(q_print_handle, &msg_menu, portMAX_DELAY);
 80010dc:	e79e      	b.n	800101c <menu_task_handler+0xc>
 80010de:	bf00      	nop
 80010e0:	08007874 	.word	0x08007874
 80010e4:	200000c0 	.word	0x200000c0
 80010e8:	200000d5 	.word	0x200000d5
 80010ec:	200000b4 	.word	0x200000b4
 80010f0:	200000b8 	.word	0x200000b8
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <cmd_task_handler>:

	}
}


void cmd_task_handler(void* param){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	command_t command;

	while(1){

		// Notify wait until notification
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f005 f855 	bl	80061bc <xTaskGenericNotifyWait>
 8001112:	6178      	str	r0, [r7, #20]
		// Process the user data(command) stored in input data queue
		if(returnedVal == pdTRUE){
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d1f2      	bne.n	8001100 <cmd_task_handler+0x8>
			process_command(&command);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f802 	bl	8001128 <process_command>
		returnedVal = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001124:	e7ec      	b.n	8001100 <cmd_task_handler+0x8>
	...

08001128 <process_command>:
		// Notify the command to relevant task
	}
}

// Helper function for Command
void process_command(command_t* cmd){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f835 	bl	80011a0 <extract_command>

	switch(curr_state){
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <process_command+0x68>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b05      	cmp	r3, #5
 800113c:	dc24      	bgt.n	8001188 <process_command+0x60>
 800113e:	2b02      	cmp	r3, #2
 8001140:	da18      	bge.n	8001174 <process_command+0x4c>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <process_command+0x24>
 8001146:	2b01      	cmp	r3, #1
 8001148:	d00a      	beq.n	8001160 <process_command+0x38>
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}
 800114a:	e01d      	b.n	8001188 <process_command+0x60>
		xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <process_command+0x6c>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2303      	movs	r3, #3
 8001158:	2100      	movs	r1, #0
 800115a:	f005 f8af 	bl	80062bc <xTaskGenericNotify>
		break;
 800115e:	e013      	b.n	8001188 <process_command+0x60>
		xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <process_command+0x70>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	2300      	movs	r3, #0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2303      	movs	r3, #3
 800116c:	2100      	movs	r1, #0
 800116e:	f005 f8a5 	bl	80062bc <xTaskGenericNotify>
		break;
 8001172:	e009      	b.n	8001188 <process_command+0x60>
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <process_command+0x74>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2303      	movs	r3, #3
 8001180:	2100      	movs	r1, #0
 8001182:	f005 f89b 	bl	80062bc <xTaskGenericNotify>
		break;
 8001186:	bf00      	nop
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000d5 	.word	0x200000d5
 8001194:	200000a8 	.word	0x200000a8
 8001198:	200000b4 	.word	0x200000b4
 800119c:	200000b8 	.word	0x200000b8

080011a0 <extract_command>:

// Helper Function for Process_Command
int extract_command(command_t* cmd){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data_handle);
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <extract_command+0x70>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fec8 	bl	8004f42 <uxQueueMessagesWaiting>
 80011b2:	4603      	mov	r3, r0
 80011b4:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <extract_command+0x22>
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c0:	e022      	b.n	8001208 <extract_command+0x68>
	uint8_t i = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data_handle, &item, 0);
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <extract_command+0x70>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f107 010f 	add.w	r1, r7, #15
 80011ce:	2200      	movs	r2, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fd3f 	bl	8004c54 <xQueueReceive>
 80011d6:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d106      	bne.n	80011ec <extract_command+0x4c>
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	75fa      	strb	r2, [r7, #23]
 80011e4:	461a      	mov	r2, r3
 80011e6:	7bf9      	ldrb	r1, [r7, #15]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d1e9      	bne.n	80011c6 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	2100      	movs	r1, #0
 80011fa:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	3b01      	subs	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	729a      	strb	r2, [r3, #10]

	return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000bc 	.word	0x200000bc

08001214 <print_task_handler>:


void print_task_handler(void* param){
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	uint32_t* msg;
	while(1){
		xQueueReceive(q_print_handle, &msg, portMAX_DELAY);
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <print_task_handler+0x38>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fd13 	bl	8004c54 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800122e:	68fc      	ldr	r4, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4618      	mov	r0, r3
 8001234:	f7fe fff6 	bl	8000224 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001240:	4621      	mov	r1, r4
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <print_task_handler+0x3c>)
 8001244:	f002 f975 	bl	8003532 <HAL_UART_Transmit>
		xQueueReceive(q_print_handle, &msg, portMAX_DELAY);
 8001248:	e7e8      	b.n	800121c <print_task_handler+0x8>
 800124a:	bf00      	nop
 800124c:	200000c0 	.word	0x200000c0
 8001250:	20000064 	.word	0x20000064

08001254 <led_task_handler>:

	}
}

void led_task_handler(void* param){
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	const char* msg_led = "  =================== \n"
 800125c:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <led_task_handler+0x104>)
 800125e:	60fb      	str	r3, [r7, #12]
							"Enter your choice here: ";

	while(1){

		// TODO: Wait for notification (Notify Wait)
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2000      	movs	r0, #0
 800126e:	f004 ffa5 	bl	80061bc <xTaskGenericNotifyWait>

		// TODO: Print LED menu
		xQueueSend(q_print_handle, &msg_led, portMAX_DELAY);
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <led_task_handler+0x108>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f107 010c 	add.w	r1, r7, #12
 800127a:	2300      	movs	r3, #0
 800127c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001280:	f003 fb38 	bl	80048f4 <xQueueGenericSend>

		// TODO: wait for LED commands (Notify Wait)
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2000      	movs	r0, #0
 8001294:	f004 ff92 	bl	80061bc <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4){
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	7a9b      	ldrb	r3, [r3, #10]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d843      	bhi.n	800132c <led_task_handler+0xd8>
			if(! strcmp((char*)cmd->payload, "none")){
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	492e      	ldr	r1, [pc, #184]	; (8001360 <led_task_handler+0x10c>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ffb1 	bl	8000210 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <led_task_handler+0x66>
				led_effect_stop();
 80012b4:	f7ff f93c 	bl	8000530 <led_effect_stop>
 80012b8:	e7d2      	b.n	8001260 <led_task_handler+0xc>
			}else if(! strcmp((char*)cmd->payload, "e1")){
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4929      	ldr	r1, [pc, #164]	; (8001364 <led_task_handler+0x110>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ffa6 	bl	8000210 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <led_task_handler+0x7e>
				led_effect(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff f950 	bl	8000570 <led_effect>
 80012d0:	e7c6      	b.n	8001260 <led_task_handler+0xc>
			}else if(! strcmp((char*)cmd->payload, "e2")){
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4924      	ldr	r1, [pc, #144]	; (8001368 <led_task_handler+0x114>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff9a 	bl	8000210 <strcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <led_task_handler+0x96>
				led_effect(2);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff f944 	bl	8000570 <led_effect>
 80012e8:	e7ba      	b.n	8001260 <led_task_handler+0xc>
			}else if(! strcmp((char*)cmd->payload, "e3")){
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	491f      	ldr	r1, [pc, #124]	; (800136c <led_task_handler+0x118>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff8e 	bl	8000210 <strcmp>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <led_task_handler+0xae>
				led_effect(3);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f7ff f938 	bl	8000570 <led_effect>
 8001300:	e7ae      	b.n	8001260 <led_task_handler+0xc>
			}else if(! strcmp((char*)cmd->payload, "e4")){
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	491a      	ldr	r1, [pc, #104]	; (8001370 <led_task_handler+0x11c>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ff82 	bl	8000210 <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <led_task_handler+0xc6>
				led_effect(4);
 8001312:	2004      	movs	r0, #4
 8001314:	f7ff f92c 	bl	8000570 <led_effect>
 8001318:	e7a2      	b.n	8001260 <led_task_handler+0xc>
			}else{
				xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <led_task_handler+0x108>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001324:	4913      	ldr	r1, [pc, #76]	; (8001374 <led_task_handler+0x120>)
 8001326:	f003 fae5 	bl	80048f4 <xQueueGenericSend>
 800132a:	e799      	b.n	8001260 <led_task_handler+0xc>
			}
		}else{
			// TODO: print Invalid Message
			xQueueSend(q_print_handle, &msg_inv, portMAX_DELAY);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <led_task_handler+0x108>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001336:	490f      	ldr	r1, [pc, #60]	; (8001374 <led_task_handler+0x120>)
 8001338:	f003 fadc 	bl	80048f4 <xQueueGenericSend>

			// TODO: update state variable
			curr_state = sMainMenu;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <led_task_handler+0x124>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]

			// TODO: Notify menu task
			xTaskNotify(menu_task_handle, 0, eNoAction);
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <led_task_handler+0x128>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	f004 ffb4 	bl	80062bc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001354:	e784      	b.n	8001260 <led_task_handler+0xc>
 8001356:	bf00      	nop
 8001358:	08007914 	.word	0x08007914
 800135c:	200000c0 	.word	0x200000c0
 8001360:	08007988 	.word	0x08007988
 8001364:	08007990 	.word	0x08007990
 8001368:	08007994 	.word	0x08007994
 800136c:	08007998 	.word	0x08007998
 8001370:	0800799c 	.word	0x0800799c
 8001374:	2000000c 	.word	0x2000000c
 8001378:	200000d5 	.word	0x200000d5
 800137c:	200000a8 	.word	0x200000a8

08001380 <rtc_task_handler>:
		}

	}
}

void rtc_task_handler(void* param){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]

	const char* msg_test = "+";
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <rtc_task_handler+0x20>)
 800138a:	60fb      	str	r3, [r7, #12]

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2000      	movs	r0, #0
 800139a:	f004 ff0f 	bl	80061bc <xTaskGenericNotifyWait>
 800139e:	e7f5      	b.n	800138c <rtc_task_handler+0xc>
 80013a0:	080079a0 	.word	0x080079a0

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ce:	f7ff fe0d 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f006 f9df 	bl	8007794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff f9e9 	bl	80007ac <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80013e8:	080079e4 	.word	0x080079e4
  ldr r2, =_sbss
 80013ec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80013f0:	20012ec8 	.word	0x20012ec8

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f8d8 	bl	80015d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f7ff fd3a 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fc96 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000014 	.word	0x20000014
 8001460:	20000120 	.word	0x20000120

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000120 	.word	0x20000120

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff4c 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fe:	f7ff ff61 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7ff ffb1 	bl	8001570 <NVIC_EncodePriority>
 800160e:	4602      	mov	r2, r0
 8001610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff80 	bl	800151c <__NVIC_SetPriority>
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff54 	bl	80014e0 <__NVIC_EnableIRQ>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800164e:	f7ff ff09 	bl	8001464 <HAL_GetTick>
 8001652:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e052      	b.n	8001718 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0216 	bic.w	r2, r2, #22
 8001680:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001690:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <HAL_DMA_Abort+0x62>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0208 	bic.w	r2, r2, #8
 80016b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0201 	bic.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c2:	e013      	b.n	80016ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c4:	f7ff fece 	bl	8001464 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d90c      	bls.n	80016ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2220      	movs	r2, #32
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2203      	movs	r2, #3
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e015      	b.n	8001718 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e4      	bne.n	80016c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	223f      	movs	r2, #63	; 0x3f
 8001700:	409a      	lsls	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e165      	b.n	8001a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8154 	bne.w	8001a46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ae 	beq.w	8001a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a5c      	ldr	r2, [pc, #368]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x308>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x21a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <HAL_GPIO_Init+0x30c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x216>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4d      	ldr	r2, [pc, #308]	; (8001a74 <HAL_GPIO_Init+0x310>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x212>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <HAL_GPIO_Init+0x314>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_GPIO_Init+0x318>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x20a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x31c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x206>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x320>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x202>
 8001962:	2306      	movs	r3, #6
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001966:	2307      	movs	r3, #7
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae96 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0cc      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d90c      	bls.n	8001afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b65      	ldr	r3, [pc, #404]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b8      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b2c:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	494d      	ldr	r1, [pc, #308]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d044      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d119      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e07f      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06f      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e067      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4934      	ldr	r1, [pc, #208]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff fc58 	bl	8001464 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff fc54 	bl	8001464 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e04f      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d20c      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e032      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4916      	ldr	r1, [pc, #88]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	490e      	ldr	r1, [pc, #56]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c46:	f000 fbb1 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	490a      	ldr	r1, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	5ccb      	ldrb	r3, [r1, r3]
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f91a 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	080079bc 	.word	0x080079bc
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	080079cc 	.word	0x080079cc

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	080079cc 	.word	0x080079cc

08001cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d90:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d96:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	496c      	ldr	r1, [pc, #432]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001dae:	2301      	movs	r3, #1
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001dbe:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	4960      	ldr	r1, [pc, #384]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4955      	ldr	r1, [pc, #340]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d017      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	4946      	ldr	r1, [pc, #280]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e46:	d101      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 808a 	beq.w	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e82:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a33      	ldr	r2, [pc, #204]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e8e:	f7ff fae9 	bl	8001464 <HAL_GetTick>
 8001e92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff fae5 	bl	8001464 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e278      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb4:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d02f      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d028      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eda:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d114      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fab3 	bl	8001464 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff faaf 	bl	8001464 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e240      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ee      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f30:	d114      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f46:	4902      	ldr	r1, [pc, #8]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
 8001f4c:	e00c      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42470e40 	.word	0x42470e40
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a49      	ldr	r2, [pc, #292]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f66:	6093      	str	r3, [r2, #8]
 8001f68:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	4944      	ldr	r1, [pc, #272]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001f8e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	492e      	ldr	r1, [pc, #184]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d011      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4926      	ldr	r1, [pc, #152]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ffe:	d101      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002000:	2301      	movs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	491a      	ldr	r1, [pc, #104]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	2b00      	cmp	r3, #0
 8002030:	d011      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002038:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002040:	4911      	ldr	r1, [pc, #68]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002050:	d101      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002052:	2301      	movs	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002064:	f040 80ff 	bne.w	8002266 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800206e:	f7ff f9f9 	bl	8001464 <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002074:	e00e      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002076:	f7ff f9f5 	bl	8001464 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d907      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e188      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002088:	40023800 	.word	0x40023800
 800208c:	424711e0 	.word	0x424711e0
 8002090:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002094:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ea      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d028      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d124      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020c8:	4b71      	ldr	r3, [pc, #452]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	3301      	adds	r3, #1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e0:	0e1b      	lsrs	r3, r3, #24
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	431a      	orrs	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	3b01      	subs	r3, #1
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	431a      	orrs	r2, r3
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	071b      	lsls	r3, r3, #28
 800210a:	4961      	ldr	r1, [pc, #388]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002130:	2b00      	cmp	r3, #0
 8002132:	d035      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800213c:	d130      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002144:	0c1b      	lsrs	r3, r3, #16
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002150:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002156:	0f1b      	lsrs	r3, r3, #28
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	019b      	lsls	r3, r3, #6
 8002168:	431a      	orrs	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	3b01      	subs	r3, #1
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	431a      	orrs	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	071b      	lsls	r3, r3, #28
 8002180:	4943      	ldr	r1, [pc, #268]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800218a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218e:	f023 021f 	bic.w	r2, r3, #31
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	493d      	ldr	r1, [pc, #244]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d029      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b4:	d124      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ce:	0f1b      	lsrs	r3, r3, #28
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	019b      	lsls	r3, r3, #6
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	3b01      	subs	r3, #1
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	431a      	orrs	r2, r3
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	071b      	lsls	r3, r3, #28
 80021f8:	4925      	ldr	r1, [pc, #148]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002208:	2b00      	cmp	r3, #0
 800220a:	d016      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	071b      	lsls	r3, r3, #28
 8002232:	4917      	ldr	r1, [pc, #92]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002240:	f7ff f910 	bl	8001464 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002248:	f7ff f90c 	bl	8001464 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e09f      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	2b01      	cmp	r3, #1
 800226a:	f040 8095 	bne.w	8002398 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002274:	f7ff f8f6 	bl	8001464 <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800227a:	e00f      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800227c:	f7ff f8f2 	bl	8001464 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d908      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e085      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	42470068 	.word	0x42470068
 8002298:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800229c:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a8:	d0e8      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x566>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02b      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d127      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	3301      	adds	r3, #1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	061b      	lsls	r3, r3, #24
 8002300:	4928      	ldr	r1, [pc, #160]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	3b01      	subs	r3, #1
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01d      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002336:	d118      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	0e1b      	lsrs	r3, r3, #24
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4910      	ldr	r1, [pc, #64]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002370:	f7ff f878 	bl	8001464 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002378:	f7ff f874 	bl	8001464 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e007      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002396:	d1ef      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3730      	adds	r7, #48	; 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	42470070 	.word	0x42470070

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b0ae      	sub	sp, #184	; 0xb8
 80023b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d2:	4bcb      	ldr	r3, [pc, #812]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	f200 8206 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x440>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	0800241d 	.word	0x0800241d
 80023ec:	080027ed 	.word	0x080027ed
 80023f0:	080027ed 	.word	0x080027ed
 80023f4:	080027ed 	.word	0x080027ed
 80023f8:	08002425 	.word	0x08002425
 80023fc:	080027ed 	.word	0x080027ed
 8002400:	080027ed 	.word	0x080027ed
 8002404:	080027ed 	.word	0x080027ed
 8002408:	0800242d 	.word	0x0800242d
 800240c:	080027ed 	.word	0x080027ed
 8002410:	080027ed 	.word	0x080027ed
 8002414:	080027ed 	.word	0x080027ed
 8002418:	0800261d 	.word	0x0800261d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4bb9      	ldr	r3, [pc, #740]	; (8002704 <HAL_RCC_GetSysClockFreq+0x358>)
 800241e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002422:	e1e7      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4bb8      	ldr	r3, [pc, #736]	; (8002708 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800242a:	e1e3      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800242c:	4bb4      	ldr	r3, [pc, #720]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002438:	4bb1      	ldr	r3, [pc, #708]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d071      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4bae      	ldr	r3, [pc, #696]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002450:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800246a:	4622      	mov	r2, r4
 800246c:	462b      	mov	r3, r5
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4621      	mov	r1, r4
 8002484:	1a51      	subs	r1, r2, r1
 8002486:	6439      	str	r1, [r7, #64]	; 0x40
 8002488:	4629      	mov	r1, r5
 800248a:	eb63 0301 	sbc.w	r3, r3, r1
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800249c:	4649      	mov	r1, r9
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	4641      	mov	r1, r8
 80024a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a6:	4641      	mov	r1, r8
 80024a8:	018a      	lsls	r2, r1, #6
 80024aa:	4641      	mov	r1, r8
 80024ac:	1a51      	subs	r1, r2, r1
 80024ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80024b0:	4649      	mov	r1, r9
 80024b2:	eb63 0301 	sbc.w	r3, r3, r1
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80024c4:	4649      	mov	r1, r9
 80024c6:	00cb      	lsls	r3, r1, #3
 80024c8:	4641      	mov	r1, r8
 80024ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ce:	4641      	mov	r1, r8
 80024d0:	00ca      	lsls	r2, r1, #3
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	4622      	mov	r2, r4
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
 80024de:	462b      	mov	r3, r5
 80024e0:	460a      	mov	r2, r1
 80024e2:	eb42 0303 	adc.w	r3, r2, r3
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024f4:	4629      	mov	r1, r5
 80024f6:	024b      	lsls	r3, r1, #9
 80024f8:	4621      	mov	r1, r4
 80024fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024fe:	4621      	mov	r1, r4
 8002500:	024a      	lsls	r2, r1, #9
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002514:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002518:	f7fd fe8c 	bl	8000234 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002526:	e067      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002534:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	67bb      	str	r3, [r7, #120]	; 0x78
 8002542:	2300      	movs	r3, #0
 8002544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002546:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	62b9      	str	r1, [r7, #40]	; 0x28
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800257c:	4649      	mov	r1, r9
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4641      	mov	r1, r8
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4641      	mov	r1, r8
 800258c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002590:	4649      	mov	r1, r9
 8002592:	eb63 0b01 	sbc.w	fp, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025aa:	4692      	mov	sl, r2
 80025ac:	469b      	mov	fp, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb1a 0303 	adds.w	r3, sl, r3
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb4b 0303 	adc.w	r3, fp, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025ca:	4629      	mov	r1, r5
 80025cc:	028b      	lsls	r3, r1, #10
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d4:	4621      	mov	r1, r4
 80025d6:	028a      	lsls	r2, r1, #10
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025e0:	2200      	movs	r2, #0
 80025e2:	673b      	str	r3, [r7, #112]	; 0x70
 80025e4:	677a      	str	r2, [r7, #116]	; 0x74
 80025e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80025ea:	f7fd fe23 	bl	8000234 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4613      	mov	r3, r2
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f8:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800260a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800260e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800261a:	e0eb      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800261c:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002628:	4b35      	ldr	r3, [pc, #212]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d06b      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	2200      	movs	r2, #0
 800263c:	66bb      	str	r3, [r7, #104]	; 0x68
 800263e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002646:	663b      	str	r3, [r7, #96]	; 0x60
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
 800264c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002650:	4622      	mov	r2, r4
 8002652:	462b      	mov	r3, r5
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	0159      	lsls	r1, r3, #5
 800265e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002662:	0150      	lsls	r0, r2, #5
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4621      	mov	r1, r4
 800266a:	1a51      	subs	r1, r2, r1
 800266c:	61b9      	str	r1, [r7, #24]
 800266e:	4629      	mov	r1, r5
 8002670:	eb63 0301 	sbc.w	r3, r3, r1
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002682:	4659      	mov	r1, fp
 8002684:	018b      	lsls	r3, r1, #6
 8002686:	4651      	mov	r1, sl
 8002688:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268c:	4651      	mov	r1, sl
 800268e:	018a      	lsls	r2, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ebb2 0801 	subs.w	r8, r2, r1
 8002696:	4659      	mov	r1, fp
 8002698:	eb63 0901 	sbc.w	r9, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026b0:	4690      	mov	r8, r2
 80026b2:	4699      	mov	r9, r3
 80026b4:	4623      	mov	r3, r4
 80026b6:	eb18 0303 	adds.w	r3, r8, r3
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	462b      	mov	r3, r5
 80026be:	eb49 0303 	adc.w	r3, r9, r3
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026d0:	4629      	mov	r1, r5
 80026d2:	024b      	lsls	r3, r1, #9
 80026d4:	4621      	mov	r1, r4
 80026d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026da:	4621      	mov	r1, r4
 80026dc:	024a      	lsls	r2, r1, #9
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026e6:	2200      	movs	r2, #0
 80026e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026f0:	f7fd fda0 	bl	8000234 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4613      	mov	r3, r2
 80026fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026fe:	e065      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x420>
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270c:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCC_GetSysClockFreq+0x458>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	2200      	movs	r2, #0
 8002714:	4618      	mov	r0, r3
 8002716:	4611      	mov	r1, r2
 8002718:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800271c:	653b      	str	r3, [r7, #80]	; 0x50
 800271e:	2300      	movs	r3, #0
 8002720:	657b      	str	r3, [r7, #84]	; 0x54
 8002722:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002726:	4642      	mov	r2, r8
 8002728:	464b      	mov	r3, r9
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002738:	0150      	lsls	r0, r2, #5
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4641      	mov	r1, r8
 8002740:	1a51      	subs	r1, r2, r1
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	4649      	mov	r1, r9
 8002746:	eb63 0301 	sbc.w	r3, r3, r1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002758:	4659      	mov	r1, fp
 800275a:	018b      	lsls	r3, r1, #6
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002762:	4651      	mov	r1, sl
 8002764:	018a      	lsls	r2, r1, #6
 8002766:	4651      	mov	r1, sl
 8002768:	1a54      	subs	r4, r2, r1
 800276a:	4659      	mov	r1, fp
 800276c:	eb63 0501 	sbc.w	r5, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027b4:	2200      	movs	r2, #0
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027be:	f7fd fd39 	bl	8000234 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4613      	mov	r3, r2
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0f1b      	lsrs	r3, r3, #28
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80027da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ea:	e003      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	37b8      	adds	r7, #184	; 0xb8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	00f42400 	.word	0x00f42400

0800280c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e28d      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8083 	beq.w	8002932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800282c:	4b94      	ldr	r3, [pc, #592]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b04      	cmp	r3, #4
 8002836:	d019      	beq.n	800286c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002838:	4b91      	ldr	r3, [pc, #580]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002840:	2b08      	cmp	r3, #8
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002844:	4b8e      	ldr	r3, [pc, #568]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b8b      	ldr	r3, [pc, #556]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b84      	ldr	r3, [pc, #528]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x124>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e25a      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x90>
 800288e:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7b      	ldr	r2, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xcc>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0xb4>
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a75      	ldr	r2, [pc, #468]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a72      	ldr	r2, [pc, #456]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xcc>
 80028c0:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6b      	ldr	r2, [pc, #428]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fdc0 	bl	8001464 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fdbc 	bl	8001464 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e21f      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xdc>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fdac 	bl	8001464 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fda8 	bl	8001464 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e20b      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x104>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d06f      	beq.n	8002a1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800294a:	4b4d      	ldr	r3, [pc, #308]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002952:	2b08      	cmp	r3, #8
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x186>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1d3      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4937      	ldr	r1, [pc, #220]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e03a      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_RCC_OscConfig+0x278>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fd55 	bl	8001464 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe fd51 	bl	8001464 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1b4      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4925      	ldr	r1, [pc, #148]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x278>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fd34 	bl	8001464 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fd30 	bl	8001464 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e193      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d036      	beq.n	8002a98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fd14 	bl	8001464 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe fd10 	bl	8001464 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e173      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x234>
 8002a5e:	e01b      	b.n	8002a98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fcfd 	bl	8001464 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	e00e      	b.n	8002a8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fcf9 	bl	8001464 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d907      	bls.n	8002a8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e15c      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470000 	.word	0x42470000
 8002a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ea      	bne.n	8002a6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8097 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a7e      	ldr	r2, [pc, #504]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fcb9 	bl	8001464 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe fcb5 	bl	8001464 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e118      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x31e>
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a65      	ldr	r2, [pc, #404]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
 8002b28:	e01c      	b.n	8002b64 <HAL_RCC_OscConfig+0x358>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x340>
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a60      	ldr	r2, [pc, #384]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	4b5e      	ldr	r3, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0x358>
 8002b4c:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a59      	ldr	r2, [pc, #356]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	4b57      	ldr	r3, [pc, #348]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a56      	ldr	r2, [pc, #344]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fc7a 	bl	8001464 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fc76 	bl	8001464 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0d7      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ee      	beq.n	8002b74 <HAL_RCC_OscConfig+0x368>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fc64 	bl	8001464 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fc60 	bl	8001464 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0c1      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ee      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	4a3a      	ldr	r2, [pc, #232]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80ad 	beq.w	8002d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d060      	beq.n	8002cac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d145      	bne.n	8002c7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <HAL_RCC_OscConfig+0x4b4>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fc34 	bl	8001464 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fc30 	bl	8001464 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e093      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x4b4>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fc05 	bl	8001464 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fc01 	bl	8001464 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e064      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x452>
 8002c7c:	e05c      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x4b4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fbee 	bl	8001464 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fbea 	bl	8001464 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04d      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x480>
 8002caa:	e045      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e040      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d030      	beq.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d129      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d122      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d119      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d10f      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e066      	b.n	8002e2c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7f5b      	ldrb	r3, [r3, #29]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe f81c 	bl	8000dac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	22ca      	movs	r2, #202	; 0xca
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2253      	movs	r2, #83	; 0x53
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f87a 	bl	8002e84 <RTC_EnterInitMode>
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12c      	bne.n	8002df4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68d2      	ldr	r2, [r2, #12]
 8002dd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6919      	ldr	r1, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f881 	bl	8002ef2 <RTC_ExitInitMode>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e50:	f7fe fb08 	bl	8001464 <HAL_GetTick>
 8002e54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e56:	e009      	b.n	8002e6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e58:	f7fe fb04 	bl	8001464 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e66:	d901      	bls.n	8002e6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e007      	b.n	8002e7c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ee      	beq.n	8002e58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d122      	bne.n	8002ee8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eb2:	f7fe fad7 	bl	8001464 <HAL_GetTick>
 8002eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002eb8:	e00c      	b.n	8002ed4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eba:	f7fe fad3 	bl	8001464 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec8:	d904      	bls.n	8002ed4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <RTC_EnterInitMode+0x64>
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d1e8      	bne.n	8002eba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff89 	bl	8002e34 <HAL_RTC_WaitForSynchro>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e041      	b.n	8002fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f839 	bl	8002fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 f9d8 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04e      	b.n	80030a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d01d      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_TIM_Base_Start_IT+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d111      	bne.n	8003094 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d010      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003092:	e007      	b.n	80030a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40010400 	.word	0x40010400
 80030c8:	40014000 	.word	0x40014000
 80030cc:	40001800 	.word	0x40001800

080030d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0202 	mvn.w	r2, #2
 80030fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8ee 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f8e0 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f8f1 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0204 	mvn.w	r2, #4
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8c4 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8b6 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8c7 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0208 	mvn.w	r2, #8
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f89a 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f88c 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f89d 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0210 	mvn.w	r2, #16
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2208      	movs	r2, #8
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f870 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f862 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f873 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0201 	mvn.w	r2, #1
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fd6c 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f902 	bl	8003484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f838 	bl	800331c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0220 	mvn.w	r2, #32
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8cc 	bl	8003470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a40      	ldr	r2, [pc, #256]	; (8003444 <TIM_Base_SetConfig+0x114>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <TIM_Base_SetConfig+0x118>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3c      	ldr	r2, [pc, #240]	; (800344c <TIM_Base_SetConfig+0x11c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <TIM_Base_SetConfig+0x120>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <TIM_Base_SetConfig+0x124>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <TIM_Base_SetConfig+0x114>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d027      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2c      	ldr	r2, [pc, #176]	; (8003448 <TIM_Base_SetConfig+0x118>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d023      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <TIM_Base_SetConfig+0x11c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <TIM_Base_SetConfig+0x120>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a29      	ldr	r2, [pc, #164]	; (8003454 <TIM_Base_SetConfig+0x124>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <TIM_Base_SetConfig+0x128>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a27      	ldr	r2, [pc, #156]	; (800345c <TIM_Base_SetConfig+0x12c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <TIM_Base_SetConfig+0x130>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <TIM_Base_SetConfig+0x134>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <TIM_Base_SetConfig+0x138>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <TIM_Base_SetConfig+0x13c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <TIM_Base_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0xf8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <TIM_Base_SetConfig+0x124>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40010000 	.word	0x40010000
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800
 8003450:	40000c00 	.word	0x40000c00
 8003454:	40010400 	.word	0x40010400
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	40001800 	.word	0x40001800
 8003468:	40001c00 	.word	0x40001c00
 800346c:	40002000 	.word	0x40002000

08003470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e03f      	b.n	800352a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fc9e 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fddf 	bl	80040a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08a      	sub	sp, #40	; 0x28
 8003536:	af02      	add	r7, sp, #8
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d17c      	bne.n	800364c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UART_Transmit+0x2c>
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e075      	b.n	800364e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x3e>
 800356c:	2302      	movs	r3, #2
 800356e:	e06e      	b.n	800364e <HAL_UART_Transmit+0x11c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	; 0x21
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003586:	f7fd ff6d 	bl	8001464 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Transmit+0x82>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035c4:	e02a      	b.n	800361c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fb1f 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e036      	b.n	800364e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3302      	adds	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e007      	b.n	800360e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1cf      	bne.n	80035c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 faef 	bl	8003c14 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	4613      	mov	r3, r2
 8003662:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	d11d      	bne.n	80036ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_UART_Receive_IT+0x26>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e016      	b.n	80036ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_UART_Receive_IT+0x38>
 800368a:	2302      	movs	r3, #2
 800368c:	e00f      	b.n	80036ae <HAL_UART_Receive_IT+0x58>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	461a      	mov	r2, r3
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fb24 	bl	8003cf0 <UART_Start_Receive_IT>
 80036a8:	4603      	mov	r3, r0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0ba      	sub	sp, #232	; 0xe8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fc07 	bl	8003f2a <UART_Receive_IT>
      return;
 800371c:	e256      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80de 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003738:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d1 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 81ed 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fb92 	bl	8003f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_UART_IRQHandler+0x17a>
 800382a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa9a 	bl	8003d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d141      	bne.n	80038ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3314      	adds	r3, #20
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800387e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <HAL_UART_IRQHandler+0x3dc>)
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd ff3a 	bl	8001720 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00e      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f990 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00a      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f98c 	bl	8003be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e006      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f988 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038de:	e170      	b.n	8003bc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	bf00      	nop
    return;
 80038e2:	e16e      	b.n	8003bc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 814a 	bne.w	8003b82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8143 	beq.w	8003b82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 813c 	beq.w	8003b82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	f040 80b4 	bne.w	8003a98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8140 	beq.w	8003bc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800394e:	429a      	cmp	r2, r3
 8003950:	f080 8139 	bcs.w	8003bc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003966:	f000 8088 	beq.w	8003a7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1d9      	bne.n	800396a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3314      	adds	r3, #20
 80039bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e1      	bne.n	80039b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3314      	adds	r3, #20
 8003a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e3      	bne.n	8003a38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fde3 	bl	8001640 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8b6 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a90:	e099      	b.n	8003bc6 <HAL_UART_IRQHandler+0x50e>
 8003a92:	bf00      	nop
 8003a94:	08003e33 	.word	0x08003e33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 808b 	beq.w	8003bca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8086 	beq.w	8003bca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ae2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e3      	bne.n	8003abe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	623b      	str	r3, [r7, #32]
   return(result);
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0310 	bic.w	r3, r3, #16
 8003b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b60:	61fa      	str	r2, [r7, #28]
 8003b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e3      	bne.n	8003b3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f83e 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b80:	e023      	b.n	8003bca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x4ea>
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f95d 	bl	8003e5a <UART_Transmit_IT>
    return;
 8003ba0:	e014      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <HAL_UART_IRQHandler+0x514>
 8003bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f99d 	bl	8003efa <UART_EndTransmit_IT>
    return;
 8003bc0:	e004      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
    return;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
      return;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
      return;
 8003bca:	bf00      	nop
  }
}
 8003bcc:	37e8      	adds	r7, #232	; 0xe8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b090      	sub	sp, #64	; 0x40
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c24:	e050      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2c:	d04c      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c34:	f7fd fc16 	bl	8001464 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d241      	bcs.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c64:	637a      	str	r2, [r7, #52]	; 0x34
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	613b      	str	r3, [r7, #16]
   return(result);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c98:	623a      	str	r2, [r7, #32]
 8003c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	69f9      	ldr	r1, [r7, #28]
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e5      	bne.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e00f      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d09f      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3740      	adds	r7, #64	; 0x40
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2222      	movs	r2, #34	; 0x22
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0220 	orr.w	r2, r2, #32
 8003d5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b095      	sub	sp, #84	; 0x54
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d94:	643a      	str	r2, [r7, #64]	; 0x40
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d119      	bne.n	8003e18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0310 	bic.w	r3, r3, #16
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e04:	61ba      	str	r2, [r7, #24]
 8003e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	613b      	str	r3, [r7, #16]
   return(result);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e26:	bf00      	nop
 8003e28:	3754      	adds	r7, #84	; 0x54
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff fecb 	bl	8003be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b21      	cmp	r3, #33	; 0x21
 8003e6c:	d13e      	bne.n	8003eec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e76:	d114      	bne.n	8003ea2 <UART_Transmit_IT+0x48>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d110      	bne.n	8003ea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]
 8003ea0:	e008      	b.n	8003eb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6211      	str	r1, [r2, #32]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10f      	bne.n	8003ee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe5a 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b08c      	sub	sp, #48	; 0x30
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b22      	cmp	r3, #34	; 0x22
 8003f3c:	f040 80ab 	bne.w	8004096 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d117      	bne.n	8003f7a <UART_Receive_IT+0x50>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e026      	b.n	8003fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d007      	beq.n	8003f9e <UART_Receive_IT+0x74>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <UART_Receive_IT+0x82>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e008      	b.n	8003fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d15a      	bne.n	8004092 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0220 	bic.w	r2, r2, #32
 8003fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	2b01      	cmp	r3, #1
 800401a:	d135      	bne.n	8004088 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004042:	623a      	str	r2, [r7, #32]
 8004044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d10a      	bne.n	800407a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800407e:	4619      	mov	r1, r3
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fdbb 	bl	8003bfc <HAL_UARTEx_RxEventCallback>
 8004086:	e002      	b.n	800408e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fc fe05 	bl	8000c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e002      	b.n	8004098 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3730      	adds	r7, #48	; 0x30
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b0c0      	sub	sp, #256	; 0x100
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	68d9      	ldr	r1, [r3, #12]
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	ea40 0301 	orr.w	r3, r0, r1
 80040c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	431a      	orrs	r2, r3
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f8:	f021 010c 	bic.w	r1, r1, #12
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004106:	430b      	orrs	r3, r1
 8004108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	6999      	ldr	r1, [r3, #24]
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	ea40 0301 	orr.w	r3, r0, r1
 8004126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b8f      	ldr	r3, [pc, #572]	; (800436c <UART_SetConfig+0x2cc>)
 8004130:	429a      	cmp	r2, r3
 8004132:	d005      	beq.n	8004140 <UART_SetConfig+0xa0>
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b8d      	ldr	r3, [pc, #564]	; (8004370 <UART_SetConfig+0x2d0>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d104      	bne.n	800414a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7fd fdc4 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8004144:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004148:	e003      	b.n	8004152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800414a:	f7fd fdab 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800414e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415c:	f040 810c 	bne.w	8004378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800416a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800416e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004172:	4622      	mov	r2, r4
 8004174:	462b      	mov	r3, r5
 8004176:	1891      	adds	r1, r2, r2
 8004178:	65b9      	str	r1, [r7, #88]	; 0x58
 800417a:	415b      	adcs	r3, r3
 800417c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004182:	4621      	mov	r1, r4
 8004184:	eb12 0801 	adds.w	r8, r2, r1
 8004188:	4629      	mov	r1, r5
 800418a:	eb43 0901 	adc.w	r9, r3, r1
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a2:	4690      	mov	r8, r2
 80041a4:	4699      	mov	r9, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	eb18 0303 	adds.w	r3, r8, r3
 80041ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041b0:	462b      	mov	r3, r5
 80041b2:	eb49 0303 	adc.w	r3, r9, r3
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ce:	460b      	mov	r3, r1
 80041d0:	18db      	adds	r3, r3, r3
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
 80041d4:	4613      	mov	r3, r2
 80041d6:	eb42 0303 	adc.w	r3, r2, r3
 80041da:	657b      	str	r3, [r7, #84]	; 0x54
 80041dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041e4:	f7fc f826 	bl	8000234 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4b61      	ldr	r3, [pc, #388]	; (8004374 <UART_SetConfig+0x2d4>)
 80041ee:	fba3 2302 	umull	r2, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011c      	lsls	r4, r3, #4
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004200:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004210:	415b      	adcs	r3, r3
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004218:	4641      	mov	r1, r8
 800421a:	eb12 0a01 	adds.w	sl, r2, r1
 800421e:	4649      	mov	r1, r9
 8004220:	eb43 0b01 	adc.w	fp, r3, r1
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004238:	4692      	mov	sl, r2
 800423a:	469b      	mov	fp, r3
 800423c:	4643      	mov	r3, r8
 800423e:	eb1a 0303 	adds.w	r3, sl, r3
 8004242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004246:	464b      	mov	r3, r9
 8004248:	eb4b 0303 	adc.w	r3, fp, r3
 800424c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800425c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004264:	460b      	mov	r3, r1
 8004266:	18db      	adds	r3, r3, r3
 8004268:	643b      	str	r3, [r7, #64]	; 0x40
 800426a:	4613      	mov	r3, r2
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	647b      	str	r3, [r7, #68]	; 0x44
 8004272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800427a:	f7fb ffdb 	bl	8000234 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4611      	mov	r1, r2
 8004284:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <UART_SetConfig+0x2d4>)
 8004286:	fba3 2301 	umull	r2, r3, r3, r1
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2264      	movs	r2, #100	; 0x64
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	1acb      	subs	r3, r1, r3
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <UART_SetConfig+0x2d4>)
 800429c:	fba3 2302 	umull	r2, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a8:	441c      	add	r4, r3
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042c4:	415b      	adcs	r3, r3
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042cc:	4641      	mov	r1, r8
 80042ce:	1851      	adds	r1, r2, r1
 80042d0:	6339      	str	r1, [r7, #48]	; 0x30
 80042d2:	4649      	mov	r1, r9
 80042d4:	414b      	adcs	r3, r1
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042e4:	4659      	mov	r1, fp
 80042e6:	00cb      	lsls	r3, r1, #3
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ee:	4651      	mov	r1, sl
 80042f0:	00ca      	lsls	r2, r1, #3
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	4642      	mov	r2, r8
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004300:	464b      	mov	r3, r9
 8004302:	460a      	mov	r2, r1
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004318:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800431c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004320:	460b      	mov	r3, r1
 8004322:	18db      	adds	r3, r3, r3
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 8004326:	4613      	mov	r3, r2
 8004328:	eb42 0303 	adc.w	r3, r2, r3
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004336:	f7fb ff7d 	bl	8000234 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <UART_SetConfig+0x2d4>)
 8004340:	fba3 1302 	umull	r1, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	2164      	movs	r1, #100	; 0x64
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3332      	adds	r3, #50	; 0x32
 8004352:	4a08      	ldr	r2, [pc, #32]	; (8004374 <UART_SetConfig+0x2d4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	f003 0207 	and.w	r2, r3, #7
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4422      	add	r2, r4
 8004366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004368:	e106      	b.n	8004578 <UART_SetConfig+0x4d8>
 800436a:	bf00      	nop
 800436c:	40011000 	.word	0x40011000
 8004370:	40011400 	.word	0x40011400
 8004374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800437c:	2200      	movs	r2, #0
 800437e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004382:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	1891      	adds	r1, r2, r2
 8004390:	6239      	str	r1, [r7, #32]
 8004392:	415b      	adcs	r3, r3
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
 8004396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800439a:	4641      	mov	r1, r8
 800439c:	1854      	adds	r4, r2, r1
 800439e:	4649      	mov	r1, r9
 80043a0:	eb43 0501 	adc.w	r5, r3, r1
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	00eb      	lsls	r3, r5, #3
 80043ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b2:	00e2      	lsls	r2, r4, #3
 80043b4:	4614      	mov	r4, r2
 80043b6:	461d      	mov	r5, r3
 80043b8:	4643      	mov	r3, r8
 80043ba:	18e3      	adds	r3, r4, r3
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043c0:	464b      	mov	r3, r9
 80043c2:	eb45 0303 	adc.w	r3, r5, r3
 80043c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043e6:	4629      	mov	r1, r5
 80043e8:	008b      	lsls	r3, r1, #2
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f0:	4621      	mov	r1, r4
 80043f2:	008a      	lsls	r2, r1, #2
 80043f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f8:	f7fb ff1c 	bl	8000234 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b60      	ldr	r3, [pc, #384]	; (8004584 <UART_SetConfig+0x4e4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	61b9      	str	r1, [r7, #24]
 8004424:	415b      	adcs	r3, r3
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442c:	4641      	mov	r1, r8
 800442e:	1851      	adds	r1, r2, r1
 8004430:	6139      	str	r1, [r7, #16]
 8004432:	4649      	mov	r1, r9
 8004434:	414b      	adcs	r3, r1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004444:	4659      	mov	r1, fp
 8004446:	00cb      	lsls	r3, r1, #3
 8004448:	4651      	mov	r1, sl
 800444a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444e:	4651      	mov	r1, sl
 8004450:	00ca      	lsls	r2, r1, #3
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	4603      	mov	r3, r0
 8004458:	4642      	mov	r2, r8
 800445a:	189b      	adds	r3, r3, r2
 800445c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004460:	464b      	mov	r3, r9
 8004462:	460a      	mov	r2, r1
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	67bb      	str	r3, [r7, #120]	; 0x78
 8004476:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004484:	4649      	mov	r1, r9
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	4641      	mov	r1, r8
 800448a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448e:	4641      	mov	r1, r8
 8004490:	008a      	lsls	r2, r1, #2
 8004492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004496:	f7fb fecd 	bl	8000234 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <UART_SetConfig+0x4e4>)
 80044a2:	fba3 2301 	umull	r2, r3, r3, r1
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2264      	movs	r2, #100	; 0x64
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	1acb      	subs	r3, r1, r3
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	3332      	adds	r3, #50	; 0x32
 80044b4:	4a33      	ldr	r2, [pc, #204]	; (8004584 <UART_SetConfig+0x4e4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c0:	441c      	add	r4, r3
 80044c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c6:	2200      	movs	r2, #0
 80044c8:	673b      	str	r3, [r7, #112]	; 0x70
 80044ca:	677a      	str	r2, [r7, #116]	; 0x74
 80044cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	415b      	adcs	r3, r3
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	66bb      	str	r3, [r7, #104]	; 0x68
 8004512:	464b      	mov	r3, r9
 8004514:	460a      	mov	r2, r1
 8004516:	eb42 0303 	adc.w	r3, r2, r3
 800451a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	663b      	str	r3, [r7, #96]	; 0x60
 8004526:	667a      	str	r2, [r7, #100]	; 0x64
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004534:	4649      	mov	r1, r9
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	4641      	mov	r1, r8
 800453a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453e:	4641      	mov	r1, r8
 8004540:	008a      	lsls	r2, r1, #2
 8004542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004546:	f7fb fe75 	bl	8000234 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <UART_SetConfig+0x4e4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <UART_SetConfig+0x4e4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 020f 	and.w	r2, r3, #15
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4422      	add	r2, r4
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800457e:	46bd      	mov	sp, r7
 8004580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004584:	51eb851f 	.word	0x51eb851f

08004588 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f103 0208 	add.w	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 0208 	add.w	r2, r3, #8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f103 0208 	add.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004640:	d103      	bne.n	800464a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e00c      	b.n	8004664 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3308      	adds	r3, #8
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e002      	b.n	8004658 <vListInsert+0x2e>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	429a      	cmp	r2, r3
 8004662:	d2f6      	bcs.n	8004652 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6892      	ldr	r2, [r2, #8]
 80046b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6852      	ldr	r2, [r2, #4]
 80046bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d103      	bne.n	80046d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80046fa:	2301      	movs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xQueueGenericReset+0x2e>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
    }
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05d      	beq.n	80047e0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	d059      	beq.n	80047e0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	2100      	movs	r1, #0
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d000      	beq.n	8004740 <xQueueGenericReset+0x50>
 800473e:	2101      	movs	r1, #1
 8004740:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	d14c      	bne.n	80047e0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004746:	f002 fd2f 	bl	80071a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	6939      	ldr	r1, [r7, #16]
 8004754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	441a      	add	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2200      	movs	r2, #0
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	3b01      	subs	r3, #1
 8004778:	6939      	ldr	r1, [r7, #16]
 800477a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	441a      	add	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	22ff      	movs	r2, #255	; 0xff
 800478a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d114      	bne.n	80047c6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	3310      	adds	r3, #16
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fa5f 	bl	8005c6c <xTaskRemoveFromEventList>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80047b4:	4b15      	ldr	r3, [pc, #84]	; (800480c <xQueueGenericReset+0x11c>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	e009      	b.n	80047da <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3310      	adds	r3, #16
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fedc 	bl	8004588 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fed7 	bl	8004588 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80047da:	f002 fd15 	bl	8007208 <vPortExitCritical>
 80047de:	e001      	b.n	80047e4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <xQueueGenericReset+0x110>
        __asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60bb      	str	r3, [r7, #8]
    }
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02e      	beq.n	8004886 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004828:	2100      	movs	r1, #0
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	fba3 2302 	umull	r2, r3, r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d000      	beq.n	8004838 <xQueueGenericCreate+0x28>
 8004836:	2101      	movs	r1, #1
 8004838:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800483a:	2b00      	cmp	r3, #0
 800483c:	d123      	bne.n	8004886 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004846:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800484a:	d81c      	bhi.n	8004886 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3350      	adds	r3, #80	; 0x50
 800485a:	4618      	mov	r0, r3
 800485c:	f002 fdc6 	bl	80073ec <pvPortMalloc>
 8004860:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01c      	beq.n	80048a2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3350      	adds	r3, #80	; 0x50
 8004870:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004872:	79fa      	ldrb	r2, [r7, #7]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f814 	bl	80048ac <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004884:	e00d      	b.n	80048a2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xQueueGenericCreate+0x92>
        __asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
    }
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80048a2:	69fb      	ldr	r3, [r7, #28]
    }
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e002      	b.n	80048ce <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048da:	2101      	movs	r1, #1
 80048dc:	69b8      	ldr	r0, [r7, #24]
 80048de:	f7ff ff07 	bl	80046f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	; 0x38
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004902:	2300      	movs	r3, #0
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xQueueGenericSend+0x32>
        __asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <xQueueGenericSend+0x40>
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <xQueueGenericSend+0x44>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <xQueueGenericSend+0x46>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <xQueueGenericSend+0x60>
        __asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <xQueueGenericSend+0x6e>
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <xQueueGenericSend+0x72>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericSend+0x74>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xQueueGenericSend+0x8e>
        __asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	623b      	str	r3, [r7, #32]
    }
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004982:	f001 fb83 	bl	800608c <xTaskGetSchedulerState>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <xQueueGenericSend+0x9e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <xQueueGenericSend+0xa2>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <xQueueGenericSend+0xa4>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xQueueGenericSend+0xbe>
        __asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61fb      	str	r3, [r7, #28]
    }
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80049b2:	f002 fbf9 	bl	80071a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <xQueueGenericSend+0xd4>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d129      	bne.n	8004a1c <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ce:	f000 fad6 	bl	8004f7e <prvCopyDataToQueue>
 80049d2:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	3324      	adds	r3, #36	; 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f943 	bl	8005c6c <xTaskRemoveFromEventList>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <xQueueGenericSend+0x1f8>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	e00a      	b.n	8004a14 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004a04:	4b39      	ldr	r3, [pc, #228]	; (8004aec <xQueueGenericSend+0x1f8>)
 8004a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004a14:	f002 fbf8 	bl	8007208 <vPortExitCritical>
                return pdPASS;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e063      	b.n	8004ae4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a22:	f002 fbf1 	bl	8007208 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e05c      	b.n	8004ae4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a30:	f107 0314 	add.w	r3, r7, #20
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 f9ef 	bl	8005e18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a3e:	f002 fbe3 	bl	8007208 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a42:	f000 fe11 	bl	8005668 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a46:	f002 fbaf 	bl	80071a8 <vPortEnterCritical>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a56:	d103      	bne.n	8004a60 <xQueueGenericSend+0x16c>
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a6c:	d103      	bne.n	8004a76 <xQueueGenericSend+0x182>
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a76:	f002 fbc7 	bl	8007208 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a7a:	1d3a      	adds	r2, r7, #4
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	4611      	mov	r1, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f9de 	bl	8005e44 <xTaskCheckForTimeOut>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d124      	bne.n	8004ad8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a90:	f000 fb6d 	bl	800516e <prvIsQueueFull>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	3310      	adds	r3, #16
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f878 	bl	8005b98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aaa:	f000 faf8 	bl	800509e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004aae:	f000 fde9 	bl	8005684 <xTaskResumeAll>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f47f af7c 	bne.w	80049b2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <xQueueGenericSend+0x1f8>)
 8004abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	e772      	b.n	80049b2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ace:	f000 fae6 	bl	800509e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004ad2:	f000 fdd7 	bl	8005684 <xTaskResumeAll>
 8004ad6:	e76c      	b.n	80049b2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ada:	f000 fae0 	bl	800509e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004ade:	f000 fdd1 	bl	8005684 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004ae2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3738      	adds	r7, #56	; 0x38
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b092      	sub	sp, #72	; 0x48
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8004b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <xQueueGenericSendFromISR+0x3c>
 8004b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <xQueueGenericSendFromISR+0x40>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <xQueueGenericSendFromISR+0x42>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d103      	bne.n	8004b5a <xQueueGenericSendFromISR+0x6a>
 8004b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <xQueueGenericSendFromISR+0x6e>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <xQueueGenericSendFromISR+0x70>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b7a:	f002 fbf7 	bl	800736c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	623a      	str	r2, [r7, #32]
 8004b94:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004b96:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <xQueueGenericSendFromISR+0xbc>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d146      	bne.n	8004c3a <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004bc2:	f000 f9dc 	bl	8004f7e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004bc6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bce:	d112      	bne.n	8004bf6 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02d      	beq.n	8004c34 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bda:	3324      	adds	r3, #36	; 0x24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f845 	bl	8005c6c <xTaskRemoveFromEventList>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d025      	beq.n	8004c34 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d022      	beq.n	8004c34 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e01e      	b.n	8004c34 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004bf6:	f000 fe51 	bl	800589c <uxTaskGetNumberOfTasks>
 8004bfa:	6338      	str	r0, [r7, #48]	; 0x30
 8004bfc:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d916      	bls.n	8004c34 <xQueueGenericSendFromISR+0x144>
 8004c06:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0c:	d10a      	bne.n	8004c24 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61bb      	str	r3, [r7, #24]
    }
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <xQueueGenericSendFromISR+0x132>
 8004c24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c28:	3301      	adds	r3, #1
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	b25a      	sxtb	r2, r3
 8004c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004c34:	2301      	movs	r3, #1
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8004c38:	e001      	b.n	8004c3e <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004c48:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3748      	adds	r7, #72	; 0x48
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xQueueReceive+0x30>
        __asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	623b      	str	r3, [r7, #32]
    }
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <xQueueReceive+0x3e>
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <xQueueReceive+0x42>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueReceive+0x44>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueReceive+0x5e>
        __asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	61fb      	str	r3, [r7, #28]
    }
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb2:	f001 f9eb 	bl	800608c <xTaskGetSchedulerState>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <xQueueReceive+0x6e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <xQueueReceive+0x72>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueReceive+0x74>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueReceive+0x8e>
        __asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	61bb      	str	r3, [r7, #24]
    }
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004ce2:	f002 fa61 	bl	80071a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01f      	beq.n	8004d32 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf6:	f000 f9ac 	bl	8005052 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1e5a      	subs	r2, r3, #1
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00f      	beq.n	8004d2a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 ffac 	bl	8005c6c <xTaskRemoveFromEventList>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d1a:	4b3d      	ldr	r3, [pc, #244]	; (8004e10 <xQueueReceive+0x1bc>)
 8004d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004d2a:	f002 fa6d 	bl	8007208 <vPortExitCritical>
                return pdPASS;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e069      	b.n	8004e06 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d38:	f002 fa66 	bl	8007208 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e062      	b.n	8004e06 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d46:	f107 0310 	add.w	r3, r7, #16
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 f864 	bl	8005e18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d54:	f002 fa58 	bl	8007208 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d58:	f000 fc86 	bl	8005668 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d5c:	f002 fa24 	bl	80071a8 <vPortEnterCritical>
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6c:	d103      	bne.n	8004d76 <xQueueReceive+0x122>
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d82:	d103      	bne.n	8004d8c <xQueueReceive+0x138>
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d8c:	f002 fa3c 	bl	8007208 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d90:	1d3a      	adds	r2, r7, #4
 8004d92:	f107 0310 	add.w	r3, r7, #16
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 f853 	bl	8005e44 <xTaskCheckForTimeOut>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d123      	bne.n	8004dec <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da6:	f000 f9cc 	bl	8005142 <prvIsQueueEmpty>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d017      	beq.n	8004de0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	3324      	adds	r3, #36	; 0x24
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 feed 	bl	8005b98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	f000 f96d 	bl	800509e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004dc4:	f000 fc5e 	bl	8005684 <xTaskResumeAll>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d189      	bne.n	8004ce2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <xQueueReceive+0x1bc>)
 8004dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	e780      	b.n	8004ce2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f000 f95c 	bl	800509e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004de6:	f000 fc4d 	bl	8005684 <xTaskResumeAll>
 8004dea:	e77a      	b.n	8004ce2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dee:	f000 f956 	bl	800509e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004df2:	f000 fc47 	bl	8005684 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df8:	f000 f9a3 	bl	8005142 <prvIsQueueEmpty>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f43f af6f 	beq.w	8004ce2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004e04:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3730      	adds	r7, #48	; 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b090      	sub	sp, #64	; 0x40
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <xQueueReceiveFromISR+0x3a>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <xQueueReceiveFromISR+0x3e>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <xQueueReceiveFromISR+0x40>
 8004e52:	2300      	movs	r3, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	623b      	str	r3, [r7, #32]
    }
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e6e:	f002 fa7d 	bl	800736c <vPortValidateInterruptPriority>
        __asm volatile
 8004e72:	f3ef 8211 	mrs	r2, BASEPRI
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	61fa      	str	r2, [r7, #28]
 8004e88:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004e8a:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d046      	beq.n	8004f28 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ea8:	f000 f8d3 	bl	8005052 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004eb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ebc:	d112      	bne.n	8004ee4 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d02d      	beq.n	8004f22 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	3310      	adds	r3, #16
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fece 	bl	8005c6c <xTaskRemoveFromEventList>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d025      	beq.n	8004f22 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d022      	beq.n	8004f22 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e01e      	b.n	8004f22 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004ee4:	f000 fcda 	bl	800589c <uxTaskGetNumberOfTasks>
 8004ee8:	62b8      	str	r0, [r7, #40]	; 0x28
 8004eea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d916      	bls.n	8004f22 <xQueueReceiveFromISR+0x10e>
 8004ef4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8004efa:	d10a      	bne.n	8004f12 <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	617b      	str	r3, [r7, #20]
    }
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xQueueReceiveFromISR+0xfc>
 8004f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f16:	3301      	adds	r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	b25a      	sxtb	r2, r3
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8004f22:	2301      	movs	r3, #1
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f26:	e001      	b.n	8004f2c <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f383 8811 	msr	BASEPRI, r3
    }
 8004f36:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3740      	adds	r7, #64	; 0x40
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60bb      	str	r3, [r7, #8]
    }
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004f66:	f002 f91f 	bl	80071a8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004f70:	f002 f94a 	bl	8007208 <vPortExitCritical>

    return uxReturn;
 8004f74:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d14d      	bne.n	8005040 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f88d 	bl	80060c8 <xTaskPriorityDisinherit>
 8004fae:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	e043      	b.n	8005040 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d119      	bne.n	8004ff2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6858      	ldr	r0, [r3, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	f002 fc07 	bl	80077dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d32b      	bcc.n	8005040 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	e026      	b.n	8005040 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68d8      	ldr	r0, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	f002 fbed 	bl	80077dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	425b      	negs	r3, r3
 800500c:	441a      	add	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d207      	bcs.n	800502e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	425b      	negs	r3, r3
 8005028:	441a      	add	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d105      	bne.n	8005040 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3b01      	subs	r3, #1
 800503e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005048:	697b      	ldr	r3, [r7, #20]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d018      	beq.n	8005096 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	d303      	bcc.n	8005086 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	461a      	mov	r2, r3
 8005090:	6838      	ldr	r0, [r7, #0]
 8005092:	f002 fba3 	bl	80077dc <memcpy>
    }
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80050a6:	f002 f87f 	bl	80071a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050b2:	e011      	b.n	80050d8 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fdd3 	bl	8005c6c <xTaskRemoveFromEventList>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80050cc:	f000 ff20 	bl	8005f10 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dce9      	bgt.n	80050b4 <prvUnlockQueue+0x16>
 80050e0:	e000      	b.n	80050e4 <prvUnlockQueue+0x46>
                    break;
 80050e2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	22ff      	movs	r2, #255	; 0xff
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80050ec:	f002 f88c 	bl	8007208 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80050f0:	f002 f85a 	bl	80071a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050fa:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80050fc:	e011      	b.n	8005122 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d012      	beq.n	800512c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3310      	adds	r3, #16
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fdae 	bl	8005c6c <xTaskRemoveFromEventList>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005116:	f000 fefb 	bl	8005f10 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800511a:	7bbb      	ldrb	r3, [r7, #14]
 800511c:	3b01      	subs	r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005126:	2b00      	cmp	r3, #0
 8005128:	dce9      	bgt.n	80050fe <prvUnlockQueue+0x60>
 800512a:	e000      	b.n	800512e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800512c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	22ff      	movs	r2, #255	; 0xff
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005136:	f002 f867 	bl	8007208 <vPortExitCritical>
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800514a:	f002 f82d 	bl	80071a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005156:	2301      	movs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e001      	b.n	8005160 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005160:	f002 f852 	bl	8007208 <vPortExitCritical>

    return xReturn;
 8005164:	68fb      	ldr	r3, [r7, #12]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005176:	f002 f817 	bl	80071a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	429a      	cmp	r2, r3
 8005184:	d102      	bne.n	800518c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e001      	b.n	8005190 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005190:	f002 f83a 	bl	8007208 <vPortExitCritical>

    return xReturn;
 8005194:	68fb      	ldr	r3, [r7, #12]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60fb      	str	r3, [r7, #12]
    }
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d102      	bne.n	80051d8 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e001      	b.n	80051dc <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80051dc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80051de:	4618      	mov	r0, r3
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	60fb      	str	r3, [r7, #12]
    }
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d024      	beq.n	8005266 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e01e      	b.n	8005260 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005222:	4a18      	ldr	r2, [pc, #96]	; (8005284 <vQueueAddToRegistry+0x98>)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d105      	bne.n	800523e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <vQueueAddToRegistry+0x98>)
 8005238:	4413      	add	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
                    break;
 800523c:	e013      	b.n	8005266 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <vQueueAddToRegistry+0x6e>
 8005244:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <vQueueAddToRegistry+0x98>)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4a0b      	ldr	r2, [pc, #44]	; (8005284 <vQueueAddToRegistry+0x98>)
 8005256:	4413      	add	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3301      	adds	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b07      	cmp	r3, #7
 8005264:	d9dd      	bls.n	8005222 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	20000124 	.word	0x20000124

08005288 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005298:	f001 ff86 	bl	80071a8 <vPortEnterCritical>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a8:	d103      	bne.n	80052b2 <vQueueWaitForMessageRestricted+0x2a>
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052be:	d103      	bne.n	80052c8 <vQueueWaitForMessageRestricted+0x40>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c8:	f001 ff9e 	bl	8007208 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	3324      	adds	r3, #36	; 0x24
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fc7f 	bl	8005be0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff fedb 	bl	800509e <prvUnlockQueue>
    }
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f002 f871 	bl	80073ec <pvPortMalloc>
 800530a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d013      	beq.n	800533a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005312:	2058      	movs	r0, #88	; 0x58
 8005314:	f002 f86a 	bl	80073ec <pvPortMalloc>
 8005318:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005320:	2258      	movs	r2, #88	; 0x58
 8005322:	2100      	movs	r1, #0
 8005324:	69f8      	ldr	r0, [r7, #28]
 8005326:	f002 fa2d 	bl	8007784 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
 8005330:	e005      	b.n	800533e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f002 f914 	bl	8007560 <vPortFree>
 8005338:	e001      	b.n	800533e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	2300      	movs	r3, #0
 8005348:	9303      	str	r3, [sp, #12]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f80e 	bl	800537c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005360:	69f8      	ldr	r0, [r7, #28]
 8005362:	f000 f899 	bl	8005498 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005366:	2301      	movs	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e002      	b.n	8005372 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800536c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005370:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005372:	69bb      	ldr	r3, [r7, #24]
    }
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	461a      	mov	r2, r3
 8005394:	21a5      	movs	r1, #165	; 0xa5
 8005396:	f002 f9f5 	bl	8007784 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	3b01      	subs	r3, #1
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f023 0307 	bic.w	r3, r3, #7
 80053b2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	617b      	str	r3, [r7, #20]
    }
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01e      	beq.n	8005418 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e012      	b.n	8005406 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	7819      	ldrb	r1, [r3, #0]
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	3334      	adds	r3, #52	; 0x34
 80053f0:	460a      	mov	r2, r1
 80053f2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d006      	beq.n	800540e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	3301      	adds	r3, #1
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2b09      	cmp	r3, #9
 800540a:	d9e9      	bls.n	80053e0 <prvInitialiseNewTask+0x64>
 800540c:	e000      	b.n	8005410 <prvInitialiseNewTask+0x94>
            {
                break;
 800540e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b04      	cmp	r3, #4
 800541c:	d90a      	bls.n	8005434 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	613b      	str	r3, [r7, #16]
    }
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	2b04      	cmp	r3, #4
 8005438:	d901      	bls.n	800543e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800543a:	2304      	movs	r3, #4
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff f8ba 	bl	80045c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	3318      	adds	r3, #24
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff f8b5 	bl	80045c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005462:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	f1c3 0205 	rsb	r2, r3, #5
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	69b8      	ldr	r0, [r7, #24]
 800547a:	f001 fd69 	bl	8006f50 <pxPortInitialiseStack>
 800547e:	4602      	mov	r2, r0
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005490:	bf00      	nop
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80054a0:	f001 fe82 	bl	80071a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80054a4:	4b40      	ldr	r3, [pc, #256]	; (80055a8 <prvAddNewTaskToReadyList+0x110>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <prvAddNewTaskToReadyList+0x110>)
 80054ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <prvAddNewTaskToReadyList+0x114>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80054b6:	4a3d      	ldr	r2, [pc, #244]	; (80055ac <prvAddNewTaskToReadyList+0x114>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054bc:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <prvAddNewTaskToReadyList+0x110>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d110      	bne.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80054c4:	f000 fd48 	bl	8005f58 <prvInitialiseTaskLists>
 80054c8:	e00d      	b.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <prvAddNewTaskToReadyList+0x118>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054d2:	4b36      	ldr	r3, [pc, #216]	; (80055ac <prvAddNewTaskToReadyList+0x114>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d802      	bhi.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80054e0:	4a32      	ldr	r2, [pc, #200]	; (80055ac <prvAddNewTaskToReadyList+0x114>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <prvAddNewTaskToReadyList+0x11c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a31      	ldr	r2, [pc, #196]	; (80055b4 <prvAddNewTaskToReadyList+0x11c>)
 80054ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054f0:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <prvAddNewTaskToReadyList+0x11c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	2201      	movs	r2, #1
 80054fe:	409a      	lsls	r2, r3
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <prvAddNewTaskToReadyList+0x120>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <prvAddNewTaskToReadyList+0x120>)
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550e:	492b      	ldr	r1, [pc, #172]	; (80055bc <prvAddNewTaskToReadyList+0x124>)
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	3304      	adds	r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	609a      	str	r2, [r3, #8]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	3204      	adds	r2, #4
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <prvAddNewTaskToReadyList+0x124>)
 800554e:	441a      	add	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	615a      	str	r2, [r3, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4918      	ldr	r1, [pc, #96]	; (80055bc <prvAddNewTaskToReadyList+0x124>)
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	4814      	ldr	r0, [pc, #80]	; (80055bc <prvAddNewTaskToReadyList+0x124>)
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4403      	add	r3, r0
 8005574:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005576:	f001 fe47 	bl	8007208 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <prvAddNewTaskToReadyList+0x118>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <prvAddNewTaskToReadyList+0x114>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	429a      	cmp	r2, r3
 800558e:	d207      	bcs.n	80055a0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <prvAddNewTaskToReadyList+0x128>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2000023c 	.word	0x2000023c
 80055ac:	20000164 	.word	0x20000164
 80055b0:	20000248 	.word	0x20000248
 80055b4:	20000258 	.word	0x20000258
 80055b8:	20000244 	.word	0x20000244
 80055bc:	20000168 	.word	0x20000168
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <vTaskStartScheduler+0x88>)
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	2300      	movs	r3, #0
 80055d4:	2282      	movs	r2, #130	; 0x82
 80055d6:	491e      	ldr	r1, [pc, #120]	; (8005650 <vTaskStartScheduler+0x8c>)
 80055d8:	481e      	ldr	r0, [pc, #120]	; (8005654 <vTaskStartScheduler+0x90>)
 80055da:	f7ff fe89 	bl	80052f0 <xTaskCreate>
 80055de:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d102      	bne.n	80055ec <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80055e6:	f001 f967 	bl	80068b8 <xTimerCreateTimerTask>
 80055ea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d116      	bne.n	8005620 <vTaskStartScheduler+0x5c>
        __asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	60bb      	str	r3, [r7, #8]
    }
 8005604:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <vTaskStartScheduler+0x94>)
 8005608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <vTaskStartScheduler+0x98>)
 8005610:	2201      	movs	r2, #1
 8005612:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005614:	4b12      	ldr	r3, [pc, #72]	; (8005660 <vTaskStartScheduler+0x9c>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800561a:	f001 fd23 	bl	8007064 <xPortStartScheduler>
 800561e:	e00e      	b.n	800563e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005626:	d10a      	bne.n	800563e <vTaskStartScheduler+0x7a>
        __asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	607b      	str	r3, [r7, #4]
    }
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <vTaskStartScheduler+0xa0>)
 8005640:	681b      	ldr	r3, [r3, #0]
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000260 	.word	0x20000260
 8005650:	080079a4 	.word	0x080079a4
 8005654:	08005f29 	.word	0x08005f29
 8005658:	2000025c 	.word	0x2000025c
 800565c:	20000248 	.word	0x20000248
 8005660:	20000240 	.word	0x20000240
 8005664:	20000018 	.word	0x20000018

08005668 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <vTaskSuspendAll+0x18>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	4a03      	ldr	r2, [pc, #12]	; (8005680 <vTaskSuspendAll+0x18>)
 8005674:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005676:	bf00      	nop
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000264 	.word	0x20000264

08005684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005692:	4b71      	ldr	r3, [pc, #452]	; (8005858 <xTaskResumeAll+0x1d4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <xTaskResumeAll+0x2c>
        __asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	607b      	str	r3, [r7, #4]
    }
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80056b0:	f001 fd7a 	bl	80071a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80056b4:	4b68      	ldr	r3, [pc, #416]	; (8005858 <xTaskResumeAll+0x1d4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4a67      	ldr	r2, [pc, #412]	; (8005858 <xTaskResumeAll+0x1d4>)
 80056bc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056be:	4b66      	ldr	r3, [pc, #408]	; (8005858 <xTaskResumeAll+0x1d4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 80c0 	bne.w	8005848 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <xTaskResumeAll+0x1d8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80bb 	beq.w	8005848 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d2:	e08a      	b.n	80057ea <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d4:	4b62      	ldr	r3, [pc, #392]	; (8005860 <xTaskResumeAll+0x1dc>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	6a12      	ldr	r2, [r2, #32]
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	69d2      	ldr	r2, [r2, #28]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3318      	adds	r3, #24
 80056fe:	429a      	cmp	r2, r3
 8005700:	d103      	bne.n	800570a <xTaskResumeAll+0x86>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2200      	movs	r2, #0
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	68d2      	ldr	r2, [r2, #12]
 8005728:	609a      	str	r2, [r3, #8]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	6892      	ldr	r2, [r2, #8]
 8005732:	605a      	str	r2, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	3304      	adds	r3, #4
 800573c:	429a      	cmp	r2, r3
 800573e:	d103      	bne.n	8005748 <xTaskResumeAll+0xc4>
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2200      	movs	r2, #0
 800574c:	615a      	str	r2, [r3, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	2201      	movs	r2, #1
 800575e:	409a      	lsls	r2, r3
 8005760:	4b40      	ldr	r3, [pc, #256]	; (8005864 <xTaskResumeAll+0x1e0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4313      	orrs	r3, r2
 8005766:	4a3f      	ldr	r2, [pc, #252]	; (8005864 <xTaskResumeAll+0x1e0>)
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576e:	493e      	ldr	r1, [pc, #248]	; (8005868 <xTaskResumeAll+0x1e4>)
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	3304      	adds	r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	3204      	adds	r2, #4
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a2e      	ldr	r2, [pc, #184]	; (8005868 <xTaskResumeAll+0x1e4>)
 80057ae:	441a      	add	r2, r3
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	615a      	str	r2, [r3, #20]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	492b      	ldr	r1, [pc, #172]	; (8005868 <xTaskResumeAll+0x1e4>)
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	4827      	ldr	r0, [pc, #156]	; (8005868 <xTaskResumeAll+0x1e4>)
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4403      	add	r3, r0
 80057d4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <xTaskResumeAll+0x1e8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d302      	bcc.n	80057ea <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80057e4:	4b22      	ldr	r3, [pc, #136]	; (8005870 <xTaskResumeAll+0x1ec>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <xTaskResumeAll+0x1dc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f47f af70 	bne.w	80056d4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80057fa:	f000 fc2b 	bl	8006054 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <xTaskResumeAll+0x1f0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d010      	beq.n	800582c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800580a:	f000 f853 	bl	80058b4 <xTaskIncrementTick>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <xTaskResumeAll+0x1ec>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3b01      	subs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f1      	bne.n	800580a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005826:	4b13      	ldr	r3, [pc, #76]	; (8005874 <xTaskResumeAll+0x1f0>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800582c:	4b10      	ldr	r3, [pc, #64]	; (8005870 <xTaskResumeAll+0x1ec>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <xTaskResumeAll+0x1f4>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005848:	f001 fcde 	bl	8007208 <vPortExitCritical>

    return xAlreadyYielded;
 800584c:	69bb      	ldr	r3, [r7, #24]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000264 	.word	0x20000264
 800585c:	2000023c 	.word	0x2000023c
 8005860:	200001fc 	.word	0x200001fc
 8005864:	20000244 	.word	0x20000244
 8005868:	20000168 	.word	0x20000168
 800586c:	20000164 	.word	0x20000164
 8005870:	20000250 	.word	0x20000250
 8005874:	2000024c 	.word	0x2000024c
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <xTaskGetTickCount+0x1c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000240 	.word	0x20000240

0800589c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <uxTaskGetNumberOfTasks+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	2000023c 	.word	0x2000023c

080058b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058be:	4b7d      	ldr	r3, [pc, #500]	; (8005ab4 <xTaskIncrementTick+0x200>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 80ec 	bne.w	8005aa0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058c8:	4b7b      	ldr	r3, [pc, #492]	; (8005ab8 <xTaskIncrementTick+0x204>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80058d0:	4a79      	ldr	r2, [pc, #484]	; (8005ab8 <xTaskIncrementTick+0x204>)
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d120      	bne.n	800591e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80058dc:	4b77      	ldr	r3, [pc, #476]	; (8005abc <xTaskIncrementTick+0x208>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <xTaskIncrementTick+0x48>
        __asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	607b      	str	r3, [r7, #4]
    }
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <xTaskIncrementTick+0x46>
 80058fc:	4b6f      	ldr	r3, [pc, #444]	; (8005abc <xTaskIncrementTick+0x208>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <xTaskIncrementTick+0x20c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a6d      	ldr	r2, [pc, #436]	; (8005abc <xTaskIncrementTick+0x208>)
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	4a6d      	ldr	r2, [pc, #436]	; (8005ac0 <xTaskIncrementTick+0x20c>)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b6c      	ldr	r3, [pc, #432]	; (8005ac4 <xTaskIncrementTick+0x210>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a6b      	ldr	r2, [pc, #428]	; (8005ac4 <xTaskIncrementTick+0x210>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	f000 fb9b 	bl	8006054 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800591e:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <xTaskIncrementTick+0x214>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a3a      	ldr	r2, [r7, #32]
 8005924:	429a      	cmp	r2, r3
 8005926:	f0c0 80a6 	bcc.w	8005a76 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592a:	4b64      	ldr	r3, [pc, #400]	; (8005abc <xTaskIncrementTick+0x208>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005934:	4b64      	ldr	r3, [pc, #400]	; (8005ac8 <xTaskIncrementTick+0x214>)
 8005936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593a:	601a      	str	r2, [r3, #0]
                    break;
 800593c:	e09b      	b.n	8005a76 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593e:	4b5f      	ldr	r3, [pc, #380]	; (8005abc <xTaskIncrementTick+0x208>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	429a      	cmp	r2, r3
 8005954:	d203      	bcs.n	800595e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005956:	4a5c      	ldr	r2, [pc, #368]	; (8005ac8 <xTaskIncrementTick+0x214>)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800595c:	e08b      	b.n	8005a76 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	68d2      	ldr	r2, [r2, #12]
 800596c:	609a      	str	r2, [r3, #8]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	6892      	ldr	r2, [r2, #8]
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	3304      	adds	r3, #4
 8005980:	429a      	cmp	r2, r3
 8005982:	d103      	bne.n	800598c <xTaskIncrementTick+0xd8>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2200      	movs	r2, #0
 8005990:	615a      	str	r2, [r3, #20]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	1e5a      	subs	r2, r3, #1
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01e      	beq.n	80059e2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	6a12      	ldr	r2, [r2, #32]
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	69d2      	ldr	r2, [r2, #28]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	3318      	adds	r3, #24
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d103      	bne.n	80059d2 <xTaskIncrementTick+0x11e>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	6a1a      	ldr	r2, [r3, #32]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2200      	movs	r2, #0
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	1e5a      	subs	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	2201      	movs	r2, #1
 80059e8:	409a      	lsls	r2, r3
 80059ea:	4b38      	ldr	r3, [pc, #224]	; (8005acc <xTaskIncrementTick+0x218>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	4a36      	ldr	r2, [pc, #216]	; (8005acc <xTaskIncrementTick+0x218>)
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	4935      	ldr	r1, [pc, #212]	; (8005ad0 <xTaskIncrementTick+0x21c>)
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	3304      	adds	r3, #4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	60da      	str	r2, [r3, #12]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	3204      	adds	r2, #4
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	1d1a      	adds	r2, r3, #4
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <xTaskIncrementTick+0x21c>)
 8005a38:	441a      	add	r2, r3
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	615a      	str	r2, [r3, #20]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4923      	ldr	r1, [pc, #140]	; (8005ad0 <xTaskIncrementTick+0x21c>)
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	481f      	ldr	r0, [pc, #124]	; (8005ad0 <xTaskIncrementTick+0x21c>)
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4403      	add	r3, r0
 8005a5e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <xTaskIncrementTick+0x220>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	f67f af5d 	bls.w	800592a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a74:	e759      	b.n	800592a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a76:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <xTaskIncrementTick+0x220>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4914      	ldr	r1, [pc, #80]	; (8005ad0 <xTaskIncrementTick+0x21c>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d901      	bls.n	8005a92 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <xTaskIncrementTick+0x224>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9e:	e004      	b.n	8005aaa <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <xTaskIncrementTick+0x228>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <xTaskIncrementTick+0x228>)
 8005aa8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3728      	adds	r7, #40	; 0x28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000264 	.word	0x20000264
 8005ab8:	20000240 	.word	0x20000240
 8005abc:	200001f4 	.word	0x200001f4
 8005ac0:	200001f8 	.word	0x200001f8
 8005ac4:	20000254 	.word	0x20000254
 8005ac8:	2000025c 	.word	0x2000025c
 8005acc:	20000244 	.word	0x20000244
 8005ad0:	20000168 	.word	0x20000168
 8005ad4:	20000164 	.word	0x20000164
 8005ad8:	20000250 	.word	0x20000250
 8005adc:	2000024c 	.word	0x2000024c

08005ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ae6:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <vTaskSwitchContext+0xa4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005aee:	4b26      	ldr	r3, [pc, #152]	; (8005b88 <vTaskSwitchContext+0xa8>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005af4:	e03f      	b.n	8005b76 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <vTaskSwitchContext+0xa8>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afc:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <vTaskSwitchContext+0xac>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	fab3 f383 	clz	r3, r3
 8005b08:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b0a:	7afb      	ldrb	r3, [r7, #11]
 8005b0c:	f1c3 031f 	rsb	r3, r3, #31
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	491f      	ldr	r1, [pc, #124]	; (8005b90 <vTaskSwitchContext+0xb0>)
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	607b      	str	r3, [r7, #4]
    }
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <vTaskSwitchContext+0x5a>
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <vTaskSwitchContext+0xb0>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d104      	bne.n	8005b6c <vTaskSwitchContext+0x8c>
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <vTaskSwitchContext+0xb4>)
 8005b74:	6013      	str	r3, [r2, #0]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000264 	.word	0x20000264
 8005b88:	20000250 	.word	0x20000250
 8005b8c:	20000244 	.word	0x20000244
 8005b90:	20000168 	.word	0x20000168
 8005b94:	20000164 	.word	0x20000164

08005b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
    }
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <vTaskPlaceOnEventList+0x44>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe fd2f 	bl	800462a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6838      	ldr	r0, [r7, #0]
 8005bd0:	f000 fdf2 	bl	80067b8 <prvAddCurrentTaskToDelayedList>
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000164 	.word	0x20000164

08005be0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	613b      	str	r3, [r7, #16]
    }
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	61da      	str	r2, [r3, #28]
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6892      	ldr	r2, [r2, #8]
 8005c1e:	621a      	str	r2, [r3, #32]
 8005c20:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	3218      	adds	r2, #24
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f103 0218 	add.w	r2, r3, #24
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	609a      	str	r2, [r3, #8]
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <vTaskPlaceOnEventListRestricted+0x88>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c54:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	68b8      	ldr	r0, [r7, #8]
 8005c5a:	f000 fdad 	bl	80067b8 <prvAddCurrentTaskToDelayedList>
    }
 8005c5e:	bf00      	nop
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000164 	.word	0x20000164

08005c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b08b      	sub	sp, #44	; 0x2c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60fb      	str	r3, [r7, #12]
    }
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	6a12      	ldr	r2, [r2, #32]
 8005ca6:	609a      	str	r2, [r3, #8]
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	69d2      	ldr	r2, [r2, #28]
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	3318      	adds	r3, #24
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d103      	bne.n	8005cc6 <xTaskRemoveFromEventList+0x5a>
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	1e5a      	subs	r2, r3, #1
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd6:	4b4a      	ldr	r3, [pc, #296]	; (8005e00 <xTaskRemoveFromEventList+0x194>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d15e      	bne.n	8005d9c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	68d2      	ldr	r2, [r2, #12]
 8005cec:	609a      	str	r2, [r3, #8]
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	6a3a      	ldr	r2, [r7, #32]
 8005cf4:	6892      	ldr	r2, [r2, #8]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d103      	bne.n	8005d0c <xTaskRemoveFromEventList+0xa0>
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	615a      	str	r2, [r3, #20]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	2201      	movs	r2, #1
 8005d22:	409a      	lsls	r2, r3
 8005d24:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <xTaskRemoveFromEventList+0x198>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	4a36      	ldr	r2, [pc, #216]	; (8005e04 <xTaskRemoveFromEventList+0x198>)
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4935      	ldr	r1, [pc, #212]	; (8005e08 <xTaskRemoveFromEventList+0x19c>)
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3304      	adds	r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	609a      	str	r2, [r3, #8]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	3204      	adds	r2, #4
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <xTaskRemoveFromEventList+0x19c>)
 8005d72:	441a      	add	r2, r3
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	615a      	str	r2, [r3, #20]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	4922      	ldr	r1, [pc, #136]	; (8005e08 <xTaskRemoveFromEventList+0x19c>)
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	481e      	ldr	r0, [pc, #120]	; (8005e08 <xTaskRemoveFromEventList+0x19c>)
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4403      	add	r3, r0
 8005d98:	6019      	str	r1, [r3, #0]
 8005d9a:	e01b      	b.n	8005dd4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <xTaskRemoveFromEventList+0x1a0>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	61da      	str	r2, [r3, #28]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	621a      	str	r2, [r3, #32]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	3218      	adds	r2, #24
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f103 0218 	add.w	r2, r3, #24
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	4a11      	ldr	r2, [pc, #68]	; (8005e0c <xTaskRemoveFromEventList+0x1a0>)
 8005dc8:	629a      	str	r2, [r3, #40]	; 0x28
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <xTaskRemoveFromEventList+0x1a0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <xTaskRemoveFromEventList+0x1a0>)
 8005dd2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <xTaskRemoveFromEventList+0x1a4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d905      	bls.n	8005dee <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005de2:	2301      	movs	r3, #1
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <xTaskRemoveFromEventList+0x1a8>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e001      	b.n	8005df2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	372c      	adds	r7, #44	; 0x2c
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000264 	.word	0x20000264
 8005e04:	20000244 	.word	0x20000244
 8005e08:	20000168 	.word	0x20000168
 8005e0c:	200001fc 	.word	0x200001fc
 8005e10:	20000164 	.word	0x20000164
 8005e14:	20000250 	.word	0x20000250

08005e18 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <vTaskInternalSetTimeOutState+0x24>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <vTaskInternalSetTimeOutState+0x28>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000254 	.word	0x20000254
 8005e40:	20000240 	.word	0x20000240

08005e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	613b      	str	r3, [r7, #16]
    }
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	60fb      	str	r3, [r7, #12]
    }
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005e86:	f001 f98f 	bl	80071a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	; (8005f08 <xTaskCheckForTimeOut+0xc4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea2:	d102      	bne.n	8005eaa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	e026      	b.n	8005ef8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <xTaskCheckForTimeOut+0xc8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d00a      	beq.n	8005ecc <xTaskCheckForTimeOut+0x88>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d305      	bcc.n	8005ecc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e015      	b.n	8005ef8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20b      	bcs.n	8005eee <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff98 	bl	8005e18 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	e004      	b.n	8005ef8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005ef8:	f001 f986 	bl	8007208 <vPortExitCritical>

    return xReturn;
 8005efc:	69fb      	ldr	r3, [r7, #28]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000240 	.word	0x20000240
 8005f0c:	20000254 	.word	0x20000254

08005f10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <vTaskMissedYield+0x14>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	20000250 	.word	0x20000250

08005f28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005f30:	f000 f852 	bl	8005fd8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvIdleTask+0x28>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d9f9      	bls.n	8005f30 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <prvIdleTask+0x2c>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005f4c:	e7f0      	b.n	8005f30 <prvIdleTask+0x8>
 8005f4e:	bf00      	nop
 8005f50:	20000168 	.word	0x20000168
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f5e:	2300      	movs	r3, #0
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	e00c      	b.n	8005f7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <prvInitialiseTaskLists+0x60>)
 8005f70:	4413      	add	r3, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fb08 	bl	8004588 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d9ef      	bls.n	8005f64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005f84:	480d      	ldr	r0, [pc, #52]	; (8005fbc <prvInitialiseTaskLists+0x64>)
 8005f86:	f7fe faff 	bl	8004588 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005f8a:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <prvInitialiseTaskLists+0x68>)
 8005f8c:	f7fe fafc 	bl	8004588 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005f90:	480c      	ldr	r0, [pc, #48]	; (8005fc4 <prvInitialiseTaskLists+0x6c>)
 8005f92:	f7fe faf9 	bl	8004588 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005f96:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <prvInitialiseTaskLists+0x70>)
 8005f98:	f7fe faf6 	bl	8004588 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005f9c:	480b      	ldr	r0, [pc, #44]	; (8005fcc <prvInitialiseTaskLists+0x74>)
 8005f9e:	f7fe faf3 	bl	8004588 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <prvInitialiseTaskLists+0x78>)
 8005fa4:	4a05      	ldr	r2, [pc, #20]	; (8005fbc <prvInitialiseTaskLists+0x64>)
 8005fa6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvInitialiseTaskLists+0x7c>)
 8005faa:	4a05      	ldr	r2, [pc, #20]	; (8005fc0 <prvInitialiseTaskLists+0x68>)
 8005fac:	601a      	str	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000168 	.word	0x20000168
 8005fbc:	200001cc 	.word	0x200001cc
 8005fc0:	200001e0 	.word	0x200001e0
 8005fc4:	200001fc 	.word	0x200001fc
 8005fc8:	20000210 	.word	0x20000210
 8005fcc:	20000228 	.word	0x20000228
 8005fd0:	200001f4 	.word	0x200001f4
 8005fd4:	200001f8 	.word	0x200001f8

08005fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fde:	e019      	b.n	8006014 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005fe0:	f001 f8e2 	bl	80071a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <prvCheckTasksWaitingTermination+0x50>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe fb53 	bl	800469c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <prvCheckTasksWaitingTermination+0x54>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	4a0b      	ldr	r2, [pc, #44]	; (800602c <prvCheckTasksWaitingTermination+0x54>)
 8005ffe:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006008:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800600a:	f001 f8fd 	bl	8007208 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f810 	bl	8006034 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e1      	bne.n	8005fe0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000210 	.word	0x20000210
 800602c:	2000023c 	.word	0x2000023c
 8006030:	20000224 	.word	0x20000224

08006034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fa8d 	bl	8007560 <vPortFree>
            vPortFree( pxTCB );
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 fa8a 	bl	8007560 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006068:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800606a:	e005      	b.n	8006078 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	200001f4 	.word	0x200001f4
 8006088:	2000025c 	.word	0x2000025c

0800608c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <xTaskGetSchedulerState+0x34>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800609a:	2301      	movs	r3, #1
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	e008      	b.n	80060b2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a0:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <xTaskGetSchedulerState+0x38>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80060a8:	2302      	movs	r3, #2
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	e001      	b.n	80060b2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80060ae:	2300      	movs	r3, #0
 80060b0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80060b2:	687b      	ldr	r3, [r7, #4]
    }
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000248 	.word	0x20000248
 80060c4:	20000264 	.word	0x20000264

080060c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d063      	beq.n	80061a6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80060de:	4b34      	ldr	r3, [pc, #208]	; (80061b0 <xTaskPriorityDisinherit+0xe8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d00a      	beq.n	80060fe <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
    }
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60bb      	str	r3, [r7, #8]
    }
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006120:	1e5a      	subs	r2, r3, #1
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612e:	429a      	cmp	r2, r3
 8006130:	d039      	beq.n	80061a6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d135      	bne.n	80061a6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	3304      	adds	r3, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe faac 	bl	800469c <uxListRemove>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	2201      	movs	r2, #1
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43da      	mvns	r2, r3
 8006156:	4b17      	ldr	r3, [pc, #92]	; (80061b4 <xTaskPriorityDisinherit+0xec>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4013      	ands	r3, r2
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <xTaskPriorityDisinherit+0xec>)
 800615e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	f1c3 0205 	rsb	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	2201      	movs	r2, #1
 800617a:	409a      	lsls	r2, r3
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <xTaskPriorityDisinherit+0xec>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <xTaskPriorityDisinherit+0xec>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <xTaskPriorityDisinherit+0xf0>)
 8006194:	441a      	add	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fe fa20 	bl	80045e2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80061a6:	697b      	ldr	r3, [r7, #20]
    }
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000164 	.word	0x20000164
 80061b4:	20000244 	.word	0x20000244
 80061b8:	20000168 	.word	0x20000168

080061bc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
    }
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80061e6:	f000 ffdf 	bl	80071a8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80061ea:	4b32      	ldr	r3, [pc, #200]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	3354      	adds	r3, #84	; 0x54
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d022      	beq.n	8006242 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80061fc:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	3214      	adds	r2, #20
 8006204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	43d2      	mvns	r2, r2
 800620c:	4011      	ands	r1, r2
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	3214      	adds	r2, #20
 8006212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	3354      	adds	r3, #84	; 0x54
 8006220:	2201      	movs	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800622a:	2101      	movs	r1, #1
 800622c:	6a38      	ldr	r0, [r7, #32]
 800622e:	f000 fac3 	bl	80067b8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006232:	4b21      	ldr	r3, [pc, #132]	; (80062b8 <xTaskGenericNotifyWait+0xfc>)
 8006234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006242:	f000 ffe1 	bl	8007208 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006246:	f000 ffaf 	bl	80071a8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006250:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	3214      	adds	r2, #20
 8006258:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006260:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	3354      	adds	r3, #84	; 0x54
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d002      	beq.n	8006278 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e00e      	b.n	8006296 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	3214      	adds	r2, #20
 8006280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	43d2      	mvns	r2, r2
 8006288:	4011      	ands	r1, r2
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	3214      	adds	r2, #20
 800628e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	3354      	adds	r3, #84	; 0x54
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80062a4:	f000 ffb0 	bl	8007208 <vPortExitCritical>

        return xReturn;
 80062a8:	697b      	ldr	r3, [r7, #20]
    }
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000164 	.word	0x20000164
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08e      	sub	sp, #56	; 0x38
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80062ca:	2301      	movs	r3, #1
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <xTaskGenericNotify+0x2e>
        __asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	623b      	str	r3, [r7, #32]
    }
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTaskGenericNotify+0x4a>
        __asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	61fb      	str	r3, [r7, #28]
    }
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800630a:	f000 ff4d 	bl	80071a8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800630e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d006      	beq.n	8006322 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	3214      	adds	r2, #20
 800631a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800631e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006320:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4413      	add	r3, r2
 8006328:	3354      	adds	r3, #84	; 0x54
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	3354      	adds	r3, #84	; 0x54
 8006338:	2202      	movs	r2, #2
 800633a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	2b04      	cmp	r3, #4
 8006340:	d83b      	bhi.n	80063ba <xTaskGenericNotify+0xfe>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <xTaskGenericNotify+0x8c>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	080063d9 	.word	0x080063d9
 800634c:	0800635d 	.word	0x0800635d
 8006350:	08006379 	.word	0x08006379
 8006354:	08006391 	.word	0x08006391
 8006358:	0800639f 	.word	0x0800639f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	3214      	adds	r2, #20
 8006362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	ea42 0103 	orr.w	r1, r2, r3
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	3214      	adds	r2, #20
 8006372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006376:	e032      	b.n	80063de <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	3214      	adds	r2, #20
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	3214      	adds	r2, #20
 800638a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800638e:	e026      	b.n	80063de <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	3214      	adds	r2, #20
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800639c:	e01f      	b.n	80063de <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800639e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d006      	beq.n	80063b4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	3214      	adds	r2, #20
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80063b2:	e014      	b.n	80063de <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80063b8:	e011      	b.n	80063de <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80063ba:	4b4c      	ldr	r3, [pc, #304]	; (80064ec <xTaskGenericNotify+0x230>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <xTaskGenericNotify+0x120>
        __asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61bb      	str	r3, [r7, #24]
    }
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xTaskGenericNotify+0x11a>
                    break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <xTaskGenericNotify+0x122>

                    break;
 80063dc:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d17b      	bne.n	80064de <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	68d2      	ldr	r2, [r2, #12]
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fc:	6892      	ldr	r2, [r2, #8]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	3304      	adds	r3, #4
 8006408:	429a      	cmp	r2, r3
 800640a:	d103      	bne.n	8006414 <xTaskGenericNotify+0x158>
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	2200      	movs	r2, #0
 8006418:	615a      	str	r2, [r3, #20]
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	2201      	movs	r2, #1
 800642a:	409a      	lsls	r2, r3
 800642c:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <xTaskGenericNotify+0x234>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4313      	orrs	r3, r2
 8006432:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <xTaskGenericNotify+0x234>)
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	492e      	ldr	r1, [pc, #184]	; (80064f4 <xTaskGenericNotify+0x238>)
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	3304      	adds	r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006460:	3204      	adds	r2, #4
 8006462:	605a      	str	r2, [r3, #4]
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	1d1a      	adds	r2, r3, #4
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	609a      	str	r2, [r3, #8]
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <xTaskGenericNotify+0x238>)
 800647a:	441a      	add	r2, r3
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	615a      	str	r2, [r3, #20]
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	491b      	ldr	r1, [pc, #108]	; (80064f4 <xTaskGenericNotify+0x238>)
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	4817      	ldr	r0, [pc, #92]	; (80064f4 <xTaskGenericNotify+0x238>)
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4403      	add	r3, r0
 80064a0:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <xTaskGenericNotify+0x204>
        __asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	617b      	str	r3, [r7, #20]
    }
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <xTaskGenericNotify+0x23c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d907      	bls.n	80064de <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80064ce:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <xTaskGenericNotify+0x240>)
 80064d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80064de:	f000 fe93 	bl	8007208 <vPortExitCritical>

        return xReturn;
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80064e4:	4618      	mov	r0, r3
 80064e6:	3738      	adds	r7, #56	; 0x38
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000240 	.word	0x20000240
 80064f0:	20000244 	.word	0x20000244
 80064f4:	20000168 	.word	0x20000168
 80064f8:	20000164 	.word	0x20000164
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006500:	b580      	push	{r7, lr}
 8006502:	b092      	sub	sp, #72	; 0x48
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800650e:	2301      	movs	r3, #1
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800654a:	f000 ff0f 	bl	800736c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8006552:	f3ef 8211 	mrs	r2, BASEPRI
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	623a      	str	r2, [r7, #32]
 8006568:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800656a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	3214      	adds	r2, #20
 800657a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800657e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006580:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4413      	add	r3, r2
 8006588:	3354      	adds	r3, #84	; 0x54
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4413      	add	r3, r2
 8006596:	3354      	adds	r3, #84	; 0x54
 8006598:	2202      	movs	r2, #2
 800659a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d83b      	bhi.n	800661a <xTaskGenericNotifyFromISR+0x11a>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <xTaskGenericNotifyFromISR+0xa8>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	08006639 	.word	0x08006639
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065f1 	.word	0x080065f1
 80065b8:	080065ff 	.word	0x080065ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80065bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	3214      	adds	r2, #20
 80065c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	ea42 0103 	orr.w	r1, r2, r3
 80065cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	3214      	adds	r2, #20
 80065d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065d6:	e032      	b.n	800663e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80065d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	3214      	adds	r2, #20
 80065de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	3214      	adds	r2, #20
 80065ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065ee:	e026      	b.n	800663e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80065f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	3214      	adds	r2, #20
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065fc:	e01f      	b.n	800663e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80065fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006602:	2b02      	cmp	r3, #2
 8006604:	d006      	beq.n	8006614 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	3214      	adds	r2, #20
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006612:	e014      	b.n	800663e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006614:	2300      	movs	r3, #0
 8006616:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8006618:	e011      	b.n	800663e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800661a:	4b60      	ldr	r3, [pc, #384]	; (800679c <xTaskGenericNotifyFromISR+0x29c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00c      	beq.n	800663c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61bb      	str	r3, [r7, #24]
    }
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800663c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800663e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006642:	2b01      	cmp	r3, #1
 8006644:	f040 809e 	bne.w	8006784 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	617b      	str	r3, [r7, #20]
    }
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006666:	4b4e      	ldr	r3, [pc, #312]	; (80067a0 <xTaskGenericNotifyFromISR+0x2a0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d15e      	bne.n	800672c <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800666e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
 8006674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800667a:	68d2      	ldr	r2, [r2, #12]
 800667c:	609a      	str	r2, [r3, #8]
 800667e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006684:	6892      	ldr	r2, [r2, #8]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	3304      	adds	r3, #4
 8006690:	429a      	cmp	r2, r3
 8006692:	d103      	bne.n	800669c <xTaskGenericNotifyFromISR+0x19c>
 8006694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	2200      	movs	r2, #0
 80066a0:	615a      	str	r2, [r3, #20]
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	1e5a      	subs	r2, r3, #1
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80066ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	2201      	movs	r2, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <xTaskGenericNotifyFromISR+0x2a4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	4a3a      	ldr	r2, [pc, #232]	; (80067a4 <xTaskGenericNotifyFromISR+0x2a4>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c2:	4939      	ldr	r1, [pc, #228]	; (80067a8 <xTaskGenericNotifyFromISR+0x2a8>)
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	3304      	adds	r3, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	609a      	str	r2, [r3, #8]
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e8:	3204      	adds	r2, #4
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4a29      	ldr	r2, [pc, #164]	; (80067a8 <xTaskGenericNotifyFromISR+0x2a8>)
 8006702:	441a      	add	r2, r3
 8006704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006706:	615a      	str	r2, [r3, #20]
 8006708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	4926      	ldr	r1, [pc, #152]	; (80067a8 <xTaskGenericNotifyFromISR+0x2a8>)
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	4822      	ldr	r0, [pc, #136]	; (80067a8 <xTaskGenericNotifyFromISR+0x2a8>)
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	6019      	str	r1, [r3, #0]
 800672a:	e01b      	b.n	8006764 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800672c:	4b1f      	ldr	r3, [pc, #124]	; (80067ac <xTaskGenericNotifyFromISR+0x2ac>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
 8006732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006736:	61da      	str	r2, [r3, #28]
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673e:	621a      	str	r2, [r3, #32]
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006746:	3218      	adds	r2, #24
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674c:	f103 0218 	add.w	r2, r3, #24
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006756:	4a15      	ldr	r2, [pc, #84]	; (80067ac <xTaskGenericNotifyFromISR+0x2ac>)
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <xTaskGenericNotifyFromISR+0x2ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	4a12      	ldr	r2, [pc, #72]	; (80067ac <xTaskGenericNotifyFromISR+0x2ac>)
 8006762:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <xTaskGenericNotifyFromISR+0x2b0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	429a      	cmp	r2, r3
 8006770:	d908      	bls.n	8006784 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800677e:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <xTaskGenericNotifyFromISR+0x2b4>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006786:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f383 8811 	msr	BASEPRI, r3
    }
 800678e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8006792:	4618      	mov	r0, r3
 8006794:	3748      	adds	r7, #72	; 0x48
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000240 	.word	0x20000240
 80067a0:	20000264 	.word	0x20000264
 80067a4:	20000244 	.word	0x20000244
 80067a8:	20000168 	.word	0x20000168
 80067ac:	200001fc 	.word	0x200001fc
 80067b0:	20000164 	.word	0x20000164
 80067b4:	20000250 	.word	0x20000250

080067b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067c2:	4b36      	ldr	r3, [pc, #216]	; (800689c <prvAddCurrentTaskToDelayedList+0xe4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067c8:	4b35      	ldr	r3, [pc, #212]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd ff64 	bl	800469c <uxListRemove>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067da:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	2201      	movs	r2, #1
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43da      	mvns	r2, r3
 80067e8:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4013      	ands	r3, r2
 80067ee:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80067f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f8:	d124      	bne.n	8006844 <prvAddCurrentTaskToDelayedList+0x8c>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d021      	beq.n	8006844 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006800:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	609a      	str	r2, [r3, #8]
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	6892      	ldr	r2, [r2, #8]
 8006816:	60da      	str	r2, [r3, #12]
 8006818:	4b21      	ldr	r3, [pc, #132]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	3204      	adds	r2, #4
 8006822:	605a      	str	r2, [r3, #4]
 8006824:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	1d1a      	adds	r2, r3, #4
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	609a      	str	r2, [r3, #8]
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006834:	615a      	str	r2, [r3, #20]
 8006836:	4b1c      	ldr	r3, [pc, #112]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	4a1a      	ldr	r2, [pc, #104]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006842:	e026      	b.n	8006892 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4413      	add	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800684c:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	429a      	cmp	r2, r3
 800685a:	d209      	bcs.n	8006870 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685c:	4b13      	ldr	r3, [pc, #76]	; (80068ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7fd fede 	bl	800462a <vListInsert>
}
 800686e:	e010      	b.n	8006892 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fd fed4 	bl	800462a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	429a      	cmp	r2, r3
 800688a:	d202      	bcs.n	8006892 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6013      	str	r3, [r2, #0]
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000240 	.word	0x20000240
 80068a0:	20000164 	.word	0x20000164
 80068a4:	20000244 	.word	0x20000244
 80068a8:	20000228 	.word	0x20000228
 80068ac:	200001f8 	.word	0x200001f8
 80068b0:	200001f4 	.word	0x200001f4
 80068b4:	2000025c 	.word	0x2000025c

080068b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80068be:	2300      	movs	r3, #0
 80068c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80068c2:	f000 faef 	bl	8006ea4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <xTimerCreateTimerTask+0x54>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <xTimerCreateTimerTask+0x58>)
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	2302      	movs	r3, #2
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80068dc:	490d      	ldr	r1, [pc, #52]	; (8006914 <xTimerCreateTimerTask+0x5c>)
 80068de:	480e      	ldr	r0, [pc, #56]	; (8006918 <xTimerCreateTimerTask+0x60>)
 80068e0:	f7fe fd06 	bl	80052f0 <xTaskCreate>
 80068e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	603b      	str	r3, [r7, #0]
    }
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006902:	687b      	ldr	r3, [r7, #4]
    }
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000298 	.word	0x20000298
 8006910:	2000029c 	.word	0x2000029c
 8006914:	080079ac 	.word	0x080079ac
 8006918:	08006b11 	.word	0x08006b11

0800691c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800692a:	202c      	movs	r0, #44	; 0x2c
 800692c:	f000 fd5e 	bl	80073ec <pvPortMalloc>
 8006930:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f805 	bl	800695e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006954:	697b      	ldr	r3, [r7, #20]
        }
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	617b      	str	r3, [r7, #20]
    }
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006988:	f000 fa8c 	bl	8006ea4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	6a3a      	ldr	r2, [r7, #32]
 80069a2:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	3304      	adds	r3, #4
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fd fe0d 	bl	80045c8 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ba:	f043 0304 	orr.w	r3, r3, #4
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80069de:	2300      	movs	r3, #0
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xTimerGenericCommand+0x2e>
        __asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
    }
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02a      	beq.n	8006a5c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	dc18      	bgt.n	8006a4a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a18:	f7ff fb38 	bl	800608c <xTaskGetSchedulerState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d109      	bne.n	8006a36 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f107 0114 	add.w	r1, r7, #20
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2e:	f7fd ff61 	bl	80048f4 <xQueueGenericSend>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24
 8006a34:	e012      	b.n	8006a5c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	f107 0114 	add.w	r1, r7, #20
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2200      	movs	r2, #0
 8006a42:	f7fd ff57 	bl	80048f4 <xQueueGenericSend>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24
 8006a48:	e008      	b.n	8006a5c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	f107 0114 	add.w	r1, r7, #20
 8006a52:	2300      	movs	r3, #0
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	f7fe f84b 	bl	8004af0 <xQueueGenericSendFromISR>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	; 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000298 	.word	0x20000298

08006a6c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006a78:	e008      	b.n	8006a8c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	18d1      	adds	r1, r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f8dd 	bl	8006c58 <prvInsertTimerInActiveList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1ea      	bne.n	8006a7a <prvReloadTimer+0xe>
        }
    }
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <prvProcessExpiredTimer+0x5c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fd fde7 	bl	800469c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff ffc3 	bl	8006a6c <prvReloadTimer>
 8006ae6:	e008      	b.n	8006afa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	4798      	blx	r3
    }
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000290 	.word	0x20000290

08006b10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b18:	f107 0308 	add.w	r3, r7, #8
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 f857 	bl	8006bd0 <prvGetNextExpireTime>
 8006b22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4619      	mov	r1, r3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f803 	bl	8006b34 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b2e:	f000 f8d5 	bl	8006cdc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b32:	e7f1      	b.n	8006b18 <prvTimerTask+0x8>

08006b34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b3e:	f7fe fd93 	bl	8005668 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b42:	f107 0308 	add.w	r3, r7, #8
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f866 	bl	8006c18 <prvSampleTimeNow>
 8006b4c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d130      	bne.n	8006bb6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <prvProcessTimerOrBlockTask+0x3c>
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d806      	bhi.n	8006b70 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006b62:	f7fe fd8f 	bl	8005684 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ffa1 	bl	8006ab0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006b6e:	e024      	b.n	8006bba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <prvProcessTimerOrBlockTask+0x90>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <prvProcessTimerOrBlockTask+0x50>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <prvProcessTimerOrBlockTask+0x52>
 8006b84:	2300      	movs	r3, #0
 8006b86:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b88:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <prvProcessTimerOrBlockTask+0x94>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	4619      	mov	r1, r3
 8006b96:	f7fe fb77 	bl	8005288 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006b9a:	f7fe fd73 	bl	8005684 <xTaskResumeAll>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006ba4:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <prvProcessTimerOrBlockTask+0x98>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
    }
 8006bb4:	e001      	b.n	8006bba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006bb6:	f7fe fd65 	bl	8005684 <xTaskResumeAll>
    }
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000294 	.word	0x20000294
 8006bc8:	20000298 	.word	0x20000298
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <prvGetNextExpireTime+0x44>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <prvGetNextExpireTime+0x16>
 8006be2:	2201      	movs	r2, #1
 8006be4:	e000      	b.n	8006be8 <prvGetNextExpireTime+0x18>
 8006be6:	2200      	movs	r2, #0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d105      	bne.n	8006c00 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <prvGetNextExpireTime+0x44>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e001      	b.n	8006c04 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006c04:	68fb      	ldr	r3, [r7, #12]
    }
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000290 	.word	0x20000290

08006c18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006c20:	f7fe fe2c 	bl	800587c <xTaskGetTickCount>
 8006c24:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006c26:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <prvSampleTimeNow+0x3c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d205      	bcs.n	8006c3c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c30:	f000 f912 	bl	8006e58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e002      	b.n	8006c42 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c42:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <prvSampleTimeNow+0x3c>)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c48:	68fb      	ldr	r3, [r7, #12]
    }
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	200002a0 	.word	0x200002a0

08006c58 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d812      	bhi.n	8006ca4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	e01b      	b.n	8006cca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c92:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <prvInsertTimerInActiveList+0x7c>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fd fcc4 	bl	800462a <vListInsert>
 8006ca2:	e012      	b.n	8006cca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d206      	bcs.n	8006cba <prvInsertTimerInActiveList+0x62>
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d302      	bcc.n	8006cba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e007      	b.n	8006cca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <prvInsertTimerInActiveList+0x80>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7fd fcb0 	bl	800462a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006cca:	697b      	ldr	r3, [r7, #20]
    }
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000294 	.word	0x20000294
 8006cd8:	20000290 	.word	0x20000290

08006cdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ce2:	e0a6      	b.n	8006e32 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f2c0 80a3 	blt.w	8006e32 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fd fccd 	bl	800469c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d02:	1d3b      	adds	r3, r7, #4
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff ff87 	bl	8006c18 <prvSampleTimeNow>
 8006d0a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	f200 808d 	bhi.w	8006e30 <prvProcessReceivedCommands+0x154>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <prvProcessReceivedCommands+0x40>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d41 	.word	0x08006d41
 8006d24:	08006da9 	.word	0x08006da9
 8006d28:	08006dbd 	.word	0x08006dbd
 8006d2c:	08006e07 	.word	0x08006e07
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d41 	.word	0x08006d41
 8006d38:	08006da9 	.word	0x08006da9
 8006d3c:	08006dbd 	.word	0x08006dbd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	18d1      	adds	r1, r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	69f8      	ldr	r0, [r7, #28]
 8006d60:	f7ff ff7a 	bl	8006c58 <prvInsertTimerInActiveList>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d063      	beq.n	8006e32 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d009      	beq.n	8006d8c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	4413      	add	r3, r2
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4619      	mov	r1, r3
 8006d84:	69f8      	ldr	r0, [r7, #28]
 8006d86:	f7ff fe71 	bl	8006a6c <prvReloadTimer>
 8006d8a:	e008      	b.n	8006d9e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	69f8      	ldr	r0, [r7, #28]
 8006da4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006da6:	e044      	b.n	8006e32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006dba:	e03a      	b.n	8006e32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	617b      	str	r3, [r7, #20]
    }
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	18d1      	adds	r1, r2, r3
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	69f8      	ldr	r0, [r7, #28]
 8006e00:	f7ff ff2a 	bl	8006c58 <prvInsertTimerInActiveList>
                        break;
 8006e04:	e015      	b.n	8006e32 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8006e14:	69f8      	ldr	r0, [r7, #28]
 8006e16:	f000 fba3 	bl	8007560 <vPortFree>
 8006e1a:	e00a      	b.n	8006e32 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e2e:	e000      	b.n	8006e32 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006e30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <prvProcessReceivedCommands+0x178>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f107 0108 	add.w	r1, r7, #8
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fd ff09 	bl	8004c54 <xQueueReceive>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f47f af4d 	bne.w	8006ce4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	3720      	adds	r7, #32
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000298 	.word	0x20000298

08006e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e5e:	e009      	b.n	8006e74 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <prvSwitchTimerLists+0x44>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e6e:	6838      	ldr	r0, [r7, #0]
 8006e70:	f7ff fe1e 	bl	8006ab0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e74:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <prvSwitchTimerLists+0x44>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <prvSwitchTimerLists+0x44>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <prvSwitchTimerLists+0x48>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <prvSwitchTimerLists+0x44>)
 8006e8a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006e8c:	4a04      	ldr	r2, [pc, #16]	; (8006ea0 <prvSwitchTimerLists+0x48>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6013      	str	r3, [r2, #0]
    }
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000290 	.word	0x20000290
 8006ea0:	20000294 	.word	0x20000294

08006ea4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006ea8:	f000 f97e 	bl	80071a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <prvCheckForValidListAndQueue+0x54>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d11d      	bne.n	8006ef0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006eb4:	4811      	ldr	r0, [pc, #68]	; (8006efc <prvCheckForValidListAndQueue+0x58>)
 8006eb6:	f7fd fb67 	bl	8004588 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006eba:	4811      	ldr	r0, [pc, #68]	; (8006f00 <prvCheckForValidListAndQueue+0x5c>)
 8006ebc:	f7fd fb64 	bl	8004588 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006ec0:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <prvCheckForValidListAndQueue+0x60>)
 8006ec2:	4a0e      	ldr	r2, [pc, #56]	; (8006efc <prvCheckForValidListAndQueue+0x58>)
 8006ec4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <prvCheckForValidListAndQueue+0x64>)
 8006ec8:	4a0d      	ldr	r2, [pc, #52]	; (8006f00 <prvCheckForValidListAndQueue+0x5c>)
 8006eca:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006ecc:	2200      	movs	r2, #0
 8006ece:	210c      	movs	r1, #12
 8006ed0:	200a      	movs	r0, #10
 8006ed2:	f7fd fc9d 	bl	8004810 <xQueueGenericCreate>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <prvCheckForValidListAndQueue+0x54>)
 8006eda:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <prvCheckForValidListAndQueue+0x54>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ee4:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <prvCheckForValidListAndQueue+0x54>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4908      	ldr	r1, [pc, #32]	; (8006f0c <prvCheckForValidListAndQueue+0x68>)
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe f97e 	bl	80051ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006ef0:	f000 f98a 	bl	8007208 <vPortExitCritical>
    }
 8006ef4:	bf00      	nop
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000298 	.word	0x20000298
 8006efc:	20000268 	.word	0x20000268
 8006f00:	2000027c 	.word	0x2000027c
 8006f04:	20000290 	.word	0x20000290
 8006f08:	20000294 	.word	0x20000294
 8006f0c:	080079b4 	.word	0x080079b4

08006f10 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60fb      	str	r3, [r7, #12]
    }
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006f38:	f000 f936 	bl	80071a8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006f42:	f000 f961 	bl	8007208 <vPortExitCritical>

        return pvReturn;
 8006f46:	693b      	ldr	r3, [r7, #16]
    }
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3b04      	subs	r3, #4
 8006f60:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006f80:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <pxPortInitialiseStack+0x64>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3b14      	subs	r3, #20
 8006f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3b04      	subs	r3, #4
 8006f96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f06f 0202 	mvn.w	r2, #2
 8006f9e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b20      	subs	r3, #32
 8006fa4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	08006fb9 	.word	0x08006fb9

08006fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006fc2:	4b12      	ldr	r3, [pc, #72]	; (800700c <prvTaskExitError+0x54>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fca:	d00a      	beq.n	8006fe2 <prvTaskExitError+0x2a>
        __asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
    }
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <prvTaskExitError+0x28>
        __asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60bb      	str	r3, [r7, #8]
    }
 8006ff4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006ff6:	bf00      	nop
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0fc      	beq.n	8006ff8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	2000001c 	.word	0x2000001c

08007010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <pxCurrentTCBConst2>)
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	f380 8809 	msr	PSP, r0
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	4770      	bx	lr
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst2>:
 8007030:	20000164 	.word	0x20000164
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007038:	4808      	ldr	r0, [pc, #32]	; (800705c <prvPortStartFirstTask+0x24>)
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	6800      	ldr	r0, [r0, #0]
 800703e:	f380 8808 	msr	MSP, r0
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8814 	msr	CONTROL, r0
 800704a:	b662      	cpsie	i
 800704c:	b661      	cpsie	f
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	df00      	svc	0
 8007058:	bf00      	nop
 800705a:	0000      	.short	0x0000
 800705c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop

08007064 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800706a:	4b46      	ldr	r3, [pc, #280]	; (8007184 <xPortStartScheduler+0x120>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a46      	ldr	r2, [pc, #280]	; (8007188 <xPortStartScheduler+0x124>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10a      	bne.n	800708a <xPortStartScheduler+0x26>
        __asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	613b      	str	r3, [r7, #16]
    }
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800708a:	4b3e      	ldr	r3, [pc, #248]	; (8007184 <xPortStartScheduler+0x120>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a3f      	ldr	r2, [pc, #252]	; (800718c <xPortStartScheduler+0x128>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d10a      	bne.n	80070aa <xPortStartScheduler+0x46>
        __asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
    }
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070aa:	4b39      	ldr	r3, [pc, #228]	; (8007190 <xPortStartScheduler+0x12c>)
 80070ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	4b31      	ldr	r3, [pc, #196]	; (8007194 <xPortStartScheduler+0x130>)
 80070d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070d2:	4b31      	ldr	r3, [pc, #196]	; (8007198 <xPortStartScheduler+0x134>)
 80070d4:	2207      	movs	r2, #7
 80070d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070d8:	e009      	b.n	80070ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80070da:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <xPortStartScheduler+0x134>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3b01      	subs	r3, #1
 80070e0:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <xPortStartScheduler+0x134>)
 80070e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d0ef      	beq.n	80070da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070fa:	4b27      	ldr	r3, [pc, #156]	; (8007198 <xPortStartScheduler+0x134>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f1c3 0307 	rsb	r3, r3, #7
 8007102:	2b04      	cmp	r3, #4
 8007104:	d00a      	beq.n	800711c <xPortStartScheduler+0xb8>
        __asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60bb      	str	r3, [r7, #8]
    }
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800711c:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <xPortStartScheduler+0x134>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <xPortStartScheduler+0x134>)
 8007124:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <xPortStartScheduler+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800712e:	4a1a      	ldr	r2, [pc, #104]	; (8007198 <xPortStartScheduler+0x134>)
 8007130:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800713a:	4b18      	ldr	r3, [pc, #96]	; (800719c <xPortStartScheduler+0x138>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <xPortStartScheduler+0x138>)
 8007140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007144:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007146:	4b15      	ldr	r3, [pc, #84]	; (800719c <xPortStartScheduler+0x138>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a14      	ldr	r2, [pc, #80]	; (800719c <xPortStartScheduler+0x138>)
 800714c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007150:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007152:	f000 f8db 	bl	800730c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <xPortStartScheduler+0x13c>)
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800715c:	f000 f8fa 	bl	8007354 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007160:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <xPortStartScheduler+0x140>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a0f      	ldr	r2, [pc, #60]	; (80071a4 <xPortStartScheduler+0x140>)
 8007166:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800716a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800716c:	f7ff ff64 	bl	8007038 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007170:	f7fe fcb6 	bl	8005ae0 <vTaskSwitchContext>
    prvTaskExitError();
 8007174:	f7ff ff20 	bl	8006fb8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	e000ed00 	.word	0xe000ed00
 8007188:	410fc271 	.word	0x410fc271
 800718c:	410fc270 	.word	0x410fc270
 8007190:	e000e400 	.word	0xe000e400
 8007194:	200002a4 	.word	0x200002a4
 8007198:	200002a8 	.word	0x200002a8
 800719c:	e000ed20 	.word	0xe000ed20
 80071a0:	2000001c 	.word	0x2000001c
 80071a4:	e000ef34 	.word	0xe000ef34

080071a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
        __asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	607b      	str	r3, [r7, #4]
    }
 80071c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <vPortEnterCritical+0x58>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	4a0d      	ldr	r2, [pc, #52]	; (8007200 <vPortEnterCritical+0x58>)
 80071ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <vPortEnterCritical+0x58>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10f      	bne.n	80071f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <vPortEnterCritical+0x5c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
    }
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <vPortEnterCritical+0x4a>
    }
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	2000001c 	.word	0x2000001c
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800720e:	4b12      	ldr	r3, [pc, #72]	; (8007258 <vPortExitCritical+0x50>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <vPortExitCritical+0x24>
        __asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	607b      	str	r3, [r7, #4]
    }
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <vPortExitCritical+0x50>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3b01      	subs	r3, #1
 8007232:	4a09      	ldr	r2, [pc, #36]	; (8007258 <vPortExitCritical+0x50>)
 8007234:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <vPortExitCritical+0x50>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <vPortExitCritical+0x42>
 800723e:	2300      	movs	r3, #0
 8007240:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	f383 8811 	msr	BASEPRI, r3
    }
 8007248:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	2000001c 	.word	0x2000001c
 800725c:	00000000 	.word	0x00000000

08007260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007260:	f3ef 8009 	mrs	r0, PSP
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <pxCurrentTCBConst>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	f01e 0f10 	tst.w	lr, #16
 8007270:	bf08      	it	eq
 8007272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007284:	f380 8811 	msr	BASEPRI, r0
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f7fe fc26 	bl	8005ae0 <vTaskSwitchContext>
 8007294:	f04f 0000 	mov.w	r0, #0
 8007298:	f380 8811 	msr	BASEPRI, r0
 800729c:	bc09      	pop	{r0, r3}
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	6808      	ldr	r0, [r1, #0]
 80072a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a6:	f01e 0f10 	tst.w	lr, #16
 80072aa:	bf08      	it	eq
 80072ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072b0:	f380 8809 	msr	PSP, r0
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst>:
 80072c0:	20000164 	.word	0x20000164
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
        __asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	607b      	str	r3, [r7, #4]
    }
 80072e0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80072e2:	f7fe fae7 	bl	80058b4 <xTaskIncrementTick>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <SysTick_Handler+0x40>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f383 8811 	msr	BASEPRI, r3
    }
 80072fe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <vPortSetupTimerInterrupt+0x34>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <vPortSetupTimerInterrupt+0x38>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <vPortSetupTimerInterrupt+0x3c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <vPortSetupTimerInterrupt+0x40>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <vPortSetupTimerInterrupt+0x44>)
 800732a:	3b01      	subs	r3, #1
 800732c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800732e:	4b04      	ldr	r3, [pc, #16]	; (8007340 <vPortSetupTimerInterrupt+0x34>)
 8007330:	2207      	movs	r2, #7
 8007332:	601a      	str	r2, [r3, #0]
}
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000e010 	.word	0xe000e010
 8007344:	e000e018 	.word	0xe000e018
 8007348:	20000008 	.word	0x20000008
 800734c:	10624dd3 	.word	0x10624dd3
 8007350:	e000e014 	.word	0xe000e014

08007354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007364 <vPortEnableVFP+0x10>
 8007358:	6801      	ldr	r1, [r0, #0]
 800735a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800735e:	6001      	str	r1, [r0, #0]
 8007360:	4770      	bx	lr
 8007362:	0000      	.short	0x0000
 8007364:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop

0800736c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007372:	f3ef 8305 	mrs	r3, IPSR
 8007376:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b0f      	cmp	r3, #15
 800737c:	d914      	bls.n	80073a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800737e:	4a17      	ldr	r2, [pc, #92]	; (80073dc <vPortValidateInterruptPriority+0x70>)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <vPortValidateInterruptPriority+0x74>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	7afa      	ldrb	r2, [r7, #11]
 800738e:	429a      	cmp	r2, r3
 8007390:	d20a      	bcs.n	80073a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	607b      	str	r3, [r7, #4]
    }
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073a8:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <vPortValidateInterruptPriority+0x78>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <vPortValidateInterruptPriority+0x7c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d90a      	bls.n	80073ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	603b      	str	r3, [r7, #0]
    }
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <vPortValidateInterruptPriority+0x60>
    }
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	e000e3f0 	.word	0xe000e3f0
 80073e0:	200002a4 	.word	0x200002a4
 80073e4:	e000ed0c 	.word	0xe000ed0c
 80073e8:	200002a8 	.word	0x200002a8

080073ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80073f8:	f7fe f936 	bl	8005668 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80073fc:	4b53      	ldr	r3, [pc, #332]	; (800754c <pvPortMalloc+0x160>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007404:	f000 f908 	bl	8007618 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d012      	beq.n	8007434 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800740e:	2208      	movs	r2, #8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	3308      	adds	r3, #8
 800741a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	43db      	mvns	r3, r3
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d804      	bhi.n	8007430 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	4413      	add	r3, r2
 800742c:	607b      	str	r3, [r7, #4]
 800742e:	e001      	b.n	8007434 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	db70      	blt.n	800751c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d06d      	beq.n	800751c <pvPortMalloc+0x130>
 8007440:	4b43      	ldr	r3, [pc, #268]	; (8007550 <pvPortMalloc+0x164>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d868      	bhi.n	800751c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800744a:	4b42      	ldr	r3, [pc, #264]	; (8007554 <pvPortMalloc+0x168>)
 800744c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800744e:	4b41      	ldr	r3, [pc, #260]	; (8007554 <pvPortMalloc+0x168>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007454:	e004      	b.n	8007460 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d903      	bls.n	8007472 <pvPortMalloc+0x86>
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f1      	bne.n	8007456 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007472:	4b36      	ldr	r3, [pc, #216]	; (800754c <pvPortMalloc+0x160>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007478:	429a      	cmp	r2, r3
 800747a:	d04f      	beq.n	800751c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2208      	movs	r2, #8
 8007482:	4413      	add	r3, r2
 8007484:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	2308      	movs	r3, #8
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	429a      	cmp	r2, r3
 800749c:	d91f      	bls.n	80074de <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800749e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <pvPortMalloc+0xda>
        __asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	613b      	str	r3, [r7, #16]
    }
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	1ad2      	subs	r2, r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074d8:	6978      	ldr	r0, [r7, #20]
 80074da:	f000 f8f9 	bl	80076d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <pvPortMalloc+0x164>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	4a19      	ldr	r2, [pc, #100]	; (8007550 <pvPortMalloc+0x164>)
 80074ea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074ec:	4b18      	ldr	r3, [pc, #96]	; (8007550 <pvPortMalloc+0x164>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b19      	ldr	r3, [pc, #100]	; (8007558 <pvPortMalloc+0x16c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d203      	bcs.n	8007500 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <pvPortMalloc+0x164>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a16      	ldr	r2, [pc, #88]	; (8007558 <pvPortMalloc+0x16c>)
 80074fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <pvPortMalloc+0x170>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a10      	ldr	r2, [pc, #64]	; (800755c <pvPortMalloc+0x170>)
 800751a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800751c:	f7fe f8b2 	bl	8005684 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <pvPortMalloc+0x154>
        __asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60fb      	str	r3, [r7, #12]
    }
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <pvPortMalloc+0x152>
    return pvReturn;
 8007540:	69fb      	ldr	r3, [r7, #28]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3728      	adds	r7, #40	; 0x28
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20012eb4 	.word	0x20012eb4
 8007550:	20012eb8 	.word	0x20012eb8
 8007554:	20012eac 	.word	0x20012eac
 8007558:	20012ebc 	.word	0x20012ebc
 800755c:	20012ec0 	.word	0x20012ec0

08007560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d049      	beq.n	8007606 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007572:	2308      	movs	r3, #8
 8007574:	425b      	negs	r3, r3
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	db0a      	blt.n	800759e <vPortFree+0x3e>
        __asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
    }
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <vPortFree+0x5c>
        __asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
    }
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	0fdb      	lsrs	r3, r3, #31
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01c      	beq.n	8007606 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d118      	bne.n	8007606 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80075e0:	f7fe f842 	bl	8005668 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	4b09      	ldr	r3, [pc, #36]	; (8007610 <vPortFree+0xb0>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	4a08      	ldr	r2, [pc, #32]	; (8007610 <vPortFree+0xb0>)
 80075f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075f2:	6938      	ldr	r0, [r7, #16]
 80075f4:	f000 f86c 	bl	80076d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <vPortFree+0xb4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	4a05      	ldr	r2, [pc, #20]	; (8007614 <vPortFree+0xb4>)
 8007600:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007602:	f7fe f83f 	bl	8005684 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007606:	bf00      	nop
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20012eb8 	.word	0x20012eb8
 8007614:	20012ec4 	.word	0x20012ec4

08007618 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800761e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007622:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007624:	4b25      	ldr	r3, [pc, #148]	; (80076bc <prvHeapInit+0xa4>)
 8007626:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00c      	beq.n	800764c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3307      	adds	r3, #7
 8007636:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0307 	bic.w	r3, r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <prvHeapInit+0xa4>)
 8007648:	4413      	add	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <prvHeapInit+0xa8>)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007656:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <prvHeapInit+0xa8>)
 8007658:	2200      	movs	r2, #0
 800765a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4413      	add	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007664:	2208      	movs	r2, #8
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4a13      	ldr	r2, [pc, #76]	; (80076c4 <prvHeapInit+0xac>)
 8007678:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <prvHeapInit+0xac>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2200      	movs	r2, #0
 8007680:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007682:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <prvHeapInit+0xac>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	1ad2      	subs	r2, r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvHeapInit+0xac>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	4a08      	ldr	r2, [pc, #32]	; (80076c8 <prvHeapInit+0xb0>)
 80076a6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4a07      	ldr	r2, [pc, #28]	; (80076cc <prvHeapInit+0xb4>)
 80076ae:	6013      	str	r3, [r2, #0]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	200002ac 	.word	0x200002ac
 80076c0:	20012eac 	.word	0x20012eac
 80076c4:	20012eb4 	.word	0x20012eb4
 80076c8:	20012ebc 	.word	0x20012ebc
 80076cc:	20012eb8 	.word	0x20012eb8

080076d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076d8:	4b28      	ldr	r3, [pc, #160]	; (800777c <prvInsertBlockIntoFreeList+0xac>)
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e002      	b.n	80076e4 <prvInsertBlockIntoFreeList+0x14>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d8f7      	bhi.n	80076de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d108      	bne.n	8007712 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	441a      	add	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	441a      	add	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d118      	bne.n	8007758 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	4b15      	ldr	r3, [pc, #84]	; (8007780 <prvInsertBlockIntoFreeList+0xb0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d00d      	beq.n	800774e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	441a      	add	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	e008      	b.n	8007760 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <prvInsertBlockIntoFreeList+0xb0>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e003      	b.n	8007760 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d002      	beq.n	800776e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20012eac 	.word	0x20012eac
 8007780:	20012eb4 	.word	0x20012eb4

08007784 <memset>:
 8007784:	4402      	add	r2, r0
 8007786:	4603      	mov	r3, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	d100      	bne.n	800778e <memset+0xa>
 800778c:	4770      	bx	lr
 800778e:	f803 1b01 	strb.w	r1, [r3], #1
 8007792:	e7f9      	b.n	8007788 <memset+0x4>

08007794 <__libc_init_array>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4d0d      	ldr	r5, [pc, #52]	; (80077cc <__libc_init_array+0x38>)
 8007798:	4c0d      	ldr	r4, [pc, #52]	; (80077d0 <__libc_init_array+0x3c>)
 800779a:	1b64      	subs	r4, r4, r5
 800779c:	10a4      	asrs	r4, r4, #2
 800779e:	2600      	movs	r6, #0
 80077a0:	42a6      	cmp	r6, r4
 80077a2:	d109      	bne.n	80077b8 <__libc_init_array+0x24>
 80077a4:	4d0b      	ldr	r5, [pc, #44]	; (80077d4 <__libc_init_array+0x40>)
 80077a6:	4c0c      	ldr	r4, [pc, #48]	; (80077d8 <__libc_init_array+0x44>)
 80077a8:	f000 f826 	bl	80077f8 <_init>
 80077ac:	1b64      	subs	r4, r4, r5
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	2600      	movs	r6, #0
 80077b2:	42a6      	cmp	r6, r4
 80077b4:	d105      	bne.n	80077c2 <__libc_init_array+0x2e>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077bc:	4798      	blx	r3
 80077be:	3601      	adds	r6, #1
 80077c0:	e7ee      	b.n	80077a0 <__libc_init_array+0xc>
 80077c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c6:	4798      	blx	r3
 80077c8:	3601      	adds	r6, #1
 80077ca:	e7f2      	b.n	80077b2 <__libc_init_array+0x1e>
 80077cc:	080079dc 	.word	0x080079dc
 80077d0:	080079dc 	.word	0x080079dc
 80077d4:	080079dc 	.word	0x080079dc
 80077d8:	080079e0 	.word	0x080079e0

080077dc <memcpy>:
 80077dc:	440a      	add	r2, r1
 80077de:	4291      	cmp	r1, r2
 80077e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077e4:	d100      	bne.n	80077e8 <memcpy+0xc>
 80077e6:	4770      	bx	lr
 80077e8:	b510      	push	{r4, lr}
 80077ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f2:	4291      	cmp	r1, r2
 80077f4:	d1f9      	bne.n	80077ea <memcpy+0xe>
 80077f6:	bd10      	pop	{r4, pc}

080077f8 <_init>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr

08007804 <_fini>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr
