
003_LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  0800732c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  0800732c  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015191  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000331f  00000000  00000000  00035220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  00039978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f04  00000000  00000000  0003a901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d8f  00000000  00000000  0005e805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda64  00000000  00000000  00075594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005474  00000000  00000000  00152ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f2  00000000  00000000  0015846c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007148 	.word	0x08007148

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007148 	.word	0x08007148

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed4 	.word	0x20012ed4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fab3 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f86d 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8d7 	bl	8000760 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005b2:	482d      	ldr	r0, [pc, #180]	; (8000668 <main+0xc8>)
 80005b4:	f004 fb0a 	bl	8004bcc <SEGGER_UART_init>

  // CYCLCNT enable
  DWT_CTRL |= (1<<0);
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <main+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <main+0xcc>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c4:	f004 f92c 	bl	8004820 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	4926      	ldr	r1, [pc, #152]	; (8000670 <main+0xd0>)
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <main+0xd4>)
 80005da:	f002 f9f9 	bl	80029d0 <xTaskCreate>
 80005de:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x5a>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task2_handle);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	491b      	ldr	r1, [pc, #108]	; (8000678 <main+0xd8>)
 800060c:	481b      	ldr	r0, [pc, #108]	; (800067c <main+0xdc>)
 800060e:	f002 f9df 	bl	80029d0 <xTaskCreate>
 8000612:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0x90>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	617b      	str	r3, [r7, #20]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0x8e>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task3_handle);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0xe0>)
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0xe4>)
 8000640:	f002 f9c6 	bl	80029d0 <xTaskCreate>
 8000644:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0xc2>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0xc0>


  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8000662:	f002 fb75 	bl	8002d50 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0xc6>
 8000668:	0007a120 	.word	0x0007a120
 800066c:	e0001000 	.word	0xe0001000
 8000670:	08007160 	.word	0x08007160
 8000674:	08000861 	.word	0x08000861
 8000678:	08007170 	.word	0x08007170
 800067c:	08000889 	.word	0x08000889
 8000680:	08007180 	.word	0x08007180
 8000684:	080008b5 	.word	0x080008b5

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fd1c 	bl	80070d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemClock_Config+0xd0>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <SystemClock_Config+0xd4>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f851 	bl	80017b8 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800071c:	f000 f8f2 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fcd2 	bl	80010e8 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074a:	f000 f8db 	bl	8000904 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <MX_GPIO_Init+0xf4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <MX_GPIO_Init+0xf4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a27      	ldr	r2, [pc, #156]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0xf8>)
 80007ee:	f000 fc47 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_GPIO_Init+0xfc>)
 800080a:	f000 faa5 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0xf8>)
 800082a:	f000 fa95 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 800082e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0xf8>)
 8000848:	f000 fa86 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <led_green_handler+0x20>)
 800086a:	f006 fb85 	bl	8006f78 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 800086e:	2120      	movs	r1, #32
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <led_green_handler+0x24>)
 8000872:	f000 fc1e 	bl	80010b2 <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	f002 fa31 	bl	8002ce0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800087e:	e7f3      	b.n	8000868 <led_green_handler+0x8>
 8000880:	08007190 	.word	0x08007190
 8000884:	40020000 	.word	0x40020000

08000888 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <led_orange_handler+0x24>)
 8000892:	f006 fb71 	bl	8006f78 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN);
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <led_orange_handler+0x28>)
 800089c:	f000 fc09 	bl	80010b2 <HAL_GPIO_TogglePin>
//		HAL_Delay(800);
		vTaskDelay(pdMS_TO_TICKS(800));
 80008a0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008a4:	f002 fa1c 	bl	8002ce0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 80008a8:	e7f2      	b.n	8000890 <led_orange_handler+0x8>
 80008aa:	bf00      	nop
 80008ac:	080071a4 	.word	0x080071a4
 80008b0:	40020000 	.word	0x40020000

080008b4 <led_red_handler>:
	}
}

static void led_red_handler(void* parameters){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <led_red_handler+0x24>)
 80008be:	f006 fb5b 	bl	8006f78 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <led_red_handler+0x28>)
 80008c8:	f000 fbf3 	bl	80010b2 <HAL_GPIO_TogglePin>
//		HAL_Delay(400);
		vTaskDelay(pdMS_TO_TICKS(400));
 80008cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008d0:	f002 fa06 	bl	8002ce0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008d4:	e7f2      	b.n	80008bc <led_red_handler+0x8>
 80008d6:	bf00      	nop
 80008d8:	080071b8 	.word	0x080071b8
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 f92f 	bl	8000b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40000c00 	.word	0x40000c00

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800094e:	f003 fbe3 	bl	8004118 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <HAL_InitTick+0xe4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <HAL_InitTick+0xe4>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <HAL_InitTick+0xe4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098c:	f107 0210 	add.w	r2, r7, #16
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fcac 	bl	80012f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a6:	f000 fc91 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 80009aa:	6378      	str	r0, [r7, #52]	; 0x34
 80009ac:	e004      	b.n	80009b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ae:	f000 fc8d 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 80009b2:	4603      	mov	r3, r0
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <HAL_InitTick+0xe8>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	0c9b      	lsrs	r3, r3, #18
 80009c2:	3b01      	subs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_InitTick+0xec>)
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <HAL_InitTick+0xf0>)
 80009ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <HAL_InitTick+0xec>)
 80009ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_InitTick+0xec>)
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_InitTick+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_InitTick+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_InitTick+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009ec:	4817      	ldr	r0, [pc, #92]	; (8000a4c <HAL_InitTick+0xec>)
 80009ee:	f001 f981 	bl	8001cf4 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11b      	bne.n	8000a38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <HAL_InitTick+0xec>)
 8000a02:	f001 f9d1 	bl	8001da8 <HAL_TIM_Base_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a14:	2032      	movs	r0, #50	; 0x32
 8000a16:	f000 f991 	bl	8000d3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d808      	bhi.n	8000a32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f000 f96d 	bl	8000d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_InitTick+0xf4>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	e002      	b.n	8000a38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	40000c00 	.word	0x40000c00
 8000a54:	20000004 	.word	0x20000004

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM5_IRQHandler+0x10>)
 8000a8a:	f001 f9fd 	bl	8001e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000038 	.word	0x20000038

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f006 fafb 	bl	80070e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd57 	bl	80005a0 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b00:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 8000b04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b08:	200144a8 	.word	0x200144a8

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f8d8 	bl	8000cee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ff0e 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fee4 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000080 	.word	0x20000080

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000080 	.word	0x20000080

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff4c 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d16:	f7ff ff61 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff ffb1 	bl	8000c88 <NVIC_EncodePriority>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff80 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff54 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e165      	b.n	8001040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8154 	bne.w	800103a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80ae 	beq.w	800103a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a5c      	ldr	r2, [pc, #368]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a58      	ldr	r2, [pc, #352]	; (800105c <HAL_GPIO_Init+0x304>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x308>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_GPIO_Init+0x30c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <HAL_GPIO_Init+0x310>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x20e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x20a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x206>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x202>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	4935      	ldr	r1, [pc, #212]	; (800105c <HAL_GPIO_Init+0x304>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_GPIO_Init+0x324>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a26      	ldr	r2, [pc, #152]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_GPIO_Init+0x324>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_GPIO_Init+0x324>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	f67f ae96 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	400b      	ands	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0cc      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d90c      	bls.n	8001124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800115e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d044      	beq.n	8001208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d119      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e067      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 0203 	bic.w	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fcd0 	bl	8000b7c <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e0:	f7ff fccc 	bl	8000b7c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e04f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 020c 	and.w	r2, r3, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d1eb      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d20c      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f873 	bl	8001358 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb66 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	40023800 	.word	0x40023800
 80012a8:	080072ac 	.word	0x080072ac
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	4903      	ldr	r1, [pc, #12]	; (80012f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	080072bc 	.word	0x080072bc

080012f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	220f      	movs	r2, #15
 8001302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_RCC_GetClockConfig+0x5c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_RCC_GetClockConfig+0x5c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_RCC_GetClockConfig+0x5c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_GetClockConfig+0x5c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_RCC_GetClockConfig+0x60>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 020f 	and.w	r2, r3, #15
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800135c:	b0ae      	sub	sp, #184	; 0xb8
 800135e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137e:	4bcb      	ldr	r3, [pc, #812]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b0c      	cmp	r3, #12
 8001388:	f200 8206 	bhi.w	8001798 <HAL_RCC_GetSysClockFreq+0x440>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <HAL_RCC_GetSysClockFreq+0x3c>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013c9 	.word	0x080013c9
 8001398:	08001799 	.word	0x08001799
 800139c:	08001799 	.word	0x08001799
 80013a0:	08001799 	.word	0x08001799
 80013a4:	080013d1 	.word	0x080013d1
 80013a8:	08001799 	.word	0x08001799
 80013ac:	08001799 	.word	0x08001799
 80013b0:	08001799 	.word	0x08001799
 80013b4:	080013d9 	.word	0x080013d9
 80013b8:	08001799 	.word	0x08001799
 80013bc:	08001799 	.word	0x08001799
 80013c0:	08001799 	.word	0x08001799
 80013c4:	080015c9 	.word	0x080015c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c8:	4bb9      	ldr	r3, [pc, #740]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013ce:	e1e7      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013d0:	4bb8      	ldr	r3, [pc, #736]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013d6:	e1e3      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d8:	4bb4      	ldr	r3, [pc, #720]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e4:	4bb1      	ldr	r3, [pc, #708]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d071      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f0:	4bae      	ldr	r3, [pc, #696]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001412:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001416:	4622      	mov	r2, r4
 8001418:	462b      	mov	r3, r5
 800141a:	f04f 0000 	mov.w	r0, #0
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001428:	0150      	lsls	r0, r2, #5
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4621      	mov	r1, r4
 8001430:	1a51      	subs	r1, r2, r1
 8001432:	6439      	str	r1, [r7, #64]	; 0x40
 8001434:	4629      	mov	r1, r5
 8001436:	eb63 0301 	sbc.w	r3, r3, r1
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001448:	4649      	mov	r1, r9
 800144a:	018b      	lsls	r3, r1, #6
 800144c:	4641      	mov	r1, r8
 800144e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001452:	4641      	mov	r1, r8
 8001454:	018a      	lsls	r2, r1, #6
 8001456:	4641      	mov	r1, r8
 8001458:	1a51      	subs	r1, r2, r1
 800145a:	63b9      	str	r1, [r7, #56]	; 0x38
 800145c:	4649      	mov	r1, r9
 800145e:	eb63 0301 	sbc.w	r3, r3, r1
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001470:	4649      	mov	r1, r9
 8001472:	00cb      	lsls	r3, r1, #3
 8001474:	4641      	mov	r1, r8
 8001476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800147a:	4641      	mov	r1, r8
 800147c:	00ca      	lsls	r2, r1, #3
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	4603      	mov	r3, r0
 8001484:	4622      	mov	r2, r4
 8001486:	189b      	adds	r3, r3, r2
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
 800148a:	462b      	mov	r3, r5
 800148c:	460a      	mov	r2, r1
 800148e:	eb42 0303 	adc.w	r3, r2, r3
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014a0:	4629      	mov	r1, r5
 80014a2:	024b      	lsls	r3, r1, #9
 80014a4:	4621      	mov	r1, r4
 80014a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014aa:	4621      	mov	r1, r4
 80014ac:	024a      	lsls	r2, r1, #9
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014c4:	f7fe feee 	bl	80002a4 <__aeabi_uldivmod>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4613      	mov	r3, r2
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014d2:	e067      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80014ee:	2300      	movs	r3, #0
 80014f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014f6:	4622      	mov	r2, r4
 80014f8:	462b      	mov	r3, r5
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001508:	0150      	lsls	r0, r2, #5
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4621      	mov	r1, r4
 8001510:	1a51      	subs	r1, r2, r1
 8001512:	62b9      	str	r1, [r7, #40]	; 0x28
 8001514:	4629      	mov	r1, r5
 8001516:	eb63 0301 	sbc.w	r3, r3, r1
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001528:	4649      	mov	r1, r9
 800152a:	018b      	lsls	r3, r1, #6
 800152c:	4641      	mov	r1, r8
 800152e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001532:	4641      	mov	r1, r8
 8001534:	018a      	lsls	r2, r1, #6
 8001536:	4641      	mov	r1, r8
 8001538:	ebb2 0a01 	subs.w	sl, r2, r1
 800153c:	4649      	mov	r1, r9
 800153e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800154e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001556:	4692      	mov	sl, r2
 8001558:	469b      	mov	fp, r3
 800155a:	4623      	mov	r3, r4
 800155c:	eb1a 0303 	adds.w	r3, sl, r3
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	462b      	mov	r3, r5
 8001564:	eb4b 0303 	adc.w	r3, fp, r3
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001576:	4629      	mov	r1, r5
 8001578:	028b      	lsls	r3, r1, #10
 800157a:	4621      	mov	r1, r4
 800157c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001580:	4621      	mov	r1, r4
 8001582:	028a      	lsls	r2, r1, #10
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800158c:	2200      	movs	r2, #0
 800158e:	673b      	str	r3, [r7, #112]	; 0x70
 8001590:	677a      	str	r2, [r7, #116]	; 0x74
 8001592:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001596:	f7fe fe85 	bl	80002a4 <__aeabi_uldivmod>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4613      	mov	r3, r2
 80015a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a4:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	3301      	adds	r3, #1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015c6:	e0eb      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d06b      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	2200      	movs	r2, #0
 80015e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80015ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f2:	663b      	str	r3, [r7, #96]	; 0x60
 80015f4:	2300      	movs	r3, #0
 80015f6:	667b      	str	r3, [r7, #100]	; 0x64
 80015f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015fc:	4622      	mov	r2, r4
 80015fe:	462b      	mov	r3, r5
 8001600:	f04f 0000 	mov.w	r0, #0
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	0159      	lsls	r1, r3, #5
 800160a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800160e:	0150      	lsls	r0, r2, #5
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4621      	mov	r1, r4
 8001616:	1a51      	subs	r1, r2, r1
 8001618:	61b9      	str	r1, [r7, #24]
 800161a:	4629      	mov	r1, r5
 800161c:	eb63 0301 	sbc.w	r3, r3, r1
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800162e:	4659      	mov	r1, fp
 8001630:	018b      	lsls	r3, r1, #6
 8001632:	4651      	mov	r1, sl
 8001634:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001638:	4651      	mov	r1, sl
 800163a:	018a      	lsls	r2, r1, #6
 800163c:	4651      	mov	r1, sl
 800163e:	ebb2 0801 	subs.w	r8, r2, r1
 8001642:	4659      	mov	r1, fp
 8001644:	eb63 0901 	sbc.w	r9, r3, r1
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001654:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001658:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800165c:	4690      	mov	r8, r2
 800165e:	4699      	mov	r9, r3
 8001660:	4623      	mov	r3, r4
 8001662:	eb18 0303 	adds.w	r3, r8, r3
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	462b      	mov	r3, r5
 800166a:	eb49 0303 	adc.w	r3, r9, r3
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800167c:	4629      	mov	r1, r5
 800167e:	024b      	lsls	r3, r1, #9
 8001680:	4621      	mov	r1, r4
 8001682:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001686:	4621      	mov	r1, r4
 8001688:	024a      	lsls	r2, r1, #9
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001692:	2200      	movs	r2, #0
 8001694:	65bb      	str	r3, [r7, #88]	; 0x58
 8001696:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001698:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800169c:	f7fe fe02 	bl	80002a4 <__aeabi_uldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4613      	mov	r3, r2
 80016a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016aa:	e065      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x420>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b8:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	2200      	movs	r2, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	4611      	mov	r1, r2
 80016c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016c8:	653b      	str	r3, [r7, #80]	; 0x50
 80016ca:	2300      	movs	r3, #0
 80016cc:	657b      	str	r3, [r7, #84]	; 0x54
 80016ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016d2:	4642      	mov	r2, r8
 80016d4:	464b      	mov	r3, r9
 80016d6:	f04f 0000 	mov.w	r0, #0
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	0159      	lsls	r1, r3, #5
 80016e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e4:	0150      	lsls	r0, r2, #5
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4641      	mov	r1, r8
 80016ec:	1a51      	subs	r1, r2, r1
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	4649      	mov	r1, r9
 80016f2:	eb63 0301 	sbc.w	r3, r3, r1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001704:	4659      	mov	r1, fp
 8001706:	018b      	lsls	r3, r1, #6
 8001708:	4651      	mov	r1, sl
 800170a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800170e:	4651      	mov	r1, sl
 8001710:	018a      	lsls	r2, r1, #6
 8001712:	4651      	mov	r1, sl
 8001714:	1a54      	subs	r4, r2, r1
 8001716:	4659      	mov	r1, fp
 8001718:	eb63 0501 	sbc.w	r5, r3, r1
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	00eb      	lsls	r3, r5, #3
 8001726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172a:	00e2      	lsls	r2, r4, #3
 800172c:	4614      	mov	r4, r2
 800172e:	461d      	mov	r5, r3
 8001730:	4643      	mov	r3, r8
 8001732:	18e3      	adds	r3, r4, r3
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	464b      	mov	r3, r9
 8001738:	eb45 0303 	adc.w	r3, r5, r3
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174a:	4629      	mov	r1, r5
 800174c:	028b      	lsls	r3, r1, #10
 800174e:	4621      	mov	r1, r4
 8001750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001754:	4621      	mov	r1, r4
 8001756:	028a      	lsls	r2, r1, #10
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001760:	2200      	movs	r2, #0
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
 8001764:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001766:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800176a:	f7fe fd9b 	bl	80002a4 <__aeabi_uldivmod>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4613      	mov	r3, r2
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0f1b      	lsrs	r3, r3, #28
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800178a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001796:	e003      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800179a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800179e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	37b8      	adds	r7, #184	; 0xb8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	00f42400 	.word	0x00f42400

080017b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e28d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8083 	beq.w	80018de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d8:	4b94      	ldr	r3, [pc, #592]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d019      	beq.n	8001818 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e4:	4b91      	ldr	r3, [pc, #580]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f0:	4b8e      	ldr	r3, [pc, #568]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017fc:	d00c      	beq.n	8001818 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d112      	bne.n	8001830 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001816:	d10b      	bne.n	8001830 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b84      	ldr	r3, [pc, #528]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d05b      	beq.n	80018dc <HAL_RCC_OscConfig+0x124>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d157      	bne.n	80018dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e25a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x90>
 800183a:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7b      	ldr	r2, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xcc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xb4>
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a75      	ldr	r2, [pc, #468]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a72      	ldr	r2, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xcc>
 800186c:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6b      	ldr	r2, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f976 	bl	8000b7c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff f972 	bl	8000b7c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e21f      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xdc>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f962 	bl	8000b7c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff f95e 	bl	8000b7c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e20b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x104>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d06f      	beq.n	80019ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ea:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d017      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f6:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d11c      	bne.n	8001954 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x186>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e1d3      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	e03a      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0x278>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff f90b 	bl	8000b7c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff f907 	bl	8000b7c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1b4      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4925      	ldr	r1, [pc, #148]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x278>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f8ea 	bl	8000b7c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff f8e6 	bl	8000b7c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e193      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d036      	beq.n	8001a44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff f8ca 	bl	8000b7c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff f8c6 	bl	8000b7c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e173      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x234>
 8001a0a:	e01b      	b.n	8001a44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff f8b3 	bl	8000b7c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	e00e      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f8af 	bl	8000b7c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d907      	bls.n	8001a38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e15c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	42470000 	.word	0x42470000
 8001a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b8a      	ldr	r3, [pc, #552]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ea      	bne.n	8001a1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8097 	beq.w	8001b80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b83      	ldr	r3, [pc, #524]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a7e      	ldr	r2, [pc, #504]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b7c      	ldr	r3, [pc, #496]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a75      	ldr	r2, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f86f 	bl	8000b7c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff f86b 	bl	8000b7c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e118      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x31e>
 8001ac8:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a65      	ldr	r2, [pc, #404]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x340>
 8001ade:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a5d      	ldr	r2, [pc, #372]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001af8:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a59      	ldr	r2, [pc, #356]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
 8001b04:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f023 0304 	bic.w	r3, r3, #4
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d015      	beq.n	8001b44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f830 	bl	8000b7c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f82c 	bl	8000b7c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0d7      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ee      	beq.n	8001b20 <HAL_RCC_OscConfig+0x368>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f81a 	bl	8000b7c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f816 	bl	8000b7c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0c1      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80ad 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d060      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d145      	bne.n	8001c2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4b4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ffea 	bl	8000b7c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe ffe6 	bl	8000b7c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e093      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	071b      	lsls	r3, r3, #28
 8001bf6:	491b      	ldr	r1, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x4b4>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7fe ffbb 	bl	8000b7c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7fe ffb7 	bl	8000b7c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e064      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x452>
 8001c28:	e05c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_RCC_OscConfig+0x4b4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffa4 	bl	8000b7c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7fe ffa0 	bl	8000b7c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x480>
 8001c56:	e045      	b.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e040      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x538>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d030      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d129      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d122      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d119      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e041      	b.n	8001d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f839 	bl	8001d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f000 f9d8 	bl	80020e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d001      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04e      	b.n	8001e5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d022      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d01d      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d018      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00e      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d009      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d010      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4a:	e007      	b.n	8001e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40000c00 	.word	0x40000c00
 8001e7c:	40010400 	.word	0x40010400
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40001800 	.word	0x40001800

08001e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0202 	mvn.w	r2, #2
 8001eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8ee 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8e0 	bl	8002098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8f1 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0204 	mvn.w	r2, #4
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8c4 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8b6 	bl	8002098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f8c7 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0208 	mvn.w	r2, #8
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2204      	movs	r2, #4
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f89a 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f88c 	bl	8002098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f89d 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0210 	mvn.w	r2, #16
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f870 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f862 	bl	8002098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f873 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0201 	mvn.w	r2, #1
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fc6a 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b80      	cmp	r3, #128	; 0x80
 8002018:	d10e      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d107      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f902 	bl	800223c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	2b40      	cmp	r3, #64	; 0x40
 8002052:	d107      	bne.n	8002064 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f838 	bl	80020d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b20      	cmp	r3, #32
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b20      	cmp	r3, #32
 800207e:	d107      	bne.n	8002090 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0220 	mvn.w	r2, #32
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8cc 	bl	8002228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a40      	ldr	r2, [pc, #256]	; (80021fc <TIM_Base_SetConfig+0x114>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002106:	d00f      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <TIM_Base_SetConfig+0x118>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00b      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3c      	ldr	r2, [pc, #240]	; (8002204 <TIM_Base_SetConfig+0x11c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <TIM_Base_SetConfig+0x120>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3a      	ldr	r2, [pc, #232]	; (800220c <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d108      	bne.n	800213a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <TIM_Base_SetConfig+0x114>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02b      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d027      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <TIM_Base_SetConfig+0x118>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d023      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <TIM_Base_SetConfig+0x11c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01f      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <TIM_Base_SetConfig+0x120>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01b      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a29      	ldr	r2, [pc, #164]	; (800220c <TIM_Base_SetConfig+0x124>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d017      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <TIM_Base_SetConfig+0x128>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <TIM_Base_SetConfig+0x12c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00f      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a26      	ldr	r2, [pc, #152]	; (8002218 <TIM_Base_SetConfig+0x130>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00b      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a25      	ldr	r2, [pc, #148]	; (800221c <TIM_Base_SetConfig+0x134>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a24      	ldr	r2, [pc, #144]	; (8002220 <TIM_Base_SetConfig+0x138>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <TIM_Base_SetConfig+0x13c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d108      	bne.n	80021ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <TIM_Base_SetConfig+0x114>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_Base_SetConfig+0xf8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0c      	ldr	r2, [pc, #48]	; (800220c <TIM_Base_SetConfig+0x124>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d103      	bne.n	80021e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	615a      	str	r2, [r3, #20]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40010000 	.word	0x40010000
 8002200:	40000400 	.word	0x40000400
 8002204:	40000800 	.word	0x40000800
 8002208:	40000c00 	.word	0x40000c00
 800220c:	40010400 	.word	0x40010400
 8002210:	40014000 	.word	0x40014000
 8002214:	40014400 	.word	0x40014400
 8002218:	40014800 	.word	0x40014800
 800221c:	40001800 	.word	0x40001800
 8002220:	40001c00 	.word	0x40001c00
 8002224:	40002000 	.word	0x40002000

08002228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0208 	add.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002268:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f103 0208 	add.w	r2, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c0:	d103      	bne.n	80022ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e00c      	b.n	80022e4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3308      	adds	r3, #8
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e002      	b.n	80022d8 <vListInsert+0x2e>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d2f6      	bcs.n	80022d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6892      	ldr	r2, [r2, #8]
 8002332:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6852      	ldr	r2, [r2, #4]
 800233c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d103      	bne.n	8002350 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800237a:	2301      	movs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <xQueueGenericReset+0x2e>
        __asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	60fb      	str	r3, [r7, #12]
    }
 800239a:	bf00      	nop
 800239c:	e7fe      	b.n	800239c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d05d      	beq.n	8002460 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d059      	beq.n	8002460 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	2100      	movs	r1, #0
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d000      	beq.n	80023c0 <xQueueGenericReset+0x50>
 80023be:	2101      	movs	r1, #1
 80023c0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d14c      	bne.n	8002460 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80023c6:	f001 ff25 	bl	8004214 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	6939      	ldr	r1, [r7, #16]
 80023d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	441a      	add	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2200      	movs	r2, #0
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6939      	ldr	r1, [r7, #16]
 80023fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	441a      	add	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d114      	bne.n	8002446 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01a      	beq.n	800245a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	3310      	adds	r3, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f001 f813 	bl	8003454 <xTaskRemoveFromEventList>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d012      	beq.n	800245a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <xQueueGenericReset+0x11c>)
 8002436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	e009      	b.n	800245a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	3310      	adds	r3, #16
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff00 	bl	8002250 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	3324      	adds	r3, #36	; 0x24
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fefb 	bl	8002250 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800245a:	f001 ff0b 	bl	8004274 <vPortExitCritical>
 800245e:	e001      	b.n	8002464 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <xQueueGenericReset+0x110>
        __asm volatile
 800246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	60bb      	str	r3, [r7, #8]
    }
 800247c:	bf00      	nop
 800247e:	e7fe      	b.n	800247e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002480:	697b      	ldr	r3, [r7, #20]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000ed04 	.word	0xe000ed04

08002490 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02e      	beq.n	8002506 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024a8:	2100      	movs	r1, #0
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	fba3 2302 	umull	r2, r3, r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d000      	beq.n	80024b8 <xQueueGenericCreate+0x28>
 80024b6:	2101      	movs	r1, #1
 80024b8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d123      	bne.n	8002506 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024c6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024ca:	d81c      	bhi.n	8002506 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3350      	adds	r3, #80	; 0x50
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 ffc6 	bl	800446c <pvPortMalloc>
 80024e0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3350      	adds	r3, #80	; 0x50
 80024f0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024f2:	79fa      	ldrb	r2, [r7, #7]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f814 	bl	800252c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002504:	e00d      	b.n	8002522 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericCreate+0x92>
        __asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	613b      	str	r3, [r7, #16]
    }
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002522:	69fb      	ldr	r3, [r7, #28]
    }
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e002      	b.n	800254e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800255a:	2101      	movs	r1, #1
 800255c:	69b8      	ldr	r0, [r7, #24]
 800255e:	f7ff ff07 	bl	8002370 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	68f9      	ldr	r1, [r7, #12]
 8002570:	2073      	movs	r0, #115	; 0x73
 8002572:	f003 fedd 	bl	8006330 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b08f      	sub	sp, #60	; 0x3c
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <xQueueReceive+0x30>
        __asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	623b      	str	r3, [r7, #32]
    }
 80025ac:	bf00      	nop
 80025ae:	e7fe      	b.n	80025ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <xQueueReceive+0x3e>
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <xQueueReceive+0x42>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <xQueueReceive+0x44>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xQueueReceive+0x5e>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	61fb      	str	r3, [r7, #28]
    }
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025de:	f001 f94b 	bl	8003878 <xTaskGetSchedulerState>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <xQueueReceive+0x6e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <xQueueReceive+0x72>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <xQueueReceive+0x74>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <xQueueReceive+0x8e>
        __asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	61bb      	str	r3, [r7, #24]
    }
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800260e:	f001 fe01 	bl	8004214 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02f      	beq.n	800267e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002622:	f000 f8bd 	bl	80027a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fbaf 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 800262e:	4604      	mov	r4, r0
 8002630:	2000      	movs	r0, #0
 8002632:	f004 fbab 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2101      	movs	r1, #1
 800263c:	9100      	str	r1, [sp, #0]
 800263e:	4621      	mov	r1, r4
 8002640:	205c      	movs	r0, #92	; 0x5c
 8002642:	f003 feeb 	bl	800641c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	1e5a      	subs	r2, r3, #1
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00f      	beq.n	8002676 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	3310      	adds	r3, #16
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fefa 	bl	8003454 <xTaskRemoveFromEventList>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002666:	4b4d      	ldr	r3, [pc, #308]	; (800279c <xQueueReceive+0x21c>)
 8002668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002676:	f001 fdfd 	bl	8004274 <vPortExitCritical>
                return pdPASS;
 800267a:	2301      	movs	r3, #1
 800267c:	e08a      	b.n	8002794 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d113      	bne.n	80026ac <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002684:	f001 fdf6 	bl	8004274 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fb7e 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 8002690:	4604      	mov	r4, r0
 8002692:	2000      	movs	r0, #0
 8002694:	f004 fb7a 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2101      	movs	r1, #1
 800269e:	9100      	str	r1, [sp, #0]
 80026a0:	4621      	mov	r1, r4
 80026a2:	205c      	movs	r0, #92	; 0x5c
 80026a4:	f003 feba 	bl	800641c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e073      	b.n	8002794 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 ffa4 	bl	8003604 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026c0:	f001 fdd8 	bl	8004274 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026c4:	f000 fba6 	bl	8002e14 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026c8:	f001 fda4 	bl	8004214 <vPortEnterCritical>
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d103      	bne.n	80026e2 <xQueueReceive+0x162>
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ee:	d103      	bne.n	80026f8 <xQueueReceive+0x178>
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026f8:	f001 fdbc 	bl	8004274 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026fc:	1d3a      	adds	r2, r7, #4
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 ff93 	bl	8003630 <xTaskCheckForTimeOut>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d124      	bne.n	800275a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002712:	f000 f8bd 	bl	8002890 <prvIsQueueEmpty>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d018      	beq.n	800274e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	3324      	adds	r3, #36	; 0x24
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fe29 	bl	800337c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800272a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272c:	f000 f85e 	bl	80027ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002730:	f000 fb7e 	bl	8002e30 <xTaskResumeAll>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f af69 	bne.w	800260e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <xQueueReceive+0x21c>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	e75f      	b.n	800260e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800274e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002750:	f000 f84c 	bl	80027ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002754:	f000 fb6c 	bl	8002e30 <xTaskResumeAll>
 8002758:	e759      	b.n	800260e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800275a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275c:	f000 f846 	bl	80027ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002760:	f000 fb66 	bl	8002e30 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002766:	f000 f893 	bl	8002890 <prvIsQueueEmpty>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f43f af4e 	beq.w	800260e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	4618      	mov	r0, r3
 8002776:	f004 fb09 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 800277a:	4604      	mov	r4, r0
 800277c:	2000      	movs	r0, #0
 800277e:	f004 fb05 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2101      	movs	r1, #1
 8002788:	9100      	str	r1, [sp, #0]
 800278a:	4621      	mov	r1, r4
 800278c:	205c      	movs	r0, #92	; 0x5c
 800278e:	f003 fe45 	bl	800641c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002792:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002794:	4618      	mov	r0, r3
 8002796:	3734      	adds	r7, #52	; 0x34
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d303      	bcc.n	80027d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	461a      	mov	r2, r3
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f004 fca4 	bl	800712c <memcpy>
    }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027f4:	f001 fd0e 	bl	8004214 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002800:	e011      	b.n	8002826 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3324      	adds	r3, #36	; 0x24
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fe20 	bl	8003454 <xTaskRemoveFromEventList>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800281a:	f000 ff6f 	bl	80036fc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	3b01      	subs	r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	dce9      	bgt.n	8002802 <prvUnlockQueue+0x16>
 800282e:	e000      	b.n	8002832 <prvUnlockQueue+0x46>
                    break;
 8002830:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	22ff      	movs	r2, #255	; 0xff
 8002836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800283a:	f001 fd1b 	bl	8004274 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800283e:	f001 fce9 	bl	8004214 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002848:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800284a:	e011      	b.n	8002870 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3310      	adds	r3, #16
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fdfb 	bl	8003454 <xTaskRemoveFromEventList>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002864:	f000 ff4a 	bl	80036fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002868:	7bbb      	ldrb	r3, [r7, #14]
 800286a:	3b01      	subs	r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002874:	2b00      	cmp	r3, #0
 8002876:	dce9      	bgt.n	800284c <prvUnlockQueue+0x60>
 8002878:	e000      	b.n	800287c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800287a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002884:	f001 fcf6 	bl	8004274 <vPortExitCritical>
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002898:	f001 fcbc 	bl	8004214 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e001      	b.n	80028ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ae:	f001 fce1 	bl	8004274 <vPortExitCritical>

    return xReturn;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	60fb      	str	r3, [r7, #12]
    }
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d024      	beq.n	8002936 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e01e      	b.n	8002930 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <vQueueAddToRegistry+0xa8>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d105      	bne.n	800290e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <vQueueAddToRegistry+0xa8>)
 8002908:	4413      	add	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
                    break;
 800290c:	e013      	b.n	8002936 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <vQueueAddToRegistry+0x6e>
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <vQueueAddToRegistry+0xa8>)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <vQueueAddToRegistry+0xa8>)
 8002926:	4413      	add	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b07      	cmp	r3, #7
 8002934:	d9dd      	bls.n	80028f2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00f      	beq.n	800295c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fa1e 	bl	8006d8c <SEGGER_SYSVIEW_ShrinkId>
 8002950:	4601      	mov	r1, r0
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	2071      	movs	r0, #113	; 0x71
 8002958:	f003 fc90 	bl	800627c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000084 	.word	0x20000084

08002968 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002978:	f001 fc4c 	bl	8004214 <vPortEnterCritical>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002982:	b25b      	sxtb	r3, r3
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002988:	d103      	bne.n	8002992 <vQueueWaitForMessageRestricted+0x2a>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002998:	b25b      	sxtb	r3, r3
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299e:	d103      	bne.n	80029a8 <vQueueWaitForMessageRestricted+0x40>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a8:	f001 fc64 	bl	8004274 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3324      	adds	r3, #36	; 0x24
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fd01 	bl	80033c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff12 	bl	80027ec <prvUnlockQueue>
    }
 80029c8:	bf00      	nop
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 fd41 	bl	800446c <pvPortMalloc>
 80029ea:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d013      	beq.n	8002a1a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029f2:	2058      	movs	r0, #88	; 0x58
 80029f4:	f001 fd3a 	bl	800446c <pvPortMalloc>
 80029f8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a00:	2258      	movs	r2, #88	; 0x58
 8002a02:	2100      	movs	r1, #0
 8002a04:	69f8      	ldr	r0, [r7, #28]
 8002a06:	f004 fb65 	bl	80070d4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a10:	e005      	b.n	8002a1e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f001 fde4 	bl	80045e0 <vPortFree>
 8002a18:	e001      	b.n	8002a1e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9303      	str	r3, [sp, #12]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	9302      	str	r3, [sp, #8]
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f80e 	bl	8002a5c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a40:	69f8      	ldr	r0, [r7, #28]
 8002a42:	f000 f899 	bl	8002b78 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	e002      	b.n	8002a52 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a50:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a52:	69bb      	ldr	r3, [r7, #24]
    }
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	21a5      	movs	r1, #165	; 0xa5
 8002a76:	f004 fb2d 	bl	80070d4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a84:	3b01      	subs	r3, #1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f023 0307 	bic.w	r3, r3, #7
 8002a92:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	617b      	str	r3, [r7, #20]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01e      	beq.n	8002af8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	e012      	b.n	8002ae6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	7819      	ldrb	r1, [r3, #0]
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	3334      	adds	r3, #52	; 0x34
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d9e9      	bls.n	8002ac0 <prvInitialiseNewTask+0x64>
 8002aec:	e000      	b.n	8002af0 <prvInitialiseNewTask+0x94>
            {
                break;
 8002aee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d90a      	bls.n	8002b14 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	613b      	str	r3, [r7, #16]
    }
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d901      	bls.n	8002b1e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b28:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fbae 	bl	8002290 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	3318      	adds	r3, #24
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fba9 	bl	8002290 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b42:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	f1c3 0205 	rsb	r2, r3, #5
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	69b8      	ldr	r0, [r7, #24]
 8002b5a:	f001 f9af 	bl	8003ebc <pxPortInitialiseStack>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b70:	bf00      	nop
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b78:	b5b0      	push	{r4, r5, r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b80:	f001 fb48 	bl	8004214 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <prvAddNewTaskToReadyList+0x14c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a4e      	ldr	r2, [pc, #312]	; (8002cc4 <prvAddNewTaskToReadyList+0x14c>)
 8002b8c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b8e:	4b4e      	ldr	r3, [pc, #312]	; (8002cc8 <prvAddNewTaskToReadyList+0x150>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b96:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <prvAddNewTaskToReadyList+0x150>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <prvAddNewTaskToReadyList+0x14c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d110      	bne.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ba4:	f000 fdce 	bl	8003744 <prvInitialiseTaskLists>
 8002ba8:	e00d      	b.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002baa:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <prvAddNewTaskToReadyList+0x154>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bb2:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <prvAddNewTaskToReadyList+0x150>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d802      	bhi.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <prvAddNewTaskToReadyList+0x150>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <prvAddNewTaskToReadyList+0x158>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4a40      	ldr	r2, [pc, #256]	; (8002cd0 <prvAddNewTaskToReadyList+0x158>)
 8002bce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <prvAddNewTaskToReadyList+0x158>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <prvAddNewTaskToReadyList+0x94>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 f80d 	bl	8006c00 <SEGGER_SYSVIEW_OnTaskCreate>
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461c      	mov	r4, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	1ae3      	subs	r3, r4, r3
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	462b      	mov	r3, r5
 8002c08:	f001 feac 	bl	8004964 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 f87a 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <prvAddNewTaskToReadyList+0x15c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <prvAddNewTaskToReadyList+0x15c>)
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2a:	492b      	ldr	r1, [pc, #172]	; (8002cd8 <prvAddNewTaskToReadyList+0x160>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3304      	adds	r3, #4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	3204      	adds	r2, #4
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <prvAddNewTaskToReadyList+0x160>)
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	615a      	str	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	4918      	ldr	r1, [pc, #96]	; (8002cd8 <prvAddNewTaskToReadyList+0x160>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <prvAddNewTaskToReadyList+0x160>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4403      	add	r3, r0
 8002c90:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c92:	f001 faef 	bl	8004274 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <prvAddNewTaskToReadyList+0x154>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvAddNewTaskToReadyList+0x150>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <prvAddNewTaskToReadyList+0x164>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc4:	2000019c 	.word	0x2000019c
 8002cc8:	200000c4 	.word	0x200000c4
 8002ccc:	200001a8 	.word	0x200001a8
 8002cd0:	200001b8 	.word	0x200001b8
 8002cd4:	200001a4 	.word	0x200001a4
 8002cd8:	200000c8 	.word	0x200000c8
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01b      	beq.n	8002d2a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <vTaskDelay+0x68>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <vTaskDelay+0x30>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	60bb      	str	r3, [r7, #8]
    }
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002d10:	f000 f880 	bl	8002e14 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	2023      	movs	r0, #35	; 0x23
 8002d18:	f003 fa74 	bl	8006204 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fdc8 	bl	80038b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d24:	f000 f884 	bl	8002e30 <xTaskResumeAll>
 8002d28:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <vTaskDelay+0x6c>)
 8002d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200001c4 	.word	0x200001c4
 8002d4c:	e000ed04 	.word	0xe000ed04

08002d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d56:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <vTaskStartScheduler+0xa4>)
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2282      	movs	r2, #130	; 0x82
 8002d62:	4925      	ldr	r1, [pc, #148]	; (8002df8 <vTaskStartScheduler+0xa8>)
 8002d64:	4825      	ldr	r0, [pc, #148]	; (8002dfc <vTaskStartScheduler+0xac>)
 8002d66:	f7ff fe33 	bl	80029d0 <xTaskCreate>
 8002d6a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d72:	f000 fe1f 	bl	80039b4 <xTimerCreateTimerTask>
 8002d76:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d124      	bne.n	8002dc8 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	60bb      	str	r3, [r7, #8]
    }
 8002d90:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <vTaskStartScheduler+0xb0>)
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d98:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <vTaskStartScheduler+0xb4>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <vTaskStartScheduler+0xb8>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <vTaskStartScheduler+0xbc>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <vTaskStartScheduler+0xa4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d102      	bne.n	8002db8 <vTaskStartScheduler+0x68>
 8002db2:	f003 ff09 	bl	8006bc8 <SEGGER_SYSVIEW_OnIdle>
 8002db6:	e004      	b.n	8002dc2 <vTaskStartScheduler+0x72>
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <vTaskStartScheduler+0xbc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 ff61 	bl	8006c84 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002dc2:	f001 f907 	bl	8003fd4 <xPortStartScheduler>
 8002dc6:	e00e      	b.n	8002de6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dce:	d10a      	bne.n	8002de6 <vTaskStartScheduler+0x96>
        __asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	607b      	str	r3, [r7, #4]
    }
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <vTaskStartScheduler+0xc0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200001c0 	.word	0x200001c0
 8002df8:	080071cc 	.word	0x080071cc
 8002dfc:	08003715 	.word	0x08003715
 8002e00:	200001bc 	.word	0x200001bc
 8002e04:	200001a8 	.word	0x200001a8
 8002e08:	200001a0 	.word	0x200001a0
 8002e0c:	200000c4 	.word	0x200000c4
 8002e10:	2000000c 	.word	0x2000000c

08002e14 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <vTaskSuspendAll+0x18>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <vTaskSuspendAll+0x18>)
 8002e20:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	200001c4 	.word	0x200001c4

08002e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <xTaskResumeAll+0x1dc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <xTaskResumeAll+0x2c>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	607b      	str	r3, [r7, #4]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e5c:	f001 f9da 	bl	8004214 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <xTaskResumeAll+0x1dc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4a69      	ldr	r2, [pc, #420]	; (800300c <xTaskResumeAll+0x1dc>)
 8002e68:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6a:	4b68      	ldr	r3, [pc, #416]	; (800300c <xTaskResumeAll+0x1dc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 80c4 	bne.w	8002ffc <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <xTaskResumeAll+0x1e0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80bf 	beq.w	8002ffc <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e7e:	e08e      	b.n	8002f9e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e80:	4b64      	ldr	r3, [pc, #400]	; (8003014 <xTaskResumeAll+0x1e4>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	6a12      	ldr	r2, [r2, #32]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	69d2      	ldr	r2, [r2, #28]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d103      	bne.n	8002eb6 <xTaskResumeAll+0x86>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	1e5a      	subs	r2, r3, #1
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	68d2      	ldr	r2, [r2, #12]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	6892      	ldr	r2, [r2, #8]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d103      	bne.n	8002ef4 <xTaskResumeAll+0xc4>
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fefe 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	2201      	movs	r2, #1
 8002f12:	409a      	lsls	r2, r3
 8002f14:	4b40      	ldr	r3, [pc, #256]	; (8003018 <xTaskResumeAll+0x1e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	4a3f      	ldr	r2, [pc, #252]	; (8003018 <xTaskResumeAll+0x1e8>)
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f22:	493e      	ldr	r1, [pc, #248]	; (800301c <xTaskResumeAll+0x1ec>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3304      	adds	r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	3204      	adds	r2, #4
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1d1a      	adds	r2, r3, #4
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4a2e      	ldr	r2, [pc, #184]	; (800301c <xTaskResumeAll+0x1ec>)
 8002f62:	441a      	add	r2, r3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	492b      	ldr	r1, [pc, #172]	; (800301c <xTaskResumeAll+0x1ec>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	4827      	ldr	r0, [pc, #156]	; (800301c <xTaskResumeAll+0x1ec>)
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4403      	add	r3, r0
 8002f88:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <xTaskResumeAll+0x1f0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <xTaskResumeAll+0x1f4>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <xTaskResumeAll+0x1e4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f47f af6c 	bne.w	8002e80 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fae:	f000 fc47 	bl	8003840 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <xTaskResumeAll+0x1f8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fbe:	f000 f859 	bl	8003074 <xTaskIncrementTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <xTaskResumeAll+0x1f4>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f1      	bne.n	8002fbe <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <xTaskResumeAll+0x1f8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fe0:	4b10      	ldr	r3, [pc, #64]	; (8003024 <xTaskResumeAll+0x1f4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <xTaskResumeAll+0x1fc>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ffc:	f001 f93a 	bl	8004274 <vPortExitCritical>

    return xAlreadyYielded;
 8003000:	69bb      	ldr	r3, [r7, #24]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200001c4 	.word	0x200001c4
 8003010:	2000019c 	.word	0x2000019c
 8003014:	2000015c 	.word	0x2000015c
 8003018:	200001a4 	.word	0x200001a4
 800301c:	200000c8 	.word	0x200000c8
 8003020:	200000c4 	.word	0x200000c4
 8003024:	200001b0 	.word	0x200001b0
 8003028:	200001ac 	.word	0x200001ac
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <xTaskGetTickCount+0x1c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800303c:	687b      	ldr	r3, [r7, #4]
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200001a0 	.word	0x200001a0

08003050 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003056:	f001 f9c9 	bl	80043ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <xTaskGetTickCountFromISR+0x20>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003064:	683b      	ldr	r3, [r7, #0]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200001a0 	.word	0x200001a0

08003074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307e:	4b7f      	ldr	r3, [pc, #508]	; (800327c <xTaskIncrementTick+0x208>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 80f0 	bne.w	8003268 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003088:	4b7d      	ldr	r3, [pc, #500]	; (8003280 <xTaskIncrementTick+0x20c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003090:	4a7b      	ldr	r2, [pc, #492]	; (8003280 <xTaskIncrementTick+0x20c>)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d120      	bne.n	80030de <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800309c:	4b79      	ldr	r3, [pc, #484]	; (8003284 <xTaskIncrementTick+0x210>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <xTaskIncrementTick+0x48>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	607b      	str	r3, [r7, #4]
    }
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <xTaskIncrementTick+0x46>
 80030bc:	4b71      	ldr	r3, [pc, #452]	; (8003284 <xTaskIncrementTick+0x210>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	4b71      	ldr	r3, [pc, #452]	; (8003288 <xTaskIncrementTick+0x214>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6f      	ldr	r2, [pc, #444]	; (8003284 <xTaskIncrementTick+0x210>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4a6f      	ldr	r2, [pc, #444]	; (8003288 <xTaskIncrementTick+0x214>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b6e      	ldr	r3, [pc, #440]	; (800328c <xTaskIncrementTick+0x218>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <xTaskIncrementTick+0x218>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	f000 fbb1 	bl	8003840 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030de:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <xTaskIncrementTick+0x21c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f0c0 80aa 	bcc.w	800323e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <xTaskIncrementTick+0x210>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <xTaskIncrementTick+0x21c>)
 80030f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030fa:	601a      	str	r2, [r3, #0]
                    break;
 80030fc:	e09f      	b.n	800323e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030fe:	4b61      	ldr	r3, [pc, #388]	; (8003284 <xTaskIncrementTick+0x210>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800310e:	6a3a      	ldr	r2, [r7, #32]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	d203      	bcs.n	800311e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003116:	4a5e      	ldr	r2, [pc, #376]	; (8003290 <xTaskIncrementTick+0x21c>)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800311c:	e08f      	b.n	800323e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	68d2      	ldr	r2, [r2, #12]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	6892      	ldr	r2, [r2, #8]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	3304      	adds	r3, #4
 8003140:	429a      	cmp	r2, r3
 8003142:	d103      	bne.n	800314c <xTaskIncrementTick+0xd8>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01e      	beq.n	80031a2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	6a12      	ldr	r2, [r2, #32]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	69d2      	ldr	r2, [r2, #28]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3318      	adds	r3, #24
 8003186:	429a      	cmp	r2, r3
 8003188:	d103      	bne.n	8003192 <xTaskIncrementTick+0x11e>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2200      	movs	r2, #0
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fdaf 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	4b38      	ldr	r3, [pc, #224]	; (8003294 <xTaskIncrementTick+0x220>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	4a36      	ldr	r2, [pc, #216]	; (8003294 <xTaskIncrementTick+0x220>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <xTaskIncrementTick+0x224>)
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3304      	adds	r3, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	3204      	adds	r2, #4
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4a26      	ldr	r2, [pc, #152]	; (8003298 <xTaskIncrementTick+0x224>)
 8003200:	441a      	add	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	615a      	str	r2, [r3, #20]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	4923      	ldr	r1, [pc, #140]	; (8003298 <xTaskIncrementTick+0x224>)
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1c59      	adds	r1, r3, #1
 800321a:	481f      	ldr	r0, [pc, #124]	; (8003298 <xTaskIncrementTick+0x224>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4403      	add	r3, r0
 8003226:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <xTaskIncrementTick+0x228>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	429a      	cmp	r2, r3
 8003234:	f67f af59 	bls.w	80030ea <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323c:	e755      	b.n	80030ea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <xTaskIncrementTick+0x228>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	4914      	ldr	r1, [pc, #80]	; (8003298 <xTaskIncrementTick+0x224>)
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d901      	bls.n	800325a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003256:	2301      	movs	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <xTaskIncrementTick+0x22c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003262:	2301      	movs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	e004      	b.n	8003272 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <xTaskIncrementTick+0x230>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <xTaskIncrementTick+0x230>)
 8003270:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003274:	4618      	mov	r0, r3
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	200001c4 	.word	0x200001c4
 8003280:	200001a0 	.word	0x200001a0
 8003284:	20000154 	.word	0x20000154
 8003288:	20000158 	.word	0x20000158
 800328c:	200001b4 	.word	0x200001b4
 8003290:	200001bc 	.word	0x200001bc
 8003294:	200001a4 	.word	0x200001a4
 8003298:	200000c8 	.word	0x200000c8
 800329c:	200000c4 	.word	0x200000c4
 80032a0:	200001b0 	.word	0x200001b0
 80032a4:	200001ac 	.word	0x200001ac

080032a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <vTaskSwitchContext+0xbc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032b6:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <vTaskSwitchContext+0xc0>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032bc:	e04d      	b.n	800335a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <vTaskSwitchContext+0xc0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <vTaskSwitchContext+0xc4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	f1c3 031f 	rsb	r3, r3, #31
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	4925      	ldr	r1, [pc, #148]	; (8003370 <vTaskSwitchContext+0xc8>)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <vTaskSwitchContext+0x5c>
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
    }
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <vTaskSwitchContext+0x5a>
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <vTaskSwitchContext+0xc8>)
 8003310:	4413      	add	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	3308      	adds	r3, #8
 8003326:	429a      	cmp	r2, r3
 8003328:	d104      	bne.n	8003334 <vTaskSwitchContext+0x8c>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <vTaskSwitchContext+0xcc>)
 800333c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <vTaskSwitchContext+0xcc>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <vTaskSwitchContext+0xd0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d102      	bne.n	8003350 <vTaskSwitchContext+0xa8>
 800334a:	f003 fc3d 	bl	8006bc8 <SEGGER_SYSVIEW_OnIdle>
}
 800334e:	e004      	b.n	800335a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <vTaskSwitchContext+0xcc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fc95 	bl	8006c84 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200001c4 	.word	0x200001c4
 8003368:	200001b0 	.word	0x200001b0
 800336c:	200001a4 	.word	0x200001a4
 8003370:	200000c8 	.word	0x200000c8
 8003374:	200000c4 	.word	0x200000c4
 8003378:	200001c0 	.word	0x200001c0

0800337c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	60fb      	str	r3, [r7, #12]
    }
 800339e:	bf00      	nop
 80033a0:	e7fe      	b.n	80033a0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <vTaskPlaceOnEventList+0x44>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3318      	adds	r3, #24
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe ff7d 	bl	80022aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033b0:	2101      	movs	r1, #1
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f000 fa7e 	bl	80038b4 <prvAddCurrentTaskToDelayedList>
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200000c4 	.word	0x200000c4

080033c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	613b      	str	r3, [r7, #16]
    }
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	61da      	str	r2, [r3, #28]
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	3218      	adds	r2, #24
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f103 0218 	add.w	r2, r3, #24
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <vTaskPlaceOnEventListRestricted+0x8c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003438:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800343a:	2024      	movs	r0, #36	; 0x24
 800343c:	f002 fec4 	bl	80061c8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	68b8      	ldr	r0, [r7, #8]
 8003444:	f000 fa36 	bl	80038b4 <prvAddCurrentTaskToDelayedList>
    }
 8003448:	bf00      	nop
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200000c4 	.word	0x200000c4

08003454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	60fb      	str	r3, [r7, #12]
    }
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	6a12      	ldr	r2, [r2, #32]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	69d2      	ldr	r2, [r2, #28]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	3318      	adds	r3, #24
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d103      	bne.n	80034ae <xTaskRemoveFromEventList+0x5a>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2200      	movs	r2, #0
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1e5a      	subs	r2, r3, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034be:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <xTaskRemoveFromEventList+0x198>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d162      	bne.n	800358c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	68d2      	ldr	r2, [r2, #12]
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	6a3a      	ldr	r2, [r7, #32]
 80034dc:	6892      	ldr	r2, [r2, #8]
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	3304      	adds	r3, #4
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d103      	bne.n	80034f4 <xTaskRemoveFromEventList+0xa0>
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	2200      	movs	r2, #0
 80034f8:	615a      	str	r2, [r3, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fbfe 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <xTaskRemoveFromEventList+0x19c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <xTaskRemoveFromEventList+0x19c>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	4934      	ldr	r1, [pc, #208]	; (80035f4 <xTaskRemoveFromEventList+0x1a0>)
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3304      	adds	r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	6a3a      	ldr	r2, [r7, #32]
 8003548:	3204      	adds	r2, #4
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	1d1a      	adds	r2, r3, #4
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <xTaskRemoveFromEventList+0x1a0>)
 8003562:	441a      	add	r2, r3
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	615a      	str	r2, [r3, #20]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	4921      	ldr	r1, [pc, #132]	; (80035f4 <xTaskRemoveFromEventList+0x1a0>)
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	481d      	ldr	r0, [pc, #116]	; (80035f4 <xTaskRemoveFromEventList+0x1a0>)
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4403      	add	r3, r0
 8003588:	6019      	str	r1, [r3, #0]
 800358a:	e01b      	b.n	80035c4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <xTaskRemoveFromEventList+0x1a4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	61da      	str	r2, [r3, #28]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	621a      	str	r2, [r3, #32]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	6a3a      	ldr	r2, [r7, #32]
 80035a6:	3218      	adds	r2, #24
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f103 0218 	add.w	r2, r3, #24
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <xTaskRemoveFromEventList+0x1a4>)
 80035b8:	629a      	str	r2, [r3, #40]	; 0x28
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <xTaskRemoveFromEventList+0x1a4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <xTaskRemoveFromEventList+0x1a4>)
 80035c2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <xTaskRemoveFromEventList+0x1a8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d905      	bls.n	80035de <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <xTaskRemoveFromEventList+0x1ac>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e001      	b.n	80035e2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	; 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200001c4 	.word	0x200001c4
 80035f0:	200001a4 	.word	0x200001a4
 80035f4:	200000c8 	.word	0x200000c8
 80035f8:	2000015c 	.word	0x2000015c
 80035fc:	200000c4 	.word	0x200000c4
 8003600:	200001b0 	.word	0x200001b0

08003604 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <vTaskInternalSetTimeOutState+0x24>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <vTaskInternalSetTimeOutState+0x28>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	200001b4 	.word	0x200001b4
 800362c:	200001a0 	.word	0x200001a0

08003630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	613b      	str	r3, [r7, #16]
    }
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	60fb      	str	r3, [r7, #12]
    }
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003672:	f000 fdcf 	bl	8004214 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <xTaskCheckForTimeOut+0xc4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368e:	d102      	bne.n	8003696 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	e026      	b.n	80036e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <xTaskCheckForTimeOut+0xc8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d00a      	beq.n	80036b8 <xTaskCheckForTimeOut+0x88>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d305      	bcc.n	80036b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e015      	b.n	80036e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20b      	bcs.n	80036da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad2      	subs	r2, r2, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ff98 	bl	8003604 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	e004      	b.n	80036e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036e4:	f000 fdc6 	bl	8004274 <vPortExitCritical>

    return xReturn;
 80036e8:	69fb      	ldr	r3, [r7, #28]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200001a0 	.word	0x200001a0
 80036f8:	200001b4 	.word	0x200001b4

080036fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <vTaskMissedYield+0x14>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	200001b0 	.word	0x200001b0

08003714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800371c:	f000 f852 	bl	80037c4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <prvIdleTask+0x28>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d9f9      	bls.n	800371c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <prvIdleTask+0x2c>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003738:	e7f0      	b.n	800371c <prvIdleTask+0x8>
 800373a:	bf00      	nop
 800373c:	200000c8 	.word	0x200000c8
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	e00c      	b.n	800376a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <prvInitialiseTaskLists+0x60>)
 800375c:	4413      	add	r3, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fd76 	bl	8002250 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3301      	adds	r3, #1
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d9ef      	bls.n	8003750 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003770:	480d      	ldr	r0, [pc, #52]	; (80037a8 <prvInitialiseTaskLists+0x64>)
 8003772:	f7fe fd6d 	bl	8002250 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003776:	480d      	ldr	r0, [pc, #52]	; (80037ac <prvInitialiseTaskLists+0x68>)
 8003778:	f7fe fd6a 	bl	8002250 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800377c:	480c      	ldr	r0, [pc, #48]	; (80037b0 <prvInitialiseTaskLists+0x6c>)
 800377e:	f7fe fd67 	bl	8002250 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003782:	480c      	ldr	r0, [pc, #48]	; (80037b4 <prvInitialiseTaskLists+0x70>)
 8003784:	f7fe fd64 	bl	8002250 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003788:	480b      	ldr	r0, [pc, #44]	; (80037b8 <prvInitialiseTaskLists+0x74>)
 800378a:	f7fe fd61 	bl	8002250 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <prvInitialiseTaskLists+0x78>)
 8003790:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <prvInitialiseTaskLists+0x64>)
 8003792:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <prvInitialiseTaskLists+0x7c>)
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <prvInitialiseTaskLists+0x68>)
 8003798:	601a      	str	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200000c8 	.word	0x200000c8
 80037a8:	2000012c 	.word	0x2000012c
 80037ac:	20000140 	.word	0x20000140
 80037b0:	2000015c 	.word	0x2000015c
 80037b4:	20000170 	.word	0x20000170
 80037b8:	20000188 	.word	0x20000188
 80037bc:	20000154 	.word	0x20000154
 80037c0:	20000158 	.word	0x20000158

080037c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ca:	e019      	b.n	8003800 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037cc:	f000 fd22 	bl	8004214 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d0:	4b10      	ldr	r3, [pc, #64]	; (8003814 <prvCheckTasksWaitingTermination+0x50>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fd9d 	bl	800231c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <prvCheckTasksWaitingTermination+0x54>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <prvCheckTasksWaitingTermination+0x54>)
 80037ea:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <prvCheckTasksWaitingTermination+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <prvCheckTasksWaitingTermination+0x58>)
 80037f4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80037f6:	f000 fd3d 	bl	8004274 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f810 	bl	8003820 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <prvCheckTasksWaitingTermination+0x58>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e1      	bne.n	80037cc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000170 	.word	0x20000170
 8003818:	2000019c 	.word	0x2000019c
 800381c:	20000184 	.word	0x20000184

08003820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fed7 	bl	80045e0 <vPortFree>
            vPortFree( pxTCB );
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fed4 	bl	80045e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <prvResetNextTaskUnblockTime+0x30>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <prvResetNextTaskUnblockTime+0x34>)
 8003850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003854:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003856:	e005      	b.n	8003864 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <prvResetNextTaskUnblockTime+0x30>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <prvResetNextTaskUnblockTime+0x34>)
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000154 	.word	0x20000154
 8003874:	200001bc 	.word	0x200001bc

08003878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <xTaskGetSchedulerState+0x34>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003886:	2301      	movs	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	e008      	b.n	800389e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <xTaskGetSchedulerState+0x38>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003894:	2302      	movs	r3, #2
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	e001      	b.n	800389e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800389e:	687b      	ldr	r3, [r7, #4]
    }
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	200001a8 	.word	0x200001a8
 80038b0:	200001c4 	.word	0x200001c4

080038b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038be:	4b36      	ldr	r3, [pc, #216]	; (8003998 <prvAddCurrentTaskToDelayedList+0xe4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fd26 	bl	800231c <uxListRemove>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4013      	ands	r3, r2
 80038ea:	4a2d      	ldr	r2, [pc, #180]	; (80039a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80038ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f4:	d124      	bne.n	8003940 <prvAddCurrentTaskToDelayedList+0x8c>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d021      	beq.n	8003940 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	3204      	adds	r2, #4
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003930:	615a      	str	r2, [r3, #20]
 8003932:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800393e:	e026      	b.n	800398e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	d209      	bcs.n	800396c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe fca0 	bl	80022aa <vListInsert>
}
 800396a:	e010      	b.n	800398e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <prvAddCurrentTaskToDelayedList+0xf8>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7fe fc96 	bl	80022aa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	429a      	cmp	r2, r3
 8003986:	d202      	bcs.n	800398e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003988:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6013      	str	r3, [r2, #0]
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200001a0 	.word	0x200001a0
 800399c:	200000c4 	.word	0x200000c4
 80039a0:	200001a4 	.word	0x200001a4
 80039a4:	20000188 	.word	0x20000188
 80039a8:	20000158 	.word	0x20000158
 80039ac:	20000154 	.word	0x20000154
 80039b0:	200001bc 	.word	0x200001bc

080039b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039be:	f000 fa47 	bl	8003e50 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <xTimerCreateTimerTask+0x54>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <xTimerCreateTimerTask+0x58>)
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2302      	movs	r3, #2
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039d8:	490d      	ldr	r1, [pc, #52]	; (8003a10 <xTimerCreateTimerTask+0x5c>)
 80039da:	480e      	ldr	r0, [pc, #56]	; (8003a14 <xTimerCreateTimerTask+0x60>)
 80039dc:	f7fe fff8 	bl	80029d0 <xTaskCreate>
 80039e0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	603b      	str	r3, [r7, #0]
    }
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039fe:	687b      	ldr	r3, [r7, #4]
    }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200001f8 	.word	0x200001f8
 8003a0c:	200001fc 	.word	0x200001fc
 8003a10:	080071d4 	.word	0x080071d4
 8003a14:	08003abd 	.word	0x08003abd

08003a18 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a24:	e008      	b.n	8003a38 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	18d1      	adds	r1, r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f8dd 	bl	8003c04 <prvInsertTimerInActiveList>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ea      	bne.n	8003a26 <prvReloadTimer+0xe>
        }
    }
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <prvProcessExpiredTimer+0x5c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fc51 	bl	800231c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff ffc3 	bl	8003a18 <prvReloadTimer>
 8003a92:	e008      	b.n	8003aa6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	4798      	blx	r3
    }
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001f0 	.word	0x200001f0

08003abc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f857 	bl	8003b7c <prvGetNextExpireTime>
 8003ace:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f803 	bl	8003ae0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ada:	f000 f8d5 	bl	8003c88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ade:	e7f1      	b.n	8003ac4 <prvTimerTask+0x8>

08003ae0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003aea:	f7ff f993 	bl	8002e14 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f866 	bl	8003bc4 <prvSampleTimeNow>
 8003af8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d130      	bne.n	8003b62 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <prvProcessTimerOrBlockTask+0x3c>
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d806      	bhi.n	8003b1c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b0e:	f7ff f98f 	bl	8002e30 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ffa1 	bl	8003a5c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b1a:	e024      	b.n	8003b66 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <prvProcessTimerOrBlockTask+0x90>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <prvProcessTimerOrBlockTask+0x50>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <prvProcessTimerOrBlockTask+0x52>
 8003b30:	2300      	movs	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <prvProcessTimerOrBlockTask+0x94>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fe ff11 	bl	8002968 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b46:	f7ff f973 	bl	8002e30 <xTaskResumeAll>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <prvProcessTimerOrBlockTask+0x98>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
    }
 8003b60:	e001      	b.n	8003b66 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b62:	f7ff f965 	bl	8002e30 <xTaskResumeAll>
    }
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200001f4 	.word	0x200001f4
 8003b74:	200001f8 	.word	0x200001f8
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <prvGetNextExpireTime+0x44>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <prvGetNextExpireTime+0x16>
 8003b8e:	2201      	movs	r2, #1
 8003b90:	e000      	b.n	8003b94 <prvGetNextExpireTime+0x18>
 8003b92:	2200      	movs	r2, #0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <prvGetNextExpireTime+0x44>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e001      	b.n	8003bb0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
    }
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	200001f0 	.word	0x200001f0

08003bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003bcc:	f7ff fa30 	bl	8003030 <xTaskGetTickCount>
 8003bd0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <prvSampleTimeNow+0x3c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d205      	bcs.n	8003be8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bdc:	f000 f912 	bl	8003e04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e002      	b.n	8003bee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bee:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <prvSampleTimeNow+0x3c>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    }
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000200 	.word	0x20000200

08003c04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d812      	bhi.n	8003c50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e01b      	b.n	8003c76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <prvInsertTimerInActiveList+0x7c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe fb2e 	bl	80022aa <vListInsert>
 8003c4e:	e012      	b.n	8003c76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d206      	bcs.n	8003c66 <prvInsertTimerInActiveList+0x62>
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e007      	b.n	8003c76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <prvInsertTimerInActiveList+0x80>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7fe fb1a 	bl	80022aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c76:	697b      	ldr	r3, [r7, #20]
    }
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200001f4 	.word	0x200001f4
 8003c84:	200001f0 	.word	0x200001f0

08003c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c8e:	e0a6      	b.n	8003dde <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f2c0 80a3 	blt.w	8003dde <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe fb37 	bl	800231c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff87 	bl	8003bc4 <prvSampleTimeNow>
 8003cb6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	f200 808d 	bhi.w	8003ddc <prvProcessReceivedCommands+0x154>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <prvProcessReceivedCommands+0x40>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003ced 	.word	0x08003ced
 8003cd0:	08003d55 	.word	0x08003d55
 8003cd4:	08003d69 	.word	0x08003d69
 8003cd8:	08003db3 	.word	0x08003db3
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003ced 	.word	0x08003ced
 8003ce4:	08003d55 	.word	0x08003d55
 8003ce8:	08003d69 	.word	0x08003d69
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	18d1      	adds	r1, r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	69f8      	ldr	r0, [r7, #28]
 8003d0c:	f7ff ff7a 	bl	8003c04 <prvInsertTimerInActiveList>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	69f8      	ldr	r0, [r7, #28]
 8003d32:	f7ff fe71 	bl	8003a18 <prvReloadTimer>
 8003d36:	e008      	b.n	8003d4a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	69f8      	ldr	r0, [r7, #28]
 8003d50:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d52:	e044      	b.n	8003dde <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d66:	e03a      	b.n	8003dde <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	617b      	str	r3, [r7, #20]
    }
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	18d1      	adds	r1, r2, r3
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	69f8      	ldr	r0, [r7, #28]
 8003dac:	f7ff ff2a 	bl	8003c04 <prvInsertTimerInActiveList>
                        break;
 8003db0:	e015      	b.n	8003dde <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003dc0:	69f8      	ldr	r0, [r7, #28]
 8003dc2:	f000 fc0d 	bl	80045e0 <vPortFree>
 8003dc6:	e00a      	b.n	8003dde <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003dda:	e000      	b.n	8003dde <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ddc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <prvProcessReceivedCommands+0x178>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f107 0108 	add.w	r1, r7, #8
 8003de6:	2200      	movs	r2, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fbc9 	bl	8002580 <xQueueReceive>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f af4d 	bne.w	8003c90 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200001f8 	.word	0x200001f8

08003e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e0a:	e009      	b.n	8003e20 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <prvSwitchTimerLists+0x44>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003e16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f7ff fe1e 	bl	8003a5c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <prvSwitchTimerLists+0x44>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <prvSwitchTimerLists+0x44>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <prvSwitchTimerLists+0x48>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <prvSwitchTimerLists+0x44>)
 8003e36:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <prvSwitchTimerLists+0x48>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6013      	str	r3, [r2, #0]
    }
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200001f0 	.word	0x200001f0
 8003e4c:	200001f4 	.word	0x200001f4

08003e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e54:	f000 f9de 	bl	8004214 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <prvCheckForValidListAndQueue+0x54>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d11d      	bne.n	8003e9c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e60:	4811      	ldr	r0, [pc, #68]	; (8003ea8 <prvCheckForValidListAndQueue+0x58>)
 8003e62:	f7fe f9f5 	bl	8002250 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e66:	4811      	ldr	r0, [pc, #68]	; (8003eac <prvCheckForValidListAndQueue+0x5c>)
 8003e68:	f7fe f9f2 	bl	8002250 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <prvCheckForValidListAndQueue+0x60>)
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <prvCheckForValidListAndQueue+0x58>)
 8003e70:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <prvCheckForValidListAndQueue+0x64>)
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <prvCheckForValidListAndQueue+0x5c>)
 8003e76:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e78:	2200      	movs	r2, #0
 8003e7a:	210c      	movs	r1, #12
 8003e7c:	200a      	movs	r0, #10
 8003e7e:	f7fe fb07 	bl	8002490 <xQueueGenericCreate>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <prvCheckForValidListAndQueue+0x54>)
 8003e86:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <prvCheckForValidListAndQueue+0x54>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <prvCheckForValidListAndQueue+0x54>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <prvCheckForValidListAndQueue+0x68>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fd10 	bl	80028bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e9c:	f000 f9ea 	bl	8004274 <vPortExitCritical>
    }
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200001f8 	.word	0x200001f8
 8003ea8:	200001c8 	.word	0x200001c8
 8003eac:	200001dc 	.word	0x200001dc
 8003eb0:	200001f0 	.word	0x200001f0
 8003eb4:	200001f4 	.word	0x200001f4
 8003eb8:	080071dc 	.word	0x080071dc

08003ebc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3b04      	subs	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ed4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b04      	subs	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3b04      	subs	r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003eec:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <pxPortInitialiseStack+0x64>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b14      	subs	r3, #20
 8003ef6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3b04      	subs	r3, #4
 8003f02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f06f 0202 	mvn.w	r2, #2
 8003f0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3b20      	subs	r3, #32
 8003f10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	08003f25 	.word	0x08003f25

08003f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <prvTaskExitError+0x54>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f36:	d00a      	beq.n	8003f4e <prvTaskExitError+0x2a>
        __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
    }
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <prvTaskExitError+0x28>
        __asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	60bb      	str	r3, [r7, #8]
    }
 8003f60:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f62:	bf00      	nop
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0fc      	beq.n	8003f64 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	00000000 	.word	0x00000000

08003f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <pxCurrentTCBConst2>)
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	6808      	ldr	r0, [r1, #0]
 8003f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8a:	f380 8809 	msr	PSP, r0
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8811 	msr	BASEPRI, r0
 8003f9a:	4770      	bx	lr
 8003f9c:	f3af 8000 	nop.w

08003fa0 <pxCurrentTCBConst2>:
 8003fa0:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003fa8:	4808      	ldr	r0, [pc, #32]	; (8003fcc <prvPortStartFirstTask+0x24>)
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	f380 8808 	msr	MSP, r0
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8814 	msr	CONTROL, r0
 8003fba:	b662      	cpsie	i
 8003fbc:	b661      	cpsie	f
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	df00      	svc	0
 8003fc8:	bf00      	nop
 8003fca:	0000      	.short	0x0000
 8003fcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop

08003fd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fda:	4b46      	ldr	r3, [pc, #280]	; (80040f4 <xPortStartScheduler+0x120>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a46      	ldr	r2, [pc, #280]	; (80040f8 <xPortStartScheduler+0x124>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10a      	bne.n	8003ffa <xPortStartScheduler+0x26>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	613b      	str	r3, [r7, #16]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <xPortStartScheduler+0x120>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <xPortStartScheduler+0x128>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10a      	bne.n	800401a <xPortStartScheduler+0x46>
        __asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	60fb      	str	r3, [r7, #12]
    }
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <xPortStartScheduler+0x12c>)
 800401c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	22ff      	movs	r2, #255	; 0xff
 800402a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b31      	ldr	r3, [pc, #196]	; (8004104 <xPortStartScheduler+0x130>)
 8004040:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <xPortStartScheduler+0x134>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004048:	e009      	b.n	800405e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <xPortStartScheduler+0x134>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <xPortStartScheduler+0x134>)
 8004052:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b80      	cmp	r3, #128	; 0x80
 8004068:	d0ef      	beq.n	800404a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <xPortStartScheduler+0x134>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1c3 0307 	rsb	r3, r3, #7
 8004072:	2b04      	cmp	r3, #4
 8004074:	d00a      	beq.n	800408c <xPortStartScheduler+0xb8>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800408c:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <xPortStartScheduler+0x134>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <xPortStartScheduler+0x134>)
 8004094:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <xPortStartScheduler+0x134>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800409e:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <xPortStartScheduler+0x134>)
 80040a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <xPortStartScheduler+0x138>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a17      	ldr	r2, [pc, #92]	; (800410c <xPortStartScheduler+0x138>)
 80040b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <xPortStartScheduler+0x138>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <xPortStartScheduler+0x138>)
 80040bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040c2:	f000 f963 	bl	800438c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <xPortStartScheduler+0x13c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80040cc:	f000 f982 	bl	80043d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <xPortStartScheduler+0x140>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <xPortStartScheduler+0x140>)
 80040d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040dc:	f7ff ff64 	bl	8003fa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040e0:	f7ff f8e2 	bl	80032a8 <vTaskSwitchContext>
    prvTaskExitError();
 80040e4:	f7ff ff1e 	bl	8003f24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000ed00 	.word	0xe000ed00
 80040f8:	410fc271 	.word	0x410fc271
 80040fc:	410fc270 	.word	0x410fc270
 8004100:	e000e400 	.word	0xe000e400
 8004104:	20000204 	.word	0x20000204
 8004108:	20000208 	.word	0x20000208
 800410c:	e000ed20 	.word	0xe000ed20
 8004110:	20000010 	.word	0x20000010
 8004114:	e000ef34 	.word	0xe000ef34

08004118 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <vInitPrioGroupValue+0xe4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a37      	ldr	r2, [pc, #220]	; (8004200 <vInitPrioGroupValue+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d10a      	bne.n	800413e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	613b      	str	r3, [r7, #16]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <vInitPrioGroupValue+0xe4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a30      	ldr	r2, [pc, #192]	; (8004204 <vInitPrioGroupValue+0xec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10a      	bne.n	800415e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
    }
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <vInitPrioGroupValue+0xf0>)
 8004160:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <vInitPrioGroupValue+0xf4>)
 8004184:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004186:	4b22      	ldr	r3, [pc, #136]	; (8004210 <vInitPrioGroupValue+0xf8>)
 8004188:	2207      	movs	r2, #7
 800418a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418c:	e009      	b.n	80041a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <vInitPrioGroupValue+0xf8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3b01      	subs	r3, #1
 8004194:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <vInitPrioGroupValue+0xf8>)
 8004196:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d0ef      	beq.n	800418e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <vInitPrioGroupValue+0xf8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d00a      	beq.n	80041d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
    }
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <vInitPrioGroupValue+0xf8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <vInitPrioGroupValue+0xf8>)
 80041d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <vInitPrioGroupValue+0xf8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <vInitPrioGroupValue+0xf8>)
 80041e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000ed00 	.word	0xe000ed00
 8004200:	410fc271 	.word	0x410fc271
 8004204:	410fc270 	.word	0x410fc270
 8004208:	e000e400 	.word	0xe000e400
 800420c:	20000204 	.word	0x20000204
 8004210:	20000208 	.word	0x20000208

08004214 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
        __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	607b      	str	r3, [r7, #4]
    }
 800422c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <vPortEnterCritical+0x58>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a0d      	ldr	r2, [pc, #52]	; (800426c <vPortEnterCritical+0x58>)
 8004236:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <vPortEnterCritical+0x58>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10f      	bne.n	8004260 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <vPortEnterCritical+0x5c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <vPortEnterCritical+0x4c>
        __asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	603b      	str	r3, [r7, #0]
    }
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <vPortEnterCritical+0x4a>
    }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20000010 	.word	0x20000010
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <vPortExitCritical+0x50>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <vPortExitCritical+0x24>
        __asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
    }
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <vPortExitCritical+0x50>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <vPortExitCritical+0x50>)
 80042a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <vPortExitCritical+0x50>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <vPortExitCritical+0x42>
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80042b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000010 	.word	0x20000010
	...

080042d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80042d0:	f3ef 8009 	mrs	r0, PSP
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <pxCurrentTCBConst>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f01e 0f10 	tst.w	lr, #16
 80042e0:	bf08      	it	eq
 80042e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042f4:	f380 8811 	msr	BASEPRI, r0
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f7fe ffd2 	bl	80032a8 <vTaskSwitchContext>
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f380 8811 	msr	BASEPRI, r0
 800430c:	bc09      	pop	{r0, r3}
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	6808      	ldr	r0, [r1, #0]
 8004312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004316:	f01e 0f10 	tst.w	lr, #16
 800431a:	bf08      	it	eq
 800431c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004320:	f380 8809 	msr	PSP, r0
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w

08004330 <pxCurrentTCBConst>:
 8004330:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
        __asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	607b      	str	r3, [r7, #4]
    }
 8004350:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004352:	f002 fbbf 	bl	8006ad4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004356:	f7fe fe8d 	bl	8003074 <xTaskIncrementTick>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004360:	f002 fc16 	bl	8006b90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <SysTick_Handler+0x50>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e001      	b.n	8004372 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800436e:	f002 fbf3 	bl	8006b58 <SEGGER_SYSVIEW_RecordExitISR>
 8004372:	2300      	movs	r3, #0
 8004374:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f383 8811 	msr	BASEPRI, r3
    }
 800437c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortSetupTimerInterrupt+0x34>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <vPortSetupTimerInterrupt+0x38>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <vPortSetupTimerInterrupt+0x3c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <vPortSetupTimerInterrupt+0x40>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <vPortSetupTimerInterrupt+0x44>)
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <vPortSetupTimerInterrupt+0x34>)
 80043b0:	2207      	movs	r2, #7
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e010 	.word	0xe000e010
 80043c4:	e000e018 	.word	0xe000e018
 80043c8:	20000000 	.word	0x20000000
 80043cc:	10624dd3 	.word	0x10624dd3
 80043d0:	e000e014 	.word	0xe000e014

080043d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80043d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043e4 <vPortEnableVFP+0x10>
 80043d8:	6801      	ldr	r1, [r0, #0]
 80043da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043de:	6001      	str	r1, [r0, #0]
 80043e0:	4770      	bx	lr
 80043e2:	0000      	.short	0x0000
 80043e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop

080043ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80043f2:	f3ef 8305 	mrs	r3, IPSR
 80043f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b0f      	cmp	r3, #15
 80043fc:	d914      	bls.n	8004428 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <vPortValidateInterruptPriority+0x70>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <vPortValidateInterruptPriority+0x74>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	7afa      	ldrb	r2, [r7, #11]
 800440e:	429a      	cmp	r2, r3
 8004410:	d20a      	bcs.n	8004428 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	607b      	str	r3, [r7, #4]
    }
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <vPortValidateInterruptPriority+0x78>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <vPortValidateInterruptPriority+0x7c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d90a      	bls.n	800444e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	603b      	str	r3, [r7, #0]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <vPortValidateInterruptPriority+0x60>
    }
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000e3f0 	.word	0xe000e3f0
 8004460:	20000204 	.word	0x20000204
 8004464:	e000ed0c 	.word	0xe000ed0c
 8004468:	20000208 	.word	0x20000208

0800446c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004478:	f7fe fccc 	bl	8002e14 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <pvPortMalloc+0x160>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004484:	f000 f908 	bl	8004698 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d012      	beq.n	80044b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800448e:	2208      	movs	r2, #8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	3308      	adds	r3, #8
 800449a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	43db      	mvns	r3, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d804      	bhi.n	80044b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	4413      	add	r3, r2
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e001      	b.n	80044b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db70      	blt.n	800459c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d06d      	beq.n	800459c <pvPortMalloc+0x130>
 80044c0:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <pvPortMalloc+0x164>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d868      	bhi.n	800459c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80044ca:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <pvPortMalloc+0x168>)
 80044cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <pvPortMalloc+0x168>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044d4:	e004      	b.n	80044e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d903      	bls.n	80044f2 <pvPortMalloc+0x86>
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f1      	bne.n	80044d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80044f2:	4b36      	ldr	r3, [pc, #216]	; (80045cc <pvPortMalloc+0x160>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d04f      	beq.n	800459c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2208      	movs	r2, #8
 8004502:	4413      	add	r3, r2
 8004504:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	1ad2      	subs	r2, r2, r3
 8004516:	2308      	movs	r3, #8
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	429a      	cmp	r2, r3
 800451c:	d91f      	bls.n	800455e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <pvPortMalloc+0xda>
        __asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
    }
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	1ad2      	subs	r2, r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004558:	6978      	ldr	r0, [r7, #20]
 800455a:	f000 f8f9 	bl	8004750 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <pvPortMalloc+0x164>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <pvPortMalloc+0x164>)
 800456a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <pvPortMalloc+0x164>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <pvPortMalloc+0x16c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d203      	bcs.n	8004580 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <pvPortMalloc+0x164>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <pvPortMalloc+0x16c>)
 800457e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <pvPortMalloc+0x170>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a10      	ldr	r2, [pc, #64]	; (80045dc <pvPortMalloc+0x170>)
 800459a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800459c:	f7fe fc48 	bl	8002e30 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <pvPortMalloc+0x154>
        __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	60fb      	str	r3, [r7, #12]
    }
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <pvPortMalloc+0x152>
    return pvReturn;
 80045c0:	69fb      	ldr	r3, [r7, #28]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3728      	adds	r7, #40	; 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20012e14 	.word	0x20012e14
 80045d0:	20012e18 	.word	0x20012e18
 80045d4:	20012e0c 	.word	0x20012e0c
 80045d8:	20012e1c 	.word	0x20012e1c
 80045dc:	20012e20 	.word	0x20012e20

080045e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d049      	beq.n	8004686 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80045f2:	2308      	movs	r3, #8
 80045f4:	425b      	negs	r3, r3
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db0a      	blt.n	800461e <vPortFree+0x3e>
        __asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
    }
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <vPortFree+0x5c>
        __asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
    }
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0fdb      	lsrs	r3, r3, #31
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01c      	beq.n	8004686 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d118      	bne.n	8004686 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004660:	f7fe fbd8 	bl	8002e14 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <vPortFree+0xb0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4413      	add	r3, r2
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <vPortFree+0xb0>)
 8004670:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004672:	6938      	ldr	r0, [r7, #16]
 8004674:	f000 f86c 	bl	8004750 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <vPortFree+0xb4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	4a05      	ldr	r2, [pc, #20]	; (8004694 <vPortFree+0xb4>)
 8004680:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004682:	f7fe fbd5 	bl	8002e30 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20012e18 	.word	0x20012e18
 8004694:	20012e24 	.word	0x20012e24

08004698 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800469e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80046a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <prvHeapInit+0xa4>)
 80046a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3307      	adds	r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0307 	bic.w	r3, r3, #7
 80046be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <prvHeapInit+0xa4>)
 80046c8:	4413      	add	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <prvHeapInit+0xa8>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <prvHeapInit+0xa8>)
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4413      	add	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80046e4:	2208      	movs	r2, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0307 	bic.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <prvHeapInit+0xac>)
 80046f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <prvHeapInit+0xac>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <prvHeapInit+0xac>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvHeapInit+0xac>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <prvHeapInit+0xb0>)
 8004726:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a07      	ldr	r2, [pc, #28]	; (800474c <prvHeapInit+0xb4>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	2000020c 	.word	0x2000020c
 8004740:	20012e0c 	.word	0x20012e0c
 8004744:	20012e14 	.word	0x20012e14
 8004748:	20012e1c 	.word	0x20012e1c
 800474c:	20012e18 	.word	0x20012e18

08004750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <prvInsertBlockIntoFreeList+0xac>)
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e002      	b.n	8004764 <prvInsertBlockIntoFreeList+0x14>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d8f7      	bhi.n	800475e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d108      	bne.n	8004792 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	441a      	add	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d118      	bne.n	80047d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <prvInsertBlockIntoFreeList+0xb0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d00d      	beq.n	80047ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e008      	b.n	80047e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <prvInsertBlockIntoFreeList+0xb0>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e003      	b.n	80047e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d002      	beq.n	80047ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20012e0c 	.word	0x20012e0c
 8004800:	20012e14 	.word	0x20012e14

08004804 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004808:	4803      	ldr	r0, [pc, #12]	; (8004818 <_cbSendSystemDesc+0x14>)
 800480a:	f002 f90d 	bl	8006a28 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800480e:	4803      	ldr	r0, [pc, #12]	; (800481c <_cbSendSystemDesc+0x18>)
 8004810:	f002 f90a 	bl	8006a28 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}
 8004818:	080071e4 	.word	0x080071e4
 800481c:	08007228 	.word	0x08007228

08004820 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <SEGGER_SYSVIEW_Conf+0x20>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <SEGGER_SYSVIEW_Conf+0x20>)
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <SEGGER_SYSVIEW_Conf+0x24>)
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <SEGGER_SYSVIEW_Conf+0x28>)
 8004830:	f001 fc76 	bl	8006120 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004834:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004838:	f001 fcb6 	bl	80061a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800483c:	bf00      	nop
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000000 	.word	0x20000000
 8004844:	08004805 	.word	0x08004805
 8004848:	080072c4 	.word	0x080072c4

0800484c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484e:	b085      	sub	sp, #20
 8004850:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e033      	b.n	80048c0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004858:	491e      	ldr	r1, [pc, #120]	; (80048d4 <_cbSendTaskList+0x88>)
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	491a      	ldr	r1, [pc, #104]	; (80048d4 <_cbSendTaskList+0x88>)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	3304      	adds	r3, #4
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	4c16      	ldr	r4, [pc, #88]	; (80048d4 <_cbSendTaskList+0x88>)
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4423      	add	r3, r4
 8004888:	3308      	adds	r3, #8
 800488a:	681c      	ldr	r4, [r3, #0]
 800488c:	4d11      	ldr	r5, [pc, #68]	; (80048d4 <_cbSendTaskList+0x88>)
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	442b      	add	r3, r5
 800489a:	330c      	adds	r3, #12
 800489c:	681d      	ldr	r5, [r3, #0]
 800489e:	4e0d      	ldr	r6, [pc, #52]	; (80048d4 <_cbSendTaskList+0x88>)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4433      	add	r3, r6
 80048ac:	3310      	adds	r3, #16
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462b      	mov	r3, r5
 80048b4:	4622      	mov	r2, r4
 80048b6:	f000 f8bd 	bl	8004a34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3301      	adds	r3, #1
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_cbSendTaskList+0x8c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3c6      	bcc.n	8004858 <_cbSendTaskList+0xc>
  }
}
 80048ca:	bf00      	nop
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	20012e28 	.word	0x20012e28
 80048d8:	20012ec8 	.word	0x20012ec8

080048dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80048dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80048e4:	f7fe fbb4 	bl	8003050 <xTaskGetTickCountFromISR>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2200      	movs	r2, #0
 80048ec:	469a      	mov	sl, r3
 80048ee:	4693      	mov	fp, r2
 80048f0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80048f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	f04f 0a00 	mov.w	sl, #0
 8004900:	f04f 0b00 	mov.w	fp, #0
 8004904:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004908:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800490c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004910:	4652      	mov	r2, sl
 8004912:	465b      	mov	r3, fp
 8004914:	1a14      	subs	r4, r2, r0
 8004916:	eb63 0501 	sbc.w	r5, r3, r1
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	00ab      	lsls	r3, r5, #2
 8004924:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004928:	00a2      	lsls	r2, r4, #2
 800492a:	4614      	mov	r4, r2
 800492c:	461d      	mov	r5, r3
 800492e:	eb14 0800 	adds.w	r8, r4, r0
 8004932:	eb45 0901 	adc.w	r9, r5, r1
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494a:	4690      	mov	r8, r2
 800494c:	4699      	mov	r9, r3
 800494e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004952:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004964 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004972:	2205      	movs	r2, #5
 8004974:	492b      	ldr	r1, [pc, #172]	; (8004a24 <SYSVIEW_AddTask+0xc0>)
 8004976:	68b8      	ldr	r0, [r7, #8]
 8004978:	f002 fb9c 	bl	80070b4 <memcmp>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04b      	beq.n	8004a1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b07      	cmp	r3, #7
 8004988:	d903      	bls.n	8004992 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800498a:	4828      	ldr	r0, [pc, #160]	; (8004a2c <SYSVIEW_AddTask+0xc8>)
 800498c:	f002 fb08 	bl	8006fa0 <SEGGER_SYSVIEW_Warn>
    return;
 8004990:	e044      	b.n	8004a1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4926      	ldr	r1, [pc, #152]	; (8004a30 <SYSVIEW_AddTask+0xcc>)
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80049a6:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4921      	ldr	r1, [pc, #132]	; (8004a30 <SYSVIEW_AddTask+0xcc>)
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	3304      	adds	r3, #4
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	491b      	ldr	r1, [pc, #108]	; (8004a30 <SYSVIEW_AddTask+0xcc>)
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3308      	adds	r3, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4916      	ldr	r1, [pc, #88]	; (8004a30 <SYSVIEW_AddTask+0xcc>)
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	330c      	adds	r3, #12
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4910      	ldr	r1, [pc, #64]	; (8004a30 <SYSVIEW_AddTask+0xcc>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3310      	adds	r3, #16
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <SYSVIEW_AddTask+0xc4>)
 8004a06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f80e 	bl	8004a34 <SYSVIEW_SendTaskInfo>
 8004a18:	e000      	b.n	8004a1c <SYSVIEW_AddTask+0xb8>
    return;
 8004a1a:	bf00      	nop

}
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	08007238 	.word	0x08007238
 8004a28:	20012ec8 	.word	0x20012ec8
 8004a2c:	08007240 	.word	0x08007240
 8004a30:	20012e28 	.word	0x20012e28

08004a34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	2214      	movs	r2, #20
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f002 fb42 	bl	80070d4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fee5 	bl	8006838 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004a6e:	bf00      	nop
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <__NVIC_EnableIRQ>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	db0b      	blt.n	8004aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	f003 021f 	and.w	r2, r3, #31
 8004a90:	4907      	ldr	r1, [pc, #28]	; (8004ab0 <__NVIC_EnableIRQ+0x38>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2001      	movs	r0, #1
 8004a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000e100 	.word	0xe000e100

08004ab4 <__NVIC_SetPriority>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	db0a      	blt.n	8004ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	490c      	ldr	r1, [pc, #48]	; (8004b00 <__NVIC_SetPriority+0x4c>)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004adc:	e00a      	b.n	8004af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4908      	ldr	r1, [pc, #32]	; (8004b04 <__NVIC_SetPriority+0x50>)
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	3b04      	subs	r3, #4
 8004aec:	0112      	lsls	r2, r2, #4
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	440b      	add	r3, r1
 8004af2:	761a      	strb	r2, [r3, #24]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000e100 	.word	0xe000e100
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004b0e:	f002 faa3 	bl	8007058 <SEGGER_SYSVIEW_IsStarted>
 8004b12:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004b1a:	f001 fd11 	bl	8006540 <SEGGER_SYSVIEW_Start>
  }
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <_cbOnUARTRx+0x3c>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d806      	bhi.n	8004b48 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <_cbOnUARTRx+0x3c>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <_cbOnUARTRx+0x3c>)
 8004b44:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004b46:	e009      	b.n	8004b5c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004b48:	f7ff ffde 	bl	8004b08 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <_cbOnUARTRx+0x3c>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	1dfb      	adds	r3, r7, #7
 8004b54:	2201      	movs	r2, #1
 8004b56:	4619      	mov	r1, r3
 8004b58:	f000 fb9c 	bl	8005294 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004b5c:	bf00      	nop
}
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000014 	.word	0x20000014

08004b68 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <_cbOnUARTTx+0x5c>)
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d80f      	bhi.n	8004b98 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <_cbOnUARTTx+0x5c>)
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <_cbOnUARTTx+0x60>)
 8004b80:	5c9a      	ldrb	r2, [r3, r2]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <_cbOnUARTTx+0x5c>)
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <_cbOnUARTTx+0x5c>)
 8004b90:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004b96:	e00f      	b.n	8004bb8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <_cbOnUARTTx+0x5c>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fa1b 	bl	8004fdc <SEGGER_RTT_ReadUpBufferNoLock>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da02      	bge.n	8004bb6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e000      	b.n	8004bb8 <_cbOnUARTTx+0x50>
  }
Done:
 8004bb6:	bf00      	nop
  return r;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000014 	.word	0x20000014
 8004bc8:	080072cc 	.word	0x080072cc

08004bcc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <SEGGER_UART_init+0x1c>)
 8004bd6:	4905      	ldr	r1, [pc, #20]	; (8004bec <SEGGER_UART_init+0x20>)
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f863 	bl	8004ca4 <HIF_UART_Init>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	08004b29 	.word	0x08004b29
 8004bec:	08004b69 	.word	0x08004b69

08004bf0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <USART2_IRQHandler+0x80>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d011      	beq.n	8004c2a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <USART2_IRQHandler+0x84>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 030b 	and.w	r3, r3, #11
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <USART2_IRQHandler+0x88>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004c20:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <USART2_IRQHandler+0x88>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	79fa      	ldrb	r2, [r7, #7]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01a      	beq.n	8004c6a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <USART2_IRQHandler+0x8c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <USART2_IRQHandler+0x8c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	1dfa      	adds	r2, r7, #7
 8004c42:	4610      	mov	r0, r2
 8004c44:	4798      	blx	r3
 8004c46:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <USART2_IRQHandler+0x90>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <USART2_IRQHandler+0x90>)
 8004c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e006      	b.n	8004c6a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004c5c:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <USART2_IRQHandler+0x80>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004c60:	79fa      	ldrb	r2, [r7, #7]
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <USART2_IRQHandler+0x84>)
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e000      	b.n	8004c6a <USART2_IRQHandler+0x7a>
      return;
 8004c68:	bf00      	nop
    }
  }
}
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40004400 	.word	0x40004400
 8004c74:	40004404 	.word	0x40004404
 8004c78:	20012ecc 	.word	0x20012ecc
 8004c7c:	20012ed0 	.word	0x20012ed0
 8004c80:	4000440c 	.word	0x4000440c

08004c84 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	6013      	str	r3, [r2, #0]
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	4000440c 	.word	0x4000440c

08004ca4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004cb0:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HIF_UART_Init+0xc8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2d      	ldr	r2, [pc, #180]	; (8004d6c <HIF_UART_Init+0xc8>)
 8004cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cba:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HIF_UART_Init+0xcc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <HIF_UART_Init+0xcc>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HIF_UART_Init+0xd0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004cdc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004cde:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <HIF_UART_Init+0xd0>)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HIF_UART_Init+0xd4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004cf8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004cfa:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <HIF_UART_Init+0xd4>)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HIF_UART_Init+0xd8>)
 8004d02:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004d06:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HIF_UART_Init+0xdc>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <HIF_UART_Init+0xe0>)
 8004d10:	2280      	movs	r2, #128	; 0x80
 8004d12:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HIF_UART_Init+0xe4>)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d302      	bcc.n	8004d3a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004d34:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004d38:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <HIF_UART_Init+0xe8>)
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004d4a:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <HIF_UART_Init+0xec>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004d50:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <HIF_UART_Init+0xf0>)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004d56:	2106      	movs	r1, #6
 8004d58:	2026      	movs	r0, #38	; 0x26
 8004d5a:	f7ff feab 	bl	8004ab4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004d5e:	2026      	movs	r0, #38	; 0x26
 8004d60:	f7ff fe8a 	bl	8004a78 <__NVIC_EnableIRQ>
}
 8004d64:	bf00      	nop
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023840 	.word	0x40023840
 8004d70:	40023830 	.word	0x40023830
 8004d74:	40020020 	.word	0x40020020
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	4000440c 	.word	0x4000440c
 8004d80:	40004410 	.word	0x40004410
 8004d84:	40004414 	.word	0x40004414
 8004d88:	0501bd00 	.word	0x0501bd00
 8004d8c:	40004408 	.word	0x40004408
 8004d90:	20012ecc 	.word	0x20012ecc
 8004d94:	20012ed0 	.word	0x20012ed0

08004d98 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_DoInit+0xa0>)
 8004da0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004da2:	22a8      	movs	r2, #168	; 0xa8
 8004da4:	2100      	movs	r1, #0
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f002 f994 	bl	80070d4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2203      	movs	r2, #3
 8004db0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2203      	movs	r2, #3
 8004db6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <_DoInit+0xa4>)
 8004dbc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <_DoInit+0xa8>)
 8004dc2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <_DoInit+0xa4>)
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <_DoInit+0xac>)
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2210      	movs	r2, #16
 8004dee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e02:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	e00c      	b.n	8004e26 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1c3 030f 	rsb	r3, r3, #15
 8004e12:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <_DoInit+0xb0>)
 8004e14:	5cd1      	ldrb	r1, [r2, r3]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3301      	adds	r3, #1
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0f      	cmp	r3, #15
 8004e2a:	d9ef      	bls.n	8004e0c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e2c:	f3bf 8f5f 	dmb	sy
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20012ed4 	.word	0x20012ed4
 8004e3c:	08007290 	.word	0x08007290
 8004e40:	20012f7c 	.word	0x20012f7c
 8004e44:	2001337c 	.word	0x2001337c
 8004e48:	080072d0 	.word	0x080072d0

08004e4c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d905      	bls.n	8004e7c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	e007      	b.n	8004e8c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	1acb      	subs	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf28      	it	cs
 8004e9a:	4613      	movcs	r3, r2
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bf28      	it	cs
 8004ea6:	4613      	movcs	r3, r2
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	6978      	ldr	r0, [r7, #20]
 8004eba:	f002 f937 	bl	800712c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	4413      	add	r3, r2
 8004ec4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	4413      	add	r3, r2
 8004ecc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	4413      	add	r3, r2
 8004edc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d101      	bne.n	8004eec <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1b2      	bne.n	8004e62 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004efc:	6a3b      	ldr	r3, [r7, #32]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b088      	sub	sp, #32
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d911      	bls.n	8004f4e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	6938      	ldr	r0, [r7, #16]
 8004f3a:	f002 f8f7 	bl	800712c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f4c:	e01f      	b.n	8004f8e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	6938      	ldr	r0, [r7, #16]
 8004f62:	f002 f8e3 	bl	800712c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4413      	add	r3, r2
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6938      	ldr	r0, [r7, #16]
 8004f80:	f002 f8d4 	bl	800712c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f84:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	60da      	str	r2, [r3, #12]
}
 8004f8e:	bf00      	nop
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f96:	b480      	push	{r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d808      	bhi.n	8004fc4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e004      	b.n	8004fce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004fce:	697b      	ldr	r3, [r7, #20]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	; 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004fe8:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b53      	cmp	r3, #83	; 0x53
 8004ff4:	d001      	beq.n	8004ffa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004ff6:	f7ff fecf 	bl	8004d98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4a37      	ldr	r2, [pc, #220]	; (80050e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005008:	4413      	add	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800501c:	2300      	movs	r3, #0
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	429a      	cmp	r2, r3
 8005026:	d92b      	bls.n	8005080 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4293      	cmp	r3, r2
 8005038:	bf28      	it	cs
 800503a:	4613      	movcs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	4413      	add	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800504e:	f002 f86d 	bl	800712c <memcpy>
    NumBytesRead += NumBytesRem;
 8005052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800506a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	429a      	cmp	r2, r3
 800507a:	d101      	bne.n	8005080 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800507c:	2300      	movs	r3, #0
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4293      	cmp	r3, r2
 800508e:	bf28      	it	cs
 8005090:	4613      	movcs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d019      	beq.n	80050ce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	4413      	add	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	6939      	ldr	r1, [r7, #16]
 80050a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050aa:	f002 f83f 	bl	800712c <memcpy>
    NumBytesRead += NumBytesRem;
 80050ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3730      	adds	r7, #48	; 0x30
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20012ed4 	.word	0x20012ed4

080050e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050f4:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b53      	cmp	r3, #83	; 0x53
 8005100:	d001      	beq.n	8005106 <SEGGER_RTT_ReadNoLock+0x1e>
 8005102:	f7ff fe49 	bl	8004d98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	3360      	adds	r3, #96	; 0x60
 8005112:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005114:	4413      	add	r3, r2
 8005116:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005128:	2300      	movs	r3, #0
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800512c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	429a      	cmp	r2, r3
 8005132:	d92b      	bls.n	800518c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4293      	cmp	r3, r2
 8005144:	bf28      	it	cs
 8005146:	4613      	movcs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	4413      	add	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	6939      	ldr	r1, [r7, #16]
 8005158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800515a:	f001 ffe7 	bl	800712c <memcpy>
    NumBytesRead += NumBytesRem;
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005184:	429a      	cmp	r2, r3
 8005186:	d101      	bne.n	800518c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4293      	cmp	r3, r2
 800519a:	bf28      	it	cs
 800519c:	4613      	movcs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d019      	beq.n	80051da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	4413      	add	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051b6:	f001 ffb9 	bl	800712c <memcpy>
    NumBytesRead += NumBytesRem;
 80051ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	; 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20012ed4 	.word	0x20012ed4

080051f4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	3360      	adds	r3, #96	; 0x60
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005212:	4413      	add	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d029      	beq.n	8005272 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800521e:	2b02      	cmp	r3, #2
 8005220:	d82e      	bhi.n	8005280 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005226:	2b01      	cmp	r3, #1
 8005228:	d013      	beq.n	8005252 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800522a:	e029      	b.n	8005280 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	f7ff feb2 	bl	8004f96 <_GetAvailWriteSpace>
 8005232:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d202      	bcs.n	8005242 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005240:	e021      	b.n	8005286 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7ff fe5b 	bl	8004f06 <_WriteNoCheck>
    break;
 8005250:	e019      	b.n	8005286 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005252:	6978      	ldr	r0, [r7, #20]
 8005254:	f7ff fe9f 	bl	8004f96 <_GetAvailWriteSpace>
 8005258:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4293      	cmp	r3, r2
 8005260:	bf28      	it	cs
 8005262:	4613      	movcs	r3, r2
 8005264:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7ff fe4b 	bl	8004f06 <_WriteNoCheck>
    break;
 8005270:	e009      	b.n	8005286 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7ff fde8 	bl	8004e4c <_WriteBlocking>
 800527c:	61f8      	str	r0, [r7, #28]
    break;
 800527e:	e002      	b.n	8005286 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
    break;
 8005284:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005286:	69fb      	ldr	r3, [r7, #28]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20012ed4 	.word	0x20012ed4

08005294 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b53      	cmp	r3, #83	; 0x53
 80052ac:	d001      	beq.n	80052b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80052ae:	f7ff fd73 	bl	8004d98 <_DoInit>
  SEGGER_RTT_LOCK();
 80052b2:	f3ef 8311 	mrs	r3, BASEPRI
 80052b6:	f04f 0120 	mov.w	r1, #32
 80052ba:	f381 8811 	msr	BASEPRI, r1
 80052be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff95 	bl	80051f4 <SEGGER_RTT_WriteDownBufferNoLock>
 80052ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80052d2:	697b      	ldr	r3, [r7, #20]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20012ed4 	.word	0x20012ed4

080052e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b53      	cmp	r3, #83	; 0x53
 80052fa:	d001      	beq.n	8005300 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052fc:	f7ff fd4c 	bl	8004d98 <_DoInit>
  SEGGER_RTT_LOCK();
 8005300:	f3ef 8311 	mrs	r3, BASEPRI
 8005304:	f04f 0120 	mov.w	r1, #32
 8005308:	f381 8811 	msr	BASEPRI, r1
 800530c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800530e:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005310:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005316:	6939      	ldr	r1, [r7, #16]
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	3304      	adds	r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	429a      	cmp	r2, r3
 800533c:	dbeb      	blt.n	8005316 <SEGGER_RTT_AllocUpBuffer+0x36>
 800533e:	e000      	b.n	8005342 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005340:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	429a      	cmp	r2, r3
 800534a:	da3f      	bge.n	80053cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800534c:	6939      	ldr	r1, [r7, #16]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005360:	6939      	ldr	r1, [r7, #16]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	4613      	mov	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	440b      	add	r3, r1
 8005370:	3304      	adds	r3, #4
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	3320      	adds	r3, #32
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800538a:	6939      	ldr	r1, [r7, #16]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	4613      	mov	r3, r2
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4413      	add	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	440b      	add	r3, r1
 8005398:	3328      	adds	r3, #40	; 0x28
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800539e:	6939      	ldr	r1, [r7, #16]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	4613      	mov	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	440b      	add	r3, r1
 80053ac:	3324      	adds	r3, #36	; 0x24
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80053b2:	6939      	ldr	r1, [r7, #16]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	332c      	adds	r3, #44	; 0x2c
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053c6:	f3bf 8f5f 	dmb	sy
 80053ca:	e002      	b.n	80053d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80053d8:	69fb      	ldr	r3, [r7, #28]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20012ed4 	.word	0x20012ed4

080053e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053f6:	4b21      	ldr	r3, [pc, #132]	; (800547c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053f8:	623b      	str	r3, [r7, #32]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b53      	cmp	r3, #83	; 0x53
 8005402:	d001      	beq.n	8005408 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005404:	f7ff fcc8 	bl	8004d98 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005408:	4b1c      	ldr	r3, [pc, #112]	; (800547c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800540a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d82c      	bhi.n	800546c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005412:	f3ef 8311 	mrs	r3, BASEPRI
 8005416:	f04f 0120 	mov.w	r1, #32
 800541a:	f381 8811 	msr	BASEPRI, r1
 800541e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	3360      	adds	r3, #96	; 0x60
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2200      	movs	r2, #0
 800544e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2200      	movs	r2, #0
 8005454:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800545c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
 800546a:	e002      	b.n	8005472 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800546c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005474:	4618      	mov	r0, r3
 8005476:	3728      	adds	r7, #40	; 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20012ed4 	.word	0x20012ed4

08005480 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	60fa      	str	r2, [r7, #12]
 8005496:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d90a      	bls.n	80054b4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80054a2:	e007      	b.n	80054b4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	1c53      	adds	r3, r2, #1
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	60f9      	str	r1, [r7, #12]
 80054b0:	7812      	ldrb	r2, [r2, #0]
 80054b2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	1e5a      	subs	r2, r3, #1
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <_EncodeStr+0x46>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1ee      	bne.n	80054a4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3307      	adds	r3, #7
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <_HandleIncomingPacket+0xd8>)
 8005500:	7e1b      	ldrb	r3, [r3, #24]
 8005502:	4618      	mov	r0, r3
 8005504:	1cfb      	adds	r3, r7, #3
 8005506:	2201      	movs	r2, #1
 8005508:	4619      	mov	r1, r3
 800550a:	f7ff fded 	bl	80050e8 <SEGGER_RTT_ReadNoLock>
 800550e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d057      	beq.n	80055c6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d031      	beq.n	8005580 <_HandleIncomingPacket+0x88>
 800551c:	2b80      	cmp	r3, #128	; 0x80
 800551e:	dc40      	bgt.n	80055a2 <_HandleIncomingPacket+0xaa>
 8005520:	2b07      	cmp	r3, #7
 8005522:	dc15      	bgt.n	8005550 <_HandleIncomingPacket+0x58>
 8005524:	2b00      	cmp	r3, #0
 8005526:	dd3c      	ble.n	80055a2 <_HandleIncomingPacket+0xaa>
 8005528:	3b01      	subs	r3, #1
 800552a:	2b06      	cmp	r3, #6
 800552c:	d839      	bhi.n	80055a2 <_HandleIncomingPacket+0xaa>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <_HandleIncomingPacket+0x3c>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005557 	.word	0x08005557
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005563 	.word	0x08005563
 8005540:	08005569 	.word	0x08005569
 8005544:	0800556f 	.word	0x0800556f
 8005548:	08005575 	.word	0x08005575
 800554c:	0800557b 	.word	0x0800557b
 8005550:	2b7f      	cmp	r3, #127	; 0x7f
 8005552:	d033      	beq.n	80055bc <_HandleIncomingPacket+0xc4>
 8005554:	e025      	b.n	80055a2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005556:	f000 fff3 	bl	8006540 <SEGGER_SYSVIEW_Start>
      break;
 800555a:	e034      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800555c:	f001 f8ac 	bl	80066b8 <SEGGER_SYSVIEW_Stop>
      break;
 8005560:	e031      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005562:	f001 fa85 	bl	8006a70 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005566:	e02e      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005568:	f001 fa4a 	bl	8006a00 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800556c:	e02b      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800556e:	f001 f8c9 	bl	8006704 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005572:	e028      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005574:	f001 fcc2 	bl	8006efc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005578:	e025      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800557a:	f001 fca1 	bl	8006ec0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800557e:	e022      	b.n	80055c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <_HandleIncomingPacket+0xd8>)
 8005582:	7e1b      	ldrb	r3, [r3, #24]
 8005584:	4618      	mov	r0, r3
 8005586:	1cfb      	adds	r3, r7, #3
 8005588:	2201      	movs	r2, #1
 800558a:	4619      	mov	r1, r3
 800558c:	f7ff fdac 	bl	80050e8 <SEGGER_RTT_ReadNoLock>
 8005590:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d013      	beq.n	80055c0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fc06 	bl	8006dac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80055a0:	e00e      	b.n	80055c0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da0c      	bge.n	80055c4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055aa:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <_HandleIncomingPacket+0xd8>)
 80055ac:	7e1b      	ldrb	r3, [r3, #24]
 80055ae:	4618      	mov	r0, r3
 80055b0:	1cfb      	adds	r3, r7, #3
 80055b2:	2201      	movs	r2, #1
 80055b4:	4619      	mov	r1, r3
 80055b6:	f7ff fd97 	bl	80050e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80055ba:	e003      	b.n	80055c4 <_HandleIncomingPacket+0xcc>
      break;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <_HandleIncomingPacket+0xce>
      break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <_HandleIncomingPacket+0xce>
      break;
 80055c4:	bf00      	nop
    }
  }
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20014394 	.word	0x20014394

080055d4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08c      	sub	sp, #48	; 0x30
 80055d8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055da:	2301      	movs	r3, #1
 80055dc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	4b32      	ldr	r3, [pc, #200]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ee:	e00b      	b.n	8005608 <_TrySendOverflowPacket+0x34>
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	1c59      	adds	r1, r3, #1
 80055f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	09db      	lsrs	r3, r3, #7
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	2b7f      	cmp	r3, #127	; 0x7f
 800560c:	d8f0      	bhi.n	80055f0 <_TrySendOverflowPacket+0x1c>
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800561e:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <_TrySendOverflowPacket+0xe4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	e00b      	b.n	8005650 <_TrySendOverflowPacket+0x7c>
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	6279      	str	r1, [r7, #36]	; 0x24
 8005642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	09db      	lsrs	r3, r3, #7
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b7f      	cmp	r3, #127	; 0x7f
 8005654:	d8f0      	bhi.n	8005638 <_TrySendOverflowPacket+0x64>
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	627a      	str	r2, [r7, #36]	; 0x24
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	4618      	mov	r0, r3
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	461a      	mov	r2, r3
 8005674:	1d3b      	adds	r3, r7, #4
 8005676:	4619      	mov	r1, r3
 8005678:	f7fa fdca 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800567c:	4603      	mov	r3, r0
 800567e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005680:	f7ff fb00 	bl	8004c84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	3b01      	subs	r3, #1
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e004      	b.n	80056a8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	3301      	adds	r3, #1
 80056a4:	4a03      	ldr	r2, [pc, #12]	; (80056b4 <_TrySendOverflowPacket+0xe0>)
 80056a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80056a8:	693b      	ldr	r3, [r7, #16]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3730      	adds	r7, #48	; 0x30
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20014394 	.word	0x20014394
 80056b8:	e0001004 	.word	0xe0001004

080056bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056c8:	4b96      	ldr	r3, [pc, #600]	; (8005924 <_SendPacket+0x268>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d010      	beq.n	80056f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056d0:	4b94      	ldr	r3, [pc, #592]	; (8005924 <_SendPacket+0x268>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8130 	beq.w	800593a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056da:	4b92      	ldr	r3, [pc, #584]	; (8005924 <_SendPacket+0x268>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d109      	bne.n	80056f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056e2:	f7ff ff77 	bl	80055d4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056e6:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <_SendPacket+0x268>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f040 8127 	bne.w	800593e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80056f0:	e001      	b.n	80056f6 <_SendPacket+0x3a>
    goto Send;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <_SendPacket+0x3c>
Send:
 80056f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b1f      	cmp	r3, #31
 80056fc:	d809      	bhi.n	8005712 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <_SendPacket+0x268>)
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 8118 	bne.w	8005942 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b17      	cmp	r3, #23
 8005716:	d807      	bhi.n	8005728 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3b01      	subs	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e0c4      	b.n	80058b2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b7f      	cmp	r3, #127	; 0x7f
 8005734:	d912      	bls.n	800575c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	09da      	lsrs	r2, r3, #7
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b01      	subs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	3a01      	subs	r2, #1
 800574e:	60fa      	str	r2, [r7, #12]
 8005750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005754:	b2da      	uxtb	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e006      	b.n	800576a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3b01      	subs	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b7e      	cmp	r3, #126	; 0x7e
 800576e:	d807      	bhi.n	8005780 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e098      	b.n	80058b2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005786:	d212      	bcs.n	80057ae <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	09da      	lsrs	r2, r3, #7
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3b01      	subs	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	3a01      	subs	r2, #1
 80057a0:	60fa      	str	r2, [r7, #12]
 80057a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e081      	b.n	80058b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057b4:	d21d      	bcs.n	80057f2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0b9a      	lsrs	r2, r3, #14
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b01      	subs	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	09db      	lsrs	r3, r3, #7
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	3a01      	subs	r2, #1
 80057d0:	60fa      	str	r2, [r7, #12]
 80057d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	3a01      	subs	r2, #1
 80057e4:	60fa      	str	r2, [r7, #12]
 80057e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e05f      	b.n	80058b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f8:	d228      	bcs.n	800584c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0d5a      	lsrs	r2, r3, #21
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b01      	subs	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0b9b      	lsrs	r3, r3, #14
 800580e:	b2db      	uxtb	r3, r3
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	3a01      	subs	r2, #1
 8005814:	60fa      	str	r2, [r7, #12]
 8005816:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	09db      	lsrs	r3, r3, #7
 8005824:	b2db      	uxtb	r3, r3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	3a01      	subs	r2, #1
 800582a:	60fa      	str	r2, [r7, #12]
 800582c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	3a01      	subs	r2, #1
 800583e:	60fa      	str	r2, [r7, #12]
 8005840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e032      	b.n	80058b2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0f1a      	lsrs	r2, r3, #28
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0d5b      	lsrs	r3, r3, #21
 8005860:	b2db      	uxtb	r3, r3
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	3a01      	subs	r2, #1
 8005866:	60fa      	str	r2, [r7, #12]
 8005868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	0b9b      	lsrs	r3, r3, #14
 8005876:	b2db      	uxtb	r3, r3
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	3a01      	subs	r2, #1
 800587c:	60fa      	str	r2, [r7, #12]
 800587e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	09db      	lsrs	r3, r3, #7
 800588c:	b2db      	uxtb	r3, r3
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	3a01      	subs	r2, #1
 8005892:	60fa      	str	r2, [r7, #12]
 8005894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	3a01      	subs	r2, #1
 80058a6:	60fa      	str	r2, [r7, #12]
 80058a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058b2:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <_SendPacket+0x26c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <_SendPacket+0x268>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	e00b      	b.n	80058e4 <_SendPacket+0x228>
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	6279      	str	r1, [r7, #36]	; 0x24
 80058d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b7f      	cmp	r3, #127	; 0x7f
 80058e8:	d8f0      	bhi.n	80058cc <_SendPacket+0x210>
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	627a      	str	r2, [r7, #36]	; 0x24
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <_SendPacket+0x268>)
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	4618      	mov	r0, r3
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	461a      	mov	r2, r3
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	f7fa fc81 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800590e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005910:	f7ff f9b8 	bl	8004c84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800591a:	4a02      	ldr	r2, [pc, #8]	; (8005924 <_SendPacket+0x268>)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	60d3      	str	r3, [r2, #12]
 8005920:	e010      	b.n	8005944 <_SendPacket+0x288>
 8005922:	bf00      	nop
 8005924:	20014394 	.word	0x20014394
 8005928:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800592c:	4b19      	ldr	r3, [pc, #100]	; (8005994 <_SendPacket+0x2d8>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	b2da      	uxtb	r2, r3
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <_SendPacket+0x2d8>)
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e004      	b.n	8005944 <_SendPacket+0x288>
    goto SendDone;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <_SendPacket+0x288>
      goto SendDone;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <_SendPacket+0x288>
      goto SendDone;
 8005942:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <_SendPacket+0x2d8>)
 8005946:	7e1b      	ldrb	r3, [r3, #24]
 8005948:	4619      	mov	r1, r3
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <_SendPacket+0x2dc>)
 800594c:	460b      	mov	r3, r1
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	440b      	add	r3, r1
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	336c      	adds	r3, #108	; 0x6c
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <_SendPacket+0x2d8>)
 800595c:	7e1b      	ldrb	r3, [r3, #24]
 800595e:	4618      	mov	r0, r3
 8005960:	490d      	ldr	r1, [pc, #52]	; (8005998 <_SendPacket+0x2dc>)
 8005962:	4603      	mov	r3, r0
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4403      	add	r3, r0
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	3370      	adds	r3, #112	; 0x70
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d00b      	beq.n	800598c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <_SendPacket+0x2d8>)
 8005976:	789b      	ldrb	r3, [r3, #2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <_SendPacket+0x2d8>)
 800597e:	2201      	movs	r2, #1
 8005980:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005982:	f7ff fdb9 	bl	80054f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005986:	4b03      	ldr	r3, [pc, #12]	; (8005994 <_SendPacket+0x2d8>)
 8005988:	2200      	movs	r2, #0
 800598a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800598c:	bf00      	nop
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20014394 	.word	0x20014394
 8005998:	20012ed4 	.word	0x20012ed4

0800599c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3301      	adds	r3, #1
 80059b2:	2b80      	cmp	r3, #128	; 0x80
 80059b4:	d80a      	bhi.n	80059cc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6051      	str	r1, [r2, #4]
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	d15a      	bne.n	8005a8a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	e00b      	b.n	8005a0e <_StoreChar+0x72>
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	6279      	str	r1, [r7, #36]	; 0x24
 8005a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	2b7f      	cmp	r3, #127	; 0x7f
 8005a12:	d8f0      	bhi.n	80059f6 <_StoreChar+0x5a>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	627a      	str	r2, [r7, #36]	; 0x24
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e00b      	b.n	8005a46 <_StoreChar+0xaa>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	61f9      	str	r1, [r7, #28]
 8005a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	09db      	lsrs	r3, r3, #7
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4a:	d8f0      	bhi.n	8005a2e <_StoreChar+0x92>
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	61fa      	str	r2, [r7, #28]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	221a      	movs	r2, #26
 8005a62:	6939      	ldr	r1, [r7, #16]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fe29 	bl	80056bc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fd36 	bl	80054e0 <_PreparePacket>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	3728      	adds	r7, #40	; 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005aae:	e007      	b.n	8005ac0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	623b      	str	r3, [r7, #32]
    Width++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d2f3      	bcs.n	8005ab0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d901      	bls.n	8005ad4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d11f      	bne.n	8005b1e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01c      	beq.n	8005b1e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <_PrintUnsigned+0x66>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <_PrintUnsigned+0x66>
        c = '0';
 8005af4:	2330      	movs	r3, #48	; 0x30
 8005af6:	76fb      	strb	r3, [r7, #27]
 8005af8:	e001      	b.n	8005afe <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005afa:	2320      	movs	r3, #32
 8005afc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005afe:	e007      	b.n	8005b10 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	3b01      	subs	r3, #1
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005b06:	7efb      	ldrb	r3, [r7, #27]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff ff46 	bl	800599c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <_PrintUnsigned+0x8a>
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3f0      	bcc.n	8005b00 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d903      	bls.n	8005b2c <_PrintUnsigned+0x98>
      NumDigits--;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	e009      	b.n	8005b40 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d200      	bcs.n	8005b40 <_PrintUnsigned+0xac>
        break;
 8005b3e:	e005      	b.n	8005b4c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b4a:	e7e8      	b.n	8005b1e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <_PrintUnsigned+0x128>)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff ff14 	bl	800599c <_StoreChar>
    Digit /= Base;
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e3      	bne.n	8005b4c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b94:	e006      	b.n	8005ba4 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff fefc 	bl	800599c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <_PrintUnsigned+0x11e>
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d3f1      	bcc.n	8005b96 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	080072f0 	.word	0x080072f0

08005bc0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bfb8      	it	lt
 8005bd4:	425b      	neglt	r3, r3
 8005bd6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bdc:	e007      	b.n	8005bee <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005be6:	613b      	str	r3, [r7, #16]
    Width++;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	daf3      	bge.n	8005bde <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d901      	bls.n	8005c02 <_PrintInt+0x42>
    Width = NumDigits;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <_PrintInt+0x5e>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	db04      	blt.n	8005c18 <_PrintInt+0x58>
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <_PrintInt+0x5e>
    FieldWidth--;
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <_PrintInt+0x6e>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <_PrintInt+0x9c>
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d111      	bne.n	8005c5c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00e      	beq.n	8005c5c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c3e:	e006      	b.n	8005c4e <_PrintInt+0x8e>
        FieldWidth--;
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c46:	2120      	movs	r1, #32
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fea7 	bl	800599c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <_PrintInt+0x9c>
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3f1      	bcc.n	8005c40 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da07      	bge.n	8005c72 <_PrintInt+0xb2>
    v = -v;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	425b      	negs	r3, r3
 8005c66:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c68:	212d      	movs	r1, #45	; 0x2d
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fe96 	bl	800599c <_StoreChar>
 8005c70:	e008      	b.n	8005c84 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c7c:	212b      	movs	r1, #43	; 0x2b
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff fe8c 	bl	800599c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d019      	beq.n	8005cc2 <_PrintInt+0x102>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d114      	bne.n	8005cc2 <_PrintInt+0x102>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d111      	bne.n	8005cc2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ca4:	e006      	b.n	8005cb4 <_PrintInt+0xf4>
        FieldWidth--;
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005cac:	2130      	movs	r1, #48	; 0x30
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fe74 	bl	800599c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <_PrintInt+0x102>
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3f1      	bcc.n	8005ca6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff fedf 	bl	8005a94 <_PrintUnsigned>
}
 8005cd6:	bf00      	nop
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b098      	sub	sp, #96	; 0x60
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cec:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf0:	f04f 0120 	mov.w	r1, #32
 8005cf4:	f381 8811 	msr	BASEPRI, r1
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfa:	48b7      	ldr	r0, [pc, #732]	; (8005fd8 <_VPrintTarget+0x2f8>)
 8005cfc:	f7ff fbf0 	bl	80054e0 <_PreparePacket>
 8005d00:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005d02:	4bb5      	ldr	r3, [pc, #724]	; (8005fd8 <_VPrintTarget+0x2f8>)
 8005d04:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3301      	adds	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005d26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 81a8 	beq.w	8006080 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d34:	2b25      	cmp	r3, #37	; 0x25
 8005d36:	f040 8195 	bne.w	8006064 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4e:	3b23      	subs	r3, #35	; 0x23
 8005d50:	2b0d      	cmp	r3, #13
 8005d52:	d83f      	bhi.n	8005dd4 <_VPrintTarget+0xf4>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <_VPrintTarget+0x7c>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005dd5 	.word	0x08005dd5
 8005d64:	08005dd5 	.word	0x08005dd5
 8005d68:	08005dd5 	.word	0x08005dd5
 8005d6c:	08005dd5 	.word	0x08005dd5
 8005d70:	08005dd5 	.word	0x08005dd5
 8005d74:	08005dd5 	.word	0x08005dd5
 8005d78:	08005dd5 	.word	0x08005dd5
 8005d7c:	08005db5 	.word	0x08005db5
 8005d80:	08005dd5 	.word	0x08005dd5
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005dd5 	.word	0x08005dd5
 8005d8c:	08005dd5 	.word	0x08005dd5
 8005d90:	08005da5 	.word	0x08005da5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e01a      	b.n	8005dda <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e012      	b.n	8005dda <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db6:	f043 0304 	orr.w	r3, r3, #4
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e00a      	b.n	8005dda <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	f043 0308 	orr.w	r3, r3, #8
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e002      	b.n	8005dda <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd8:	bf00      	nop
        }
      } while (v);
 8005dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1b0      	bne.n	8005d42 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005de0:	2300      	movs	r3, #0
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df0:	2b2f      	cmp	r3, #47	; 0x2f
 8005df2:	d912      	bls.n	8005e1a <_VPrintTarget+0x13a>
 8005df4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df8:	2b39      	cmp	r3, #57	; 0x39
 8005dfa:	d80e      	bhi.n	8005e1a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e12:	4413      	add	r3, r2
 8005e14:	3b30      	subs	r3, #48	; 0x30
 8005e16:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005e18:	e7e4      	b.n	8005de4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e2c:	d11d      	bne.n	8005e6a <_VPrintTarget+0x18a>
        sFormat++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e40:	2b2f      	cmp	r3, #47	; 0x2f
 8005e42:	d912      	bls.n	8005e6a <_VPrintTarget+0x18a>
 8005e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e48:	2b39      	cmp	r3, #57	; 0x39
 8005e4a:	d80e      	bhi.n	8005e6a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e62:	4413      	add	r3, r2
 8005e64:	3b30      	subs	r3, #48	; 0x30
 8005e66:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e68:	e7e4      	b.n	8005e34 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e76:	2b6c      	cmp	r3, #108	; 0x6c
 8005e78:	d003      	beq.n	8005e82 <_VPrintTarget+0x1a2>
 8005e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e7e:	2b68      	cmp	r3, #104	; 0x68
 8005e80:	d107      	bne.n	8005e92 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e90:	e7ef      	b.n	8005e72 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e96:	2b25      	cmp	r3, #37	; 0x25
 8005e98:	f000 80d8 	beq.w	800604c <_VPrintTarget+0x36c>
 8005e9c:	2b25      	cmp	r3, #37	; 0x25
 8005e9e:	f2c0 80dc 	blt.w	800605a <_VPrintTarget+0x37a>
 8005ea2:	2b78      	cmp	r3, #120	; 0x78
 8005ea4:	f300 80d9 	bgt.w	800605a <_VPrintTarget+0x37a>
 8005ea8:	2b58      	cmp	r3, #88	; 0x58
 8005eaa:	f2c0 80d6 	blt.w	800605a <_VPrintTarget+0x37a>
 8005eae:	3b58      	subs	r3, #88	; 0x58
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	f200 80d2 	bhi.w	800605a <_VPrintTarget+0x37a>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <_VPrintTarget+0x1dc>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005fb3 	.word	0x08005fb3
 8005ec0:	0800605b 	.word	0x0800605b
 8005ec4:	0800605b 	.word	0x0800605b
 8005ec8:	0800605b 	.word	0x0800605b
 8005ecc:	0800605b 	.word	0x0800605b
 8005ed0:	0800605b 	.word	0x0800605b
 8005ed4:	0800605b 	.word	0x0800605b
 8005ed8:	0800605b 	.word	0x0800605b
 8005edc:	0800605b 	.word	0x0800605b
 8005ee0:	0800605b 	.word	0x0800605b
 8005ee4:	0800605b 	.word	0x0800605b
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f67 	.word	0x08005f67
 8005ef0:	0800605b 	.word	0x0800605b
 8005ef4:	0800605b 	.word	0x0800605b
 8005ef8:	0800605b 	.word	0x0800605b
 8005efc:	0800605b 	.word	0x0800605b
 8005f00:	0800605b 	.word	0x0800605b
 8005f04:	0800605b 	.word	0x0800605b
 8005f08:	0800605b 	.word	0x0800605b
 8005f0c:	0800605b 	.word	0x0800605b
 8005f10:	0800605b 	.word	0x0800605b
 8005f14:	0800605b 	.word	0x0800605b
 8005f18:	0800605b 	.word	0x0800605b
 8005f1c:	08006027 	.word	0x08006027
 8005f20:	0800605b 	.word	0x0800605b
 8005f24:	0800605b 	.word	0x0800605b
 8005f28:	08005fdd 	.word	0x08005fdd
 8005f2c:	0800605b 	.word	0x0800605b
 8005f30:	08005f8d 	.word	0x08005f8d
 8005f34:	0800605b 	.word	0x0800605b
 8005f38:	0800605b 	.word	0x0800605b
 8005f3c:	08005fb3 	.word	0x08005fb3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	1d19      	adds	r1, r3, #4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6011      	str	r1, [r2, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005f54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fd1c 	bl	800599c <_StoreChar>
        break;
 8005f64:	e07a      	b.n	800605c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	1d19      	adds	r1, r3, #4
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6011      	str	r1, [r2, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f74:	f107 0010 	add.w	r0, r7, #16
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	220a      	movs	r2, #10
 8005f84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f86:	f7ff fe1b 	bl	8005bc0 <_PrintInt>
        break;
 8005f8a:	e067      	b.n	800605c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	1d19      	adds	r1, r3, #4
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6011      	str	r1, [r2, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f9c:	f107 0010 	add.w	r0, r7, #16
 8005fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005faa:	220a      	movs	r2, #10
 8005fac:	f7ff fd72 	bl	8005a94 <_PrintUnsigned>
        break;
 8005fb0:	e054      	b.n	800605c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	1d19      	adds	r1, r3, #4
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6011      	str	r1, [r2, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005fc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fc2:	f107 0010 	add.w	r0, r7, #16
 8005fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	f7ff fd5f 	bl	8005a94 <_PrintUnsigned>
        break;
 8005fd6:	e041      	b.n	800605c <_VPrintTarget+0x37c>
 8005fd8:	200143c4 	.word	0x200143c4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	1d19      	adds	r1, r3, #4
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <_VPrintTarget+0x314>
          s = "(null)";
 8005ff0:	4b4a      	ldr	r3, [pc, #296]	; (800611c <_VPrintTarget+0x43c>)
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffe:	3301      	adds	r3, #1
 8006000:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006002:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800600a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800600e:	f107 0310 	add.w	r3, r7, #16
 8006012:	4611      	mov	r1, r2
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fcc1 	bl	800599c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	2b7f      	cmp	r3, #127	; 0x7f
 800601e:	d9e9      	bls.n	8005ff4 <_VPrintTarget+0x314>
        break;
 8006020:	e01c      	b.n	800605c <_VPrintTarget+0x37c>
            break;
 8006022:	bf00      	nop
        break;
 8006024:	e01a      	b.n	800605c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	1d19      	adds	r1, r3, #4
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6011      	str	r1, [r2, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006034:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006036:	f107 0010 	add.w	r0, r7, #16
 800603a:	2300      	movs	r3, #0
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	2308      	movs	r3, #8
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2308      	movs	r3, #8
 8006044:	2210      	movs	r2, #16
 8006046:	f7ff fd25 	bl	8005a94 <_PrintUnsigned>
        break;
 800604a:	e007      	b.n	800605c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	2125      	movs	r1, #37	; 0x25
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fca2 	bl	800599c <_StoreChar>
        break;
 8006058:	e000      	b.n	800605c <_VPrintTarget+0x37c>
      default:
        break;
 800605a:	bf00      	nop
      }
      sFormat++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e007      	b.n	8006074 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006064:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006068:	f107 0310 	add.w	r3, r7, #16
 800606c:	4611      	mov	r1, r2
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fc94 	bl	800599c <_StoreChar>
    }
  } while (*sFormat);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f47f ae4d 	bne.w	8005d18 <_VPrintTarget+0x38>
 800607e:	e000      	b.n	8006082 <_VPrintTarget+0x3a2>
      break;
 8006080:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d041      	beq.n	800610c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
 8006098:	e00b      	b.n	80060b2 <_VPrintTarget+0x3d2>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	b2da      	uxtb	r2, r3
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	1c59      	adds	r1, r3, #1
 80060a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80060a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	09db      	lsrs	r3, r3, #7
 80060b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	2b7f      	cmp	r3, #127	; 0x7f
 80060b6:	d8f0      	bhi.n	800609a <_VPrintTarget+0x3ba>
 80060b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
 80060cc:	2300      	movs	r3, #0
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
 80060d0:	e00b      	b.n	80060ea <_VPrintTarget+0x40a>
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	1c59      	adds	r1, r3, #1
 80060da:	6379      	str	r1, [r7, #52]	; 0x34
 80060dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	09db      	lsrs	r3, r3, #7
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2b7f      	cmp	r3, #127	; 0x7f
 80060ee:	d8f0      	bhi.n	80060d2 <_VPrintTarget+0x3f2>
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	637a      	str	r2, [r7, #52]	; 0x34
 80060f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fe:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	6979      	ldr	r1, [r7, #20]
 8006104:	221a      	movs	r2, #26
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fad8 	bl	80056bc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006112:	bf00      	nop
 8006114:	3758      	adds	r7, #88	; 0x58
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	0800729c 	.word	0x0800729c

08006120 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800612e:	2300      	movs	r3, #0
 8006130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006134:	4917      	ldr	r1, [pc, #92]	; (8006194 <SEGGER_SYSVIEW_Init+0x74>)
 8006136:	4818      	ldr	r0, [pc, #96]	; (8006198 <SEGGER_SYSVIEW_Init+0x78>)
 8006138:	f7ff f8d2 	bl	80052e0 <SEGGER_RTT_AllocUpBuffer>
 800613c:	4603      	mov	r3, r0
 800613e:	b2da      	uxtb	r2, r3
 8006140:	4b16      	ldr	r3, [pc, #88]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006142:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006144:	4b15      	ldr	r3, [pc, #84]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006146:	785a      	ldrb	r2, [r3, #1]
 8006148:	4b14      	ldr	r3, [pc, #80]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 800614a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 800614e:	7e1b      	ldrb	r3, [r3, #24]
 8006150:	4618      	mov	r0, r3
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2308      	movs	r3, #8
 8006158:	4a11      	ldr	r2, [pc, #68]	; (80061a0 <SEGGER_SYSVIEW_Init+0x80>)
 800615a:	490f      	ldr	r1, [pc, #60]	; (8006198 <SEGGER_SYSVIEW_Init+0x78>)
 800615c:	f7ff f944 	bl	80053e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006160:	4b0e      	ldr	r3, [pc, #56]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <SEGGER_SYSVIEW_Init+0x84>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 800616c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800616e:	4a0b      	ldr	r2, [pc, #44]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006174:	4a09      	ldr	r2, [pc, #36]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800617a:	4a08      	ldr	r2, [pc, #32]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006180:	4a06      	ldr	r2, [pc, #24]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <SEGGER_SYSVIEW_Init+0x7c>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	2001338c 	.word	0x2001338c
 8006198:	080072a4 	.word	0x080072a4
 800619c:	20014394 	.word	0x20014394
 80061a0:	2001438c 	.word	0x2001438c
 80061a4:	e0001004 	.word	0xe0001004

080061a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80061b0:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6113      	str	r3, [r2, #16]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20014394 	.word	0x20014394

080061c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061d0:	f3ef 8311 	mrs	r3, BASEPRI
 80061d4:	f04f 0120 	mov.w	r1, #32
 80061d8:	f381 8811 	msr	BASEPRI, r1
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	4808      	ldr	r0, [pc, #32]	; (8006200 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061e0:	f7ff f97e 	bl	80054e0 <_PreparePacket>
 80061e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68b8      	ldr	r0, [r7, #8]
 80061ec:	f7ff fa66 	bl	80056bc <_SendPacket>
  RECORD_END();
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f383 8811 	msr	BASEPRI, r3
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200143c4 	.word	0x200143c4

08006204 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800620e:	f3ef 8311 	mrs	r3, BASEPRI
 8006212:	f04f 0120 	mov.w	r1, #32
 8006216:	f381 8811 	msr	BASEPRI, r1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	4816      	ldr	r0, [pc, #88]	; (8006278 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800621e:	f7ff f95f 	bl	80054e0 <_PreparePacket>
 8006222:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e00b      	b.n	800624a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	1c59      	adds	r1, r3, #1
 800623a:	61f9      	str	r1, [r7, #28]
 800623c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	09db      	lsrs	r3, r3, #7
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b7f      	cmp	r3, #127	; 0x7f
 800624e:	d8f0      	bhi.n	8006232 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	61fa      	str	r2, [r7, #28]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	6938      	ldr	r0, [r7, #16]
 8006266:	f7ff fa29 	bl	80056bc <_SendPacket>
  RECORD_END();
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f383 8811 	msr	BASEPRI, r3
}
 8006270:	bf00      	nop
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200143c4 	.word	0x200143c4

0800627c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	; 0x30
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006288:	f3ef 8311 	mrs	r3, BASEPRI
 800628c:	f04f 0120 	mov.w	r1, #32
 8006290:	f381 8811 	msr	BASEPRI, r1
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	4825      	ldr	r0, [pc, #148]	; (800632c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006298:	f7ff f922 	bl	80054e0 <_PreparePacket>
 800629c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062aa:	e00b      	b.n	80062c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	09db      	lsrs	r3, r3, #7
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2b7f      	cmp	r3, #127	; 0x7f
 80062c8:	d8f0      	bhi.n	80062ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	623b      	str	r3, [r7, #32]
 80062e2:	e00b      	b.n	80062fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	6279      	str	r1, [r7, #36]	; 0x24
 80062ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	09db      	lsrs	r3, r3, #7
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006300:	d8f0      	bhi.n	80062e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	627a      	str	r2, [r7, #36]	; 0x24
 8006308:	6a3a      	ldr	r2, [r7, #32]
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	6979      	ldr	r1, [r7, #20]
 8006316:	69b8      	ldr	r0, [r7, #24]
 8006318:	f7ff f9d0 	bl	80056bc <_SendPacket>
  RECORD_END();
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f383 8811 	msr	BASEPRI, r3
}
 8006322:	bf00      	nop
 8006324:	3730      	adds	r7, #48	; 0x30
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200143c4 	.word	0x200143c4

08006330 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b08e      	sub	sp, #56	; 0x38
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800633e:	f3ef 8311 	mrs	r3, BASEPRI
 8006342:	f04f 0120 	mov.w	r1, #32
 8006346:	f381 8811 	msr	BASEPRI, r1
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	4832      	ldr	r0, [pc, #200]	; (8006418 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800634e:	f7ff f8c7 	bl	80054e0 <_PreparePacket>
 8006352:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	e00b      	b.n	800637a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	b2da      	uxtb	r2, r3
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	6379      	str	r1, [r7, #52]	; 0x34
 800636c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	633b      	str	r3, [r7, #48]	; 0x30
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	d8f0      	bhi.n	8006362 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	637a      	str	r2, [r7, #52]	; 0x34
 8006386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
 8006398:	e00b      	b.n	80063b2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	b2da      	uxtb	r2, r3
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	1c59      	adds	r1, r3, #1
 80063a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	09db      	lsrs	r3, r3, #7
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b7f      	cmp	r3, #127	; 0x7f
 80063b6:	d8f0      	bhi.n	800639a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	e00b      	b.n	80063ea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	6279      	str	r1, [r7, #36]	; 0x24
 80063dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	09db      	lsrs	r3, r3, #7
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2b7f      	cmp	r3, #127	; 0x7f
 80063ee:	d8f0      	bhi.n	80063d2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	627a      	str	r2, [r7, #36]	; 0x24
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	6979      	ldr	r1, [r7, #20]
 8006404:	69b8      	ldr	r0, [r7, #24]
 8006406:	f7ff f959 	bl	80056bc <_SendPacket>
  RECORD_END();
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f383 8811 	msr	BASEPRI, r3
}
 8006410:	bf00      	nop
 8006412:	3738      	adds	r7, #56	; 0x38
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	200143c4 	.word	0x200143c4

0800641c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b090      	sub	sp, #64	; 0x40
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800642a:	f3ef 8311 	mrs	r3, BASEPRI
 800642e:	f04f 0120 	mov.w	r1, #32
 8006432:	f381 8811 	msr	BASEPRI, r1
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	4840      	ldr	r0, [pc, #256]	; (800653c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800643a:	f7ff f851 	bl	80054e0 <_PreparePacket>
 800643e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	63bb      	str	r3, [r7, #56]	; 0x38
 800644c:	e00b      	b.n	8006466 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b7f      	cmp	r3, #127	; 0x7f
 800646a:	d8f0      	bhi.n	800644e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800646c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	633b      	str	r3, [r7, #48]	; 0x30
 8006484:	e00b      	b.n	800649e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	b2da      	uxtb	r2, r3
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	1c59      	adds	r1, r3, #1
 800648e:	6379      	str	r1, [r7, #52]	; 0x34
 8006490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	09db      	lsrs	r3, r3, #7
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b7f      	cmp	r3, #127	; 0x7f
 80064a2:	d8f0      	bhi.n	8006486 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	637a      	str	r2, [r7, #52]	; 0x34
 80064aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80064bc:	e00b      	b.n	80064d6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	1c59      	adds	r1, r3, #1
 80064c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	09db      	lsrs	r3, r3, #7
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	2b7f      	cmp	r3, #127	; 0x7f
 80064da:	d8f0      	bhi.n	80064be <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
 80064f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	e00b      	b.n	800650e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1c59      	adds	r1, r3, #1
 80064fe:	6279      	str	r1, [r7, #36]	; 0x24
 8006500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	09db      	lsrs	r3, r3, #7
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	2b7f      	cmp	r3, #127	; 0x7f
 8006512:	d8f0      	bhi.n	80064f6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	627a      	str	r2, [r7, #36]	; 0x24
 800651a:	6a3a      	ldr	r2, [r7, #32]
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	69b8      	ldr	r0, [r7, #24]
 800652a:	f7ff f8c7 	bl	80056bc <_SendPacket>
  RECORD_END();
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f383 8811 	msr	BASEPRI, r3
}
 8006534:	bf00      	nop
 8006536:	3740      	adds	r7, #64	; 0x40
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	200143c4 	.word	0x200143c4

08006540 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	; 0x30
 8006544:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006546:	4b59      	ldr	r3, [pc, #356]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800654c:	f3ef 8311 	mrs	r3, BASEPRI
 8006550:	f04f 0120 	mov.w	r1, #32
 8006554:	f381 8811 	msr	BASEPRI, r1
 8006558:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800655a:	4b54      	ldr	r3, [pc, #336]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	220a      	movs	r2, #10
 8006560:	4953      	ldr	r1, [pc, #332]	; (80066b0 <SEGGER_SYSVIEW_Start+0x170>)
 8006562:	4618      	mov	r0, r3
 8006564:	f7f9 fe54 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800656e:	f7fe fb89 	bl	8004c84 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006572:	200a      	movs	r0, #10
 8006574:	f7ff fe28 	bl	80061c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006578:	f3ef 8311 	mrs	r3, BASEPRI
 800657c:	f04f 0120 	mov.w	r1, #32
 8006580:	f381 8811 	msr	BASEPRI, r1
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	484b      	ldr	r0, [pc, #300]	; (80066b4 <SEGGER_SYSVIEW_Start+0x174>)
 8006588:	f7fe ffaa 	bl	80054e0 <_PreparePacket>
 800658c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006596:	4b45      	ldr	r3, [pc, #276]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
 800659c:	e00b      	b.n	80065b6 <SEGGER_SYSVIEW_Start+0x76>
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ba:	d8f0      	bhi.n	800659e <SEGGER_SYSVIEW_Start+0x5e>
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	4b36      	ldr	r3, [pc, #216]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_Start+0xb0>
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	6279      	str	r1, [r7, #36]	; 0x24
 80065e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b7f      	cmp	r3, #127	; 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_Start+0x98>
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	627a      	str	r2, [r7, #36]	; 0x24
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	4b28      	ldr	r3, [pc, #160]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	e00b      	b.n	800662a <SEGGER_SYSVIEW_Start+0xea>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	61f9      	str	r1, [r7, #28]
 800661c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b7f      	cmp	r3, #127	; 0x7f
 800662e:	d8f0      	bhi.n	8006612 <SEGGER_SYSVIEW_Start+0xd2>
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	e00b      	b.n	8006662 <SEGGER_SYSVIEW_Start+0x122>
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	1c59      	adds	r1, r3, #1
 8006652:	6179      	str	r1, [r7, #20]
 8006654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	09db      	lsrs	r3, r3, #7
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b7f      	cmp	r3, #127	; 0x7f
 8006666:	d8f0      	bhi.n	800664a <SEGGER_SYSVIEW_Start+0x10a>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	617a      	str	r2, [r7, #20]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006678:	2218      	movs	r2, #24
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff f81d 	bl	80056bc <_SendPacket>
      RECORD_END();
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006688:	4b08      	ldr	r3, [pc, #32]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <SEGGER_SYSVIEW_Start+0x16c>)
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006696:	f000 f9eb 	bl	8006a70 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800669a:	f000 f9b1 	bl	8006a00 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800669e:	f000 fc2d 	bl	8006efc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80066a2:	bf00      	nop
 80066a4:	3730      	adds	r7, #48	; 0x30
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20014394 	.word	0x20014394
 80066b0:	080072e4 	.word	0x080072e4
 80066b4:	200143c4 	.word	0x200143c4

080066b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066be:	f3ef 8311 	mrs	r3, BASEPRI
 80066c2:	f04f 0120 	mov.w	r1, #32
 80066c6:	f381 8811 	msr	BASEPRI, r1
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	480b      	ldr	r0, [pc, #44]	; (80066fc <SEGGER_SYSVIEW_Stop+0x44>)
 80066ce:	f7fe ff07 	bl	80054e0 <_PreparePacket>
 80066d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <SEGGER_SYSVIEW_Stop+0x48>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80066dc:	220b      	movs	r2, #11
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6838      	ldr	r0, [r7, #0]
 80066e2:	f7fe ffeb 	bl	80056bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <SEGGER_SYSVIEW_Stop+0x48>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f383 8811 	msr	BASEPRI, r3
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	200143c4 	.word	0x200143c4
 8006700:	20014394 	.word	0x20014394

08006704 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800670a:	f3ef 8311 	mrs	r3, BASEPRI
 800670e:	f04f 0120 	mov.w	r1, #32
 8006712:	f381 8811 	msr	BASEPRI, r1
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	4845      	ldr	r0, [pc, #276]	; (8006830 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800671a:	f7fe fee1 	bl	80054e0 <_PreparePacket>
 800671e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
 800672e:	e00b      	b.n	8006748 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	b2da      	uxtb	r2, r3
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	62f9      	str	r1, [r7, #44]	; 0x2c
 800673a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	09db      	lsrs	r3, r3, #7
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	2b7f      	cmp	r3, #127	; 0x7f
 800674c:	d8f0      	bhi.n	8006730 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
 8006762:	4b34      	ldr	r3, [pc, #208]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	e00b      	b.n	8006782 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	1c59      	adds	r1, r3, #1
 8006772:	6279      	str	r1, [r7, #36]	; 0x24
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	623b      	str	r3, [r7, #32]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2b7f      	cmp	r3, #127	; 0x7f
 8006786:	d8f0      	bhi.n	800676a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	627a      	str	r2, [r7, #36]	; 0x24
 800678e:	6a3a      	ldr	r2, [r7, #32]
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e00b      	b.n	80067bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	61f9      	str	r1, [r7, #28]
 80067ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	09db      	lsrs	r3, r3, #7
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b7f      	cmp	r3, #127	; 0x7f
 80067c0:	d8f0      	bhi.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	e00b      	b.n	80067f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	6179      	str	r1, [r7, #20]
 80067e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	09db      	lsrs	r3, r3, #7
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2b7f      	cmp	r3, #127	; 0x7f
 80067f8:	d8f0      	bhi.n	80067dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	617a      	str	r2, [r7, #20]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800680a:	2218      	movs	r2, #24
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	68b8      	ldr	r0, [r7, #8]
 8006810:	f7fe ff54 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	4798      	blx	r3
  }
}
 8006828:	bf00      	nop
 800682a:	3730      	adds	r7, #48	; 0x30
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	200143c4 	.word	0x200143c4
 8006834:	20014394 	.word	0x20014394

08006838 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b092      	sub	sp, #72	; 0x48
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006840:	f3ef 8311 	mrs	r3, BASEPRI
 8006844:	f04f 0120 	mov.w	r1, #32
 8006848:	f381 8811 	msr	BASEPRI, r1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	486a      	ldr	r0, [pc, #424]	; (80069f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006850:	f7fe fe46 	bl	80054e0 <_PreparePacket>
 8006854:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b66      	ldr	r3, [pc, #408]	; (80069fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
 800686a:	e00b      	b.n	8006884 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800686c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686e:	b2da      	uxtb	r2, r3
 8006870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006872:	1c59      	adds	r1, r3, #1
 8006874:	6479      	str	r1, [r7, #68]	; 0x44
 8006876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006880:	09db      	lsrs	r3, r3, #7
 8006882:	643b      	str	r3, [r7, #64]	; 0x40
 8006884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006886:	2b7f      	cmp	r3, #127	; 0x7f
 8006888:	d8f0      	bhi.n	800686c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800688a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	647a      	str	r2, [r7, #68]	; 0x44
 8006890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006898:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a4:	e00b      	b.n	80068be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	1c59      	adds	r1, r3, #1
 80068ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	09db      	lsrs	r3, r3, #7
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b7f      	cmp	r3, #127	; 0x7f
 80068c2:	d8f0      	bhi.n	80068a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	4619      	mov	r1, r3
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7fe fdcf 	bl	8005480 <_EncodeStr>
 80068e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80068e4:	2209      	movs	r2, #9
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	6938      	ldr	r0, [r7, #16]
 80068ea:	f7fe fee7 	bl	80056bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4b40      	ldr	r3, [pc, #256]	; (80069fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
 8006902:	e00b      	b.n	800691c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	b2da      	uxtb	r2, r3
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	6379      	str	r1, [r7, #52]	; 0x34
 800690e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	09db      	lsrs	r3, r3, #7
 800691a:	633b      	str	r3, [r7, #48]	; 0x30
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	2b7f      	cmp	r3, #127	; 0x7f
 8006920:	d8f0      	bhi.n	8006904 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	637a      	str	r2, [r7, #52]	; 0x34
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
 800693c:	e00b      	b.n	8006956 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	b2da      	uxtb	r2, r3
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	1c59      	adds	r1, r3, #1
 8006946:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	09db      	lsrs	r3, r3, #7
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	2b7f      	cmp	r3, #127	; 0x7f
 800695a:	d8f0      	bhi.n	800693e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e00b      	b.n	8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1c59      	adds	r1, r3, #1
 8006980:	6279      	str	r1, [r7, #36]	; 0x24
 8006982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	09db      	lsrs	r3, r3, #7
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b7f      	cmp	r3, #127	; 0x7f
 8006994:	d8f0      	bhi.n	8006978 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	2300      	movs	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	e00b      	b.n	80069c8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	61f9      	str	r1, [r7, #28]
 80069ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	09db      	lsrs	r3, r3, #7
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b7f      	cmp	r3, #127	; 0x7f
 80069cc:	d8f0      	bhi.n	80069b0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	61fa      	str	r2, [r7, #28]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80069de:	2215      	movs	r2, #21
 80069e0:	68f9      	ldr	r1, [r7, #12]
 80069e2:	6938      	ldr	r0, [r7, #16]
 80069e4:	f7fe fe6a 	bl	80056bc <_SendPacket>
  RECORD_END();
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f383 8811 	msr	BASEPRI, r3
}
 80069ee:	bf00      	nop
 80069f0:	3748      	adds	r7, #72	; 0x48
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200143c4 	.word	0x200143c4
 80069fc:	20014394 	.word	0x20014394

08006a00 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a16:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4798      	blx	r3
  }
}
 8006a1e:	bf00      	nop
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20014394 	.word	0x20014394

08006a28 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a30:	f3ef 8311 	mrs	r3, BASEPRI
 8006a34:	f04f 0120 	mov.w	r1, #32
 8006a38:	f381 8811 	msr	BASEPRI, r1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	480b      	ldr	r0, [pc, #44]	; (8006a6c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a40:	f7fe fd4e 	bl	80054e0 <_PreparePacket>
 8006a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f7fe fd18 	bl	8005480 <_EncodeStr>
 8006a50:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a52:	220e      	movs	r2, #14
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	6938      	ldr	r0, [r7, #16]
 8006a58:	f7fe fe30 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f383 8811 	msr	BASEPRI, r3
}
 8006a62:	bf00      	nop
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200143c4 	.word	0x200143c4

08006a70 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01a      	beq.n	8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d015      	beq.n	8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4798      	blx	r3
 8006a90:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a94:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	000a      	movs	r2, r1
 8006aa4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4621      	mov	r1, r4
 8006aac:	200d      	movs	r0, #13
 8006aae:	f7ff fbe5 	bl	800627c <SEGGER_SYSVIEW_RecordU32x2>
 8006ab2:	e006      	b.n	8006ac2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	200c      	movs	r0, #12
 8006abc:	f7ff fba2 	bl	8006204 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd90      	pop	{r4, r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20014394 	.word	0x20014394
 8006ad0:	e0001004 	.word	0xe0001004

08006ad4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ada:	f3ef 8311 	mrs	r3, BASEPRI
 8006ade:	f04f 0120 	mov.w	r1, #32
 8006ae2:	f381 8811 	msr	BASEPRI, r1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	4819      	ldr	r0, [pc, #100]	; (8006b50 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006aea:	f7fe fcf9 	bl	80054e0 <_PreparePacket>
 8006aee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	e00b      	b.n	8006b20 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	6179      	str	r1, [r7, #20]
 8006b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	09db      	lsrs	r3, r3, #7
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d8f0      	bhi.n	8006b08 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	617a      	str	r2, [r7, #20]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b36:	2202      	movs	r2, #2
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68b8      	ldr	r0, [r7, #8]
 8006b3c:	f7fe fdbe 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f383 8811 	msr	BASEPRI, r3
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200143c4 	.word	0x200143c4
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	f04f 0120 	mov.w	r1, #32
 8006b66:	f381 8811 	msr	BASEPRI, r1
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	4807      	ldr	r0, [pc, #28]	; (8006b8c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b6e:	f7fe fcb7 	bl	80054e0 <_PreparePacket>
 8006b72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b74:	2203      	movs	r2, #3
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6838      	ldr	r0, [r7, #0]
 8006b7a:	f7fe fd9f 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f383 8811 	msr	BASEPRI, r3
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	200143c4 	.word	0x200143c4

08006b90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b96:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9a:	f04f 0120 	mov.w	r1, #32
 8006b9e:	f381 8811 	msr	BASEPRI, r1
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	4807      	ldr	r0, [pc, #28]	; (8006bc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006ba6:	f7fe fc9b 	bl	80054e0 <_PreparePacket>
 8006baa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006bac:	2212      	movs	r2, #18
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6838      	ldr	r0, [r7, #0]
 8006bb2:	f7fe fd83 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200143c4 	.word	0x200143c4

08006bc8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bce:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd2:	f04f 0120 	mov.w	r1, #32
 8006bd6:	f381 8811 	msr	BASEPRI, r1
 8006bda:	607b      	str	r3, [r7, #4]
 8006bdc:	4807      	ldr	r0, [pc, #28]	; (8006bfc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006bde:	f7fe fc7f 	bl	80054e0 <_PreparePacket>
 8006be2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006be4:	2211      	movs	r2, #17
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6838      	ldr	r0, [r7, #0]
 8006bea:	f7fe fd67 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200143c4 	.word	0x200143c4

08006c00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c08:	f3ef 8311 	mrs	r3, BASEPRI
 8006c0c:	f04f 0120 	mov.w	r1, #32
 8006c10:	f381 8811 	msr	BASEPRI, r1
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	4819      	ldr	r0, [pc, #100]	; (8006c7c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c18:	f7fe fc62 	bl	80054e0 <_PreparePacket>
 8006c1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e00b      	b.n	8006c4e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	1c59      	adds	r1, r3, #1
 8006c3e:	61f9      	str	r1, [r7, #28]
 8006c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	09db      	lsrs	r3, r3, #7
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b7f      	cmp	r3, #127	; 0x7f
 8006c52:	d8f0      	bhi.n	8006c36 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c64:	2208      	movs	r2, #8
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	6938      	ldr	r0, [r7, #16]
 8006c6a:	f7fe fd27 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f383 8811 	msr	BASEPRI, r3
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	200143c4 	.word	0x200143c4
 8006c80:	20014394 	.word	0x20014394

08006c84 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c90:	f04f 0120 	mov.w	r1, #32
 8006c94:	f381 8811 	msr	BASEPRI, r1
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	4819      	ldr	r0, [pc, #100]	; (8006d00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c9c:	f7fe fc20 	bl	80054e0 <_PreparePacket>
 8006ca0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ca6:	4b17      	ldr	r3, [pc, #92]	; (8006d04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e00b      	b.n	8006cd2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	61f9      	str	r1, [r7, #28]
 8006cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d8f0      	bhi.n	8006cba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	61fa      	str	r2, [r7, #28]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ce8:	2204      	movs	r2, #4
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	6938      	ldr	r0, [r7, #16]
 8006cee:	f7fe fce5 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
}
 8006cf8:	bf00      	nop
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200143c4 	.word	0x200143c4
 8006d04:	20014394 	.word	0x20014394

08006d08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d10:	f3ef 8311 	mrs	r3, BASEPRI
 8006d14:	f04f 0120 	mov.w	r1, #32
 8006d18:	f381 8811 	msr	BASEPRI, r1
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	4819      	ldr	r0, [pc, #100]	; (8006d84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d20:	f7fe fbde 	bl	80054e0 <_PreparePacket>
 8006d24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e00b      	b.n	8006d56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	61f9      	str	r1, [r7, #28]
 8006d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	09db      	lsrs	r3, r3, #7
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5a:	d8f0      	bhi.n	8006d3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d6c:	2206      	movs	r2, #6
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	6938      	ldr	r0, [r7, #16]
 8006d72:	f7fe fca3 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f383 8811 	msr	BASEPRI, r3
}
 8006d7c:	bf00      	nop
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200143c4 	.word	0x200143c4
 8006d88:	20014394 	.word	0x20014394

08006d8c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	1ad3      	subs	r3, r2, r3
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	20014394 	.word	0x20014394

08006dac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	; 0x30
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006db6:	4b40      	ldr	r3, [pc, #256]	; (8006eb8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d077      	beq.n	8006eae <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006dbe:	4b3e      	ldr	r3, [pc, #248]	; (8006eb8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc8:	e008      	b.n	8006ddc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	3301      	adds	r3, #1
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d3f2      	bcc.n	8006dca <SEGGER_SYSVIEW_SendModule+0x1e>
 8006de4:	e000      	b.n	8006de8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006de6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d055      	beq.n	8006e9a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dee:	f3ef 8311 	mrs	r3, BASEPRI
 8006df2:	f04f 0120 	mov.w	r1, #32
 8006df6:	f381 8811 	msr	BASEPRI, r1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	482f      	ldr	r0, [pc, #188]	; (8006ebc <SEGGER_SYSVIEW_SendModule+0x110>)
 8006dfe:	f7fe fb6f 	bl	80054e0 <_PreparePacket>
 8006e02:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	e00b      	b.n	8006e2a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	1c59      	adds	r1, r3, #1
 8006e1a:	6279      	str	r1, [r7, #36]	; 0x24
 8006e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	09db      	lsrs	r3, r3, #7
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2e:	d8f0      	bhi.n	8006e12 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	627a      	str	r2, [r7, #36]	; 0x24
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e00b      	b.n	8006e64 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	1c59      	adds	r1, r3, #1
 8006e54:	61f9      	str	r1, [r7, #28]
 8006e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	09db      	lsrs	r3, r3, #7
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b7f      	cmp	r3, #127	; 0x7f
 8006e68:	d8f0      	bhi.n	8006e4c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	61fa      	str	r2, [r7, #28]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2280      	movs	r2, #128	; 0x80
 8006e80:	4619      	mov	r1, r3
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7fe fafc 	bl	8005480 <_EncodeStr>
 8006e88:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e8a:	2216      	movs	r2, #22
 8006e8c:	68f9      	ldr	r1, [r7, #12]
 8006e8e:	6938      	ldr	r0, [r7, #16]
 8006e90:	f7fe fc14 	bl	80056bc <_SendPacket>
      RECORD_END();
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d006      	beq.n	8006eae <SEGGER_SYSVIEW_SendModule+0x102>
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4798      	blx	r3
    }
  }
}
 8006eae:	bf00      	nop
 8006eb0:	3730      	adds	r7, #48	; 0x30
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200143bc 	.word	0x200143bc
 8006ebc:	200143c4 	.word	0x200143c4

08006ec0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00f      	beq.n	8006eee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f2      	bne.n	8006ed4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	200143bc 	.word	0x200143bc

08006efc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f02:	f3ef 8311 	mrs	r3, BASEPRI
 8006f06:	f04f 0120 	mov.w	r1, #32
 8006f0a:	f381 8811 	msr	BASEPRI, r1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	4817      	ldr	r0, [pc, #92]	; (8006f70 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f12:	f7fe fae5 	bl	80054e0 <_PreparePacket>
 8006f16:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	e00b      	b.n	8006f40 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	1c59      	adds	r1, r3, #1
 8006f30:	6179      	str	r1, [r7, #20]
 8006f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	09db      	lsrs	r3, r3, #7
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b7f      	cmp	r3, #127	; 0x7f
 8006f44:	d8f0      	bhi.n	8006f28 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	617a      	str	r2, [r7, #20]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f56:	221b      	movs	r2, #27
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	68b8      	ldr	r0, [r7, #8]
 8006f5c:	f7fe fbae 	bl	80056bc <_SendPacket>
  RECORD_END();
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f383 8811 	msr	BASEPRI, r3
}
 8006f66:	bf00      	nop
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200143c4 	.word	0x200143c4
 8006f74:	200143c0 	.word	0x200143c0

08006f78 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f78:	b40f      	push	{r0, r1, r2, r3}
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f80:	f107 0314 	add.w	r3, r7, #20
 8006f84:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6938      	ldr	r0, [r7, #16]
 8006f8e:	f7fe fea7 	bl	8005ce0 <_VPrintTarget>
  va_end(ParamList);
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f9c:	b004      	add	sp, #16
 8006f9e:	4770      	bx	lr

08006fa0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fac:	f04f 0120 	mov.w	r1, #32
 8006fb0:	f381 8811 	msr	BASEPRI, r1
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	4827      	ldr	r0, [pc, #156]	; (8007054 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006fb8:	f7fe fa92 	bl	80054e0 <_PreparePacket>
 8006fbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fbe:	2280      	movs	r2, #128	; 0x80
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	6938      	ldr	r0, [r7, #16]
 8006fc4:	f7fe fa5c 	bl	8005480 <_EncodeStr>
 8006fc8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fce:	2301      	movs	r3, #1
 8006fd0:	623b      	str	r3, [r7, #32]
 8006fd2:	e00b      	b.n	8006fec <SEGGER_SYSVIEW_Warn+0x4c>
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	6279      	str	r1, [r7, #36]	; 0x24
 8006fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	09db      	lsrs	r3, r3, #7
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff0:	d8f0      	bhi.n	8006fd4 <SEGGER_SYSVIEW_Warn+0x34>
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ff8:	6a3a      	ldr	r2, [r7, #32]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	e00b      	b.n	8007024 <SEGGER_SYSVIEW_Warn+0x84>
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	b2da      	uxtb	r2, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	1c59      	adds	r1, r3, #1
 8007014:	61f9      	str	r1, [r7, #28]
 8007016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	09db      	lsrs	r3, r3, #7
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b7f      	cmp	r3, #127	; 0x7f
 8007028:	d8f0      	bhi.n	800700c <SEGGER_SYSVIEW_Warn+0x6c>
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	61fa      	str	r2, [r7, #28]
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800703a:	221a      	movs	r2, #26
 800703c:	68f9      	ldr	r1, [r7, #12]
 800703e:	6938      	ldr	r0, [r7, #16]
 8007040:	f7fe fb3c 	bl	80056bc <_SendPacket>
  RECORD_END();
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f383 8811 	msr	BASEPRI, r3
}
 800704a:	bf00      	nop
 800704c:	3728      	adds	r7, #40	; 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200143c4 	.word	0x200143c4

08007058 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 800705e:	7e1b      	ldrb	r3, [r3, #24]
 8007060:	4619      	mov	r1, r3
 8007062:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007064:	460b      	mov	r3, r1
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	440b      	add	r3, r1
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	336c      	adds	r3, #108	; 0x6c
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007074:	7e1b      	ldrb	r3, [r3, #24]
 8007076:	4618      	mov	r0, r3
 8007078:	490d      	ldr	r1, [pc, #52]	; (80070b0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800707a:	4603      	mov	r3, r0
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4403      	add	r3, r0
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	440b      	add	r3, r1
 8007084:	3370      	adds	r3, #112	; 0x70
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d00b      	beq.n	80070a4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 800708e:	789b      	ldrb	r3, [r3, #2]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d107      	bne.n	80070a4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007096:	2201      	movs	r2, #1
 8007098:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800709a:	f7fe fa2d 	bl	80054f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80070a4:	4b01      	ldr	r3, [pc, #4]	; (80070ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20014394 	.word	0x20014394
 80070b0:	20012ed4 	.word	0x20012ed4

080070b4 <memcmp>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	3901      	subs	r1, #1
 80070b8:	4402      	add	r2, r0
 80070ba:	4290      	cmp	r0, r2
 80070bc:	d101      	bne.n	80070c2 <memcmp+0xe>
 80070be:	2000      	movs	r0, #0
 80070c0:	e005      	b.n	80070ce <memcmp+0x1a>
 80070c2:	7803      	ldrb	r3, [r0, #0]
 80070c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d001      	beq.n	80070d0 <memcmp+0x1c>
 80070cc:	1b18      	subs	r0, r3, r4
 80070ce:	bd10      	pop	{r4, pc}
 80070d0:	3001      	adds	r0, #1
 80070d2:	e7f2      	b.n	80070ba <memcmp+0x6>

080070d4 <memset>:
 80070d4:	4402      	add	r2, r0
 80070d6:	4603      	mov	r3, r0
 80070d8:	4293      	cmp	r3, r2
 80070da:	d100      	bne.n	80070de <memset+0xa>
 80070dc:	4770      	bx	lr
 80070de:	f803 1b01 	strb.w	r1, [r3], #1
 80070e2:	e7f9      	b.n	80070d8 <memset+0x4>

080070e4 <__libc_init_array>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4d0d      	ldr	r5, [pc, #52]	; (800711c <__libc_init_array+0x38>)
 80070e8:	4c0d      	ldr	r4, [pc, #52]	; (8007120 <__libc_init_array+0x3c>)
 80070ea:	1b64      	subs	r4, r4, r5
 80070ec:	10a4      	asrs	r4, r4, #2
 80070ee:	2600      	movs	r6, #0
 80070f0:	42a6      	cmp	r6, r4
 80070f2:	d109      	bne.n	8007108 <__libc_init_array+0x24>
 80070f4:	4d0b      	ldr	r5, [pc, #44]	; (8007124 <__libc_init_array+0x40>)
 80070f6:	4c0c      	ldr	r4, [pc, #48]	; (8007128 <__libc_init_array+0x44>)
 80070f8:	f000 f826 	bl	8007148 <_init>
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	2600      	movs	r6, #0
 8007102:	42a6      	cmp	r6, r4
 8007104:	d105      	bne.n	8007112 <__libc_init_array+0x2e>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f855 3b04 	ldr.w	r3, [r5], #4
 800710c:	4798      	blx	r3
 800710e:	3601      	adds	r6, #1
 8007110:	e7ee      	b.n	80070f0 <__libc_init_array+0xc>
 8007112:	f855 3b04 	ldr.w	r3, [r5], #4
 8007116:	4798      	blx	r3
 8007118:	3601      	adds	r6, #1
 800711a:	e7f2      	b.n	8007102 <__libc_init_array+0x1e>
 800711c:	08007308 	.word	0x08007308
 8007120:	08007308 	.word	0x08007308
 8007124:	08007308 	.word	0x08007308
 8007128:	0800730c 	.word	0x0800730c

0800712c <memcpy>:
 800712c:	440a      	add	r2, r1
 800712e:	4291      	cmp	r1, r2
 8007130:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007134:	d100      	bne.n	8007138 <memcpy+0xc>
 8007136:	4770      	bx	lr
 8007138:	b510      	push	{r4, lr}
 800713a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800713e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007142:	4291      	cmp	r1, r2
 8007144:	d1f9      	bne.n	800713a <memcpy+0xe>
 8007146:	bd10      	pop	{r4, pc}

08007148 <_init>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	bf00      	nop
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr

08007154 <_fini>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr
