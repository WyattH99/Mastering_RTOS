
006_Button_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001449c  2000001c  08007c18  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144b8  08007c18  000244b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001556f  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003355  00000000  00000000  000355fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00038958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f95  00000000  00000000  00039da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e55  00000000  00000000  0003ad35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016af7  00000000  00000000  0005eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddad9  00000000  00000000  00075681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b8  00000000  00000000  0015315c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ed  00000000  00000000  00158614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079dc 	.word	0x080079dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	080079dc 	.word	0x080079dc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ee4 	.word	0x20012ee4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fb5d 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f877 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8e1 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005b2:	482e      	ldr	r0, [pc, #184]	; (800066c <main+0xcc>)
 80005b4:	f004 fea6 	bl	8005304 <SEGGER_UART_init>

  // CYCLCNT enable
  DWT_CTRL |= (1<<0);
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <main+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <main+0xd0>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c4:	f004 fc0c 	bl	8004de0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &led_g_task_handle);
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <main+0xd4>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2303      	movs	r3, #3
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	4928      	ldr	r1, [pc, #160]	; (8000678 <main+0xd8>)
 80005d6:	4829      	ldr	r0, [pc, #164]	; (800067c <main+0xdc>)
 80005d8:	f002 faec 	bl	8002bb4 <xTaskCreate>
 80005dc:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f6:	bf00      	nop
 80005f8:	e7fe      	b.n	80005f8 <main+0x58>

  next_task_handle = led_g_task_handle;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <main+0xd4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a20      	ldr	r2, [pc, #128]	; (8000680 <main+0xe0>)
 8000600:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &led_o_task_handle);
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <main+0xe4>)
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	491e      	ldr	r1, [pc, #120]	; (8000688 <main+0xe8>)
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <main+0xec>)
 8000612:	f002 facf 	bl	8002bb4 <xTaskCreate>
 8000616:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00a      	beq.n	8000634 <main+0x94>
        __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	607b      	str	r3, [r7, #4]
    }
 8000630:	bf00      	nop
 8000632:	e7fe      	b.n	8000632 <main+0x92>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &led_r_task_handle);
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <main+0xf0>)
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	4914      	ldr	r1, [pc, #80]	; (8000694 <main+0xf4>)
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0xf8>)
 8000644:	f002 fab6 	bl	8002bb4 <xTaskCreate>
 8000648:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00a      	beq.n	8000666 <main+0xc6>
        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	603b      	str	r3, [r7, #0]
    }
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <main+0xc4>
//
//  configASSERT(status == pdPASS);


  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8000666:	f002 fcdb 	bl	8003020 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0xca>
 800066c:	0007a120 	.word	0x0007a120
 8000670:	e0001000 	.word	0xe0001000
 8000674:	20000038 	.word	0x20000038
 8000678:	080079f4 	.word	0x080079f4
 800067c:	080008d9 	.word	0x080008d9
 8000680:	20000044 	.word	0x20000044
 8000684:	2000003c 	.word	0x2000003c
 8000688:	08007a04 	.word	0x08007a04
 800068c:	08000945 	.word	0x08000945
 8000690:	20000040 	.word	0x20000040
 8000694:	08007a14 	.word	0x08007a14
 8000698:	080009b5 	.word	0x080009b5

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2234      	movs	r2, #52	; 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 f95c 	bl	8007968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	; (800076c <SystemClock_Config+0xd0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xd4>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	; 0xa8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f915 	bl	8001954 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000730:	f000 f988 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fd96 	bl	8001284 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800075e:	f000 f971 	bl	8000a44 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <MX_GPIO_Init+0x104>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a39      	ldr	r2, [pc, #228]	; (8000878 <MX_GPIO_Init+0x104>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <MX_GPIO_Init+0x104>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a32      	ldr	r2, [pc, #200]	; (8000878 <MX_GPIO_Init+0x104>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x104>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <MX_GPIO_Init+0x104>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <MX_GPIO_Init+0x104>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x104>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x104>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0x104>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_GPIO_Init+0x104>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0x108>)
 8000802:	f000 fce7 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <MX_GPIO_Init+0x10c>)
 800081e:	f000 fb45 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000822:	230c      	movs	r3, #12
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000832:	2307      	movs	r3, #7
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_GPIO_Init+0x108>)
 800083e:	f000 fb35 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000842:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_GPIO_Init+0x108>)
 800085c:	f000 fb26 	bl	8000eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2106      	movs	r1, #6
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f000 faf7 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086a:	2028      	movs	r0, #40	; 0x28
 800086c:	f000 fb10 	bl	8000e90 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af02      	add	r7, sp, #8

	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 800088e:	f006 fd6b 	bl	8007368 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <button_interrupt_handler+0x4c>)
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	2300      	movs	r3, #0
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	f003 f9f6 	bl	8003c94 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <button_interrupt_handler+0x2e>
 80008ae:	f006 fdb9 	bl	8007424 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <button_interrupt_handler+0x50>)
 80008b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	f3bf 8f6f 	isb	sy
	traceISR_EXIT();
 80008c2:	f006 fd93 	bl	80073ec <SEGGER_SYSVIEW_RecordExitISR>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000044 	.word	0x20000044
 80008d4:	e000ed04 	.word	0xe000ed04

080008d8 <led_green_handler>:

static void led_green_handler(void* parameters){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af02      	add	r7, sp, #8
 80008de:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <led_green_handler+0x58>)
 80008e2:	f006 ff93 	bl	800780c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80008e6:	2120      	movs	r1, #32
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <led_green_handler+0x5c>)
 80008ea:	f000 fc8c 	bl	8001206 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2300      	movs	r3, #0
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	2000      	movs	r0, #0
 80008fc:	f003 f942 	bl	8003b84 <xTaskGenericNotifyWait>
 8000900:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d1eb      	bne.n	80008e0 <led_green_handler+0x8>
			portENTER_CRITICAL();
 8000908:	f003 ff66 	bl	80047d8 <vPortEnterCritical>
			next_task_handle = led_o_task_handle;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <led_green_handler+0x60>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <led_green_handler+0x64>)
 8000912:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_PIN, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2120      	movs	r1, #32
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <led_green_handler+0x5c>)
 800091a:	f000 fc5b 	bl	80011d4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Green LED Task");
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <led_green_handler+0x68>)
 8000920:	f006 ff74 	bl	800780c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000924:	f003 ff88 	bl	8004838 <vPortExitCritical>
			vTaskDelete(NULL);
 8000928:	2000      	movs	r0, #0
 800092a:	f002 facb 	bl	8002ec4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800092e:	e7d7      	b.n	80008e0 <led_green_handler+0x8>
 8000930:	08007a24 	.word	0x08007a24
 8000934:	40020000 	.word	0x40020000
 8000938:	2000003c 	.word	0x2000003c
 800093c:	20000044 	.word	0x20000044
 8000940:	08007a38 	.word	0x08007a38

08000944 <led_orange_handler>:
		}

	}
}

static void led_orange_handler(void* parameters){
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 800094c:	4814      	ldr	r0, [pc, #80]	; (80009a0 <led_orange_handler+0x5c>)
 800094e:	f006 ff5d 	bl	800780c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_ORANGE_PIN);
 8000952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <led_orange_handler+0x60>)
 8000958:	f000 fc55 	bl	8001206 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 800095c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2300      	movs	r3, #0
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2000      	movs	r0, #0
 800096a:	f003 f90b 	bl	8003b84 <xTaskGenericNotifyWait>
 800096e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d1ea      	bne.n	800094c <led_orange_handler+0x8>
			portENTER_CRITICAL();
 8000976:	f003 ff2f 	bl	80047d8 <vPortEnterCritical>
			next_task_handle = led_r_task_handle;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <led_orange_handler+0x64>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <led_orange_handler+0x68>)
 8000980:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <led_orange_handler+0x60>)
 800098a:	f000 fc23 	bl	80011d4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Orange LED Task");
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <led_orange_handler+0x6c>)
 8000990:	f006 ff3c 	bl	800780c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000994:	f003 ff50 	bl	8004838 <vPortExitCritical>
			vTaskDelete(NULL);
 8000998:	2000      	movs	r0, #0
 800099a:	f002 fa93 	bl	8002ec4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 800099e:	e7d5      	b.n	800094c <led_orange_handler+0x8>
 80009a0:	08007a50 	.word	0x08007a50
 80009a4:	40020000 	.word	0x40020000
 80009a8:	20000040 	.word	0x20000040
 80009ac:	20000044 	.word	0x20000044
 80009b0:	08007a64 	.word	0x08007a64

080009b4 <led_red_handler>:
//			vTaskSuspend(NULL);
		}
	}
}

static void led_red_handler(void* parameters){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80009bc:	4814      	ldr	r0, [pc, #80]	; (8000a10 <led_red_handler+0x5c>)
 80009be:	f006 ff25 	bl	800780c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_PIN);
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <led_red_handler+0x60>)
 80009c8:	f000 fc1d 	bl	8001206 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 80009cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f003 f8d3 	bl	8003b84 <xTaskGenericNotifyWait>
 80009de:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d1ea      	bne.n	80009bc <led_red_handler+0x8>
			portENTER_CRITICAL();
 80009e6:	f003 fef7 	bl	80047d8 <vPortEnterCritical>
			next_task_handle = NULL;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <led_red_handler+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_RED_PIN, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <led_red_handler+0x60>)
 80009f8:	f000 fbec 	bl	80011d4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Red LED and Button Tasks");
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <led_red_handler+0x68>)
 80009fe:	f006 ff05 	bl	800780c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a02:	f003 ff19 	bl	8004838 <vPortExitCritical>
//			vTaskDelete(btn_task_handle);
			vTaskDelete(NULL);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f002 fa5c 	bl	8002ec4 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000a0c:	e7d6      	b.n	80009bc <led_red_handler+0x8>
 8000a0e:	bf00      	nop
 8000a10:	08007a80 	.word	0x08007a80
 8000a14:	40020000 	.word	0x40020000
 8000a18:	20000044 	.word	0x20000044
 8000a1c:	08007a94 	.word	0x08007a94

08000a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a32:	f000 f939 	bl	8000ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40000c00 	.word	0x40000c00

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <HAL_InitTick+0xe4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a32      	ldr	r2, [pc, #200]	; (8000b84 <HAL_InitTick+0xe4>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_InitTick+0xe4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fcda 	bl	8001490 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae6:	f000 fcbf 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 8000aea:	6378      	str	r0, [r7, #52]	; 0x34
 8000aec:	e004      	b.n	8000af8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aee:	f000 fcbb 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 8000af2:	4603      	mov	r3, r0
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <HAL_InitTick+0xe8>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	0c9b      	lsrs	r3, r3, #18
 8000b02:	3b01      	subs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <HAL_InitTick+0xec>)
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <HAL_InitTick+0xf0>)
 8000b0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_InitTick+0xec>)
 8000b0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b12:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_InitTick+0xec>)
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_InitTick+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_InitTick+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b2c:	4817      	ldr	r0, [pc, #92]	; (8000b8c <HAL_InitTick+0xec>)
 8000b2e:	f001 f9af 	bl	8001e90 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d11b      	bne.n	8000b78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <HAL_InitTick+0xec>)
 8000b42:	f001 f9ff 	bl	8001f44 <HAL_TIM_Base_Start_IT>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d111      	bne.n	8000b78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b54:	2032      	movs	r0, #50	; 0x32
 8000b56:	f000 f99b 	bl	8000e90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d808      	bhi.n	8000b72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2032      	movs	r0, #50	; 0x32
 8000b66:	f000 f977 	bl	8000e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_InitTick+0xf4>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e002      	b.n	8000b78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3738      	adds	r7, #56	; 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	20000048 	.word	0x20000048
 8000b90:	40000c00 	.word	0x40000c00
 8000b94:	20000004 	.word	0x20000004

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	button_interrupt_handler();
 8000bc8:	f7ff fe5c 	bl	8000884 <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bd0:	f000 fb34 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM5_IRQHandler+0x10>)
 8000bde:	f001 fa21 	bl	8002024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000048 	.word	0x20000048

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f006 fe9b 	bl	8007978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fcad 	bl	80005a0 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c54:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 8000c58:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c5c:	200144b8 	.word	0x200144b8

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f8d8 	bl	8000e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	200f      	movs	r0, #15
 8000c94:	f7ff ff04 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff feda 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000090 	.word	0x20000090

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000090 	.word	0x20000090

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff4c 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6a:	f7ff ff61 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ffb1 	bl	8000ddc <NVIC_EncodePriority>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff80 	bl	8000d88 <__NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff54 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e165      	b.n	8001194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8154 	bne.w	800118e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d017      	beq.n	8000f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80ae 	beq.w	800118e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b5d      	ldr	r3, [pc, #372]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a5c      	ldr	r2, [pc, #368]	; (80011ac <HAL_GPIO_Init+0x300>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x308>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x21a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_Init+0x30c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x216>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x310>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x212>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x314>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x20e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x318>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x20a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x31c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x206>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a49      	ldr	r2, [pc, #292]	; (80011cc <HAL_GPIO_Init+0x320>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x202>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00a      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_GPIO_Init+0x324>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_GPIO_Init+0x324>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x324>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <HAL_GPIO_Init+0x324>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_GPIO_Init+0x324>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_GPIO_Init+0x324>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x324>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_GPIO_Init+0x324>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f ae96 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43d9      	mvns	r1, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0cc      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d90c      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b8      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	4b53      	ldr	r3, [pc, #332]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	494d      	ldr	r1, [pc, #308]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d044      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d119      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e07f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d003      	beq.n	8001342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800133e:	2b03      	cmp	r3, #3
 8001340:	d107      	bne.n	8001352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e06f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e067      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 0203 	bic.w	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4934      	ldr	r1, [pc, #208]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001374:	f7ff fcac 	bl	8000cd0 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	e00a      	b.n	8001392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800137c:	f7ff fca8 	bl	8000cd0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e04f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 020c 	and.w	r2, r3, #12
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d1eb      	bne.n	800137c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d20c      	bcs.n	80013cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e032      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4916      	ldr	r1, [pc, #88]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800140a:	f000 f873 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	490a      	ldr	r1, [pc, #40]	; (8001444 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1c8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb38 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00
 8001440:	40023800 	.word	0x40023800
 8001444:	08007b98 	.word	0x08007b98
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_RCC_GetHCLKFreq+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff0 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0a9b      	lsrs	r3, r3, #10
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	; (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	08007ba8 	.word	0x08007ba8

08001490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220f      	movs	r2, #15
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RCC_GetClockConfig+0x60>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0ae      	sub	sp, #184	; 0xb8
 80014fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151a:	4bcb      	ldr	r3, [pc, #812]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b0c      	cmp	r3, #12
 8001524:	f200 8206 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x440>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001565 	.word	0x08001565
 8001534:	08001935 	.word	0x08001935
 8001538:	08001935 	.word	0x08001935
 800153c:	08001935 	.word	0x08001935
 8001540:	0800156d 	.word	0x0800156d
 8001544:	08001935 	.word	0x08001935
 8001548:	08001935 	.word	0x08001935
 800154c:	08001935 	.word	0x08001935
 8001550:	08001575 	.word	0x08001575
 8001554:	08001935 	.word	0x08001935
 8001558:	08001935 	.word	0x08001935
 800155c:	08001935 	.word	0x08001935
 8001560:	08001765 	.word	0x08001765
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4bb9      	ldr	r3, [pc, #740]	; (800184c <HAL_RCC_GetSysClockFreq+0x358>)
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800156a:	e1e7      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800156c:	4bb8      	ldr	r3, [pc, #736]	; (8001850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001572:	e1e3      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001574:	4bb4      	ldr	r3, [pc, #720]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800157c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001580:	4bb1      	ldr	r3, [pc, #708]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d071      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158c:	4bae      	ldr	r3, [pc, #696]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	2200      	movs	r2, #0
 8001594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001598:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800159c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015b2:	4622      	mov	r2, r4
 80015b4:	462b      	mov	r3, r5
 80015b6:	f04f 0000 	mov.w	r0, #0
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	0159      	lsls	r1, r3, #5
 80015c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c4:	0150      	lsls	r0, r2, #5
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4621      	mov	r1, r4
 80015cc:	1a51      	subs	r1, r2, r1
 80015ce:	6439      	str	r1, [r7, #64]	; 0x40
 80015d0:	4629      	mov	r1, r5
 80015d2:	eb63 0301 	sbc.w	r3, r3, r1
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015e4:	4649      	mov	r1, r9
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	4641      	mov	r1, r8
 80015ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ee:	4641      	mov	r1, r8
 80015f0:	018a      	lsls	r2, r1, #6
 80015f2:	4641      	mov	r1, r8
 80015f4:	1a51      	subs	r1, r2, r1
 80015f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80015f8:	4649      	mov	r1, r9
 80015fa:	eb63 0301 	sbc.w	r3, r3, r1
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	4641      	mov	r1, r8
 8001612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001616:	4641      	mov	r1, r8
 8001618:	00ca      	lsls	r2, r1, #3
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4603      	mov	r3, r0
 8001620:	4622      	mov	r2, r4
 8001622:	189b      	adds	r3, r3, r2
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
 8001626:	462b      	mov	r3, r5
 8001628:	460a      	mov	r2, r1
 800162a:	eb42 0303 	adc.w	r3, r2, r3
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800163c:	4629      	mov	r1, r5
 800163e:	024b      	lsls	r3, r1, #9
 8001640:	4621      	mov	r1, r4
 8001642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001646:	4621      	mov	r1, r4
 8001648:	024a      	lsls	r2, r1, #9
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800165c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001660:	f7fe fe20 	bl	80002a4 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800166e:	e067      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800167c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	67bb      	str	r3, [r7, #120]	; 0x78
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800168e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0b01 	sbc.w	fp, r3, r1
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016f2:	4692      	mov	sl, r2
 80016f4:	469b      	mov	fp, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	eb1a 0303 	adds.w	r3, sl, r3
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	462b      	mov	r3, r5
 8001700:	eb4b 0303 	adc.w	r3, fp, r3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001712:	4629      	mov	r1, r5
 8001714:	028b      	lsls	r3, r1, #10
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800171c:	4621      	mov	r1, r4
 800171e:	028a      	lsls	r2, r1, #10
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	673b      	str	r3, [r7, #112]	; 0x70
 800172c:	677a      	str	r2, [r7, #116]	; 0x74
 800172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001732:	f7fe fdb7 	bl	80002a4 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4613      	mov	r3, r2
 800173c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001762:	e0eb      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d06b      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	66bb      	str	r3, [r7, #104]	; 0x68
 8001786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800178a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178e:	663b      	str	r3, [r7, #96]	; 0x60
 8001790:	2300      	movs	r3, #0
 8001792:	667b      	str	r3, [r7, #100]	; 0x64
 8001794:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0159      	lsls	r1, r3, #5
 80017a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017aa:	0150      	lsls	r0, r2, #5
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4621      	mov	r1, r4
 80017b2:	1a51      	subs	r1, r2, r1
 80017b4:	61b9      	str	r1, [r7, #24]
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb63 0301 	sbc.w	r3, r3, r1
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ca:	4659      	mov	r1, fp
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d4:	4651      	mov	r1, sl
 80017d6:	018a      	lsls	r2, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ebb2 0801 	subs.w	r8, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0901 	sbc.w	r9, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	eb18 0303 	adds.w	r3, r8, r3
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	462b      	mov	r3, r5
 8001806:	eb49 0303 	adc.w	r3, r9, r3
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001818:	4629      	mov	r1, r5
 800181a:	024b      	lsls	r3, r1, #9
 800181c:	4621      	mov	r1, r4
 800181e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001822:	4621      	mov	r1, r4
 8001824:	024a      	lsls	r2, r1, #9
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800182e:	2200      	movs	r2, #0
 8001830:	65bb      	str	r3, [r7, #88]	; 0x58
 8001832:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001834:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001838:	f7fe fd34 	bl	80002a4 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001846:	e065      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x420>
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	4618      	mov	r0, r3
 800185e:	4611      	mov	r1, r2
 8001860:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001864:	653b      	str	r3, [r7, #80]	; 0x50
 8001866:	2300      	movs	r3, #0
 8001868:	657b      	str	r3, [r7, #84]	; 0x54
 800186a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800186e:	4642      	mov	r2, r8
 8001870:	464b      	mov	r3, r9
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4641      	mov	r1, r8
 8001888:	1a51      	subs	r1, r2, r1
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4649      	mov	r1, r9
 800188e:	eb63 0301 	sbc.w	r3, r3, r1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018a0:	4659      	mov	r1, fp
 80018a2:	018b      	lsls	r3, r1, #6
 80018a4:	4651      	mov	r1, sl
 80018a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018aa:	4651      	mov	r1, sl
 80018ac:	018a      	lsls	r2, r1, #6
 80018ae:	4651      	mov	r1, sl
 80018b0:	1a54      	subs	r4, r2, r1
 80018b2:	4659      	mov	r1, fp
 80018b4:	eb63 0501 	sbc.w	r5, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	18e3      	adds	r3, r4, r3
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	464b      	mov	r3, r9
 80018d4:	eb45 0303 	adc.w	r3, r5, r3
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fc:	2200      	movs	r2, #0
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001900:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001906:	f7fe fccd 	bl	80002a4 <__aeabi_uldivmod>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4613      	mov	r3, r2
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0f1b      	lsrs	r3, r3, #28
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001932:	e003      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800193a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001940:	4618      	mov	r0, r3
 8001942:	37b8      	adds	r7, #184	; 0xb8
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	00f42400 	.word	0x00f42400

08001954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e28d      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8083 	beq.w	8001a7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001974:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b04      	cmp	r3, #4
 800197e:	d019      	beq.n	80019b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001980:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001988:	2b08      	cmp	r3, #8
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800198c:	4b8e      	ldr	r3, [pc, #568]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001998:	d00c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199a:	4b8b      	ldr	r3, [pc, #556]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x124>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d157      	bne.n	8001a78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e25a      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x90>
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7b      	ldr	r2, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xcc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0xb4>
 80019ee:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a75      	ldr	r2, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xcc>
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f952 	bl	8000cd0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f94e 	bl	8000cd0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e21f      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xdc>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f93e 	bl	8000cd0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f93a 	bl	8000cd0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e20b      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x104>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06f      	beq.n	8001b66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a86:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d017      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x186>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1d3      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff f8e7 	bl	8000cd0 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff f8e3 	bl	8000cd0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1b4      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4925      	ldr	r1, [pc, #148]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8c6 	bl	8000cd0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff f8c2 	bl	8000cd0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e193      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d036      	beq.n	8001be0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f8a6 	bl	8000cd0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f8a2 	bl	8000cd0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e173      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x234>
 8001ba6:	e01b      	b.n	8001be0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f88f 	bl	8000cd0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	e00e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f88b 	bl	8000cd0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d907      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e15c      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	42470000 	.word	0x42470000
 8001bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b8a      	ldr	r3, [pc, #552]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ea      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8097 	beq.w	8001d1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b83      	ldr	r3, [pc, #524]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a7e      	ldr	r2, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f84b 	bl	8000cd0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f847 	bl	8000cd0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e118      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x31e>
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x340>
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c94:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	4a59      	ldr	r2, [pc, #356]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f80c 	bl	8000cd0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f808 	bl	8000cd0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0d7      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ee      	beq.n	8001cbc <HAL_RCC_OscConfig+0x368>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7fe fff6 	bl	8000cd0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fff2 	bl	8000cd0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0c1      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ad 	beq.w	8001e80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d145      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffc6 	bl	8000cd0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ffc2 	bl	8000cd0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e093      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	071b      	lsls	r3, r3, #28
 8001d92:	491b      	ldr	r1, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff97 	bl	8000cd0 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff93 	bl	8000cd0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e064      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x452>
 8001dc4:	e05c      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff80 	bl	8000cd0 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff7c 	bl	8000cd0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e04d      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x480>
 8001df2:	e045      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_RCC_OscConfig+0x538>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d030      	beq.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d129      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d122      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d119      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d10f      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f839 	bl	8001f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 f9d8 	bl	8002284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e04e      	b.n	8001ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d01d      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d010      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe6:	e007      	b.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40001800 	.word	0x40001800

08002024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b02      	cmp	r3, #2
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b02      	cmp	r3, #2
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0202 	mvn.w	r2, #2
 8002050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8ee 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8e0 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8f1 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b04      	cmp	r3, #4
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0204 	mvn.w	r2, #4
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8c4 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8b6 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f8c7 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d122      	bne.n	8002128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d11b      	bne.n	8002128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0208 	mvn.w	r2, #8
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f89a 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f88c 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f89d 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b10      	cmp	r3, #16
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b10      	cmp	r3, #16
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0210 	mvn.w	r2, #16
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2208      	movs	r2, #8
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f870 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f862 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f873 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0201 	mvn.w	r2, #1
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fc3c 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b80      	cmp	r3, #128	; 0x80
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f902 	bl	80023d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f838 	bl	8002270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b20      	cmp	r3, #32
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0220 	mvn.w	r2, #32
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8cc 	bl	80023c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a40      	ldr	r2, [pc, #256]	; (8002398 <TIM_Base_SetConfig+0x114>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a2:	d00f      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3d      	ldr	r2, [pc, #244]	; (800239c <TIM_Base_SetConfig+0x118>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00b      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3c      	ldr	r2, [pc, #240]	; (80023a0 <TIM_Base_SetConfig+0x11c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d007      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <TIM_Base_SetConfig+0x120>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <TIM_Base_SetConfig+0x124>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d108      	bne.n	80022d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <TIM_Base_SetConfig+0x114>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d027      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	; (800239c <TIM_Base_SetConfig+0x118>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d023      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <TIM_Base_SetConfig+0x11c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <TIM_Base_SetConfig+0x120>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01b      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <TIM_Base_SetConfig+0x124>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d017      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a28      	ldr	r2, [pc, #160]	; (80023ac <TIM_Base_SetConfig+0x128>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <TIM_Base_SetConfig+0x12c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00f      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <TIM_Base_SetConfig+0x130>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00b      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <TIM_Base_SetConfig+0x134>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <TIM_Base_SetConfig+0x138>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <TIM_Base_SetConfig+0x13c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <TIM_Base_SetConfig+0x114>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0xf8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <TIM_Base_SetConfig+0x124>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800
 80023a4:	40000c00 	.word	0x40000c00
 80023a8:	40010400 	.word	0x40010400
 80023ac:	40014000 	.word	0x40014000
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800
 80023b8:	40001800 	.word	0x40001800
 80023bc:	40001c00 	.word	0x40001c00
 80023c0:	40002000 	.word	0x40002000

080023c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f103 0208 	add.w	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002404:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f103 0208 	add.w	r2, r3, #8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0208 	add.w	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a4:	d103      	bne.n	80024ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e00c      	b.n	80024c8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3308      	adds	r3, #8
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e002      	b.n	80024bc <vListInsert+0x2e>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d2f6      	bcs.n	80024b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6892      	ldr	r2, [r2, #8]
 8002516:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6852      	ldr	r2, [r2, #4]
 8002520:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d103      	bne.n	8002534 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	1e5a      	subs	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800255e:	2301      	movs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <xQueueGenericReset+0x2e>
        __asm volatile
 800256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002570:	f383 8811 	msr	BASEPRI, r3
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	60fb      	str	r3, [r7, #12]
    }
 800257e:	bf00      	nop
 8002580:	e7fe      	b.n	8002580 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05d      	beq.n	8002644 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800258c:	2b00      	cmp	r3, #0
 800258e:	d059      	beq.n	8002644 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2100      	movs	r1, #0
 800259a:	fba3 2302 	umull	r2, r3, r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d000      	beq.n	80025a4 <xQueueGenericReset+0x50>
 80025a2:	2101      	movs	r1, #1
 80025a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d14c      	bne.n	8002644 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80025aa:	f002 f915 	bl	80047d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	6939      	ldr	r1, [r7, #16]
 80025b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	441a      	add	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2200      	movs	r2, #0
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	3b01      	subs	r3, #1
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	441a      	add	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	22ff      	movs	r2, #255	; 0xff
 80025ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d114      	bne.n	800262a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01a      	beq.n	800263e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	3310      	adds	r3, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f001 f889 	bl	8003724 <xTaskRemoveFromEventList>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <xQueueGenericReset+0x11c>)
 800261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	e009      	b.n	800263e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3310      	adds	r3, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fedc 	bl	80023ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3324      	adds	r3, #36	; 0x24
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fed7 	bl	80023ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800263e:	f002 f8fb 	bl	8004838 <vPortExitCritical>
 8002642:	e001      	b.n	8002648 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10a      	bne.n	8002664 <xQueueGenericReset+0x110>
        __asm volatile
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	60bb      	str	r3, [r7, #8]
    }
 8002660:	bf00      	nop
 8002662:	e7fe      	b.n	8002662 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002664:	697b      	ldr	r3, [r7, #20]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02e      	beq.n	80026ea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800268c:	2100      	movs	r1, #0
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	fba3 2302 	umull	r2, r3, r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d000      	beq.n	800269c <xQueueGenericCreate+0x28>
 800269a:	2101      	movs	r1, #1
 800269c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d123      	bne.n	80026ea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026aa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026ae:	d81c      	bhi.n	80026ea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	3350      	adds	r3, #80	; 0x50
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 f9b4 	bl	8004a2c <pvPortMalloc>
 80026c4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01c      	beq.n	8002706 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3350      	adds	r3, #80	; 0x50
 80026d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f814 	bl	8002710 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80026e8:	e00d      	b.n	8002706 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <xQueueGenericCreate+0x92>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	613b      	str	r3, [r7, #16]
    }
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002706:	69fb      	ldr	r3, [r7, #28]
    }
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e002      	b.n	8002732 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800273e:	2101      	movs	r1, #1
 8002740:	69b8      	ldr	r0, [r7, #24]
 8002742:	f7ff ff07 	bl	8002554 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	2073      	movs	r0, #115	; 0x73
 8002756:	f004 f987 	bl	8006a68 <SEGGER_SYSVIEW_RecordU32x3>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b08f      	sub	sp, #60	; 0x3c
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <xQueueReceive+0x30>
        __asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	623b      	str	r3, [r7, #32]
    }
 8002790:	bf00      	nop
 8002792:	e7fe      	b.n	8002792 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <xQueueReceive+0x3e>
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <xQueueReceive+0x42>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <xQueueReceive+0x44>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueReceive+0x5e>
        __asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	61fb      	str	r3, [r7, #28]
    }
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c2:	f001 f9c1 	bl	8003b48 <xTaskGetSchedulerState>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <xQueueReceive+0x6e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <xQueueReceive+0x72>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueReceive+0x74>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueReceive+0x8e>
        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	61bb      	str	r3, [r7, #24]
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027f2:	f001 fff1 	bl	80047d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d02f      	beq.n	8002862 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002806:	f000 f8bd 	bl	8002984 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	4618      	mov	r0, r3
 800280e:	f004 ff07 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8002812:	4604      	mov	r4, r0
 8002814:	2000      	movs	r0, #0
 8002816:	f004 ff03 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2101      	movs	r1, #1
 8002820:	9100      	str	r1, [sp, #0]
 8002822:	4621      	mov	r1, r4
 8002824:	205c      	movs	r0, #92	; 0x5c
 8002826:	f004 f995 	bl	8006b54 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00f      	beq.n	800285a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	3310      	adds	r3, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f000 ff70 	bl	8003724 <xTaskRemoveFromEventList>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <xQueueReceive+0x21c>)
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800285a:	f001 ffed 	bl	8004838 <vPortExitCritical>
                return pdPASS;
 800285e:	2301      	movs	r3, #1
 8002860:	e08a      	b.n	8002978 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d113      	bne.n	8002890 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002868:	f001 ffe6 	bl	8004838 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	4618      	mov	r0, r3
 8002870:	f004 fed6 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8002874:	4604      	mov	r4, r0
 8002876:	2000      	movs	r0, #0
 8002878:	f004 fed2 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2101      	movs	r1, #1
 8002882:	9100      	str	r1, [sp, #0]
 8002884:	4621      	mov	r1, r4
 8002886:	205c      	movs	r0, #92	; 0x5c
 8002888:	f004 f964 	bl	8006b54 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800288c:	2300      	movs	r3, #0
 800288e:	e073      	b.n	8002978 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	4618      	mov	r0, r3
 800289c:	f001 f81a 	bl	80038d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028a4:	f001 ffc8 	bl	8004838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028a8:	f000 fc1c 	bl	80030e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028ac:	f001 ff94 	bl	80047d8 <vPortEnterCritical>
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028bc:	d103      	bne.n	80028c6 <xQueueReceive+0x162>
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d2:	d103      	bne.n	80028dc <xQueueReceive+0x178>
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028dc:	f001 ffac 	bl	8004838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e0:	1d3a      	adds	r2, r7, #4
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 f809 	bl	8003900 <xTaskCheckForTimeOut>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d124      	bne.n	800293e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f6:	f000 f8bd 	bl	8002a74 <prvIsQueueEmpty>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d018      	beq.n	8002932 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	3324      	adds	r3, #36	; 0x24
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fe9f 	bl	800364c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800290e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002910:	f000 f85e 	bl	80029d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002914:	f000 fbf4 	bl	8003100 <xTaskResumeAll>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f af69 	bne.w	80027f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <xQueueReceive+0x21c>)
 8002922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	e75f      	b.n	80027f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002934:	f000 f84c 	bl	80029d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002938:	f000 fbe2 	bl	8003100 <xTaskResumeAll>
 800293c:	e759      	b.n	80027f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800293e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002940:	f000 f846 	bl	80029d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002944:	f000 fbdc 	bl	8003100 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294a:	f000 f893 	bl	8002a74 <prvIsQueueEmpty>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f43f af4e 	beq.w	80027f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	4618      	mov	r0, r3
 800295a:	f004 fe61 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 800295e:	4604      	mov	r4, r0
 8002960:	2000      	movs	r0, #0
 8002962:	f004 fe5d 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8002966:	4602      	mov	r2, r0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2101      	movs	r1, #1
 800296c:	9100      	str	r1, [sp, #0]
 800296e:	4621      	mov	r1, r4
 8002970:	205c      	movs	r0, #92	; 0x5c
 8002972:	f004 f8ef 	bl	8006b54 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002976:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002978:	4618      	mov	r0, r3
 800297a:	3734      	adds	r7, #52	; 0x34
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	441a      	add	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d303      	bcc.n	80029b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68d9      	ldr	r1, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	461a      	mov	r2, r3
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f004 fffc 	bl	80079c0 <memcpy>
    }
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029d8:	f001 fefe 	bl	80047d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029e4:	e011      	b.n	8002a0a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fe96 	bl	8003724 <xTaskRemoveFromEventList>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80029fe:	f000 ffe5 	bl	80039cc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dce9      	bgt.n	80029e6 <prvUnlockQueue+0x16>
 8002a12:	e000      	b.n	8002a16 <prvUnlockQueue+0x46>
                    break;
 8002a14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	22ff      	movs	r2, #255	; 0xff
 8002a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a1e:	f001 ff0b 	bl	8004838 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a22:	f001 fed9 	bl	80047d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a2e:	e011      	b.n	8002a54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d012      	beq.n	8002a5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fe71 	bl	8003724 <xTaskRemoveFromEventList>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a48:	f000 ffc0 	bl	80039cc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a4c:	7bbb      	ldrb	r3, [r7, #14]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	dce9      	bgt.n	8002a30 <prvUnlockQueue+0x60>
 8002a5c:	e000      	b.n	8002a60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a68:	f001 fee6 	bl	8004838 <vPortExitCritical>
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a7c:	f001 feac 	bl	80047d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e001      	b.n	8002a92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a92:	f001 fed1 	bl	8004838 <vPortExitCritical>

    return xReturn;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60fb      	str	r3, [r7, #12]
    }
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d024      	beq.n	8002b1a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e01e      	b.n	8002b14 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <vQueueAddToRegistry+0xa8>)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d105      	bne.n	8002af2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <vQueueAddToRegistry+0xa8>)
 8002aec:	4413      	add	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
                    break;
 8002af0:	e013      	b.n	8002b1a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <vQueueAddToRegistry+0x6e>
 8002af8:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <vQueueAddToRegistry+0xa8>)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <vQueueAddToRegistry+0xa8>)
 8002b0a:	4413      	add	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b07      	cmp	r3, #7
 8002b18:	d9dd      	bls.n	8002ad6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00f      	beq.n	8002b40 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fd76 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8002b34:	4601      	mov	r1, r0
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2071      	movs	r0, #113	; 0x71
 8002b3c:	f003 ff3a 	bl	80069b4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000094 	.word	0x20000094

08002b4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b5c:	f001 fe3c 	bl	80047d8 <vPortEnterCritical>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b6c:	d103      	bne.n	8002b76 <vQueueWaitForMessageRestricted+0x2a>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b82:	d103      	bne.n	8002b8c <vQueueWaitForMessageRestricted+0x40>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b8c:	f001 fe54 	bl	8004838 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fd77 	bl	8003694 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff12 	bl	80029d0 <prvUnlockQueue>
    }
 8002bac:	bf00      	nop
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af04      	add	r7, sp, #16
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 ff2f 	bl	8004a2c <pvPortMalloc>
 8002bce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d013      	beq.n	8002bfe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bd6:	2058      	movs	r0, #88	; 0x58
 8002bd8:	f001 ff28 	bl	8004a2c <pvPortMalloc>
 8002bdc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002be4:	2258      	movs	r2, #88	; 0x58
 8002be6:	2100      	movs	r1, #0
 8002be8:	69f8      	ldr	r0, [r7, #28]
 8002bea:	f004 febd 	bl	8007968 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf4:	e005      	b.n	8002c02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f001 ffd2 	bl	8004ba0 <vPortFree>
 8002bfc:	e001      	b.n	8002c02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9303      	str	r3, [sp, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	9302      	str	r3, [sp, #8]
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f80e 	bl	8002c40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c24:	69f8      	ldr	r0, [r7, #28]
 8002c26:	f000 f899 	bl	8002d5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e002      	b.n	8002c36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c36:	69bb      	ldr	r3, [r7, #24]
    }
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	21a5      	movs	r1, #165	; 0xa5
 8002c5a:	f004 fe85 	bl	8007968 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f023 0307 	bic.w	r3, r3, #7
 8002c76:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	617b      	str	r3, [r7, #20]
    }
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01e      	beq.n	8002cdc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e012      	b.n	8002cca <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	7819      	ldrb	r1, [r3, #0]
 8002cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3334      	adds	r3, #52	; 0x34
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d9e9      	bls.n	8002ca4 <prvInitialiseNewTask+0x64>
 8002cd0:	e000      	b.n	8002cd4 <prvInitialiseNewTask+0x94>
            {
                break;
 8002cd2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d90a      	bls.n	8002cf8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	613b      	str	r3, [r7, #16]
    }
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d901      	bls.n	8002d02 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	3304      	adds	r3, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fb8a 	bl	800242c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fb85 	bl	800242c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	f1c3 0205 	rsb	r2, r3, #5
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	69b8      	ldr	r0, [r7, #24]
 8002d3e:	f001 fc1b 	bl	8004578 <pxPortInitialiseStack>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d52:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d54:	bf00      	nop
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d5c:	b5b0      	push	{r4, r5, r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d64:	f001 fd38 	bl	80047d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <prvAddNewTaskToReadyList+0x14c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a4e      	ldr	r2, [pc, #312]	; (8002ea8 <prvAddNewTaskToReadyList+0x14c>)
 8002d70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d72:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <prvAddNewTaskToReadyList+0x150>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d7a:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <prvAddNewTaskToReadyList+0x150>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d80:	4b49      	ldr	r3, [pc, #292]	; (8002ea8 <prvAddNewTaskToReadyList+0x14c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d110      	bne.n	8002daa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d88:	f000 fe44 	bl	8003a14 <prvInitialiseTaskLists>
 8002d8c:	e00d      	b.n	8002daa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <prvAddNewTaskToReadyList+0x154>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d96:	4b45      	ldr	r3, [pc, #276]	; (8002eac <prvAddNewTaskToReadyList+0x150>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d802      	bhi.n	8002daa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002da4:	4a41      	ldr	r2, [pc, #260]	; (8002eac <prvAddNewTaskToReadyList+0x150>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <prvAddNewTaskToReadyList+0x158>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <prvAddNewTaskToReadyList+0x158>)
 8002db2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002db4:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <prvAddNewTaskToReadyList+0x158>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <prvAddNewTaskToReadyList+0x94>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 fb65 	bl	8007494 <SEGGER_SYSVIEW_OnTaskCreate>
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	461d      	mov	r5, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461c      	mov	r4, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	1ae3      	subs	r3, r4, r3
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	462b      	mov	r3, r5
 8002dec:	f002 f89a 	bl	8004f24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fbd2 	bl	800759c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <prvAddNewTaskToReadyList+0x15c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <prvAddNewTaskToReadyList+0x15c>)
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0e:	492b      	ldr	r1, [pc, #172]	; (8002ebc <prvAddNewTaskToReadyList+0x160>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	3204      	adds	r2, #4
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1d1a      	adds	r2, r3, #4
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <prvAddNewTaskToReadyList+0x160>)
 8002e4e:	441a      	add	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	615a      	str	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4918      	ldr	r1, [pc, #96]	; (8002ebc <prvAddNewTaskToReadyList+0x160>)
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1c59      	adds	r1, r3, #1
 8002e68:	4814      	ldr	r0, [pc, #80]	; (8002ebc <prvAddNewTaskToReadyList+0x160>)
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4403      	add	r3, r0
 8002e74:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e76:	f001 fcdf 	bl	8004838 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <prvAddNewTaskToReadyList+0x154>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00e      	beq.n	8002ea0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <prvAddNewTaskToReadyList+0x150>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d207      	bcs.n	8002ea0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <prvAddNewTaskToReadyList+0x164>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea8:	200001ac 	.word	0x200001ac
 8002eac:	200000d4 	.word	0x200000d4
 8002eb0:	200001b8 	.word	0x200001b8
 8002eb4:	200001c8 	.word	0x200001c8
 8002eb8:	200001b4 	.word	0x200001b4
 8002ebc:	200000d8 	.word	0x200000d8
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ecc:	f001 fc84 	bl	80047d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <vTaskDelete+0x18>
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <vTaskDelete+0x134>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e000      	b.n	8002ede <vTaskDelete+0x1a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fb0b 	bl	8002500 <uxListRemove>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d115      	bne.n	8002f1c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	4941      	ldr	r1, [pc, #260]	; (8002ffc <vTaskDelete+0x138>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <vTaskDelete+0x58>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43da      	mvns	r2, r3
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <vTaskDelete+0x13c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4013      	ands	r3, r2
 8002f18:	4a39      	ldr	r2, [pc, #228]	; (8003000 <vTaskDelete+0x13c>)
 8002f1a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3318      	adds	r3, #24
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fae9 	bl	8002500 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002f2e:	4b35      	ldr	r3, [pc, #212]	; (8003004 <vTaskDelete+0x140>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	4a33      	ldr	r2, [pc, #204]	; (8003004 <vTaskDelete+0x140>)
 8002f36:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002f38:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <vTaskDelete+0x134>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d118      	bne.n	8002f74 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	482f      	ldr	r0, [pc, #188]	; (8003008 <vTaskDelete+0x144>)
 8002f4a:	f7ff fa7c 	bl	8002446 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	; (800300c <vTaskDelete+0x148>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3301      	adds	r3, #1
 8002f54:	4a2d      	ldr	r2, [pc, #180]	; (800300c <vTaskDelete+0x148>)
 8002f56:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fb60 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4619      	mov	r1, r3
 8002f64:	2022      	movs	r0, #34	; 0x22
 8002f66:	f003 fce9 	bl	800693c <SEGGER_SYSVIEW_RecordU32>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 f841 	bl	8004ff4 <SYSVIEW_DeleteTask>
 8002f72:	e013      	b.n	8002f9c <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <vTaskDelete+0x14c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <vTaskDelete+0x14c>)
 8002f7c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fb4d 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	2022      	movs	r0, #34	; 0x22
 8002f8c:	f003 fcd6 	bl	800693c <SEGGER_SYSVIEW_RecordU32>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 f82e 	bl	8004ff4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002f98:	f000 fdba 	bl	8003b10 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002f9c:	f001 fc4c 	bl	8004838 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002fa0:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <vTaskDelete+0x134>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d002      	beq.n	8002fb0 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fda0 	bl	8003af0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <vTaskDelete+0x150>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <vTaskDelete+0x134>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d116      	bne.n	8002ff0 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <vTaskDelete+0x154>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <vTaskDelete+0x11c>
        __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60bb      	str	r3, [r7, #8]
    }
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <vTaskDelete+0x158>)
 8002fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	200000d4 	.word	0x200000d4
 8002ffc:	200000d8 	.word	0x200000d8
 8003000:	200001b4 	.word	0x200001b4
 8003004:	200001c8 	.word	0x200001c8
 8003008:	20000180 	.word	0x20000180
 800300c:	20000194 	.word	0x20000194
 8003010:	200001ac 	.word	0x200001ac
 8003014:	200001b8 	.word	0x200001b8
 8003018:	200001d4 	.word	0x200001d4
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <vTaskStartScheduler+0xa4>)
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	2282      	movs	r2, #130	; 0x82
 8003032:	4925      	ldr	r1, [pc, #148]	; (80030c8 <vTaskStartScheduler+0xa8>)
 8003034:	4825      	ldr	r0, [pc, #148]	; (80030cc <vTaskStartScheduler+0xac>)
 8003036:	f7ff fdbd 	bl	8002bb4 <xTaskCreate>
 800303a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003042:	f001 f815 	bl	8004070 <xTimerCreateTimerTask>
 8003046:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d124      	bne.n	8003098 <vTaskStartScheduler+0x78>
        __asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	60bb      	str	r3, [r7, #8]
    }
 8003060:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003062:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <vTaskStartScheduler+0xb0>)
 8003064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003068:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <vTaskStartScheduler+0xb4>)
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <vTaskStartScheduler+0xb8>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <vTaskStartScheduler+0xbc>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <vTaskStartScheduler+0xa4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d102      	bne.n	8003088 <vTaskStartScheduler+0x68>
 8003082:	f004 f9eb 	bl	800745c <SEGGER_SYSVIEW_OnIdle>
 8003086:	e004      	b.n	8003092 <vTaskStartScheduler+0x72>
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <vTaskStartScheduler+0xbc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fa43 	bl	8007518 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003092:	f001 faff 	bl	8004694 <xPortStartScheduler>
 8003096:	e00e      	b.n	80030b6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309e:	d10a      	bne.n	80030b6 <vTaskStartScheduler+0x96>
        __asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	607b      	str	r3, [r7, #4]
    }
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <vTaskStartScheduler+0xc0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200001d0 	.word	0x200001d0
 80030c8:	08007ab8 	.word	0x08007ab8
 80030cc:	080039e5 	.word	0x080039e5
 80030d0:	200001cc 	.word	0x200001cc
 80030d4:	200001b8 	.word	0x200001b8
 80030d8:	200001b0 	.word	0x200001b0
 80030dc:	200000d4 	.word	0x200000d4
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <vTaskSuspendAll+0x18>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	4a03      	ldr	r2, [pc, #12]	; (80030fc <vTaskSuspendAll+0x18>)
 80030f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	200001d4 	.word	0x200001d4

08003100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800310e:	4b73      	ldr	r3, [pc, #460]	; (80032dc <xTaskResumeAll+0x1dc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <xTaskResumeAll+0x2c>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	607b      	str	r3, [r7, #4]
    }
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800312c:	f001 fb54 	bl	80047d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003130:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <xTaskResumeAll+0x1dc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	4a69      	ldr	r2, [pc, #420]	; (80032dc <xTaskResumeAll+0x1dc>)
 8003138:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800313a:	4b68      	ldr	r3, [pc, #416]	; (80032dc <xTaskResumeAll+0x1dc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 80c4 	bne.w	80032cc <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003144:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <xTaskResumeAll+0x1e0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80bf 	beq.w	80032cc <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800314e:	e08e      	b.n	800326e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003150:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <xTaskResumeAll+0x1e4>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	6a12      	ldr	r2, [r2, #32]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	69d2      	ldr	r2, [r2, #28]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3318      	adds	r3, #24
 800317a:	429a      	cmp	r2, r3
 800317c:	d103      	bne.n	8003186 <xTaskResumeAll+0x86>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	6a1a      	ldr	r2, [r3, #32]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	68d2      	ldr	r2, [r2, #12]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	6892      	ldr	r2, [r2, #8]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3304      	adds	r3, #4
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d103      	bne.n	80031c4 <xTaskResumeAll+0xc4>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 f9e0 	bl	800759c <SEGGER_SYSVIEW_OnTaskStartReady>
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <xTaskResumeAll+0x1e8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <xTaskResumeAll+0x1e8>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	493e      	ldr	r1, [pc, #248]	; (80032ec <xTaskResumeAll+0x1ec>)
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3304      	adds	r3, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	3204      	adds	r2, #4
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1d1a      	adds	r2, r3, #4
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4a2e      	ldr	r2, [pc, #184]	; (80032ec <xTaskResumeAll+0x1ec>)
 8003232:	441a      	add	r2, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	492b      	ldr	r1, [pc, #172]	; (80032ec <xTaskResumeAll+0x1ec>)
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	4827      	ldr	r0, [pc, #156]	; (80032ec <xTaskResumeAll+0x1ec>)
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4403      	add	r3, r0
 8003258:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <xTaskResumeAll+0x1f0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <xTaskResumeAll+0x1f4>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <xTaskResumeAll+0x1e4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f47f af6c 	bne.w	8003150 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800327e:	f000 fc47 	bl	8003b10 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <xTaskResumeAll+0x1f8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800328e:	f000 f859 	bl	8003344 <xTaskIncrementTick>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <xTaskResumeAll+0x1f4>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f1      	bne.n	800328e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <xTaskResumeAll+0x1f8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <xTaskResumeAll+0x1f4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <xTaskResumeAll+0x1fc>)
 80032be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032cc:	f001 fab4 	bl	8004838 <vPortExitCritical>

    return xAlreadyYielded;
 80032d0:	69bb      	ldr	r3, [r7, #24]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200001d4 	.word	0x200001d4
 80032e0:	200001ac 	.word	0x200001ac
 80032e4:	2000016c 	.word	0x2000016c
 80032e8:	200001b4 	.word	0x200001b4
 80032ec:	200000d8 	.word	0x200000d8
 80032f0:	200000d4 	.word	0x200000d4
 80032f4:	200001c0 	.word	0x200001c0
 80032f8:	200001bc 	.word	0x200001bc
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <xTaskGetTickCount+0x1c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	200001b0 	.word	0x200001b0

08003320 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003326:	f001 fb41 	bl	80049ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <xTaskGetTickCountFromISR+0x20>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003334:	683b      	ldr	r3, [r7, #0]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200001b0 	.word	0x200001b0

08003344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334e:	4b7f      	ldr	r3, [pc, #508]	; (800354c <xTaskIncrementTick+0x208>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 80f0 	bne.w	8003538 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003358:	4b7d      	ldr	r3, [pc, #500]	; (8003550 <xTaskIncrementTick+0x20c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003360:	4a7b      	ldr	r2, [pc, #492]	; (8003550 <xTaskIncrementTick+0x20c>)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d120      	bne.n	80033ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800336c:	4b79      	ldr	r3, [pc, #484]	; (8003554 <xTaskIncrementTick+0x210>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <xTaskIncrementTick+0x48>
        __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	607b      	str	r3, [r7, #4]
    }
 8003388:	bf00      	nop
 800338a:	e7fe      	b.n	800338a <xTaskIncrementTick+0x46>
 800338c:	4b71      	ldr	r3, [pc, #452]	; (8003554 <xTaskIncrementTick+0x210>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	4b71      	ldr	r3, [pc, #452]	; (8003558 <xTaskIncrementTick+0x214>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6f      	ldr	r2, [pc, #444]	; (8003554 <xTaskIncrementTick+0x210>)
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4a6f      	ldr	r2, [pc, #444]	; (8003558 <xTaskIncrementTick+0x214>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b6e      	ldr	r3, [pc, #440]	; (800355c <xTaskIncrementTick+0x218>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a6d      	ldr	r2, [pc, #436]	; (800355c <xTaskIncrementTick+0x218>)
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	f000 fbb1 	bl	8003b10 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033ae:	4b6c      	ldr	r3, [pc, #432]	; (8003560 <xTaskIncrementTick+0x21c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a3a      	ldr	r2, [r7, #32]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f0c0 80aa 	bcc.w	800350e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ba:	4b66      	ldr	r3, [pc, #408]	; (8003554 <xTaskIncrementTick+0x210>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c4:	4b66      	ldr	r3, [pc, #408]	; (8003560 <xTaskIncrementTick+0x21c>)
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ca:	601a      	str	r2, [r3, #0]
                    break;
 80033cc:	e09f      	b.n	800350e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <xTaskIncrementTick+0x210>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80033de:	6a3a      	ldr	r2, [r7, #32]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d203      	bcs.n	80033ee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033e6:	4a5e      	ldr	r2, [pc, #376]	; (8003560 <xTaskIncrementTick+0x21c>)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033ec:	e08f      	b.n	800350e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	68d2      	ldr	r2, [r2, #12]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	3304      	adds	r3, #4
 8003410:	429a      	cmp	r2, r3
 8003412:	d103      	bne.n	800341c <xTaskIncrementTick+0xd8>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01e      	beq.n	8003472 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	6a12      	ldr	r2, [r2, #32]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	69d2      	ldr	r2, [r2, #28]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	3318      	adds	r3, #24
 8003456:	429a      	cmp	r2, r3
 8003458:	d103      	bne.n	8003462 <xTaskIncrementTick+0x11e>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2200      	movs	r2, #0
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4618      	mov	r0, r3
 8003476:	f004 f891 	bl	800759c <SEGGER_SYSVIEW_OnTaskStartReady>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <xTaskIncrementTick+0x220>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	4a36      	ldr	r2, [pc, #216]	; (8003564 <xTaskIncrementTick+0x220>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4935      	ldr	r1, [pc, #212]	; (8003568 <xTaskIncrementTick+0x224>)
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3304      	adds	r3, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	3204      	adds	r2, #4
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1d1a      	adds	r2, r3, #4
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4a26      	ldr	r2, [pc, #152]	; (8003568 <xTaskIncrementTick+0x224>)
 80034d0:	441a      	add	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	615a      	str	r2, [r3, #20]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4923      	ldr	r1, [pc, #140]	; (8003568 <xTaskIncrementTick+0x224>)
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	1c59      	adds	r1, r3, #1
 80034ea:	481f      	ldr	r0, [pc, #124]	; (8003568 <xTaskIncrementTick+0x224>)
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4403      	add	r3, r0
 80034f6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <xTaskIncrementTick+0x228>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	429a      	cmp	r2, r3
 8003504:	f67f af59 	bls.w	80033ba <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800350c:	e755      	b.n	80033ba <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <xTaskIncrementTick+0x228>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	4914      	ldr	r1, [pc, #80]	; (8003568 <xTaskIncrementTick+0x224>)
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d901      	bls.n	800352a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003526:	2301      	movs	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <xTaskIncrementTick+0x22c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	e004      	b.n	8003542 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <xTaskIncrementTick+0x230>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <xTaskIncrementTick+0x230>)
 8003540:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003544:	4618      	mov	r0, r3
 8003546:	3728      	adds	r7, #40	; 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200001d4 	.word	0x200001d4
 8003550:	200001b0 	.word	0x200001b0
 8003554:	20000164 	.word	0x20000164
 8003558:	20000168 	.word	0x20000168
 800355c:	200001c4 	.word	0x200001c4
 8003560:	200001cc 	.word	0x200001cc
 8003564:	200001b4 	.word	0x200001b4
 8003568:	200000d8 	.word	0x200000d8
 800356c:	200000d4 	.word	0x200000d4
 8003570:	200001c0 	.word	0x200001c0
 8003574:	200001bc 	.word	0x200001bc

08003578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <vTaskSwitchContext+0xbc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <vTaskSwitchContext+0xc0>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800358c:	e04d      	b.n	800362a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <vTaskSwitchContext+0xc0>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <vTaskSwitchContext+0xc4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035a2:	7afb      	ldrb	r3, [r7, #11]
 80035a4:	f1c3 031f 	rsb	r3, r3, #31
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	4925      	ldr	r1, [pc, #148]	; (8003640 <vTaskSwitchContext+0xc8>)
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	607b      	str	r3, [r7, #4]
    }
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <vTaskSwitchContext+0x5a>
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <vTaskSwitchContext+0xc8>)
 80035e0:	4413      	add	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3308      	adds	r3, #8
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d104      	bne.n	8003604 <vTaskSwitchContext+0x8c>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <vTaskSwitchContext+0xcc>)
 800360c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <vTaskSwitchContext+0xcc>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <vTaskSwitchContext+0xd0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d102      	bne.n	8003620 <vTaskSwitchContext+0xa8>
 800361a:	f003 ff1f 	bl	800745c <SEGGER_SYSVIEW_OnIdle>
}
 800361e:	e004      	b.n	800362a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <vTaskSwitchContext+0xcc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f003 ff77 	bl	8007518 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200001d4 	.word	0x200001d4
 8003638:	200001c0 	.word	0x200001c0
 800363c:	200001b4 	.word	0x200001b4
 8003640:	200000d8 	.word	0x200000d8
 8003644:	200000d4 	.word	0x200000d4
 8003648:	200001d0 	.word	0x200001d0

0800364c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	60fb      	str	r3, [r7, #12]
    }
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <vTaskPlaceOnEventList+0x44>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3318      	adds	r3, #24
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe ff07 	bl	800248e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003680:	2101      	movs	r1, #1
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f000 fc74 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200000d4 	.word	0x200000d4

08003694 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	613b      	str	r3, [r7, #16]
    }
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	61da      	str	r2, [r3, #28]
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	621a      	str	r2, [r3, #32]
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	3218      	adds	r2, #24
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f103 0218 	add.w	r2, r3, #24
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003708:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800370a:	2024      	movs	r0, #36	; 0x24
 800370c:	f003 f8f8 	bl	8006900 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	68b8      	ldr	r0, [r7, #8]
 8003714:	f000 fc2c 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
    }
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200000d4 	.word	0x200000d4

08003724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60fb      	str	r3, [r7, #12]
    }
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	6a12      	ldr	r2, [r2, #32]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	69d2      	ldr	r2, [r2, #28]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	3318      	adds	r3, #24
 8003772:	429a      	cmp	r2, r3
 8003774:	d103      	bne.n	800377e <xTaskRemoveFromEventList+0x5a>
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	2200      	movs	r2, #0
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378e:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <xTaskRemoveFromEventList+0x198>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d162      	bne.n	800385c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	68d2      	ldr	r2, [r2, #12]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	6892      	ldr	r2, [r2, #8]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	3304      	adds	r3, #4
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d103      	bne.n	80037c4 <xTaskRemoveFromEventList+0xa0>
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2200      	movs	r2, #0
 80037c8:	615a      	str	r2, [r3, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 fee0 	bl	800759c <SEGGER_SYSVIEW_OnTaskStartReady>
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <xTaskRemoveFromEventList+0x19c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	4a35      	ldr	r2, [pc, #212]	; (80038c0 <xTaskRemoveFromEventList+0x19c>)
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4934      	ldr	r1, [pc, #208]	; (80038c4 <xTaskRemoveFromEventList+0x1a0>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3304      	adds	r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	6a3a      	ldr	r2, [r7, #32]
 8003818:	3204      	adds	r2, #4
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <xTaskRemoveFromEventList+0x1a0>)
 8003832:	441a      	add	r2, r3
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	4921      	ldr	r1, [pc, #132]	; (80038c4 <xTaskRemoveFromEventList+0x1a0>)
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	481d      	ldr	r0, [pc, #116]	; (80038c4 <xTaskRemoveFromEventList+0x1a0>)
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4403      	add	r3, r0
 8003858:	6019      	str	r1, [r3, #0]
 800385a:	e01b      	b.n	8003894 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <xTaskRemoveFromEventList+0x1a4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	61da      	str	r2, [r3, #28]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	621a      	str	r2, [r3, #32]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	3218      	adds	r2, #24
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f103 0218 	add.w	r2, r3, #24
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <xTaskRemoveFromEventList+0x1a4>)
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskRemoveFromEventList+0x1a4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <xTaskRemoveFromEventList+0x1a4>)
 8003892:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <xTaskRemoveFromEventList+0x1a8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	429a      	cmp	r2, r3
 80038a0:	d905      	bls.n	80038ae <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <xTaskRemoveFromEventList+0x1ac>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e001      	b.n	80038b2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3728      	adds	r7, #40	; 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200001d4 	.word	0x200001d4
 80038c0:	200001b4 	.word	0x200001b4
 80038c4:	200000d8 	.word	0x200000d8
 80038c8:	2000016c 	.word	0x2000016c
 80038cc:	200000d4 	.word	0x200000d4
 80038d0:	200001c0 	.word	0x200001c0

080038d4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <vTaskInternalSetTimeOutState+0x24>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <vTaskInternalSetTimeOutState+0x28>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	605a      	str	r2, [r3, #4]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	200001c4 	.word	0x200001c4
 80038fc:	200001b0 	.word	0x200001b0

08003900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
    }
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60fb      	str	r3, [r7, #12]
    }
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003942:	f000 ff49 	bl	80047d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <xTaskCheckForTimeOut+0xc4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395e:	d102      	bne.n	8003966 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	e026      	b.n	80039b4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <xTaskCheckForTimeOut+0xc8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d00a      	beq.n	8003988 <xTaskCheckForTimeOut+0x88>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d305      	bcc.n	8003988 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e015      	b.n	80039b4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	429a      	cmp	r2, r3
 8003990:	d20b      	bcs.n	80039aa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad2      	subs	r2, r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ff98 	bl	80038d4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	e004      	b.n	80039b4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039b0:	2301      	movs	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039b4:	f000 ff40 	bl	8004838 <vPortExitCritical>

    return xReturn;
 80039b8:	69fb      	ldr	r3, [r7, #28]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200001b0 	.word	0x200001b0
 80039c8:	200001c4 	.word	0x200001c4

080039cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <vTaskMissedYield+0x14>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	200001c0 	.word	0x200001c0

080039e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039ec:	f000 f852 	bl	8003a94 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <prvIdleTask+0x28>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d9f9      	bls.n	80039ec <prvIdleTask+0x8>
            {
                taskYIELD();
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <prvIdleTask+0x2c>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a08:	e7f0      	b.n	80039ec <prvIdleTask+0x8>
 8003a0a:	bf00      	nop
 8003a0c:	200000d8 	.word	0x200000d8
 8003a10:	e000ed04 	.word	0xe000ed04

08003a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	e00c      	b.n	8003a3a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <prvInitialiseTaskLists+0x60>)
 8003a2c:	4413      	add	r3, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fcdc 	bl	80023ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3301      	adds	r3, #1
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d9ef      	bls.n	8003a20 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a40:	480d      	ldr	r0, [pc, #52]	; (8003a78 <prvInitialiseTaskLists+0x64>)
 8003a42:	f7fe fcd3 	bl	80023ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a46:	480d      	ldr	r0, [pc, #52]	; (8003a7c <prvInitialiseTaskLists+0x68>)
 8003a48:	f7fe fcd0 	bl	80023ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a4c:	480c      	ldr	r0, [pc, #48]	; (8003a80 <prvInitialiseTaskLists+0x6c>)
 8003a4e:	f7fe fccd 	bl	80023ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a52:	480c      	ldr	r0, [pc, #48]	; (8003a84 <prvInitialiseTaskLists+0x70>)
 8003a54:	f7fe fcca 	bl	80023ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <prvInitialiseTaskLists+0x74>)
 8003a5a:	f7fe fcc7 	bl	80023ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <prvInitialiseTaskLists+0x78>)
 8003a60:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <prvInitialiseTaskLists+0x64>)
 8003a62:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <prvInitialiseTaskLists+0x7c>)
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <prvInitialiseTaskLists+0x68>)
 8003a68:	601a      	str	r2, [r3, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200000d8 	.word	0x200000d8
 8003a78:	2000013c 	.word	0x2000013c
 8003a7c:	20000150 	.word	0x20000150
 8003a80:	2000016c 	.word	0x2000016c
 8003a84:	20000180 	.word	0x20000180
 8003a88:	20000198 	.word	0x20000198
 8003a8c:	20000164 	.word	0x20000164
 8003a90:	20000168 	.word	0x20000168

08003a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a9a:	e019      	b.n	8003ad0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a9c:	f000 fe9c 	bl	80047d8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <prvCheckTasksWaitingTermination+0x50>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fd27 	bl	8002500 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <prvCheckTasksWaitingTermination+0x54>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <prvCheckTasksWaitingTermination+0x54>)
 8003aba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <prvCheckTasksWaitingTermination+0x58>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <prvCheckTasksWaitingTermination+0x58>)
 8003ac4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003ac6:	f000 feb7 	bl	8004838 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f810 	bl	8003af0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <prvCheckTasksWaitingTermination+0x58>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e1      	bne.n	8003a9c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000180 	.word	0x20000180
 8003ae8:	200001ac 	.word	0x200001ac
 8003aec:	20000194 	.word	0x20000194

08003af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 f84f 	bl	8004ba0 <vPortFree>
            vPortFree( pxTCB );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 f84c 	bl	8004ba0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvResetNextTaskUnblockTime+0x30>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d104      	bne.n	8003b28 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <prvResetNextTaskUnblockTime+0x34>)
 8003b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b24:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b26:	e005      	b.n	8003b34 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <prvResetNextTaskUnblockTime+0x30>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <prvResetNextTaskUnblockTime+0x34>)
 8003b32:	6013      	str	r3, [r2, #0]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000164 	.word	0x20000164
 8003b44:	200001cc 	.word	0x200001cc

08003b48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <xTaskGetSchedulerState+0x34>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b56:	2301      	movs	r3, #1
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	e008      	b.n	8003b6e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <xTaskGetSchedulerState+0x38>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b64:	2302      	movs	r3, #2
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	e001      	b.n	8003b6e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b6e:	687b      	ldr	r3, [r7, #4]
    }
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	200001b8 	.word	0x200001b8
 8003b80:	200001d4 	.word	0x200001d4

08003b84 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
    }
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003bae:	f000 fe13 	bl	80047d8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3354      	adds	r3, #84	; 0x54
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d022      	beq.n	8003c0a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	3214      	adds	r2, #20
 8003bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	43d2      	mvns	r2, r2
 8003bd4:	4011      	ands	r1, r2
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	3214      	adds	r2, #20
 8003bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	3354      	adds	r3, #84	; 0x54
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	6a38      	ldr	r0, [r7, #32]
 8003bf6:	f000 f9bb 	bl	8003f70 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <xTaskGenericNotifyWait+0x10c>)
 8003bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c0a:	f000 fe15 	bl	8004838 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003c0e:	f000 fde3 	bl	80047d8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	2040      	movs	r0, #64	; 0x40
 8003c20:	f002 ff98 	bl	8006b54 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	3214      	adds	r2, #20
 8003c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	3354      	adds	r3, #84	; 0x54
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d002      	beq.n	8003c52 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e00e      	b.n	8003c70 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	3214      	adds	r2, #20
 8003c5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	43d2      	mvns	r2, r2
 8003c62:	4011      	ands	r1, r2
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	3214      	adds	r2, #20
 8003c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <xTaskGenericNotifyWait+0x108>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	3354      	adds	r3, #84	; 0x54
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003c7e:	f000 fddb 	bl	8004838 <vPortExitCritical>

        return xReturn;
 8003c82:	697b      	ldr	r3, [r7, #20]
    }
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200000d4 	.word	0x200000d4
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b094      	sub	sp, #80	; 0x50
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cde:	f000 fe65 	bl	80049ac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	623a      	str	r2, [r7, #32]
 8003cfc:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003cfe:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d006      	beq.n	8003d16 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	3214      	adds	r2, #20
 8003d0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d14:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3354      	adds	r3, #84	; 0x54
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3354      	adds	r3, #84	; 0x54
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d83b      	bhi.n	8003dae <xTaskGenericNotifyFromISR+0x11a>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <xTaskGenericNotifyFromISR+0xa8>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003dcd 	.word	0x08003dcd
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	08003d85 	.word	0x08003d85
 8003d4c:	08003d93 	.word	0x08003d93
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	3214      	adds	r2, #20
 8003d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	ea42 0103 	orr.w	r1, r2, r3
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	3214      	adds	r2, #20
 8003d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d6a:	e032      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	3214      	adds	r2, #20
 8003d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	3214      	adds	r2, #20
 8003d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d82:	e026      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	3214      	adds	r2, #20
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d90:	e01f      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d006      	beq.n	8003da8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	3214      	adds	r2, #20
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003da6:	e014      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003dac:	e011      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003dae:	4b69      	ldr	r3, [pc, #420]	; (8003f54 <xTaskGenericNotifyFromISR+0x2c0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	61bb      	str	r3, [r7, #24]
    }
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003dd0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fc23 	bl	8007620 <SEGGER_SYSVIEW_ShrinkId>
 8003dda:	78f9      	ldrb	r1, [r7, #3]
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003de0:	9201      	str	r2, [sp, #4]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	460b      	mov	r3, r1
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4601      	mov	r1, r0
 8003dea:	203f      	movs	r0, #63	; 0x3f
 8003dec:	f002 ff44 	bl	8006c78 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003df0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 80a2 	bne.w	8003f3e <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	617b      	str	r3, [r7, #20]
    }
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e18:	4b4f      	ldr	r3, [pc, #316]	; (8003f58 <xTaskGenericNotifyFromISR+0x2c4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d162      	bne.n	8003ee6 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e36:	6892      	ldr	r2, [r2, #8]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	3304      	adds	r3, #4
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d103      	bne.n	8003e4e <xTaskGenericNotifyFromISR+0x1ba>
 8003e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	2200      	movs	r2, #0
 8003e52:	615a      	str	r2, [r3, #20]
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e60:	4618      	mov	r0, r3
 8003e62:	f003 fb9b 	bl	800759c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <xTaskGenericNotifyFromISR+0x2c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	4a39      	ldr	r2, [pc, #228]	; (8003f5c <xTaskGenericNotifyFromISR+0x2c8>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4938      	ldr	r1, [pc, #224]	; (8003f60 <xTaskGenericNotifyFromISR+0x2cc>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3304      	adds	r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea2:	3204      	adds	r2, #4
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ebc:	441a      	add	r2, r3
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	615a      	str	r2, [r3, #20]
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	4926      	ldr	r1, [pc, #152]	; (8003f60 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1c59      	adds	r1, r3, #1
 8003ed6:	4822      	ldr	r0, [pc, #136]	; (8003f60 <xTaskGenericNotifyFromISR+0x2cc>)
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4403      	add	r3, r0
 8003ee2:	6019      	str	r1, [r3, #0]
 8003ee4:	e01b      	b.n	8003f1e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <xTaskGenericNotifyFromISR+0x2d0>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef0:	61da      	str	r2, [r3, #28]
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef8:	621a      	str	r2, [r3, #32]
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f00:	3218      	adds	r2, #24
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	f103 0218 	add.w	r2, r3, #24
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <xTaskGenericNotifyFromISR+0x2d0>)
 8003f1c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <xTaskGenericNotifyFromISR+0x2d4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d908      	bls.n	8003f3e <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <xTaskGenericNotifyFromISR+0x2d8>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f48:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3748      	adds	r7, #72	; 0x48
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200001b0 	.word	0x200001b0
 8003f58:	200001d4 	.word	0x200001d4
 8003f5c:	200001b4 	.word	0x200001b4
 8003f60:	200000d8 	.word	0x200000d8
 8003f64:	2000016c 	.word	0x2000016c
 8003f68:	200000d4 	.word	0x200000d4
 8003f6c:	200001c0 	.word	0x200001c0

08003f70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f80:	4b35      	ldr	r3, [pc, #212]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe faba 	bl	8002500 <uxListRemove>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	2201      	movs	r2, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	; (800405c <prvAddCurrentTaskToDelayedList+0xec>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	; (800405c <prvAddCurrentTaskToDelayedList+0xec>)
 8003fa8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb0:	d124      	bne.n	8003ffc <prvAddCurrentTaskToDelayedList+0x8c>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	4b26      	ldr	r3, [pc, #152]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	3204      	adds	r2, #4
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fec:	615a      	str	r2, [r3, #20]
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ffa:	e026      	b.n	800404a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	429a      	cmp	r2, r3
 8004012:	d209      	bcs.n	8004028 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fe fa34 	bl	800248e <vListInsert>
}
 8004026:	e010      	b.n	800404a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <prvAddCurrentTaskToDelayedList+0xf8>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <prvAddCurrentTaskToDelayedList+0xe8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe fa2a 	bl	800248e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <prvAddCurrentTaskToDelayedList+0xfc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d202      	bcs.n	800404a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6013      	str	r3, [r2, #0]
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200001b0 	.word	0x200001b0
 8004058:	200000d4 	.word	0x200000d4
 800405c:	200001b4 	.word	0x200001b4
 8004060:	20000198 	.word	0x20000198
 8004064:	20000168 	.word	0x20000168
 8004068:	20000164 	.word	0x20000164
 800406c:	200001cc 	.word	0x200001cc

08004070 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800407a:	f000 fa47 	bl	800450c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <xTimerCreateTimerTask+0x54>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <xTimerCreateTimerTask+0x58>)
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	2302      	movs	r3, #2
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004094:	490d      	ldr	r1, [pc, #52]	; (80040cc <xTimerCreateTimerTask+0x5c>)
 8004096:	480e      	ldr	r0, [pc, #56]	; (80040d0 <xTimerCreateTimerTask+0x60>)
 8004098:	f7fe fd8c 	bl	8002bb4 <xTaskCreate>
 800409c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	603b      	str	r3, [r7, #0]
    }
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80040ba:	687b      	ldr	r3, [r7, #4]
    }
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000208 	.word	0x20000208
 80040c8:	2000020c 	.word	0x2000020c
 80040cc:	08007ac0 	.word	0x08007ac0
 80040d0:	08004179 	.word	0x08004179

080040d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80040e0:	e008      	b.n	80040f4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	4413      	add	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	18d1      	adds	r1, r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f8dd 	bl	80042c0 <prvInsertTimerInActiveList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1ea      	bne.n	80040e2 <prvReloadTimer+0xe>
        }
    }
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <prvProcessExpiredTimer+0x5c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3304      	adds	r3, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe f9e5 	bl	8002500 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff ffc3 	bl	80040d4 <prvReloadTimer>
 800414e:	e008      	b.n	8004162 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	4798      	blx	r3
    }
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000200 	.word	0x20000200

08004178 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004180:	f107 0308 	add.w	r3, r7, #8
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f857 	bl	8004238 <prvGetNextExpireTime>
 800418a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4619      	mov	r1, r3
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f803 	bl	800419c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004196:	f000 f8d5 	bl	8004344 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800419a:	e7f1      	b.n	8004180 <prvTimerTask+0x8>

0800419c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041a6:	f7fe ff9d 	bl	80030e4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f866 	bl	8004280 <prvSampleTimeNow>
 80041b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d130      	bne.n	800421e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <prvProcessTimerOrBlockTask+0x3c>
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d806      	bhi.n	80041d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80041ca:	f7fe ff99 	bl	8003100 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ffa1 	bl	8004118 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80041d6:	e024      	b.n	8004222 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <prvProcessTimerOrBlockTask+0x90>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <prvProcessTimerOrBlockTask+0x50>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <prvProcessTimerOrBlockTask+0x52>
 80041ec:	2300      	movs	r3, #0
 80041ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <prvProcessTimerOrBlockTask+0x94>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4619      	mov	r1, r3
 80041fe:	f7fe fca5 	bl	8002b4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004202:	f7fe ff7d 	bl	8003100 <xTaskResumeAll>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <prvProcessTimerOrBlockTask+0x98>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
    }
 800421c:	e001      	b.n	8004222 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800421e:	f7fe ff6f 	bl	8003100 <xTaskResumeAll>
    }
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000204 	.word	0x20000204
 8004230:	20000208 	.word	0x20000208
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004240:	4b0e      	ldr	r3, [pc, #56]	; (800427c <prvGetNextExpireTime+0x44>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <prvGetNextExpireTime+0x16>
 800424a:	2201      	movs	r2, #1
 800424c:	e000      	b.n	8004250 <prvGetNextExpireTime+0x18>
 800424e:	2200      	movs	r2, #0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <prvGetNextExpireTime+0x44>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e001      	b.n	800426c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800426c:	68fb      	ldr	r3, [r7, #12]
    }
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000200 	.word	0x20000200

08004280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004288:	f7ff f83a 	bl	8003300 <xTaskGetTickCount>
 800428c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <prvSampleTimeNow+0x3c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	429a      	cmp	r2, r3
 8004296:	d205      	bcs.n	80042a4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004298:	f000 f912 	bl	80044c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e002      	b.n	80042aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042aa:	4a04      	ldr	r2, [pc, #16]	; (80042bc <prvSampleTimeNow+0x3c>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80042b0:	68fb      	ldr	r3, [r7, #12]
    }
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000210 	.word	0x20000210

080042c0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d812      	bhi.n	800430c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e01b      	b.n	8004332 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <prvInsertTimerInActiveList+0x7c>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f7fe f8c2 	bl	800248e <vListInsert>
 800430a:	e012      	b.n	8004332 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d206      	bcs.n	8004322 <prvInsertTimerInActiveList+0x62>
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e007      	b.n	8004332 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <prvInsertTimerInActiveList+0x80>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7fe f8ae 	bl	800248e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004332:	697b      	ldr	r3, [r7, #20]
    }
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000204 	.word	0x20000204
 8004340:	20000200 	.word	0x20000200

08004344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800434a:	e0a6      	b.n	800449a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f2c0 80a3 	blt.w	800449a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe f8cb 	bl	8002500 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff87 	bl	8004280 <prvSampleTimeNow>
 8004372:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b08      	cmp	r3, #8
 800437a:	f200 808d 	bhi.w	8004498 <prvProcessReceivedCommands+0x154>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <prvProcessReceivedCommands+0x40>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043a9 	.word	0x080043a9
 800438c:	08004411 	.word	0x08004411
 8004390:	08004425 	.word	0x08004425
 8004394:	0800446f 	.word	0x0800446f
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043a9 	.word	0x080043a9
 80043a0:	08004411 	.word	0x08004411
 80043a4:	08004425 	.word	0x08004425
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	18d1      	adds	r1, r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	69f8      	ldr	r0, [r7, #28]
 80043c8:	f7ff ff7a 	bl	80042c0 <prvInsertTimerInActiveList>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	4413      	add	r3, r2
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4619      	mov	r1, r3
 80043ec:	69f8      	ldr	r0, [r7, #28]
 80043ee:	f7ff fe71 	bl	80040d4 <prvReloadTimer>
 80043f2:	e008      	b.n	8004406 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	69f8      	ldr	r0, [r7, #28]
 800440c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800440e:	e044      	b.n	800449a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004422:	e03a      	b.n	800449a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	617b      	str	r3, [r7, #20]
    }
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	18d1      	adds	r1, r2, r3
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	69f8      	ldr	r0, [r7, #28]
 8004468:	f7ff ff2a 	bl	80042c0 <prvInsertTimerInActiveList>
                        break;
 800446c:	e015      	b.n	800449a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800447c:	69f8      	ldr	r0, [r7, #28]
 800447e:	f000 fb8f 	bl	8004ba0 <vPortFree>
 8004482:	e00a      	b.n	800449a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004496:	e000      	b.n	800449a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004498:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <prvProcessReceivedCommands+0x178>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f107 0108 	add.w	r1, r7, #8
 80044a2:	2200      	movs	r2, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe f95d 	bl	8002764 <xQueueReceive>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f47f af4d 	bne.w	800434c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000208 	.word	0x20000208

080044c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044c6:	e009      	b.n	80044dc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <prvSwitchTimerLists+0x44>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80044d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f7ff fe1e 	bl	8004118 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <prvSwitchTimerLists+0x44>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <prvSwitchTimerLists+0x44>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <prvSwitchTimerLists+0x48>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <prvSwitchTimerLists+0x44>)
 80044f2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <prvSwitchTimerLists+0x48>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
    }
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000200 	.word	0x20000200
 8004508:	20000204 	.word	0x20000204

0800450c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004510:	f000 f962 	bl	80047d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004514:	4b12      	ldr	r3, [pc, #72]	; (8004560 <prvCheckForValidListAndQueue+0x54>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11d      	bne.n	8004558 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800451c:	4811      	ldr	r0, [pc, #68]	; (8004564 <prvCheckForValidListAndQueue+0x58>)
 800451e:	f7fd ff65 	bl	80023ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004522:	4811      	ldr	r0, [pc, #68]	; (8004568 <prvCheckForValidListAndQueue+0x5c>)
 8004524:	f7fd ff62 	bl	80023ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <prvCheckForValidListAndQueue+0x58>)
 800452c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <prvCheckForValidListAndQueue+0x64>)
 8004530:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <prvCheckForValidListAndQueue+0x5c>)
 8004532:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004534:	2200      	movs	r2, #0
 8004536:	210c      	movs	r1, #12
 8004538:	200a      	movs	r0, #10
 800453a:	f7fe f89b 	bl	8002674 <xQueueGenericCreate>
 800453e:	4603      	mov	r3, r0
 8004540:	4a07      	ldr	r2, [pc, #28]	; (8004560 <prvCheckForValidListAndQueue+0x54>)
 8004542:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <prvCheckForValidListAndQueue+0x54>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <prvCheckForValidListAndQueue+0x54>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4908      	ldr	r1, [pc, #32]	; (8004574 <prvCheckForValidListAndQueue+0x68>)
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe faa4 	bl	8002aa0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004558:	f000 f96e 	bl	8004838 <vPortExitCritical>
    }
 800455c:	bf00      	nop
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000208 	.word	0x20000208
 8004564:	200001d8 	.word	0x200001d8
 8004568:	200001ec 	.word	0x200001ec
 800456c:	20000200 	.word	0x20000200
 8004570:	20000204 	.word	0x20000204
 8004574:	08007ac8 	.word	0x08007ac8

08004578 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3b04      	subs	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004590:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b04      	subs	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b04      	subs	r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045a8:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <pxPortInitialiseStack+0x64>)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b14      	subs	r3, #20
 80045b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b04      	subs	r3, #4
 80045be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f06f 0202 	mvn.w	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b20      	subs	r3, #32
 80045cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	080045e1 	.word	0x080045e1

080045e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <prvTaskExitError+0x54>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f2:	d00a      	beq.n	800460a <prvTaskExitError+0x2a>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <prvTaskExitError+0x28>
        __asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
    }
 800461c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800461e:	bf00      	nop
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0fc      	beq.n	8004620 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20000010 	.word	0x20000010
	...

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	4770      	bx	lr
 800465c:	f3af 8000 	nop.w

08004660 <pxCurrentTCBConst2>:
 8004660:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004668:	4808      	ldr	r0, [pc, #32]	; (800468c <prvPortStartFirstTask+0x24>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8814 	msr	CONTROL, r0
 800467a:	b662      	cpsie	i
 800467c:	b661      	cpsie	f
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	df00      	svc	0
 8004688:	bf00      	nop
 800468a:	0000      	.short	0x0000
 800468c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop

08004694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800469a:	4b46      	ldr	r3, [pc, #280]	; (80047b4 <xPortStartScheduler+0x120>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a46      	ldr	r2, [pc, #280]	; (80047b8 <xPortStartScheduler+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10a      	bne.n	80046ba <xPortStartScheduler+0x26>
        __asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	613b      	str	r3, [r7, #16]
    }
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <xPortStartScheduler+0x120>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <xPortStartScheduler+0x128>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10a      	bne.n	80046da <xPortStartScheduler+0x46>
        __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
    }
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046da:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <xPortStartScheduler+0x12c>)
 80046dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <xPortStartScheduler+0x130>)
 8004700:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004702:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <xPortStartScheduler+0x134>)
 8004704:	2207      	movs	r2, #7
 8004706:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004708:	e009      	b.n	800471e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <xPortStartScheduler+0x134>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	4a2d      	ldr	r2, [pc, #180]	; (80047c8 <xPortStartScheduler+0x134>)
 8004712:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d0ef      	beq.n	800470a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <xPortStartScheduler+0x134>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1c3 0307 	rsb	r3, r3, #7
 8004732:	2b04      	cmp	r3, #4
 8004734:	d00a      	beq.n	800474c <xPortStartScheduler+0xb8>
        __asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60bb      	str	r3, [r7, #8]
    }
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <xPortStartScheduler+0x134>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <xPortStartScheduler+0x134>)
 8004754:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <xPortStartScheduler+0x134>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475e:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <xPortStartScheduler+0x134>)
 8004760:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <xPortStartScheduler+0x138>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <xPortStartScheduler+0x138>)
 8004770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004774:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <xPortStartScheduler+0x138>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <xPortStartScheduler+0x138>)
 800477c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004782:	f000 f8e3 	bl	800494c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <xPortStartScheduler+0x13c>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800478c:	f000 f902 	bl	8004994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004790:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <xPortStartScheduler+0x140>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <xPortStartScheduler+0x140>)
 8004796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800479a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800479c:	f7ff ff64 	bl	8004668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80047a0:	f7fe feea 	bl	8003578 <vTaskSwitchContext>
    prvTaskExitError();
 80047a4:	f7ff ff1c 	bl	80045e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	410fc271 	.word	0x410fc271
 80047bc:	410fc270 	.word	0x410fc270
 80047c0:	e000e400 	.word	0xe000e400
 80047c4:	20000214 	.word	0x20000214
 80047c8:	20000218 	.word	0x20000218
 80047cc:	e000ed20 	.word	0xe000ed20
 80047d0:	20000010 	.word	0x20000010
 80047d4:	e000ef34 	.word	0xe000ef34

080047d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
        __asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
    }
 80047f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047f2:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <vPortEnterCritical+0x58>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	4a0d      	ldr	r2, [pc, #52]	; (8004830 <vPortEnterCritical+0x58>)
 80047fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <vPortEnterCritical+0x58>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10f      	bne.n	8004824 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <vPortEnterCritical+0x5c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <vPortEnterCritical+0x4c>
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	603b      	str	r3, [r7, #0]
    }
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <vPortEnterCritical+0x4a>
    }
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20000010 	.word	0x20000010
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <vPortExitCritical+0x50>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <vPortExitCritical+0x24>
        __asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	607b      	str	r3, [r7, #4]
    }
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vPortExitCritical+0x50>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vPortExitCritical+0x50>)
 8004864:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <vPortExitCritical+0x50>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <vPortExitCritical+0x42>
 800486e:	2300      	movs	r3, #0
 8004870:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f383 8811 	msr	BASEPRI, r3
    }
 8004878:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000010 	.word	0x20000010
 800488c:	00000000 	.word	0x00000000

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048b4:	f380 8811 	msr	BASEPRI, r0
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f7fe fe5a 	bl	8003578 <vTaskSwitchContext>
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	bc09      	pop	{r0, r3}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d6:	f01e 0f10 	tst.w	lr, #16
 80048da:	bf08      	it	eq
 80048dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e0:	f380 8809 	msr	PSP, r0
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst>:
 80048f0:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
        __asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
    }
 8004910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004912:	f002 fd29 	bl	8007368 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004916:	f7fe fd15 	bl	8003344 <xTaskIncrementTick>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004920:	f002 fd80 	bl	8007424 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <SysTick_Handler+0x50>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e001      	b.n	8004932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800492e:	f002 fd5d 	bl	80073ec <SEGGER_SYSVIEW_RecordExitISR>
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f383 8811 	msr	BASEPRI, r3
    }
 800493c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
 80049a2:	0000      	.short	0x0000
 80049a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop

080049ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049b2:	f3ef 8305 	mrs	r3, IPSR
 80049b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d914      	bls.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <vPortValidateInterruptPriority+0x70>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <vPortValidateInterruptPriority+0x74>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	7afa      	ldrb	r2, [r7, #11]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d20a      	bcs.n	80049e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
    }
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <vPortValidateInterruptPriority+0x78>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <vPortValidateInterruptPriority+0x7c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d90a      	bls.n	8004a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	603b      	str	r3, [r7, #0]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vPortValidateInterruptPriority+0x60>
    }
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e3f0 	.word	0xe000e3f0
 8004a20:	20000214 	.word	0x20000214
 8004a24:	e000ed0c 	.word	0xe000ed0c
 8004a28:	20000218 	.word	0x20000218

08004a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004a38:	f7fe fb54 	bl	80030e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <pvPortMalloc+0x160>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a44:	f000 f908 	bl	8004c58 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a4e:	2208      	movs	r2, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	3308      	adds	r3, #8
 8004a5a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d804      	bhi.n	8004a70 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e001      	b.n	8004a74 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db70      	blt.n	8004b5c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d06d      	beq.n	8004b5c <pvPortMalloc+0x130>
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <pvPortMalloc+0x164>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d868      	bhi.n	8004b5c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a8a:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <pvPortMalloc+0x168>)
 8004a8c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <pvPortMalloc+0x168>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a94:	e004      	b.n	8004aa0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d903      	bls.n	8004ab2 <pvPortMalloc+0x86>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f1      	bne.n	8004a96 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <pvPortMalloc+0x160>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d04f      	beq.n	8004b5c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d91f      	bls.n	8004b1e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <pvPortMalloc+0xda>
        __asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
    }
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f000 f8f9 	bl	8004d10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <pvPortMalloc+0x164>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <pvPortMalloc+0x164>)
 8004b2a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <pvPortMalloc+0x164>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <pvPortMalloc+0x16c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d203      	bcs.n	8004b40 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b38:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <pvPortMalloc+0x164>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <pvPortMalloc+0x16c>)
 8004b3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <pvPortMalloc+0x170>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <pvPortMalloc+0x170>)
 8004b5a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b5c:	f7fe fad0 	bl	8003100 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <pvPortMalloc+0x154>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60fb      	str	r3, [r7, #12]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <pvPortMalloc+0x152>
    return pvReturn;
 8004b80:	69fb      	ldr	r3, [r7, #28]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3728      	adds	r7, #40	; 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20012e24 	.word	0x20012e24
 8004b90:	20012e28 	.word	0x20012e28
 8004b94:	20012e1c 	.word	0x20012e1c
 8004b98:	20012e2c 	.word	0x20012e2c
 8004b9c:	20012e30 	.word	0x20012e30

08004ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d049      	beq.n	8004c46 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	db0a      	blt.n	8004bde <vPortFree+0x3e>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
    }
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <vPortFree+0x5c>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
    }
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0fdb      	lsrs	r3, r3, #31
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01c      	beq.n	8004c46 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d118      	bne.n	8004c46 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004c20:	f7fe fa60 	bl	80030e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <vPortFree+0xb0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <vPortFree+0xb0>)
 8004c30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c32:	6938      	ldr	r0, [r7, #16]
 8004c34:	f000 f86c 	bl	8004d10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <vPortFree+0xb4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <vPortFree+0xb4>)
 8004c40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c42:	f7fe fa5d 	bl	8003100 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c46:	bf00      	nop
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20012e28 	.word	0x20012e28
 8004c54:	20012e34 	.word	0x20012e34

08004c58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c5e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <prvHeapInit+0xa4>)
 8004c66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3307      	adds	r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <prvHeapInit+0xa4>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <prvHeapInit+0xa8>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <prvHeapInit+0xa8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <prvHeapInit+0xac>)
 8004cb8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <prvHeapInit+0xac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <prvHeapInit+0xac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvHeapInit+0xac>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <prvHeapInit+0xb0>)
 8004ce6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <prvHeapInit+0xb4>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	2000021c 	.word	0x2000021c
 8004d00:	20012e1c 	.word	0x20012e1c
 8004d04:	20012e24 	.word	0x20012e24
 8004d08:	20012e2c 	.word	0x20012e2c
 8004d0c:	20012e28 	.word	0x20012e28

08004d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <prvInsertBlockIntoFreeList+0xac>)
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e002      	b.n	8004d24 <prvInsertBlockIntoFreeList+0x14>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d8f7      	bhi.n	8004d1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4413      	add	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d108      	bne.n	8004d52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d118      	bne.n	8004d98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d00d      	beq.n	8004d8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e008      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e003      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d002      	beq.n	8004dae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20012e1c 	.word	0x20012e1c
 8004dc0:	20012e24 	.word	0x20012e24

08004dc4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004dc8:	4803      	ldr	r0, [pc, #12]	; (8004dd8 <_cbSendSystemDesc+0x14>)
 8004dca:	f002 fa77 	bl	80072bc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dce:	4803      	ldr	r0, [pc, #12]	; (8004ddc <_cbSendSystemDesc+0x18>)
 8004dd0:	f002 fa74 	bl	80072bc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	08007ad0 	.word	0x08007ad0
 8004ddc:	08007b14 	.word	0x08007b14

08004de0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dee:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <SEGGER_SYSVIEW_Conf+0x28>)
 8004df0:	f001 fd32 	bl	8006858 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004df4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004df8:	f001 fd72 	bl	80068e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dfc:	bf00      	nop
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000000 	.word	0x20000000
 8004e04:	08004dc5 	.word	0x08004dc5
 8004e08:	08007bb0 	.word	0x08007bb0

08004e0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	e033      	b.n	8004e80 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e18:	491e      	ldr	r1, [pc, #120]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	491a      	ldr	r1, [pc, #104]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3304      	adds	r3, #4
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	4c16      	ldr	r4, [pc, #88]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4423      	add	r3, r4
 8004e48:	3308      	adds	r3, #8
 8004e4a:	681c      	ldr	r4, [r3, #0]
 8004e4c:	4d11      	ldr	r5, [pc, #68]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	442b      	add	r3, r5
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	681d      	ldr	r5, [r3, #0]
 8004e5e:	4e0d      	ldr	r6, [pc, #52]	; (8004e94 <_cbSendTaskList+0x88>)
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4433      	add	r3, r6
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462b      	mov	r3, r5
 8004e74:	4622      	mov	r2, r4
 8004e76:	f000 f979 	bl	800516c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <_cbSendTaskList+0x8c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3c6      	bcc.n	8004e18 <_cbSendTaskList+0xc>
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e94:	20012e38 	.word	0x20012e38
 8004e98:	20012ed8 	.word	0x20012ed8

08004e9c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ea4:	f7fe fa3c 	bl	8003320 <xTaskGetTickCountFromISR>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2200      	movs	r2, #0
 8004eac:	469a      	mov	sl, r3
 8004eae:	4693      	mov	fp, r2
 8004eb0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	f04f 0a00 	mov.w	sl, #0
 8004ec0:	f04f 0b00 	mov.w	fp, #0
 8004ec4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ec8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ecc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	1a14      	subs	r4, r2, r0
 8004ed6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	00ab      	lsls	r3, r5, #2
 8004ee4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ee8:	00a2      	lsls	r2, r4, #2
 8004eea:	4614      	mov	r4, r2
 8004eec:	461d      	mov	r5, r3
 8004eee:	eb14 0800 	adds.w	r8, r4, r0
 8004ef2:	eb45 0901 	adc.w	r9, r5, r1
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f12:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f32:	2205      	movs	r2, #5
 8004f34:	492b      	ldr	r1, [pc, #172]	; (8004fe4 <SYSVIEW_AddTask+0xc0>)
 8004f36:	68b8      	ldr	r0, [r7, #8]
 8004f38:	f002 fd06 	bl	8007948 <memcmp>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04b      	beq.n	8004fda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f42:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	d903      	bls.n	8004f52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f4a:	4828      	ldr	r0, [pc, #160]	; (8004fec <SYSVIEW_AddTask+0xc8>)
 8004f4c:	f002 fc72 	bl	8007834 <SEGGER_SYSVIEW_Warn>
    return;
 8004f50:	e044      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f52:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4926      	ldr	r1, [pc, #152]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4921      	ldr	r1, [pc, #132]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3304      	adds	r3, #4
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3310      	adds	r3, #16
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f8ca 	bl	800516c <SYSVIEW_SendTaskInfo>
 8004fd8:	e000      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
    return;
 8004fda:	bf00      	nop

}
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08007b24 	.word	0x08007b24
 8004fe8:	20012ed8 	.word	0x20012ed8
 8004fec:	08007b2c 	.word	0x08007b2c
 8004ff0:	20012e38 	.word	0x20012e38

08004ff4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004ffc:	4b59      	ldr	r3, [pc, #356]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80ab 	beq.w	800515c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e00d      	b.n	8005028 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800500c:	4956      	ldr	r1, [pc, #344]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d008      	beq.n	8005034 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	429a      	cmp	r2, r3
 8005030:	d3ec      	bcc.n	800500c <SYSVIEW_DeleteTask+0x18>
 8005032:	e000      	b.n	8005036 <SYSVIEW_DeleteTask+0x42>
      break;
 8005034:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005036:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	429a      	cmp	r2, r3
 8005040:	d111      	bne.n	8005066 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4a46      	ldr	r2, [pc, #280]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 800504e:	4413      	add	r3, r2
 8005050:	2214      	movs	r2, #20
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f002 fc87 	bl	8007968 <memset>
    _NumTasks--;
 800505a:	4b42      	ldr	r3, [pc, #264]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	4a40      	ldr	r2, [pc, #256]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e07b      	b.n	800515e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d276      	bcs.n	800515e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005070:	4b3c      	ldr	r3, [pc, #240]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	493c      	ldr	r1, [pc, #240]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	4838      	ldr	r0, [pc, #224]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005094:	4b33      	ldr	r3, [pc, #204]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	4933      	ldr	r1, [pc, #204]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3304      	adds	r3, #4
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	482f      	ldr	r0, [pc, #188]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	3304      	adds	r3, #4
 80050ba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	4929      	ldr	r1, [pc, #164]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3308      	adds	r3, #8
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	4825      	ldr	r0, [pc, #148]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4403      	add	r3, r0
 80050e0:	3308      	adds	r3, #8
 80050e2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	491f      	ldr	r1, [pc, #124]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	330c      	adds	r3, #12
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	481b      	ldr	r0, [pc, #108]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4403      	add	r3, r0
 8005108:	330c      	adds	r3, #12
 800510a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800510c:	4b15      	ldr	r3, [pc, #84]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	4915      	ldr	r1, [pc, #84]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3310      	adds	r3, #16
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	4811      	ldr	r0, [pc, #68]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	3310      	adds	r3, #16
 8005132:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005144:	4413      	add	r3, r2
 8005146:	2214      	movs	r2, #20
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f002 fc0c 	bl	8007968 <memset>
    _NumTasks--;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3b01      	subs	r3, #1
 8005156:	4a03      	ldr	r2, [pc, #12]	; (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e000      	b.n	800515e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800515c:	bf00      	nop
  }
}
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20012ed8 	.word	0x20012ed8
 8005168:	20012e38 	.word	0x20012e38

0800516c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	2214      	movs	r2, #20
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f002 fbf0 	bl	8007968 <memset>
  TaskInfo.TaskID     = TaskID;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 ff93 	bl	80070cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051a6:	bf00      	nop
 80051a8:	3728      	adds	r7, #40	; 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <__NVIC_EnableIRQ>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db0b      	blt.n	80051da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	f003 021f 	and.w	r2, r3, #31
 80051c8:	4907      	ldr	r1, [pc, #28]	; (80051e8 <__NVIC_EnableIRQ+0x38>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2001      	movs	r0, #1
 80051d2:	fa00 f202 	lsl.w	r2, r0, r2
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	e000e100 	.word	0xe000e100

080051ec <__NVIC_SetPriority>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db0a      	blt.n	8005216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	490c      	ldr	r1, [pc, #48]	; (8005238 <__NVIC_SetPriority+0x4c>)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	440b      	add	r3, r1
 8005210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005214:	e00a      	b.n	800522c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4908      	ldr	r1, [pc, #32]	; (800523c <__NVIC_SetPriority+0x50>)
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	3b04      	subs	r3, #4
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	440b      	add	r3, r1
 800522a:	761a      	strb	r2, [r3, #24]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000e100 	.word	0xe000e100
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005246:	f002 fb51 	bl	80078ec <SEGGER_SYSVIEW_IsStarted>
 800524a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005252:	f001 fdbf 	bl	8006dd4 <SEGGER_SYSVIEW_Start>
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <_cbOnUARTRx+0x3c>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d806      	bhi.n	8005280 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <_cbOnUARTRx+0x3c>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	3301      	adds	r3, #1
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <_cbOnUARTRx+0x3c>)
 800527c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800527e:	e009      	b.n	8005294 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005280:	f7ff ffde 	bl	8005240 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <_cbOnUARTRx+0x3c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	1dfb      	adds	r3, r7, #7
 800528c:	2201      	movs	r2, #1
 800528e:	4619      	mov	r1, r3
 8005290:	f000 fb9c 	bl	80059cc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005294:	bf00      	nop
}
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000014 	.word	0x20000014

080052a0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d80f      	bhi.n	80052d0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <_cbOnUARTTx+0x60>)
 80052b8:	5c9a      	ldrb	r2, [r3, r2]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052c8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
    goto Done;
 80052ce:	e00f      	b.n	80052f0 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <_cbOnUARTTx+0x5c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fa1b 	bl	8005714 <SEGGER_RTT_ReadUpBufferNoLock>
 80052de:	4603      	mov	r3, r0
 80052e0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da02      	bge.n	80052ee <_cbOnUARTTx+0x4e>
    r = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e000      	b.n	80052f0 <_cbOnUARTTx+0x50>
  }
Done:
 80052ee:	bf00      	nop
  return r;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000014 	.word	0x20000014
 8005300:	08007bb8 	.word	0x08007bb8

08005304 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <SEGGER_UART_init+0x1c>)
 800530e:	4905      	ldr	r1, [pc, #20]	; (8005324 <SEGGER_UART_init+0x20>)
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f863 	bl	80053dc <HIF_UART_Init>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08005261 	.word	0x08005261
 8005324:	080052a1 	.word	0x080052a1

08005328 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800532e:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <USART2_IRQHandler+0x80>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d011      	beq.n	8005362 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <USART2_IRQHandler+0x84>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 030b 	and.w	r3, r3, #11
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005350:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <USART2_IRQHandler+0x88>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <USART2_IRQHandler+0x88>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	4610      	mov	r0, r2
 8005360:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01a      	beq.n	80053a2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <USART2_IRQHandler+0x8c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <USART2_IRQHandler+0x8c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1dfa      	adds	r2, r7, #7
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
 800537e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <USART2_IRQHandler+0x90>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a0b      	ldr	r2, [pc, #44]	; (80053b8 <USART2_IRQHandler+0x90>)
 800538c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e006      	b.n	80053a2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <USART2_IRQHandler+0x80>)
 8005396:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005398:	79fa      	ldrb	r2, [r7, #7]
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <USART2_IRQHandler+0x84>)
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e000      	b.n	80053a2 <USART2_IRQHandler+0x7a>
      return;
 80053a0:	bf00      	nop
    }
  }
}
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40004404 	.word	0x40004404
 80053b0:	20012edc 	.word	0x20012edc
 80053b4:	20012ee0 	.word	0x20012ee0
 80053b8:	4000440c 	.word	0x4000440c

080053bc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	4000440c 	.word	0x4000440c

080053dc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80053e8:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <HIF_UART_Init+0xc8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <HIF_UART_Init+0xc8>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HIF_UART_Init+0xcc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <HIF_UART_Init+0xcc>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HIF_UART_Init+0xd0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005414:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005416:	4a25      	ldr	r2, [pc, #148]	; (80054ac <HIF_UART_Init+0xd0>)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HIF_UART_Init+0xd4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005428:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HIF_UART_Init+0xd4>)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005438:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <HIF_UART_Init+0xd8>)
 800543a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800543e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HIF_UART_Init+0xdc>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HIF_UART_Init+0xe0>)
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HIF_UART_Init+0xe4>)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	3301      	adds	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d302      	bcc.n	8005472 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800546c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005470:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <HIF_UART_Init+0xe8>)
 800547e:	b29b      	uxth	r3, r3
 8005480:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005482:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <HIF_UART_Init+0xec>)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005488:	4a10      	ldr	r2, [pc, #64]	; (80054cc <HIF_UART_Init+0xf0>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800548e:	2106      	movs	r1, #6
 8005490:	2026      	movs	r0, #38	; 0x26
 8005492:	f7ff feab 	bl	80051ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005496:	2026      	movs	r0, #38	; 0x26
 8005498:	f7ff fe8a 	bl	80051b0 <__NVIC_EnableIRQ>
}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023840 	.word	0x40023840
 80054a8:	40023830 	.word	0x40023830
 80054ac:	40020020 	.word	0x40020020
 80054b0:	40020000 	.word	0x40020000
 80054b4:	4000440c 	.word	0x4000440c
 80054b8:	40004410 	.word	0x40004410
 80054bc:	40004414 	.word	0x40004414
 80054c0:	0501bd00 	.word	0x0501bd00
 80054c4:	40004408 	.word	0x40004408
 80054c8:	20012edc 	.word	0x20012edc
 80054cc:	20012ee0 	.word	0x20012ee0

080054d0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054d6:	4b26      	ldr	r3, [pc, #152]	; (8005570 <_DoInit+0xa0>)
 80054d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80054da:	22a8      	movs	r2, #168	; 0xa8
 80054dc:	2100      	movs	r1, #0
 80054de:	6838      	ldr	r0, [r7, #0]
 80054e0:	f002 fa42 	bl	8007968 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2203      	movs	r2, #3
 80054e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2203      	movs	r2, #3
 80054ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4a20      	ldr	r2, [pc, #128]	; (8005574 <_DoInit+0xa4>)
 80054f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <_DoInit+0xa8>)
 80054fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005502:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4a16      	ldr	r2, [pc, #88]	; (8005574 <_DoInit+0xa4>)
 800551a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <_DoInit+0xac>)
 8005520:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800553a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e00c      	b.n	800555e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1c3 030f 	rsb	r3, r3, #15
 800554a:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <_DoInit+0xb0>)
 800554c:	5cd1      	ldrb	r1, [r2, r3]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	460a      	mov	r2, r1
 8005556:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d9ef      	bls.n	8005544 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005564:	f3bf 8f5f 	dmb	sy
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20012ee4 	.word	0x20012ee4
 8005574:	08007b7c 	.word	0x08007b7c
 8005578:	20012f8c 	.word	0x20012f8c
 800557c:	2001338c 	.word	0x2001338c
 8005580:	08007bbc 	.word	0x08007bbc

08005584 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005590:	2300      	movs	r3, #0
 8005592:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d905      	bls.n	80055b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	e007      	b.n	80055c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	69b9      	ldr	r1, [r7, #24]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	3b01      	subs	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bf28      	it	cs
 80055d2:	4613      	movcs	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4293      	cmp	r3, r2
 80055dc:	bf28      	it	cs
 80055de:	4613      	movcs	r3, r2
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80055ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	6978      	ldr	r0, [r7, #20]
 80055f2:	f002 f9e5 	bl	80079c0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	4413      	add	r3, r2
 80055fc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	4413      	add	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	4413      	add	r3, r2
 8005614:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	429a      	cmp	r2, r3
 800561e:	d101      	bne.n	8005624 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005624:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1b2      	bne.n	800559a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005634:	6a3b      	ldr	r3, [r7, #32]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d911      	bls.n	8005686 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f002 f9a5 	bl	80079c0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005676:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	441a      	add	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005684:	e01f      	b.n	80056c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	6938      	ldr	r0, [r7, #16]
 800569a:	f002 f991 	bl	80079c0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f002 f982 	bl	80079c0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	60da      	str	r2, [r3, #12]
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d808      	bhi.n	80056fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	3b01      	subs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e004      	b.n	8005706 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005706:	697b      	ldr	r3, [r7, #20]
}
 8005708:	4618      	mov	r0, r3
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08c      	sub	sp, #48	; 0x30
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b53      	cmp	r3, #83	; 0x53
 800572c:	d001      	beq.n	8005732 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800572e:	f7ff fecf 	bl	80054d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4a37      	ldr	r2, [pc, #220]	; (800581c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005740:	4413      	add	r3, r2
 8005742:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	429a      	cmp	r2, r3
 800575e:	d92b      	bls.n	80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4293      	cmp	r3, r2
 8005770:	bf28      	it	cs
 8005772:	4613      	movcs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	4413      	add	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005786:	f002 f91b 	bl	80079c0 <memcpy>
    NumBytesRead += NumBytesRem;
 800578a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d101      	bne.n	80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80057b4:	2300      	movs	r3, #0
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bf28      	it	cs
 80057c8:	4613      	movcs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d019      	beq.n	8005806 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	4413      	add	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e2:	f002 f8ed 	bl	80079c0 <memcpy>
    NumBytesRead += NumBytesRem;
 80057e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005810:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20012ee4 	.word	0x20012ee4

08005820 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800582c:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <SEGGER_RTT_ReadNoLock+0x108>)
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b53      	cmp	r3, #83	; 0x53
 8005838:	d001      	beq.n	800583e <SEGGER_RTT_ReadNoLock+0x1e>
 800583a:	f7ff fe49 	bl	80054d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	3360      	adds	r3, #96	; 0x60
 800584a:	4a37      	ldr	r2, [pc, #220]	; (8005928 <SEGGER_RTT_ReadNoLock+0x108>)
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005860:	2300      	movs	r3, #0
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d92b      	bls.n	80058c4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4293      	cmp	r3, r2
 800587c:	bf28      	it	cs
 800587e:	4613      	movcs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	4413      	add	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005892:	f002 f895 	bl	80079c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058bc:	429a      	cmp	r2, r3
 80058be:	d101      	bne.n	80058c4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf28      	it	cs
 80058d4:	4613      	movcs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d019      	beq.n	8005912 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	4413      	add	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ee:	f002 f867 	bl	80079c0 <memcpy>
    NumBytesRead += NumBytesRem;
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800590a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005920:	4618      	mov	r0, r3
 8005922:	3730      	adds	r7, #48	; 0x30
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20012ee4 	.word	0x20012ee4

0800592c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	3360      	adds	r3, #96	; 0x60
 8005948:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800594a:	4413      	add	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d029      	beq.n	80059aa <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005956:	2b02      	cmp	r3, #2
 8005958:	d82e      	bhi.n	80059b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d013      	beq.n	800598a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005962:	e029      	b.n	80059b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005964:	6978      	ldr	r0, [r7, #20]
 8005966:	f7ff feb2 	bl	80056ce <_GetAvailWriteSpace>
 800596a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d202      	bcs.n	800597a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005978:	e021      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff fe5b 	bl	800563e <_WriteNoCheck>
    break;
 8005988:	e019      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff fe9f 	bl	80056ce <_GetAvailWriteSpace>
 8005990:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4293      	cmp	r3, r2
 8005998:	bf28      	it	cs
 800599a:	4613      	movcs	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	69b9      	ldr	r1, [r7, #24]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff fe4b 	bl	800563e <_WriteNoCheck>
    break;
 80059a8:	e009      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff fde8 	bl	8005584 <_WriteBlocking>
 80059b4:	61f8      	str	r0, [r7, #28]
    break;
 80059b6:	e002      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
    break;
 80059bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059be:	69fb      	ldr	r3, [r7, #28]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20012ee4 	.word	0x20012ee4

080059cc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b53      	cmp	r3, #83	; 0x53
 80059e4:	d001      	beq.n	80059ea <SEGGER_RTT_WriteDownBuffer+0x1e>
 80059e6:	f7ff fd73 	bl	80054d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff95 	bl	800592c <SEGGER_RTT_WriteDownBufferNoLock>
 8005a02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a0a:	697b      	ldr	r3, [r7, #20]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20012ee4 	.word	0x20012ee4

08005a18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a26:	4b3d      	ldr	r3, [pc, #244]	; (8005b1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b53      	cmp	r3, #83	; 0x53
 8005a32:	d001      	beq.n	8005a38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a34:	f7ff fd4c 	bl	80054d0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a38:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3c:	f04f 0120 	mov.w	r1, #32
 8005a40:	f381 8811 	msr	BASEPRI, r1
 8005a44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a46:	4b35      	ldr	r3, [pc, #212]	; (8005b1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a4e:	6939      	ldr	r1, [r7, #16]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	dbeb      	blt.n	8005a4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a76:	e000      	b.n	8005a7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	da3f      	bge.n	8005b04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a84:	6939      	ldr	r1, [r7, #16]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a98:	6939      	ldr	r1, [r7, #16]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005aae:	6939      	ldr	r1, [r7, #16]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	3320      	adds	r3, #32
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ac2:	6939      	ldr	r1, [r7, #16]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3328      	adds	r3, #40	; 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3324      	adds	r3, #36	; 0x24
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	332c      	adds	r3, #44	; 0x2c
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005afe:	f3bf 8f5f 	dmb	sy
 8005b02:	e002      	b.n	8005b0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b10:	69fb      	ldr	r3, [r7, #28]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20012ee4 	.word	0x20012ee4

08005b20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005b2e:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b53      	cmp	r3, #83	; 0x53
 8005b3a:	d001      	beq.n	8005b40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b3c:	f7ff fcc8 	bl	80054d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b42:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d82c      	bhi.n	8005ba4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4e:	f04f 0120 	mov.w	r1, #32
 8005b52:	f381 8811 	msr	BASEPRI, r1
 8005b56:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	3360      	adds	r3, #96	; 0x60
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba2:	e002      	b.n	8005baa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	; 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20012ee4 	.word	0x20012ee4

08005bb8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	60fa      	str	r2, [r7, #12]
 8005bce:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d90a      	bls.n	8005bec <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005bda:	e007      	b.n	8005bec <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	1c53      	adds	r3, r2, #1
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	60f9      	str	r1, [r7, #12]
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	1e5a      	subs	r2, r3, #1
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <_EncodeStr+0x46>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ee      	bne.n	8005bdc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3307      	adds	r3, #7
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c36:	4b34      	ldr	r3, [pc, #208]	; (8005d08 <_HandleIncomingPacket+0xd8>)
 8005c38:	7e1b      	ldrb	r3, [r3, #24]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	1cfb      	adds	r3, r7, #3
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4619      	mov	r1, r3
 8005c42:	f7ff fded 	bl	8005820 <SEGGER_RTT_ReadNoLock>
 8005c46:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d057      	beq.n	8005cfe <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d031      	beq.n	8005cb8 <_HandleIncomingPacket+0x88>
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	dc40      	bgt.n	8005cda <_HandleIncomingPacket+0xaa>
 8005c58:	2b07      	cmp	r3, #7
 8005c5a:	dc15      	bgt.n	8005c88 <_HandleIncomingPacket+0x58>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dd3c      	ble.n	8005cda <_HandleIncomingPacket+0xaa>
 8005c60:	3b01      	subs	r3, #1
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d839      	bhi.n	8005cda <_HandleIncomingPacket+0xaa>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <_HandleIncomingPacket+0x3c>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c8f 	.word	0x08005c8f
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005c9b 	.word	0x08005c9b
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005ca7 	.word	0x08005ca7
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8a:	d033      	beq.n	8005cf4 <_HandleIncomingPacket+0xc4>
 8005c8c:	e025      	b.n	8005cda <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c8e:	f001 f8a1 	bl	8006dd4 <SEGGER_SYSVIEW_Start>
      break;
 8005c92:	e034      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c94:	f001 f95a 	bl	8006f4c <SEGGER_SYSVIEW_Stop>
      break;
 8005c98:	e031      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c9a:	f001 fb33 	bl	8007304 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c9e:	e02e      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ca0:	f001 faf8 	bl	8007294 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ca4:	e02b      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ca6:	f001 f977 	bl	8006f98 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005caa:	e028      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cac:	f001 fd70 	bl	8007790 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cb0:	e025      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cb2:	f001 fd4f 	bl	8007754 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cb6:	e022      	b.n	8005cfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <_HandleIncomingPacket+0xd8>)
 8005cba:	7e1b      	ldrb	r3, [r3, #24]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	1cfb      	adds	r3, r7, #3
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f7ff fdac 	bl	8005820 <SEGGER_RTT_ReadNoLock>
 8005cc8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fcb4 	bl	8007640 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cd8:	e00e      	b.n	8005cf8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	da0c      	bge.n	8005cfc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <_HandleIncomingPacket+0xd8>)
 8005ce4:	7e1b      	ldrb	r3, [r3, #24]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	1cfb      	adds	r3, r7, #3
 8005cea:	2201      	movs	r2, #1
 8005cec:	4619      	mov	r1, r3
 8005cee:	f7ff fd97 	bl	8005820 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005cf2:	e003      	b.n	8005cfc <_HandleIncomingPacket+0xcc>
      break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <_HandleIncomingPacket+0xce>
      break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <_HandleIncomingPacket+0xce>
      break;
 8005cfc:	bf00      	nop
    }
  }
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200143a4 	.word	0x200143a4

08005d0c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08c      	sub	sp, #48	; 0x30
 8005d10:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d12:	2301      	movs	r3, #1
 8005d14:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	3301      	adds	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d20:	4b32      	ldr	r3, [pc, #200]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	e00b      	b.n	8005d40 <_TrySendOverflowPacket+0x34>
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	2b7f      	cmp	r3, #127	; 0x7f
 8005d44:	d8f0      	bhi.n	8005d28 <_TrySendOverflowPacket+0x1c>
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d56:	4b26      	ldr	r3, [pc, #152]	; (8005df0 <_TrySendOverflowPacket+0xe4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	e00b      	b.n	8005d88 <_TrySendOverflowPacket+0x7c>
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1c59      	adds	r1, r3, #1
 8005d78:	6279      	str	r1, [r7, #36]	; 0x24
 8005d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	09db      	lsrs	r3, r3, #7
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8c:	d8f0      	bhi.n	8005d70 <_TrySendOverflowPacket+0x64>
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	627a      	str	r2, [r7, #36]	; 0x24
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	4618      	mov	r0, r3
 8005da4:	1d3b      	adds	r3, r7, #4
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	1d3b      	adds	r3, r7, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	f7fa fa2e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005db4:	4603      	mov	r3, r0
 8005db6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005db8:	f7ff fb00 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e004      	b.n	8005de0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	4a03      	ldr	r2, [pc, #12]	; (8005dec <_TrySendOverflowPacket+0xe0>)
 8005dde:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005de0:	693b      	ldr	r3, [r7, #16]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3730      	adds	r7, #48	; 0x30
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200143a4 	.word	0x200143a4
 8005df0:	e0001004 	.word	0xe0001004

08005df4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	; 0x28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e00:	4b96      	ldr	r3, [pc, #600]	; (800605c <_SendPacket+0x268>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d010      	beq.n	8005e2a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e08:	4b94      	ldr	r3, [pc, #592]	; (800605c <_SendPacket+0x268>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8130 	beq.w	8006072 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e12:	4b92      	ldr	r3, [pc, #584]	; (800605c <_SendPacket+0x268>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d109      	bne.n	8005e2e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e1a:	f7ff ff77 	bl	8005d0c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e1e:	4b8f      	ldr	r3, [pc, #572]	; (800605c <_SendPacket+0x268>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	f040 8127 	bne.w	8006076 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005e28:	e001      	b.n	8005e2e <_SendPacket+0x3a>
    goto Send;
 8005e2a:	bf00      	nop
 8005e2c:	e000      	b.n	8005e30 <_SendPacket+0x3c>
Send:
 8005e2e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b1f      	cmp	r3, #31
 8005e34:	d809      	bhi.n	8005e4a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e36:	4b89      	ldr	r3, [pc, #548]	; (800605c <_SendPacket+0x268>)
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8118 	bne.w	800607a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b17      	cmp	r3, #23
 8005e4e:	d807      	bhi.n	8005e60 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e0c4      	b.n	8005fea <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6c:	d912      	bls.n	8005e94 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	09da      	lsrs	r2, r3, #7
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	3a01      	subs	r2, #1
 8005e86:	60fa      	str	r2, [r7, #12]
 8005e88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	e006      	b.n	8005ea2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b7e      	cmp	r3, #126	; 0x7e
 8005ea6:	d807      	bhi.n	8005eb8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e098      	b.n	8005fea <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ebe:	d212      	bcs.n	8005ee6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	09da      	lsrs	r2, r3, #7
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	3a01      	subs	r2, #1
 8005ed8:	60fa      	str	r2, [r7, #12]
 8005eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e081      	b.n	8005fea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eec:	d21d      	bcs.n	8005f2a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0b9a      	lsrs	r2, r3, #14
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	09db      	lsrs	r3, r3, #7
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	3a01      	subs	r2, #1
 8005f08:	60fa      	str	r2, [r7, #12]
 8005f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	60fa      	str	r2, [r7, #12]
 8005f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e05f      	b.n	8005fea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f30:	d228      	bcs.n	8005f84 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0d5a      	lsrs	r2, r3, #21
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0b9b      	lsrs	r3, r3, #14
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	60fa      	str	r2, [r7, #12]
 8005f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	3a01      	subs	r2, #1
 8005f62:	60fa      	str	r2, [r7, #12]
 8005f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	3a01      	subs	r2, #1
 8005f76:	60fa      	str	r2, [r7, #12]
 8005f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e032      	b.n	8005fea <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	0f1a      	lsrs	r2, r3, #28
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0d5b      	lsrs	r3, r3, #21
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	3a01      	subs	r2, #1
 8005f9e:	60fa      	str	r2, [r7, #12]
 8005fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0b9b      	lsrs	r3, r3, #14
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	60fa      	str	r2, [r7, #12]
 8005fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	09db      	lsrs	r3, r3, #7
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	3a01      	subs	r2, #1
 8005fca:	60fa      	str	r2, [r7, #12]
 8005fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	3a01      	subs	r2, #1
 8005fde:	60fa      	str	r2, [r7, #12]
 8005fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <_SendPacket+0x26c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <_SendPacket+0x268>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	e00b      	b.n	800601c <_SendPacket+0x228>
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	b2da      	uxtb	r2, r3
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	6279      	str	r1, [r7, #36]	; 0x24
 800600e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	09db      	lsrs	r3, r3, #7
 800601a:	623b      	str	r3, [r7, #32]
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b7f      	cmp	r3, #127	; 0x7f
 8006020:	d8f0      	bhi.n	8006004 <_SendPacket+0x210>
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	627a      	str	r2, [r7, #36]	; 0x24
 8006028:	6a3a      	ldr	r2, [r7, #32]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006032:	4b0a      	ldr	r3, [pc, #40]	; (800605c <_SendPacket+0x268>)
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	4618      	mov	r0, r3
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	461a      	mov	r2, r3
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	f7fa f8e5 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006046:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006048:	f7ff f9b8 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d008      	beq.n	8006064 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006052:	4a02      	ldr	r2, [pc, #8]	; (800605c <_SendPacket+0x268>)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	60d3      	str	r3, [r2, #12]
 8006058:	e010      	b.n	800607c <_SendPacket+0x288>
 800605a:	bf00      	nop
 800605c:	200143a4 	.word	0x200143a4
 8006060:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006064:	4b19      	ldr	r3, [pc, #100]	; (80060cc <_SendPacket+0x2d8>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	4b17      	ldr	r3, [pc, #92]	; (80060cc <_SendPacket+0x2d8>)
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e004      	b.n	800607c <_SendPacket+0x288>
    goto SendDone;
 8006072:	bf00      	nop
 8006074:	e002      	b.n	800607c <_SendPacket+0x288>
      goto SendDone;
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <_SendPacket+0x288>
      goto SendDone;
 800607a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800607c:	4b13      	ldr	r3, [pc, #76]	; (80060cc <_SendPacket+0x2d8>)
 800607e:	7e1b      	ldrb	r3, [r3, #24]
 8006080:	4619      	mov	r1, r3
 8006082:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <_SendPacket+0x2dc>)
 8006084:	460b      	mov	r3, r1
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	440b      	add	r3, r1
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	336c      	adds	r3, #108	; 0x6c
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <_SendPacket+0x2d8>)
 8006094:	7e1b      	ldrb	r3, [r3, #24]
 8006096:	4618      	mov	r0, r3
 8006098:	490d      	ldr	r1, [pc, #52]	; (80060d0 <_SendPacket+0x2dc>)
 800609a:	4603      	mov	r3, r0
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4403      	add	r3, r0
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	440b      	add	r3, r1
 80060a4:	3370      	adds	r3, #112	; 0x70
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d00b      	beq.n	80060c4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <_SendPacket+0x2d8>)
 80060ae:	789b      	ldrb	r3, [r3, #2]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <_SendPacket+0x2d8>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80060ba:	f7ff fdb9 	bl	8005c30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80060be:	4b03      	ldr	r3, [pc, #12]	; (80060cc <_SendPacket+0x2d8>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80060c4:	bf00      	nop
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200143a4 	.word	0x200143a4
 80060d0:	20012ee4 	.word	0x20012ee4

080060d4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	3301      	adds	r3, #1
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d80a      	bhi.n	8006104 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6051      	str	r1, [r2, #4]
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d15a      	bne.n	80061c2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	623b      	str	r3, [r7, #32]
 800612c:	e00b      	b.n	8006146 <_StoreChar+0x72>
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1c59      	adds	r1, r3, #1
 8006136:	6279      	str	r1, [r7, #36]	; 0x24
 8006138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	2b7f      	cmp	r3, #127	; 0x7f
 800614a:	d8f0      	bhi.n	800612e <_StoreChar+0x5a>
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	627a      	str	r2, [r7, #36]	; 0x24
 8006152:	6a3a      	ldr	r2, [r7, #32]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	2300      	movs	r3, #0
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e00b      	b.n	800617e <_StoreChar+0xaa>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	61f9      	str	r1, [r7, #28]
 8006170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b7f      	cmp	r3, #127	; 0x7f
 8006182:	d8f0      	bhi.n	8006166 <_StoreChar+0x92>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	61fa      	str	r2, [r7, #28]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	221a      	movs	r2, #26
 800619a:	6939      	ldr	r1, [r7, #16]
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff fe29 	bl	8005df4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff fd36 	bl	8005c18 <_PreparePacket>
 80061ac:	4602      	mov	r2, r0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	611a      	str	r2, [r3, #16]
  }
}
 80061c2:	bf00      	nop
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08a      	sub	sp, #40	; 0x28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80061de:	2301      	movs	r3, #1
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80061e6:	e007      	b.n	80061f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	623b      	str	r3, [r7, #32]
    Width++;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	3301      	adds	r3, #1
 80061f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d2f3      	bcs.n	80061e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	429a      	cmp	r2, r3
 8006206:	d901      	bls.n	800620c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11f      	bne.n	8006256 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01c      	beq.n	8006256 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800621c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <_PrintUnsigned+0x66>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <_PrintUnsigned+0x66>
        c = '0';
 800622c:	2330      	movs	r3, #48	; 0x30
 800622e:	76fb      	strb	r3, [r7, #27]
 8006230:	e001      	b.n	8006236 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006232:	2320      	movs	r3, #32
 8006234:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006236:	e007      	b.n	8006248 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	3b01      	subs	r3, #1
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800623e:	7efb      	ldrb	r3, [r7, #27]
 8006240:	4619      	mov	r1, r3
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff ff46 	bl	80060d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <_PrintUnsigned+0x8a>
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	429a      	cmp	r2, r3
 8006254:	d3f0      	bcc.n	8006238 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d903      	bls.n	8006264 <_PrintUnsigned+0x98>
      NumDigits--;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	3b01      	subs	r3, #1
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	e009      	b.n	8006278 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d200      	bcs.n	8006278 <_PrintUnsigned+0xac>
        break;
 8006276:	e005      	b.n	8006284 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006282:	e7e8      	b.n	8006256 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	fbb2 f3f3 	udiv	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800629c:	4a15      	ldr	r2, [pc, #84]	; (80062f4 <_PrintUnsigned+0x128>)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff ff14 	bl	80060d4 <_StoreChar>
    Digit /= Base;
 80062ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d011      	beq.n	80062ea <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062cc:	e006      	b.n	80062dc <_PrintUnsigned+0x110>
        FieldWidth--;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	3b01      	subs	r3, #1
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80062d4:	2120      	movs	r1, #32
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fefc 	bl	80060d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <_PrintUnsigned+0x11e>
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3f1      	bcc.n	80062ce <_PrintUnsigned+0x102>
      }
    }
  }
}
 80062ea:	bf00      	nop
 80062ec:	3728      	adds	r7, #40	; 0x28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	08007bdc 	.word	0x08007bdc

080062f8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfb8      	it	lt
 800630c:	425b      	neglt	r3, r3
 800630e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006310:	2301      	movs	r3, #1
 8006312:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006314:	e007      	b.n	8006326 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	fb92 f3f3 	sdiv	r3, r2, r3
 800631e:	613b      	str	r3, [r7, #16]
    Width++;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	3301      	adds	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	daf3      	bge.n	8006316 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	429a      	cmp	r2, r3
 8006334:	d901      	bls.n	800633a <_PrintInt+0x42>
    Width = NumDigits;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <_PrintInt+0x5e>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	db04      	blt.n	8006350 <_PrintInt+0x58>
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <_PrintInt+0x5e>
    FieldWidth--;
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	3b01      	subs	r3, #1
 8006354:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <_PrintInt+0x6e>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <_PrintInt+0x9c>
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d111      	bne.n	8006394 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00e      	beq.n	8006394 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006376:	e006      	b.n	8006386 <_PrintInt+0x8e>
        FieldWidth--;
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	3b01      	subs	r3, #1
 800637c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800637e:	2120      	movs	r1, #32
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7ff fea7 	bl	80060d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <_PrintInt+0x9c>
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	429a      	cmp	r2, r3
 8006392:	d3f1      	bcc.n	8006378 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da07      	bge.n	80063aa <_PrintInt+0xb2>
    v = -v;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	425b      	negs	r3, r3
 800639e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80063a0:	212d      	movs	r1, #45	; 0x2d
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fe96 	bl	80060d4 <_StoreChar>
 80063a8:	e008      	b.n	80063bc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80063b4:	212b      	movs	r1, #43	; 0x2b
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fe8c 	bl	80060d4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d019      	beq.n	80063fa <_PrintInt+0x102>
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d114      	bne.n	80063fa <_PrintInt+0x102>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d111      	bne.n	80063fa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00e      	beq.n	80063fa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063dc:	e006      	b.n	80063ec <_PrintInt+0xf4>
        FieldWidth--;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80063e4:	2130      	movs	r1, #48	; 0x30
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff fe74 	bl	80060d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <_PrintInt+0x102>
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d3f1      	bcc.n	80063de <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fedf 	bl	80061cc <_PrintUnsigned>
}
 800640e:	bf00      	nop
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b098      	sub	sp, #96	; 0x60
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006424:	f3ef 8311 	mrs	r3, BASEPRI
 8006428:	f04f 0120 	mov.w	r1, #32
 800642c:	f381 8811 	msr	BASEPRI, r1
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006432:	48b7      	ldr	r0, [pc, #732]	; (8006710 <_VPrintTarget+0x2f8>)
 8006434:	f7ff fbf0 	bl	8005c18 <_PreparePacket>
 8006438:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800643a:	4bb5      	ldr	r3, [pc, #724]	; (8006710 <_VPrintTarget+0x2f8>)
 800643c:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800643e:	2300      	movs	r3, #0
 8006440:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	3301      	adds	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800645e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 81a8 	beq.w	80067b8 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800646c:	2b25      	cmp	r3, #37	; 0x25
 800646e:	f040 8195 	bne.w	800679c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006472:	2300      	movs	r3, #0
 8006474:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006486:	3b23      	subs	r3, #35	; 0x23
 8006488:	2b0d      	cmp	r3, #13
 800648a:	d83f      	bhi.n	800650c <_VPrintTarget+0xf4>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <_VPrintTarget+0x7c>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064fd 	.word	0x080064fd
 8006498:	0800650d 	.word	0x0800650d
 800649c:	0800650d 	.word	0x0800650d
 80064a0:	0800650d 	.word	0x0800650d
 80064a4:	0800650d 	.word	0x0800650d
 80064a8:	0800650d 	.word	0x0800650d
 80064ac:	0800650d 	.word	0x0800650d
 80064b0:	0800650d 	.word	0x0800650d
 80064b4:	080064ed 	.word	0x080064ed
 80064b8:	0800650d 	.word	0x0800650d
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	0800650d 	.word	0x0800650d
 80064c4:	0800650d 	.word	0x0800650d
 80064c8:	080064dd 	.word	0x080064dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80064cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e01a      	b.n	8006512 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80064dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	e012      	b.n	8006512 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80064ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ee:	f043 0304 	orr.w	r3, r3, #4
 80064f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e00a      	b.n	8006512 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80064fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fe:	f043 0308 	orr.w	r3, r3, #8
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e002      	b.n	8006512 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800650c:	2300      	movs	r3, #0
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
 8006510:	bf00      	nop
        }
      } while (v);
 8006512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1b0      	bne.n	800647a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006518:	2300      	movs	r3, #0
 800651a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006528:	2b2f      	cmp	r3, #47	; 0x2f
 800652a:	d912      	bls.n	8006552 <_VPrintTarget+0x13a>
 800652c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006530:	2b39      	cmp	r3, #57	; 0x39
 8006532:	d80e      	bhi.n	8006552 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800653a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	461a      	mov	r2, r3
 8006546:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800654a:	4413      	add	r3, r2
 800654c:	3b30      	subs	r3, #48	; 0x30
 800654e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006550:	e7e4      	b.n	800651c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006552:	2300      	movs	r3, #0
 8006554:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800655e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006562:	2b2e      	cmp	r3, #46	; 0x2e
 8006564:	d11d      	bne.n	80065a2 <_VPrintTarget+0x18a>
        sFormat++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006578:	2b2f      	cmp	r3, #47	; 0x2f
 800657a:	d912      	bls.n	80065a2 <_VPrintTarget+0x18a>
 800657c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006580:	2b39      	cmp	r3, #57	; 0x39
 8006582:	d80e      	bhi.n	80065a2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800658a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	461a      	mov	r2, r3
 8006596:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800659a:	4413      	add	r3, r2
 800659c:	3b30      	subs	r3, #48	; 0x30
 800659e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80065a0:	e7e4      	b.n	800656c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80065aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ae:	2b6c      	cmp	r3, #108	; 0x6c
 80065b0:	d003      	beq.n	80065ba <_VPrintTarget+0x1a2>
 80065b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065b6:	2b68      	cmp	r3, #104	; 0x68
 80065b8:	d107      	bne.n	80065ca <_VPrintTarget+0x1b2>
          c = *sFormat;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80065c8:	e7ef      	b.n	80065aa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80065ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ce:	2b25      	cmp	r3, #37	; 0x25
 80065d0:	f000 80d8 	beq.w	8006784 <_VPrintTarget+0x36c>
 80065d4:	2b25      	cmp	r3, #37	; 0x25
 80065d6:	f2c0 80dc 	blt.w	8006792 <_VPrintTarget+0x37a>
 80065da:	2b78      	cmp	r3, #120	; 0x78
 80065dc:	f300 80d9 	bgt.w	8006792 <_VPrintTarget+0x37a>
 80065e0:	2b58      	cmp	r3, #88	; 0x58
 80065e2:	f2c0 80d6 	blt.w	8006792 <_VPrintTarget+0x37a>
 80065e6:	3b58      	subs	r3, #88	; 0x58
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	f200 80d2 	bhi.w	8006792 <_VPrintTarget+0x37a>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <_VPrintTarget+0x1dc>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	080066eb 	.word	0x080066eb
 80065f8:	08006793 	.word	0x08006793
 80065fc:	08006793 	.word	0x08006793
 8006600:	08006793 	.word	0x08006793
 8006604:	08006793 	.word	0x08006793
 8006608:	08006793 	.word	0x08006793
 800660c:	08006793 	.word	0x08006793
 8006610:	08006793 	.word	0x08006793
 8006614:	08006793 	.word	0x08006793
 8006618:	08006793 	.word	0x08006793
 800661c:	08006793 	.word	0x08006793
 8006620:	08006679 	.word	0x08006679
 8006624:	0800669f 	.word	0x0800669f
 8006628:	08006793 	.word	0x08006793
 800662c:	08006793 	.word	0x08006793
 8006630:	08006793 	.word	0x08006793
 8006634:	08006793 	.word	0x08006793
 8006638:	08006793 	.word	0x08006793
 800663c:	08006793 	.word	0x08006793
 8006640:	08006793 	.word	0x08006793
 8006644:	08006793 	.word	0x08006793
 8006648:	08006793 	.word	0x08006793
 800664c:	08006793 	.word	0x08006793
 8006650:	08006793 	.word	0x08006793
 8006654:	0800675f 	.word	0x0800675f
 8006658:	08006793 	.word	0x08006793
 800665c:	08006793 	.word	0x08006793
 8006660:	08006715 	.word	0x08006715
 8006664:	08006793 	.word	0x08006793
 8006668:	080066c5 	.word	0x080066c5
 800666c:	08006793 	.word	0x08006793
 8006670:	08006793 	.word	0x08006793
 8006674:	080066eb 	.word	0x080066eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	1d19      	adds	r1, r3, #4
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6011      	str	r1, [r2, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 800668c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006690:	f107 0310 	add.w	r3, r7, #16
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fd1c 	bl	80060d4 <_StoreChar>
        break;
 800669c:	e07a      	b.n	8006794 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	1d19      	adds	r1, r3, #4
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6011      	str	r1, [r2, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80066ac:	f107 0010 	add.w	r0, r7, #16
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	220a      	movs	r2, #10
 80066bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066be:	f7ff fe1b 	bl	80062f8 <_PrintInt>
        break;
 80066c2:	e067      	b.n	8006794 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80066d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066d4:	f107 0010 	add.w	r0, r7, #16
 80066d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e2:	220a      	movs	r2, #10
 80066e4:	f7ff fd72 	bl	80061cc <_PrintUnsigned>
        break;
 80066e8:	e054      	b.n	8006794 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	1d19      	adds	r1, r3, #4
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6011      	str	r1, [r2, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80066f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066fa:	f107 0010 	add.w	r0, r7, #16
 80066fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006708:	2210      	movs	r2, #16
 800670a:	f7ff fd5f 	bl	80061cc <_PrintUnsigned>
        break;
 800670e:	e041      	b.n	8006794 <_VPrintTarget+0x37c>
 8006710:	200143d4 	.word	0x200143d4
      case 's':
        s = va_arg(*pParamList, const char*);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	1d19      	adds	r1, r3, #4
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8006722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <_VPrintTarget+0x314>
          s = "(null)";
 8006728:	4b4a      	ldr	r3, [pc, #296]	; (8006854 <_VPrintTarget+0x43c>)
 800672a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 800672c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8006734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006736:	3301      	adds	r3, #1
 8006738:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 800673a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006742:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006746:	f107 0310 	add.w	r3, r7, #16
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fcc1 	bl	80060d4 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	2b7f      	cmp	r3, #127	; 0x7f
 8006756:	d9e9      	bls.n	800672c <_VPrintTarget+0x314>
        break;
 8006758:	e01c      	b.n	8006794 <_VPrintTarget+0x37c>
            break;
 800675a:	bf00      	nop
        break;
 800675c:	e01a      	b.n	8006794 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6011      	str	r1, [r2, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800676c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800676e:	f107 0010 	add.w	r0, r7, #16
 8006772:	2300      	movs	r3, #0
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	2308      	movs	r3, #8
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	2308      	movs	r3, #8
 800677c:	2210      	movs	r2, #16
 800677e:	f7ff fd25 	bl	80061cc <_PrintUnsigned>
        break;
 8006782:	e007      	b.n	8006794 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006784:	f107 0310 	add.w	r3, r7, #16
 8006788:	2125      	movs	r1, #37	; 0x25
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fca2 	bl	80060d4 <_StoreChar>
        break;
 8006790:	e000      	b.n	8006794 <_VPrintTarget+0x37c>
      default:
        break;
 8006792:	bf00      	nop
      }
      sFormat++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e007      	b.n	80067ac <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800679c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80067a0:	f107 0310 	add.w	r3, r7, #16
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fc94 	bl	80060d4 <_StoreChar>
    }
  } while (*sFormat);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f47f ae4d 	bne.w	8006450 <_VPrintTarget+0x38>
 80067b6:	e000      	b.n	80067ba <_VPrintTarget+0x3a2>
      break;
 80067b8:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d041      	beq.n	8006844 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80067c0:	6a3a      	ldr	r2, [r7, #32]
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d0:	e00b      	b.n	80067ea <_VPrintTarget+0x3d2>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	63f9      	str	r1, [r7, #60]	; 0x3c
 80067dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	2b7f      	cmp	r3, #127	; 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <_VPrintTarget+0x3ba>
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
 8006804:	2300      	movs	r3, #0
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
 8006808:	e00b      	b.n	8006822 <_VPrintTarget+0x40a>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	6379      	str	r1, [r7, #52]	; 0x34
 8006814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	633b      	str	r3, [r7, #48]	; 0x30
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	2b7f      	cmp	r3, #127	; 0x7f
 8006826:	d8f0      	bhi.n	800680a <_VPrintTarget+0x3f2>
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	637a      	str	r2, [r7, #52]	; 0x34
 800682e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6979      	ldr	r1, [r7, #20]
 800683c:	221a      	movs	r2, #26
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fad8 	bl	8005df4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800684a:	bf00      	nop
 800684c:	3758      	adds	r7, #88	; 0x58
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	08007b88 	.word	0x08007b88

08006858 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af02      	add	r7, sp, #8
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006866:	2300      	movs	r3, #0
 8006868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800686c:	4917      	ldr	r1, [pc, #92]	; (80068cc <SEGGER_SYSVIEW_Init+0x74>)
 800686e:	4818      	ldr	r0, [pc, #96]	; (80068d0 <SEGGER_SYSVIEW_Init+0x78>)
 8006870:	f7ff f8d2 	bl	8005a18 <SEGGER_RTT_AllocUpBuffer>
 8006874:	4603      	mov	r3, r0
 8006876:	b2da      	uxtb	r2, r3
 8006878:	4b16      	ldr	r3, [pc, #88]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800687a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800687c:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800687e:	785a      	ldrb	r2, [r3, #1]
 8006880:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006882:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006884:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006886:	7e1b      	ldrb	r3, [r3, #24]
 8006888:	4618      	mov	r0, r3
 800688a:	2300      	movs	r3, #0
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	2308      	movs	r3, #8
 8006890:	4a11      	ldr	r2, [pc, #68]	; (80068d8 <SEGGER_SYSVIEW_Init+0x80>)
 8006892:	490f      	ldr	r1, [pc, #60]	; (80068d0 <SEGGER_SYSVIEW_Init+0x78>)
 8006894:	f7ff f944 	bl	8005b20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006898:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <SEGGER_SYSVIEW_Init+0x84>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80068a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80068a6:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80068ac:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80068b2:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80068b8:	4a06      	ldr	r2, [pc, #24]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	2001339c 	.word	0x2001339c
 80068d0:	08007b90 	.word	0x08007b90
 80068d4:	200143a4 	.word	0x200143a4
 80068d8:	2001439c 	.word	0x2001439c
 80068dc:	e0001004 	.word	0xe0001004

080068e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80068e8:	4a04      	ldr	r2, [pc, #16]	; (80068fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6113      	str	r3, [r2, #16]
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	200143a4 	.word	0x200143a4

08006900 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006908:	f3ef 8311 	mrs	r3, BASEPRI
 800690c:	f04f 0120 	mov.w	r1, #32
 8006910:	f381 8811 	msr	BASEPRI, r1
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4808      	ldr	r0, [pc, #32]	; (8006938 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006918:	f7ff f97e 	bl	8005c18 <_PreparePacket>
 800691c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68b8      	ldr	r0, [r7, #8]
 8006924:	f7ff fa66 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f383 8811 	msr	BASEPRI, r3
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200143d4 	.word	0x200143d4

0800693c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006946:	f3ef 8311 	mrs	r3, BASEPRI
 800694a:	f04f 0120 	mov.w	r1, #32
 800694e:	f381 8811 	msr	BASEPRI, r1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	4816      	ldr	r0, [pc, #88]	; (80069b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006956:	f7ff f95f 	bl	8005c18 <_PreparePacket>
 800695a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e00b      	b.n	8006982 <SEGGER_SYSVIEW_RecordU32+0x46>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	61f9      	str	r1, [r7, #28]
 8006974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b7f      	cmp	r3, #127	; 0x7f
 8006986:	d8f0      	bhi.n	800696a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	61fa      	str	r2, [r7, #28]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	6938      	ldr	r0, [r7, #16]
 800699e:	f7ff fa29 	bl	8005df4 <_SendPacket>
  RECORD_END();
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f383 8811 	msr	BASEPRI, r3
}
 80069a8:	bf00      	nop
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200143d4 	.word	0x200143d4

080069b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08c      	sub	sp, #48	; 0x30
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069c0:	f3ef 8311 	mrs	r3, BASEPRI
 80069c4:	f04f 0120 	mov.w	r1, #32
 80069c8:	f381 8811 	msr	BASEPRI, r1
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	4825      	ldr	r0, [pc, #148]	; (8006a64 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80069d0:	f7ff f922 	bl	8005c18 <_PreparePacket>
 80069d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	e00b      	b.n	80069fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	09db      	lsrs	r3, r3, #7
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006a00:	d8f0      	bhi.n	80069e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	e00b      	b.n	8006a34 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	6279      	str	r1, [r7, #36]	; 0x24
 8006a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	623b      	str	r3, [r7, #32]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d8f0      	bhi.n	8006a1c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a40:	6a3a      	ldr	r2, [r7, #32]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	69b8      	ldr	r0, [r7, #24]
 8006a50:	f7ff f9d0 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f383 8811 	msr	BASEPRI, r3
}
 8006a5a:	bf00      	nop
 8006a5c:	3730      	adds	r7, #48	; 0x30
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200143d4 	.word	0x200143d4

08006a68 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08e      	sub	sp, #56	; 0x38
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a76:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7a:	f04f 0120 	mov.w	r1, #32
 8006a7e:	f381 8811 	msr	BASEPRI, r1
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	4832      	ldr	r0, [pc, #200]	; (8006b50 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006a86:	f7ff f8c7 	bl	8005c18 <_PreparePacket>
 8006a8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
 8006a98:	e00b      	b.n	8006ab2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	1c59      	adds	r1, r3, #1
 8006aa2:	6379      	str	r1, [r7, #52]	; 0x34
 8006aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	09db      	lsrs	r3, r3, #7
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab6:	d8f0      	bhi.n	8006a9a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	637a      	str	r2, [r7, #52]	; 0x34
 8006abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	e00b      	b.n	8006aea <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	1c59      	adds	r1, r3, #1
 8006ada:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	09db      	lsrs	r3, r3, #7
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	2b7f      	cmp	r3, #127	; 0x7f
 8006aee:	d8f0      	bhi.n	8006ad2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	e00b      	b.n	8006b22 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	6279      	str	r1, [r7, #36]	; 0x24
 8006b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	09db      	lsrs	r3, r3, #7
 8006b20:	623b      	str	r3, [r7, #32]
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	2b7f      	cmp	r3, #127	; 0x7f
 8006b26:	d8f0      	bhi.n	8006b0a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	6979      	ldr	r1, [r7, #20]
 8006b3c:	69b8      	ldr	r0, [r7, #24]
 8006b3e:	f7ff f959 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f383 8811 	msr	BASEPRI, r3
}
 8006b48:	bf00      	nop
 8006b4a:	3738      	adds	r7, #56	; 0x38
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	200143d4 	.word	0x200143d4

08006b54 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b090      	sub	sp, #64	; 0x40
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b62:	f3ef 8311 	mrs	r3, BASEPRI
 8006b66:	f04f 0120 	mov.w	r1, #32
 8006b6a:	f381 8811 	msr	BASEPRI, r1
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	4840      	ldr	r0, [pc, #256]	; (8006c74 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006b72:	f7ff f851 	bl	8005c18 <_PreparePacket>
 8006b76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b84:	e00b      	b.n	8006b9e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8c:	1c59      	adds	r1, r3, #1
 8006b8e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	09db      	lsrs	r3, r3, #7
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba2:	d8f0      	bhi.n	8006b86 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	633b      	str	r3, [r7, #48]	; 0x30
 8006bbc:	e00b      	b.n	8006bd6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	1c59      	adds	r1, r3, #1
 8006bc6:	6379      	str	r1, [r7, #52]	; 0x34
 8006bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	09db      	lsrs	r3, r3, #7
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bda:	d8f0      	bhi.n	8006bbe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	637a      	str	r2, [r7, #52]	; 0x34
 8006be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf4:	e00b      	b.n	8006c0e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	1c59      	adds	r1, r3, #1
 8006bfe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	09db      	lsrs	r3, r3, #7
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	2b7f      	cmp	r3, #127	; 0x7f
 8006c12:	d8f0      	bhi.n	8006bf6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
 8006c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	e00b      	b.n	8006c46 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	6279      	str	r1, [r7, #36]	; 0x24
 8006c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	09db      	lsrs	r3, r3, #7
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4a:	d8f0      	bhi.n	8006c2e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	627a      	str	r2, [r7, #36]	; 0x24
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	6979      	ldr	r1, [r7, #20]
 8006c60:	69b8      	ldr	r0, [r7, #24]
 8006c62:	f7ff f8c7 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f383 8811 	msr	BASEPRI, r3
}
 8006c6c:	bf00      	nop
 8006c6e:	3740      	adds	r7, #64	; 0x40
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	200143d4 	.word	0x200143d4

08006c78 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b092      	sub	sp, #72	; 0x48
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c86:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8a:	f04f 0120 	mov.w	r1, #32
 8006c8e:	f381 8811 	msr	BASEPRI, r1
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	484e      	ldr	r0, [pc, #312]	; (8006dd0 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006c96:	f7fe ffbf 	bl	8005c18 <_PreparePacket>
 8006c9a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca8:	e00b      	b.n	8006cc2 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	6479      	str	r1, [r7, #68]	; 0x44
 8006cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbe:	09db      	lsrs	r3, r3, #7
 8006cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc6:	d8f0      	bhi.n	8006caa <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	647a      	str	r2, [r7, #68]	; 0x44
 8006cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ce0:	e00b      	b.n	8006cfa <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce8:	1c59      	adds	r1, r3, #1
 8006cea:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	09db      	lsrs	r3, r3, #7
 8006cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfe:	d8f0      	bhi.n	8006ce2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	633b      	str	r3, [r7, #48]	; 0x30
 8006d18:	e00b      	b.n	8006d32 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d20:	1c59      	adds	r1, r3, #1
 8006d22:	6379      	str	r1, [r7, #52]	; 0x34
 8006d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	09db      	lsrs	r3, r3, #7
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b7f      	cmp	r3, #127	; 0x7f
 8006d36:	d8f0      	bhi.n	8006d1a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d50:	e00b      	b.n	8006d6a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	1c59      	adds	r1, r3, #1
 8006d5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	09db      	lsrs	r3, r3, #7
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d6e:	d8f0      	bhi.n	8006d52 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
 8006d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d86:	623b      	str	r3, [r7, #32]
 8006d88:	e00b      	b.n	8006da2 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	1c59      	adds	r1, r3, #1
 8006d92:	6279      	str	r1, [r7, #36]	; 0x24
 8006d94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	09db      	lsrs	r3, r3, #7
 8006da0:	623b      	str	r3, [r7, #32]
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	2b7f      	cmp	r3, #127	; 0x7f
 8006da6:	d8f0      	bhi.n	8006d8a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	627a      	str	r2, [r7, #36]	; 0x24
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	69b8      	ldr	r0, [r7, #24]
 8006dbe:	f7ff f819 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f383 8811 	msr	BASEPRI, r3
}
 8006dc8:	bf00      	nop
 8006dca:	3748      	adds	r7, #72	; 0x48
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200143d4 	.word	0x200143d4

08006dd4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08c      	sub	sp, #48	; 0x30
 8006dd8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006dda:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006de0:	f3ef 8311 	mrs	r3, BASEPRI
 8006de4:	f04f 0120 	mov.w	r1, #32
 8006de8:	f381 8811 	msr	BASEPRI, r1
 8006dec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006dee:	4b54      	ldr	r3, [pc, #336]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	220a      	movs	r2, #10
 8006df4:	4953      	ldr	r1, [pc, #332]	; (8006f44 <SEGGER_SYSVIEW_Start+0x170>)
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7f9 fa0a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006e02:	f7fe fadb 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e06:	200a      	movs	r0, #10
 8006e08:	f7ff fd7a 	bl	8006900 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e10:	f04f 0120 	mov.w	r1, #32
 8006e14:	f381 8811 	msr	BASEPRI, r1
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	484b      	ldr	r0, [pc, #300]	; (8006f48 <SEGGER_SYSVIEW_Start+0x174>)
 8006e1c:	f7fe fefc 	bl	8005c18 <_PreparePacket>
 8006e20:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2a:	4b45      	ldr	r3, [pc, #276]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e30:	e00b      	b.n	8006e4a <SEGGER_SYSVIEW_Start+0x76>
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	1c59      	adds	r1, r3, #1
 8006e3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	09db      	lsrs	r3, r3, #7
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4e:	d8f0      	bhi.n	8006e32 <SEGGER_SYSVIEW_Start+0x5e>
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
 8006e64:	4b36      	ldr	r3, [pc, #216]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	e00b      	b.n	8006e84 <SEGGER_SYSVIEW_Start+0xb0>
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	1c59      	adds	r1, r3, #1
 8006e74:	6279      	str	r1, [r7, #36]	; 0x24
 8006e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	09db      	lsrs	r3, r3, #7
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b7f      	cmp	r3, #127	; 0x7f
 8006e88:	d8f0      	bhi.n	8006e6c <SEGGER_SYSVIEW_Start+0x98>
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e90:	6a3a      	ldr	r2, [r7, #32]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	e00b      	b.n	8006ebe <SEGGER_SYSVIEW_Start+0xea>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	1c59      	adds	r1, r3, #1
 8006eae:	61f9      	str	r1, [r7, #28]
 8006eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec2:	d8f0      	bhi.n	8006ea6 <SEGGER_SYSVIEW_Start+0xd2>
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	61fa      	str	r2, [r7, #28]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	e00b      	b.n	8006ef6 <SEGGER_SYSVIEW_Start+0x122>
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	1c59      	adds	r1, r3, #1
 8006ee6:	6179      	str	r1, [r7, #20]
 8006ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	09db      	lsrs	r3, r3, #7
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8006efa:	d8f0      	bhi.n	8006ede <SEGGER_SYSVIEW_Start+0x10a>
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	617a      	str	r2, [r7, #20]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f0c:	2218      	movs	r2, #24
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fe ff6f 	bl	8005df4 <_SendPacket>
      RECORD_END();
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006f2a:	f000 f9eb 	bl	8007304 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006f2e:	f000 f9b1 	bl	8007294 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006f32:	f000 fc2d 	bl	8007790 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006f36:	bf00      	nop
 8006f38:	3730      	adds	r7, #48	; 0x30
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200143a4 	.word	0x200143a4
 8006f44:	08007bd0 	.word	0x08007bd0
 8006f48:	200143d4 	.word	0x200143d4

08006f4c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f52:	f3ef 8311 	mrs	r3, BASEPRI
 8006f56:	f04f 0120 	mov.w	r1, #32
 8006f5a:	f381 8811 	msr	BASEPRI, r1
 8006f5e:	607b      	str	r3, [r7, #4]
 8006f60:	480b      	ldr	r0, [pc, #44]	; (8006f90 <SEGGER_SYSVIEW_Stop+0x44>)
 8006f62:	f7fe fe59 	bl	8005c18 <_PreparePacket>
 8006f66:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <SEGGER_SYSVIEW_Stop+0x48>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006f70:	220b      	movs	r2, #11
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	f7fe ff3d 	bl	8005df4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <SEGGER_SYSVIEW_Stop+0x48>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f383 8811 	msr	BASEPRI, r3
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	200143d4 	.word	0x200143d4
 8006f94:	200143a4 	.word	0x200143a4

08006f98 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08c      	sub	sp, #48	; 0x30
 8006f9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa2:	f04f 0120 	mov.w	r1, #32
 8006fa6:	f381 8811 	msr	BASEPRI, r1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4845      	ldr	r0, [pc, #276]	; (80070c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006fae:	f7fe fe33 	bl	8005c18 <_PreparePacket>
 8006fb2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbc:	4b42      	ldr	r3, [pc, #264]	; (80070c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc2:	e00b      	b.n	8006fdc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	1c59      	adds	r1, r3, #1
 8006fcc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	09db      	lsrs	r3, r3, #7
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe0:	d8f0      	bhi.n	8006fc4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff6:	4b34      	ldr	r3, [pc, #208]	; (80070c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	e00b      	b.n	8007016 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	b2da      	uxtb	r2, r3
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1c59      	adds	r1, r3, #1
 8007006:	6279      	str	r1, [r7, #36]	; 0x24
 8007008:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	09db      	lsrs	r3, r3, #7
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	2b7f      	cmp	r3, #127	; 0x7f
 800701a:	d8f0      	bhi.n	8006ffe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	627a      	str	r2, [r7, #36]	; 0x24
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	e00b      	b.n	8007050 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	b2da      	uxtb	r2, r3
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1c59      	adds	r1, r3, #1
 8007040:	61f9      	str	r1, [r7, #28]
 8007042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	09db      	lsrs	r3, r3, #7
 800704e:	61bb      	str	r3, [r7, #24]
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d8f0      	bhi.n	8007038 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	61fa      	str	r2, [r7, #28]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	e00b      	b.n	8007088 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1c59      	adds	r1, r3, #1
 8007078:	6179      	str	r1, [r7, #20]
 800707a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	09db      	lsrs	r3, r3, #7
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b7f      	cmp	r3, #127	; 0x7f
 800708c:	d8f0      	bhi.n	8007070 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	617a      	str	r2, [r7, #20]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800709e:	2218      	movs	r2, #24
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	68b8      	ldr	r0, [r7, #8]
 80070a4:	f7fe fea6 	bl	8005df4 <_SendPacket>
  RECORD_END();
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80070ae:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80070b6:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	4798      	blx	r3
  }
}
 80070bc:	bf00      	nop
 80070be:	3730      	adds	r7, #48	; 0x30
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200143d4 	.word	0x200143d4
 80070c8:	200143a4 	.word	0x200143a4

080070cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b092      	sub	sp, #72	; 0x48
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80070d4:	f3ef 8311 	mrs	r3, BASEPRI
 80070d8:	f04f 0120 	mov.w	r1, #32
 80070dc:	f381 8811 	msr	BASEPRI, r1
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	486a      	ldr	r0, [pc, #424]	; (800728c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80070e4:	f7fe fd98 	bl	8005c18 <_PreparePacket>
 80070e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	647b      	str	r3, [r7, #68]	; 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b66      	ldr	r3, [pc, #408]	; (8007290 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	643b      	str	r3, [r7, #64]	; 0x40
 80070fe:	e00b      	b.n	8007118 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007102:	b2da      	uxtb	r2, r3
 8007104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007106:	1c59      	adds	r1, r3, #1
 8007108:	6479      	str	r1, [r7, #68]	; 0x44
 800710a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007114:	09db      	lsrs	r3, r3, #7
 8007116:	643b      	str	r3, [r7, #64]	; 0x40
 8007118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711a:	2b7f      	cmp	r3, #127	; 0x7f
 800711c:	d8f0      	bhi.n	8007100 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800711e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	647a      	str	r2, [r7, #68]	; 0x44
 8007124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	63bb      	str	r3, [r7, #56]	; 0x38
 8007138:	e00b      	b.n	8007152 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	b2da      	uxtb	r2, r3
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	1c59      	adds	r1, r3, #1
 8007142:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	09db      	lsrs	r3, r3, #7
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	2b7f      	cmp	r3, #127	; 0x7f
 8007156:	d8f0      	bhi.n	800713a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800715e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007166:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	4619      	mov	r1, r3
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7fe fd21 	bl	8005bb8 <_EncodeStr>
 8007176:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007178:	2209      	movs	r2, #9
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	6938      	ldr	r0, [r7, #16]
 800717e:	f7fe fe39 	bl	8005df4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b40      	ldr	r3, [pc, #256]	; (8007290 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	633b      	str	r3, [r7, #48]	; 0x30
 8007196:	e00b      	b.n	80071b0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	b2da      	uxtb	r2, r3
 800719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	6379      	str	r1, [r7, #52]	; 0x34
 80071a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	09db      	lsrs	r3, r3, #7
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b7f      	cmp	r3, #127	; 0x7f
 80071b4:	d8f0      	bhi.n	8007198 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	637a      	str	r2, [r7, #52]	; 0x34
 80071bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d0:	e00b      	b.n	80071ea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	1c59      	adds	r1, r3, #1
 80071da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	09db      	lsrs	r3, r3, #7
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	2b7f      	cmp	r3, #127	; 0x7f
 80071ee:	d8f0      	bhi.n	80071d2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	623b      	str	r3, [r7, #32]
 800720a:	e00b      	b.n	8007224 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	1c59      	adds	r1, r3, #1
 8007214:	6279      	str	r1, [r7, #36]	; 0x24
 8007216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	09db      	lsrs	r3, r3, #7
 8007222:	623b      	str	r3, [r7, #32]
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	2b7f      	cmp	r3, #127	; 0x7f
 8007228:	d8f0      	bhi.n	800720c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	627a      	str	r2, [r7, #36]	; 0x24
 8007230:	6a3a      	ldr	r2, [r7, #32]
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	e00b      	b.n	800725c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	b2da      	uxtb	r2, r3
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	1c59      	adds	r1, r3, #1
 800724c:	61f9      	str	r1, [r7, #28]
 800724e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b7f      	cmp	r3, #127	; 0x7f
 8007260:	d8f0      	bhi.n	8007244 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	61fa      	str	r2, [r7, #28]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007272:	2215      	movs	r2, #21
 8007274:	68f9      	ldr	r1, [r7, #12]
 8007276:	6938      	ldr	r0, [r7, #16]
 8007278:	f7fe fdbc 	bl	8005df4 <_SendPacket>
  RECORD_END();
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f383 8811 	msr	BASEPRI, r3
}
 8007282:	bf00      	nop
 8007284:	3748      	adds	r7, #72	; 0x48
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	200143d4 	.word	0x200143d4
 8007290:	200143a4 	.word	0x200143a4

08007294 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d008      	beq.n	80072b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	4798      	blx	r3
  }
}
 80072b2:	bf00      	nop
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200143a4 	.word	0x200143a4

080072bc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072c4:	f3ef 8311 	mrs	r3, BASEPRI
 80072c8:	f04f 0120 	mov.w	r1, #32
 80072cc:	f381 8811 	msr	BASEPRI, r1
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	480b      	ldr	r0, [pc, #44]	; (8007300 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80072d4:	f7fe fca0 	bl	8005c18 <_PreparePacket>
 80072d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	6938      	ldr	r0, [r7, #16]
 80072e0:	f7fe fc6a 	bl	8005bb8 <_EncodeStr>
 80072e4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80072e6:	220e      	movs	r2, #14
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7fe fd82 	bl	8005df4 <_SendPacket>
  RECORD_END();
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f383 8811 	msr	BASEPRI, r3
}
 80072f6:	bf00      	nop
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200143d4 	.word	0x200143d4

08007304 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007304:	b590      	push	{r4, r7, lr}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01a      	beq.n	8007348 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007312:	4b13      	ldr	r3, [pc, #76]	; (8007360 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d015      	beq.n	8007348 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4798      	blx	r3
 8007324:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007328:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800732a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	000a      	movs	r2, r1
 8007338:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800733a:	4613      	mov	r3, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4621      	mov	r1, r4
 8007340:	200d      	movs	r0, #13
 8007342:	f7ff fb37 	bl	80069b4 <SEGGER_SYSVIEW_RecordU32x2>
 8007346:	e006      	b.n	8007356 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4619      	mov	r1, r3
 800734e:	200c      	movs	r0, #12
 8007350:	f7ff faf4 	bl	800693c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	200143a4 	.word	0x200143a4
 8007364:	e0001004 	.word	0xe0001004

08007368 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800736e:	f3ef 8311 	mrs	r3, BASEPRI
 8007372:	f04f 0120 	mov.w	r1, #32
 8007376:	f381 8811 	msr	BASEPRI, r1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	4819      	ldr	r0, [pc, #100]	; (80073e4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800737e:	f7fe fc4b 	bl	8005c18 <_PreparePacket>
 8007382:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007388:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007390:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e00b      	b.n	80073b4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	1c59      	adds	r1, r3, #1
 80073a4:	6179      	str	r1, [r7, #20]
 80073a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	09db      	lsrs	r3, r3, #7
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2b7f      	cmp	r3, #127	; 0x7f
 80073b8:	d8f0      	bhi.n	800739c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	617a      	str	r2, [r7, #20]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80073ca:	2202      	movs	r2, #2
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	68b8      	ldr	r0, [r7, #8]
 80073d0:	f7fe fd10 	bl	8005df4 <_SendPacket>
  RECORD_END();
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f383 8811 	msr	BASEPRI, r3
}
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200143d4 	.word	0x200143d4
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80073f2:	f3ef 8311 	mrs	r3, BASEPRI
 80073f6:	f04f 0120 	mov.w	r1, #32
 80073fa:	f381 8811 	msr	BASEPRI, r1
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	4807      	ldr	r0, [pc, #28]	; (8007420 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007402:	f7fe fc09 	bl	8005c18 <_PreparePacket>
 8007406:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007408:	2203      	movs	r2, #3
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6838      	ldr	r0, [r7, #0]
 800740e:	f7fe fcf1 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f383 8811 	msr	BASEPRI, r3
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200143d4 	.word	0x200143d4

08007424 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800742a:	f3ef 8311 	mrs	r3, BASEPRI
 800742e:	f04f 0120 	mov.w	r1, #32
 8007432:	f381 8811 	msr	BASEPRI, r1
 8007436:	607b      	str	r3, [r7, #4]
 8007438:	4807      	ldr	r0, [pc, #28]	; (8007458 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800743a:	f7fe fbed 	bl	8005c18 <_PreparePacket>
 800743e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007440:	2212      	movs	r2, #18
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6838      	ldr	r0, [r7, #0]
 8007446:	f7fe fcd5 	bl	8005df4 <_SendPacket>
  RECORD_END();
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f383 8811 	msr	BASEPRI, r3
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	200143d4 	.word	0x200143d4

0800745c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007462:	f3ef 8311 	mrs	r3, BASEPRI
 8007466:	f04f 0120 	mov.w	r1, #32
 800746a:	f381 8811 	msr	BASEPRI, r1
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	4807      	ldr	r0, [pc, #28]	; (8007490 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007472:	f7fe fbd1 	bl	8005c18 <_PreparePacket>
 8007476:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007478:	2211      	movs	r2, #17
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6838      	ldr	r0, [r7, #0]
 800747e:	f7fe fcb9 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f383 8811 	msr	BASEPRI, r3
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200143d4 	.word	0x200143d4

08007494 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800749c:	f3ef 8311 	mrs	r3, BASEPRI
 80074a0:	f04f 0120 	mov.w	r1, #32
 80074a4:	f381 8811 	msr	BASEPRI, r1
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	4819      	ldr	r0, [pc, #100]	; (8007510 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80074ac:	f7fe fbb4 	bl	8005c18 <_PreparePacket>
 80074b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80074b6:	4b17      	ldr	r3, [pc, #92]	; (8007514 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e00b      	b.n	80074e2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	1c59      	adds	r1, r3, #1
 80074d2:	61f9      	str	r1, [r7, #28]
 80074d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	09db      	lsrs	r3, r3, #7
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b7f      	cmp	r3, #127	; 0x7f
 80074e6:	d8f0      	bhi.n	80074ca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	61fa      	str	r2, [r7, #28]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80074f8:	2208      	movs	r2, #8
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	6938      	ldr	r0, [r7, #16]
 80074fe:	f7fe fc79 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f383 8811 	msr	BASEPRI, r3
}
 8007508:	bf00      	nop
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200143d4 	.word	0x200143d4
 8007514:	200143a4 	.word	0x200143a4

08007518 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007520:	f3ef 8311 	mrs	r3, BASEPRI
 8007524:	f04f 0120 	mov.w	r1, #32
 8007528:	f381 8811 	msr	BASEPRI, r1
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	4819      	ldr	r0, [pc, #100]	; (8007594 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007530:	f7fe fb72 	bl	8005c18 <_PreparePacket>
 8007534:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e00b      	b.n	8007566 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	61f9      	str	r1, [r7, #28]
 8007558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	09db      	lsrs	r3, r3, #7
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b7f      	cmp	r3, #127	; 0x7f
 800756a:	d8f0      	bhi.n	800754e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	61fa      	str	r2, [r7, #28]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800757c:	2204      	movs	r2, #4
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	6938      	ldr	r0, [r7, #16]
 8007582:	f7fe fc37 	bl	8005df4 <_SendPacket>
  RECORD_END();
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f383 8811 	msr	BASEPRI, r3
}
 800758c:	bf00      	nop
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	200143d4 	.word	0x200143d4
 8007598:	200143a4 	.word	0x200143a4

0800759c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075a4:	f3ef 8311 	mrs	r3, BASEPRI
 80075a8:	f04f 0120 	mov.w	r1, #32
 80075ac:	f381 8811 	msr	BASEPRI, r1
 80075b0:	617b      	str	r3, [r7, #20]
 80075b2:	4819      	ldr	r0, [pc, #100]	; (8007618 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80075b4:	f7fe fb30 	bl	8005c18 <_PreparePacket>
 80075b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075be:	4b17      	ldr	r3, [pc, #92]	; (800761c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e00b      	b.n	80075ea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	1c59      	adds	r1, r3, #1
 80075da:	61f9      	str	r1, [r7, #28]
 80075dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	09db      	lsrs	r3, r3, #7
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b7f      	cmp	r3, #127	; 0x7f
 80075ee:	d8f0      	bhi.n	80075d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	61fa      	str	r2, [r7, #28]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007600:	2206      	movs	r2, #6
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	6938      	ldr	r0, [r7, #16]
 8007606:	f7fe fbf5 	bl	8005df4 <_SendPacket>
  RECORD_END();
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f383 8811 	msr	BASEPRI, r3
}
 8007610:	bf00      	nop
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200143d4 	.word	0x200143d4
 800761c:	200143a4 	.word	0x200143a4

08007620 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	1ad3      	subs	r3, r2, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	200143a4 	.word	0x200143a4

08007640 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007640:	b580      	push	{r7, lr}
 8007642:	b08c      	sub	sp, #48	; 0x30
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800764a:	4b40      	ldr	r3, [pc, #256]	; (800774c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d077      	beq.n	8007742 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007652:	4b3e      	ldr	r3, [pc, #248]	; (800774c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007658:	2300      	movs	r3, #0
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
 800765c:	e008      	b.n	8007670 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	3301      	adds	r3, #1
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007674:	429a      	cmp	r2, r3
 8007676:	d3f2      	bcc.n	800765e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007678:	e000      	b.n	800767c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800767a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d055      	beq.n	800772e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007682:	f3ef 8311 	mrs	r3, BASEPRI
 8007686:	f04f 0120 	mov.w	r1, #32
 800768a:	f381 8811 	msr	BASEPRI, r1
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	482f      	ldr	r0, [pc, #188]	; (8007750 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007692:	f7fe fac1 	bl	8005c18 <_PreparePacket>
 8007696:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	623b      	str	r3, [r7, #32]
 80076a4:	e00b      	b.n	80076be <SEGGER_SYSVIEW_SendModule+0x7e>
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	1c59      	adds	r1, r3, #1
 80076ae:	6279      	str	r1, [r7, #36]	; 0x24
 80076b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	09db      	lsrs	r3, r3, #7
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	2b7f      	cmp	r3, #127	; 0x7f
 80076c2:	d8f0      	bhi.n	80076a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	627a      	str	r2, [r7, #36]	; 0x24
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e00b      	b.n	80076f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	1c59      	adds	r1, r3, #1
 80076e8:	61f9      	str	r1, [r7, #28]
 80076ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	09db      	lsrs	r3, r3, #7
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b7f      	cmp	r3, #127	; 0x7f
 80076fc:	d8f0      	bhi.n	80076e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	61fa      	str	r2, [r7, #28]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2280      	movs	r2, #128	; 0x80
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7fe fa4e 	bl	8005bb8 <_EncodeStr>
 800771c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800771e:	2216      	movs	r2, #22
 8007720:	68f9      	ldr	r1, [r7, #12]
 8007722:	6938      	ldr	r0, [r7, #16]
 8007724:	f7fe fb66 	bl	8005df4 <_SendPacket>
      RECORD_END();
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d006      	beq.n	8007742 <SEGGER_SYSVIEW_SendModule+0x102>
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4798      	blx	r3
    }
  }
}
 8007742:	bf00      	nop
 8007744:	3730      	adds	r7, #48	; 0x30
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200143cc 	.word	0x200143cc
 8007750:	200143d4 	.word	0x200143d4

08007754 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00f      	beq.n	8007782 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f2      	bne.n	8007768 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007782:	bf00      	nop
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200143cc 	.word	0x200143cc

08007790 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007796:	f3ef 8311 	mrs	r3, BASEPRI
 800779a:	f04f 0120 	mov.w	r1, #32
 800779e:	f381 8811 	msr	BASEPRI, r1
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	4817      	ldr	r0, [pc, #92]	; (8007804 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80077a6:	f7fe fa37 	bl	8005c18 <_PreparePacket>
 80077aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	4b14      	ldr	r3, [pc, #80]	; (8007808 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	e00b      	b.n	80077d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	1c59      	adds	r1, r3, #1
 80077c4:	6179      	str	r1, [r7, #20]
 80077c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	09db      	lsrs	r3, r3, #7
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2b7f      	cmp	r3, #127	; 0x7f
 80077d8:	d8f0      	bhi.n	80077bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	617a      	str	r2, [r7, #20]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80077ea:	221b      	movs	r2, #27
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	68b8      	ldr	r0, [r7, #8]
 80077f0:	f7fe fb00 	bl	8005df4 <_SendPacket>
  RECORD_END();
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f383 8811 	msr	BASEPRI, r3
}
 80077fa:	bf00      	nop
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200143d4 	.word	0x200143d4
 8007808:	200143d0 	.word	0x200143d0

0800780c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800780c:	b40f      	push	{r0, r1, r2, r3}
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	461a      	mov	r2, r3
 800781e:	2100      	movs	r1, #0
 8007820:	6938      	ldr	r0, [r7, #16]
 8007822:	f7fe fdf9 	bl	8006418 <_VPrintTarget>
  va_end(ParamList);
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007830:	b004      	add	sp, #16
 8007832:	4770      	bx	lr

08007834 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800783c:	f3ef 8311 	mrs	r3, BASEPRI
 8007840:	f04f 0120 	mov.w	r1, #32
 8007844:	f381 8811 	msr	BASEPRI, r1
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	4827      	ldr	r0, [pc, #156]	; (80078e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800784c:	f7fe f9e4 	bl	8005c18 <_PreparePacket>
 8007850:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	6938      	ldr	r0, [r7, #16]
 8007858:	f7fe f9ae 	bl	8005bb8 <_EncodeStr>
 800785c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
 8007862:	2301      	movs	r3, #1
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	e00b      	b.n	8007880 <SEGGER_SYSVIEW_Warn+0x4c>
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	1c59      	adds	r1, r3, #1
 8007870:	6279      	str	r1, [r7, #36]	; 0x24
 8007872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	09db      	lsrs	r3, r3, #7
 800787e:	623b      	str	r3, [r7, #32]
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	2b7f      	cmp	r3, #127	; 0x7f
 8007884:	d8f0      	bhi.n	8007868 <SEGGER_SYSVIEW_Warn+0x34>
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	627a      	str	r2, [r7, #36]	; 0x24
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	e00b      	b.n	80078b8 <SEGGER_SYSVIEW_Warn+0x84>
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	61f9      	str	r1, [r7, #28]
 80078aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	09db      	lsrs	r3, r3, #7
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b7f      	cmp	r3, #127	; 0x7f
 80078bc:	d8f0      	bhi.n	80078a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	61fa      	str	r2, [r7, #28]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80078ce:	221a      	movs	r2, #26
 80078d0:	68f9      	ldr	r1, [r7, #12]
 80078d2:	6938      	ldr	r0, [r7, #16]
 80078d4:	f7fe fa8e 	bl	8005df4 <_SendPacket>
  RECORD_END();
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
 80078e0:	3728      	adds	r7, #40	; 0x28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200143d4 	.word	0x200143d4

080078ec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80078f0:	4b13      	ldr	r3, [pc, #76]	; (8007940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80078f2:	7e1b      	ldrb	r3, [r3, #24]
 80078f4:	4619      	mov	r1, r3
 80078f6:	4a13      	ldr	r2, [pc, #76]	; (8007944 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80078f8:	460b      	mov	r3, r1
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	440b      	add	r3, r1
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	4413      	add	r3, r2
 8007902:	336c      	adds	r3, #108	; 0x6c
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007908:	7e1b      	ldrb	r3, [r3, #24]
 800790a:	4618      	mov	r0, r3
 800790c:	490d      	ldr	r1, [pc, #52]	; (8007944 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800790e:	4603      	mov	r3, r0
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4403      	add	r3, r0
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	3370      	adds	r3, #112	; 0x70
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d00b      	beq.n	8007938 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007922:	789b      	ldrb	r3, [r3, #2]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d107      	bne.n	8007938 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800792a:	2201      	movs	r2, #1
 800792c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800792e:	f7fe f97f 	bl	8005c30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007932:	4b03      	ldr	r3, [pc, #12]	; (8007940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007934:	2200      	movs	r2, #0
 8007936:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800793a:	781b      	ldrb	r3, [r3, #0]
}
 800793c:	4618      	mov	r0, r3
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200143a4 	.word	0x200143a4
 8007944:	20012ee4 	.word	0x20012ee4

08007948 <memcmp>:
 8007948:	b510      	push	{r4, lr}
 800794a:	3901      	subs	r1, #1
 800794c:	4402      	add	r2, r0
 800794e:	4290      	cmp	r0, r2
 8007950:	d101      	bne.n	8007956 <memcmp+0xe>
 8007952:	2000      	movs	r0, #0
 8007954:	e005      	b.n	8007962 <memcmp+0x1a>
 8007956:	7803      	ldrb	r3, [r0, #0]
 8007958:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800795c:	42a3      	cmp	r3, r4
 800795e:	d001      	beq.n	8007964 <memcmp+0x1c>
 8007960:	1b18      	subs	r0, r3, r4
 8007962:	bd10      	pop	{r4, pc}
 8007964:	3001      	adds	r0, #1
 8007966:	e7f2      	b.n	800794e <memcmp+0x6>

08007968 <memset>:
 8007968:	4402      	add	r2, r0
 800796a:	4603      	mov	r3, r0
 800796c:	4293      	cmp	r3, r2
 800796e:	d100      	bne.n	8007972 <memset+0xa>
 8007970:	4770      	bx	lr
 8007972:	f803 1b01 	strb.w	r1, [r3], #1
 8007976:	e7f9      	b.n	800796c <memset+0x4>

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4d0d      	ldr	r5, [pc, #52]	; (80079b0 <__libc_init_array+0x38>)
 800797c:	4c0d      	ldr	r4, [pc, #52]	; (80079b4 <__libc_init_array+0x3c>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	2600      	movs	r6, #0
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	4d0b      	ldr	r5, [pc, #44]	; (80079b8 <__libc_init_array+0x40>)
 800798a:	4c0c      	ldr	r4, [pc, #48]	; (80079bc <__libc_init_array+0x44>)
 800798c:	f000 f826 	bl	80079dc <_init>
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	2600      	movs	r6, #0
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	08007bf4 	.word	0x08007bf4
 80079b4:	08007bf4 	.word	0x08007bf4
 80079b8:	08007bf4 	.word	0x08007bf4
 80079bc:	08007bf8 	.word	0x08007bf8

080079c0 <memcpy>:
 80079c0:	440a      	add	r2, r1
 80079c2:	4291      	cmp	r1, r2
 80079c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079c8:	d100      	bne.n	80079cc <memcpy+0xc>
 80079ca:	4770      	bx	lr
 80079cc:	b510      	push	{r4, lr}
 80079ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d6:	4291      	cmp	r1, r2
 80079d8:	d1f9      	bne.n	80079ce <memcpy+0xe>
 80079da:	bd10      	pop	{r4, pc}

080079dc <_init>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr

080079e8 <_fini>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr
